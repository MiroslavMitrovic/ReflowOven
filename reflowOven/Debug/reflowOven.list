
reflowOven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08011028  08011028  00021028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801175c  0801175c  00030714  2**0
                  CONTENTS
  4 .ARM          00000008  0801175c  0801175c  0002175c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011764  08011764  00030714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011764  08011764  00021764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011768  08011768  00021768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000714  20000000  0801176c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  20000714  08011e80  00030714  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002478  08011e80  00032478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030714  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c191  00000000  00000000  00030744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553c  00000000  00000000  0005c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00061e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00063808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000156f8  00000000  00000000  00064fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000778f  00000000  00000000  0007a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00081e6f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008044  00000000  00000000  00081ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000004e  00000000  00000000  00089f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000714 	.word	0x20000714
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801100c 	.word	0x0801100c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000718 	.word	0x20000718
 80001cc:	0801100c 	.word	0x0801100c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <buzz>:
   18, 18, 18, 18, 18, 18,
   10, 10, 10,
   10, 10, 10,
   3, 3, 3
 };
void buzz(long frequency, long length) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

  long delayValue = 1000000 / frequency / 2; // calculate the delay value between transitions
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <buzz+0x74>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffe:	0fda      	lsrs	r2, r3, #31
 8001000:	4413      	add	r3, r2
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	613b      	str	r3, [r7, #16]
  //// 1 second's worth of microseconds, divided by the frequency, then split in half since
  //// there are two phases to each cycle
  long numCycles = frequency * length / 1000; // calculate the number of cycles for proper timing
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <buzz+0x78>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1192      	asrs	r2, r2, #6
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]
  //// multiply frequency, which is really cycles per second, by the number of seconds to
  //// get the total number of cycles to produce
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e014      	b.n	800104c <buzz+0x60>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_RESET);//(targetPin, HIGH); // write the buzzer pin high to push out the diaphram
 8001022:	2200      	movs	r2, #0
 8001024:	2120      	movs	r1, #32
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <buzz+0x7c>)
 8001028:	f003 fe40 	bl	8004cac <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait for the calculated delay value
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fb24 	bl	800267c <delay_us>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);//(targetPin, LOW); // write the buzzer pin low to pull back the diaphram
 8001034:	2201      	movs	r2, #1
 8001036:	2120      	movs	r1, #32
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <buzz+0x7c>)
 800103a:	f003 fe37 	bl	8004cac <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait again or the calculated delay value
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fb1b 	bl	800267c <delay_us>
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbe6      	blt.n	8001022 <buzz+0x36>
  }
  //digitalWrite(9, LOW);

}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	000f4240 	.word	0x000f4240
 8001064:	10624dd3 	.word	0x10624dd3
 8001068:	40020400 	.word	0x40020400
 800106c:	00000000 	.word	0x00000000

08001070 <sing>:
void sing(int s) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	// iterate over the notes of the melody:
	static uint8_t song;
	static uint16_t size;
	static uint32_t noteDuration;
	song=s;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <sing+0x118>)
 800107e:	701a      	strb	r2, [r3, #0]
	if (song == 2)
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <sing+0x118>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d140      	bne.n	800110a <sing+0x9a>
	{
		//Serial.println(" 'Underworld Theme'");
		 size = sizeof(underworld_melody) / sizeof(int);
 8001088:	4b40      	ldr	r3, [pc, #256]	; (800118c <sing+0x11c>)
 800108a:	223a      	movs	r2, #58	; 0x3a
 800108c:	801a      	strh	r2, [r3, #0]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e033      	b.n	80010fc <sing+0x8c>

			// to calculate the note duration, take one second
			// divided by the note type.
			//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
			noteDuration = 1000 / underworld_tempo[thisNote];
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <sing+0x120>)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <sing+0x124>)
 80010a6:	6013      	str	r3, [r2, #0]

			buzz(underworld_melody[thisNote], noteDuration);
 80010a8:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <sing+0x128>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <sing+0x124>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f7ff ff97 	bl	8000fec <buzz>

			// to distinguish the notes, set a minimum time between them.
			// the note's duration + 30% seems to work well:
			int pauseBetweenNotes = noteDuration * 1.30;
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <sing+0x124>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa1e 	bl	8000504 <__aeabi_ui2d>
 80010c8:	a32d      	add	r3, pc, #180	; (adr r3, 8001180 <sing+0x110>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa93 	bl	80005f8 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd3d 	bl	8000b58 <__aeabi_d2iz>
 80010de:	4603      	mov	r3, r0
 80010e0:	60bb      	str	r3, [r7, #8]
			HAL_Delay(pauseBetweenNotes);
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fd75 	bl	8003bd4 <HAL_Delay>

			// stop the tone playing:
			buzz(0, noteDuration);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <sing+0x124>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff7b 	bl	8000fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <sing+0x11c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	4293      	cmp	r3, r2
 8001106:	dbc5      	blt.n	8001094 <sing+0x24>
			// stop the tone playing:
			buzz(0, noteDuration);

		}
	}
}
 8001108:	e034      	b.n	8001174 <sing+0x104>
		int size = sizeof(melody) / sizeof(int);
 800110a:	2350      	movs	r3, #80	; 0x50
 800110c:	617b      	str	r3, [r7, #20]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	e02b      	b.n	800116c <sing+0xfc>
			int noteDuration = 1000 / tempo[thisNote];
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <sing+0x12c>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	613b      	str	r3, [r7, #16]
			buzz(melody[thisNote], noteDuration);
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <sing+0x130>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	6939      	ldr	r1, [r7, #16]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5b 	bl	8000fec <buzz>
			int pauseBetweenNotes = noteDuration * 1.30;
 8001136:	6938      	ldr	r0, [r7, #16]
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_i2d>
 800113c:	a310      	add	r3, pc, #64	; (adr r3, 8001180 <sing+0x110>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd03 	bl	8000b58 <__aeabi_d2iz>
 8001152:	4603      	mov	r3, r0
 8001154:	60fb      	str	r3, [r7, #12]
			HAL_Delay(pauseBetweenNotes);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fd3b 	bl	8003bd4 <HAL_Delay>
			buzz(0, noteDuration);
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff43 	bl	8000fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	3301      	adds	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbcf      	blt.n	8001114 <sing+0xa4>
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	3ff4cccc 	.word	0x3ff4cccc
 8001188:	20000730 	.word	0x20000730
 800118c:	20000732 	.word	0x20000732
 8001190:	20000368 	.word	0x20000368
 8001194:	20000734 	.word	0x20000734
 8001198:	20000280 	.word	0x20000280
 800119c:	20000140 	.word	0x20000140
 80011a0:	20000000 	.word	0x20000000

080011a4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
uint32_t GetSector(uint32_t Address)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <GetSector+0x120>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d806      	bhi.n	80011c6 <GetSector+0x22>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011be:	d302      	bcc.n	80011c6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e077      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <GetSector+0x124>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d806      	bhi.n	80011dc <GetSector+0x38>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <GetSector+0x128>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d302      	bcc.n	80011dc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e06c      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3c      	ldr	r2, [pc, #240]	; (80012d0 <GetSector+0x12c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d806      	bhi.n	80011f2 <GetSector+0x4e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <GetSector+0x130>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d302      	bcc.n	80011f2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e061      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <GetSector+0x134>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d206      	bcs.n	8001208 <GetSector+0x64>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a37      	ldr	r2, [pc, #220]	; (80012dc <GetSector+0x138>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d302      	bcc.n	8001208 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001202:	2303      	movs	r3, #3
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e056      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <GetSector+0x13c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d206      	bcs.n	800121e <GetSector+0x7a>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <GetSector+0x134>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d902      	bls.n	800121e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001218:	2304      	movs	r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e04b      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <GetSector+0x140>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d206      	bcs.n	8001234 <GetSector+0x90>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <GetSector+0x13c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d902      	bls.n	8001234 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800122e:	2305      	movs	r3, #5
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e040      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <GetSector+0x144>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d206      	bcs.n	800124a <GetSector+0xa6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a29      	ldr	r2, [pc, #164]	; (80012e4 <GetSector+0x140>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d902      	bls.n	800124a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001244:	2306      	movs	r3, #6
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e035      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <GetSector+0x148>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d206      	bcs.n	8001260 <GetSector+0xbc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <GetSector+0x144>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d902      	bls.n	8001260 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800125a:	2307      	movs	r3, #7
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e02a      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <GetSector+0x14c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d206      	bcs.n	8001276 <GetSector+0xd2>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a20      	ldr	r2, [pc, #128]	; (80012ec <GetSector+0x148>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d902      	bls.n	8001276 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001270:	2308      	movs	r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e01f      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <GetSector+0x150>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d206      	bcs.n	800128c <GetSector+0xe8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <GetSector+0x14c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d902      	bls.n	800128c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001286:	2309      	movs	r3, #9
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e014      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <GetSector+0x154>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d806      	bhi.n	80012a2 <GetSector+0xfe>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <GetSector+0x150>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d902      	bls.n	80012a2 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800129c:	230a      	movs	r3, #10
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e009      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <GetSector+0x158>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d805      	bhi.n	80012b6 <GetSector+0x112>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <GetSector+0x15c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80012b2:	230b      	movs	r3, #11
 80012b4:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	08003ffe 	.word	0x08003ffe
 80012c8:	08007ffe 	.word	0x08007ffe
 80012cc:	08004000 	.word	0x08004000
 80012d0:	0800bffe 	.word	0x0800bffe
 80012d4:	08008000 	.word	0x08008000
 80012d8:	0800ffff 	.word	0x0800ffff
 80012dc:	0800c000 	.word	0x0800c000
 80012e0:	0801ffff 	.word	0x0801ffff
 80012e4:	0803ffff 	.word	0x0803ffff
 80012e8:	0805ffff 	.word	0x0805ffff
 80012ec:	0807ffff 	.word	0x0807ffff
 80012f0:	0809ffff 	.word	0x0809ffff
 80012f4:	080bffff 	.word	0x080bffff
 80012f8:	080dfffe 	.word	0x080dfffe
 80012fc:	080ffffe 	.word	0x080ffffe
 8001300:	080dffff 	.word	0x080dffff

08001304 <Flash_Write_Data>:
  return sectorsize;
}*/


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, ReflowTemplate *DATA_32)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	uint32_t *p_Record=(uint32_t* ) DATA_32;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	61fb      	str	r3, [r7, #28]
	/* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001312:	f003 f89f 	bl	8004454 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff44 	bl	80011a4 <GetSector>
 800131c:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + sizeof(ReflowTemplate);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3324      	adds	r3, #36	; 0x24
 8001322:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f7ff ff3d 	bl	80011a4 <GetSector>
 800132a:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <Flash_Write_Data+0xac>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <Flash_Write_Data+0xac>)
 8001334:	2202      	movs	r2, #2
 8001336:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <Flash_Write_Data+0xac>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	3301      	adds	r3, #1
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <Flash_Write_Data+0xac>)
 8001348:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <Flash_Write_Data+0xac>)
 8001352:	f003 f9ed 	bl	8004730 <HAL_FLASHEx_Erase>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <Flash_Write_Data+0x60>
	  {
		  return HAL_FLASH_GetError ();
 800135c:	f003 f8ac 	bl	80044b8 <HAL_FLASH_GetError>
 8001360:	4603      	mov	r3, r0
 8001362:	e021      	b.n	80013a8 <Flash_Write_Data+0xa4>
	  }


	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e018      	b.n	800139c <Flash_Write_Data+0x98>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, *p_Record) == HAL_OK)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2002      	movs	r0, #2
 8001378:	f003 f818 	bl	80043ac <HAL_FLASH_Program>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <Flash_Write_Data+0x86>
	    	 //Do nothing
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001382:	f003 f899 	bl	80044b8 <HAL_FLASH_GetError>
 8001386:	4603      	mov	r3, r0
 8001388:	e00e      	b.n	80013a8 <Flash_Write_Data+0xa4>
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3304      	adds	r3, #4
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3304      	adds	r3, #4
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b23      	cmp	r3, #35	; 0x23
 80013a0:	d9e3      	bls.n	800136a <Flash_Write_Data+0x66>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80013a2:	f003 f879 	bl	8004498 <HAL_FLASH_Lock>

	   return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000738 	.word	0x20000738

080013b4 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartSectorAddress, __IO ReflowTemplate *DATA_32)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	uint32_t *p_Data=(uint32_t* ) DATA_32;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e00c      	b.n	80013e2 <Flash_Read_Data+0x2e>
	{

		*p_Data = *(__IO uint32_t*)StartSectorAddress;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	601a      	str	r2, [r3, #0]
	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3304      	adds	r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3304      	adds	r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3304      	adds	r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b23      	cmp	r3, #35	; 0x23
 80013e6:	d9ef      	bls.n	80013c8 <Flash_Read_Data+0x14>

	}
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SaveParameters>:
FLAGS Flags;
uint8_t PIDFlag;



void SaveParameters(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x080A0000, &ReflowParameters);
 80013fc:	4902      	ldr	r1, [pc, #8]	; (8001408 <SaveParameters+0x10>)
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <SaveParameters+0x14>)
 8001400:	f7ff ff80 	bl	8001304 <Flash_Write_Data>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000aac 	.word	0x20000aac
 800140c:	080a0000 	.word	0x080a0000

08001410 <LoadParameters>:
void LoadParameters(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x080A0000, &ReflowParameters);
 8001414:	4902      	ldr	r1, [pc, #8]	; (8001420 <LoadParameters+0x10>)
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <LoadParameters+0x14>)
 8001418:	f7ff ffcc 	bl	80013b4 <Flash_Read_Data>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000aac 	.word	0x20000aac
 8001424:	080a0000 	.word	0x080a0000

08001428 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8001430:	2205      	movs	r2, #5
 8001432:	4905      	ldr	r1, [pc, #20]	; (8001448 <HAL_UART_RxCpltCallback+0x20>)
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_RxCpltCallback+0x24>)
 8001436:	f006 ff63 	bl	8008300 <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_UART_RxCpltCallback+0x28>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000454 	.word	0x20000454
 800144c:	20000a6c 	.word	0x20000a6c
 8001450:	20000754 	.word	0x20000754

08001454 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string){
 8001454:	b580      	push	{r7, lr}
 8001456:	b090      	sub	sp, #64	; 0x40
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 800145e:	f107 0008 	add.w	r0, r7, #8
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	490b      	ldr	r1, [pc, #44]	; (8001494 <NEXTION_SendString+0x40>)
 8001468:	f00c f96a 	bl	800d740 <siprintf>
 800146c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800146e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <NEXTION_SendString+0x44>)
 800147c:	f006 fea7 	bl	80081ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	2203      	movs	r2, #3
 8001484:	4905      	ldr	r1, [pc, #20]	; (800149c <NEXTION_SendString+0x48>)
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <NEXTION_SendString+0x44>)
 8001488:	f006 fea1 	bl	80081ce <HAL_UART_Transmit>

}
 800148c:	bf00      	nop
 800148e:	3740      	adds	r7, #64	; 0x40
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	08011028 	.word	0x08011028
 8001498:	20000a6c 	.word	0x20000a6c
 800149c:	20000450 	.word	0x20000450

080014a0 <NEXTION_SendFloat>:

void NEXTION_SendFloat (char *ID, float32_t number){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b092      	sub	sp, #72	; 0x48
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	ed87 0a00 	vstr	s0, [r7]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f7ff f84b 	bl	8000548 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	f107 0008 	add.w	r0, r7, #8
 80014ba:	e9cd 2300 	strd	r2, r3, [sp]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	490b      	ldr	r1, [pc, #44]	; (80014f0 <NEXTION_SendFloat+0x50>)
 80014c2:	f00c f93d 	bl	800d740 <siprintf>
 80014c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <NEXTION_SendFloat+0x54>)
 80014d6:	f006 fe7a 	bl	80081ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014da:	2364      	movs	r3, #100	; 0x64
 80014dc:	2203      	movs	r2, #3
 80014de:	4906      	ldr	r1, [pc, #24]	; (80014f8 <NEXTION_SendFloat+0x58>)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <NEXTION_SendFloat+0x54>)
 80014e2:	f006 fe74 	bl	80081ce <HAL_UART_Transmit>
}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08011034 	.word	0x08011034
 80014f4:	20000a6c 	.word	0x20000a6c
 80014f8:	20000450 	.word	0x20000450

080014fc <NEXTION_SenduInt>:

void NEXTION_SenduInt (char *ID, uint32_t number){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 8001506:	f107 0008 	add.w	r0, r7, #8
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	490b      	ldr	r1, [pc, #44]	; (800153c <NEXTION_SenduInt+0x40>)
 8001510:	f00c f916 	bl	800d740 <siprintf>
 8001514:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	b29a      	uxth	r2, r3
 800151a:	f107 0108 	add.w	r1, r7, #8
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <NEXTION_SenduInt+0x44>)
 8001524:	f006 fe53 	bl	80081ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	2203      	movs	r2, #3
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <NEXTION_SenduInt+0x48>)
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <NEXTION_SenduInt+0x44>)
 8001530:	f006 fe4d 	bl	80081ce <HAL_UART_Transmit>
}
 8001534:	bf00      	nop
 8001536:	3740      	adds	r7, #64	; 0x40
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08011044 	.word	0x08011044
 8001540:	20000a6c 	.word	0x20000a6c
 8001544:	20000450 	.word	0x20000450

08001548 <NEXTION_CMD>:

void NEXTION_CMD (const char *string){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
//TODO MM modified strlen parameter to fit
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe3d 	bl	80001d0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <NEXTION_CMD+0x34>)
 8001562:	f006 fe34 	bl	80081ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	2203      	movs	r2, #3
 800156a:	4905      	ldr	r1, [pc, #20]	; (8001580 <NEXTION_CMD+0x38>)
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <NEXTION_CMD+0x34>)
 800156e:	f006 fe2e 	bl	80081ce <HAL_UART_Transmit>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000a6c 	.word	0x20000a6c
 8001580:	20000450 	.word	0x20000450

08001584 <NextionDrawDot>:
	NEXTION_SendFloat("t4",ReflowParameters.secondHeatUpRate);
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}

void NextionDrawDot(uint32_t x, uint32_t y){
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,BLUE", x, y);
 800158e:	f107 0008 	add.w	r0, r7, #8
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	490b      	ldr	r1, [pc, #44]	; (80015c4 <NextionDrawDot+0x40>)
 8001598:	f00c f8d2 	bl	800d740 <siprintf>
 800159c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f107 0108 	add.w	r1, r7, #8
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <NextionDrawDot+0x44>)
 80015ac:	f006 fe0f 	bl	80081ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	2203      	movs	r2, #3
 80015b4:	4905      	ldr	r1, [pc, #20]	; (80015cc <NextionDrawDot+0x48>)
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <NextionDrawDot+0x44>)
 80015b8:	f006 fe09 	bl	80081ce <HAL_UART_Transmit>
}
 80015bc:	bf00      	nop
 80015be:	3740      	adds	r7, #64	; 0x40
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	0801106c 	.word	0x0801106c
 80015c8:	20000a6c 	.word	0x20000a6c
 80015cc:	20000450 	.word	0x20000450

080015d0 <NextionDrawTemp>:

void NextionDrawTemp(uint32_t x, uint32_t y){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	uint8_t miki1;
	uint8_t miki2;
	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80015da:	f107 0008 	add.w	r0, r7, #8
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <NextionDrawTemp+0x4c>)
 80015e4:	f00c f8ac 	bl	800d740 <siprintf>
 80015e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	miki1=HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <NextionDrawTemp+0x50>)
 80015f8:	f006 fde9 	bl	80081ce <HAL_UART_Transmit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	miki2=HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	2203      	movs	r2, #3
 8001606:	4907      	ldr	r1, [pc, #28]	; (8001624 <NextionDrawTemp+0x54>)
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <NextionDrawTemp+0x50>)
 800160a:	f006 fde0 	bl	80081ce <HAL_UART_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
}
 8001614:	bf00      	nop
 8001616:	3740      	adds	r7, #64	; 0x40
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08011080 	.word	0x08011080
 8001620:	20000a6c 	.word	0x20000a6c
 8001624:	20000450 	.word	0x20000450

08001628 <HandleKeyPad>:



float32_t HandleKeyPad(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e007      	b.n	8001644 <HandleKeyPad+0x1c>
		input[i] = 0;
 8001634:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HandleKeyPad+0xb8>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b13      	cmp	r3, #19
 8001648:	ddf4      	ble.n	8001634 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <HandleKeyPad+0xbc>)
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <HandleKeyPad+0xc0>)
 8001652:	f7ff feff 	bl	8001454 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HandleKeyPad+0xc4>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 800165c:	e026      	b.n	80016ac <HandleKeyPad+0x84>
	{

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 800165e:	2205      	movs	r2, #5
 8001660:	4923      	ldr	r1, [pc, #140]	; (80016f0 <HandleKeyPad+0xc8>)
 8001662:	4824      	ldr	r0, [pc, #144]	; (80016f4 <HandleKeyPad+0xcc>)
 8001664:	f00c f88c 	bl	800d780 <strncmp>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HandleKeyPad+0x4a>
		{
			return 9999;
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HandleKeyPad+0xd0>)
 8001670:	e02e      	b.n	80016d0 <HandleKeyPad+0xa8>
		}
		else
		{
			//do nothing.
		}
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8001672:	2205      	movs	r2, #5
 8001674:	4921      	ldr	r1, [pc, #132]	; (80016fc <HandleKeyPad+0xd4>)
 8001676:	481f      	ldr	r0, [pc, #124]	; (80016f4 <HandleKeyPad+0xcc>)
 8001678:	f00c f882 	bl	800d780 <strncmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HandleKeyPad+0x5e>
				return 8888;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HandleKeyPad+0xd8>)
 8001684:	e024      	b.n	80016d0 <HandleKeyPad+0xa8>
		{
			//do nothing
		}


		if (UART_Recieved_Flag == 1) {
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HandleKeyPad+0xc4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10e      	bne.n	80016ac <HandleKeyPad+0x84>
			input[index] = UART_Recieved_Data[4];
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HandleKeyPad+0xcc>)
 8001692:	7911      	ldrb	r1, [r2, #4]
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HandleKeyPad+0xb8>)
 8001696:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HandleKeyPad+0xc4>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			index++;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	3301      	adds	r3, #1
 80016a2:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HandleKeyPad+0xb8>)
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HandleKeyPad+0xc0>)
 80016a8:	f7ff fed4 	bl	8001454 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 80016ac:	2205      	movs	r2, #5
 80016ae:	4915      	ldr	r1, [pc, #84]	; (8001704 <HandleKeyPad+0xdc>)
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <HandleKeyPad+0xcc>)
 80016b2:	f00c f865 	bl	800d780 <strncmp>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1d0      	bne.n	800165e <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <HandleKeyPad+0xb8>)
 80016be:	f00b fad5 	bl	800cc6c <atof>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa8d 	bl	8000be8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000a54 	.word	0x20000a54
 80016e4:	08011094 	.word	0x08011094
 80016e8:	08011098 	.word	0x08011098
 80016ec:	20000754 	.word	0x20000754
 80016f0:	0801109c 	.word	0x0801109c
 80016f4:	20000454 	.word	0x20000454
 80016f8:	461c3c00 	.word	0x461c3c00
 80016fc:	080110a4 	.word	0x080110a4
 8001700:	460ae000 	.word	0x460ae000
 8001704:	080110ac 	.word	0x080110ac

08001708 <Update_Page_3>:


void Update_Page_3() {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
	flagMiki=true;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <Update_Page_3+0x98>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <Update_Page_3+0x9c>)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171c:	6018      	str	r0, [r3, #0]
 800171e:	3304      	adds	r3, #4
 8001720:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00b      	b.n	8001740 <Update_Page_3+0x38>
		UART_Recieved_Data[i]=defaultUart[i];
 8001728:	1d3a      	adds	r2, r7, #4
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	7819      	ldrb	r1, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <Update_Page_3+0xa0>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	460a      	mov	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b04      	cmp	r3, #4
 8001744:	ddf0      	ble.n	8001728 <Update_Page_3+0x20>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Update_Page_3+0xa4>)
 8001748:	edd3 7a03 	vldr	s15, [r3, #12]
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <Update_Page_3+0xa8>)
 8001752:	f7ff fea5 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <Update_Page_3+0xa4>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4619      	mov	r1, r3
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <Update_Page_3+0xac>)
 800175e:	f7ff fecd 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <Update_Page_3+0xa4>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4619      	mov	r1, r3
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Update_Page_3+0xb0>)
 800176a:	f7ff fec7 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <Update_Page_3+0xa4>)
 8001770:	edd3 7a06 	vldr	s15, [r3, #24]
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <Update_Page_3+0xb4>)
 800177a:	f7ff fe91 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <Update_Page_3+0xa4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4619      	mov	r1, r3
 8001784:	480e      	ldr	r0, [pc, #56]	; (80017c0 <Update_Page_3+0xb8>)
 8001786:	f7ff feb9 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <Update_Page_3+0xa4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <Update_Page_3+0xbc>)
 8001792:	f7ff feb3 	bl	80014fc <NEXTION_SenduInt>

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000ad0 	.word	0x20000ad0
 80017a4:	080110b4 	.word	0x080110b4
 80017a8:	20000454 	.word	0x20000454
 80017ac:	20000aac 	.word	0x20000aac
 80017b0:	08011098 	.word	0x08011098
 80017b4:	08011054 	.word	0x08011054
 80017b8:	08011058 	.word	0x08011058
 80017bc:	0801105c 	.word	0x0801105c
 80017c0:	08011060 	.word	0x08011060
 80017c4:	08011064 	.word	0x08011064

080017c8 <Update_Page_0>:

void Update_Page_0() {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <Update_Page_0+0x104>)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017d6:	6018      	str	r0, [r3, #0]
 80017d8:	3304      	adds	r3, #4
 80017da:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	e00b      	b.n	80017fa <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80017e2:	1d3a      	adds	r2, r7, #4
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <Update_Page_0+0x108>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	ddf0      	ble.n	80017e2 <Update_Page_0+0x1a>
	}

	float32_t dx =0.23; //275px / 400s //92px 400s
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <Update_Page_0+0x10c>)
 8001802:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <Update_Page_0+0x110>)
 8001806:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 28;
 8001808:	231c      	movs	r3, #28
 800180a:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 153; //151
 800180c:	2399      	movs	r3, #153	; 0x99
 800180e:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <Update_Page_0+0x114>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d120      	bne.n	800185a <Update_Page_0+0x92>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temperature)*dy));
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <Update_Page_0+0x118>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001824:	edd7 7a06 	vldr	s15, [r7, #24]
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	441a      	add	r2, r3
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <Update_Page_0+0x11c>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184a:	ee17 1a90 	vmov	r1, s15
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1a5b      	subs	r3, r3, r1
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff febb 	bl	80015d0 <NextionDrawTemp>



	NEXTION_SendFloat("t0", temperature);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <Update_Page_0+0x11c>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <Update_Page_0+0x120>)
 8001866:	f7ff fe1b 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <Update_Page_0+0x124>)
 800186c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <Update_Page_0+0x128>)
 8001876:	f7ff fe13 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <Update_Page_0+0x124>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4619      	mov	r1, r3
 8001880:	481c      	ldr	r0, [pc, #112]	; (80018f4 <Update_Page_0+0x12c>)
 8001882:	f7ff fe3b 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <Update_Page_0+0x124>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	4619      	mov	r1, r3
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <Update_Page_0+0x130>)
 800188e:	f7ff fe35 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <Update_Page_0+0x124>)
 8001894:	edd3 7a06 	vldr	s15, [r3, #24]
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	4817      	ldr	r0, [pc, #92]	; (80018fc <Update_Page_0+0x134>)
 800189e:	f7ff fdff 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <Update_Page_0+0x124>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <Update_Page_0+0x138>)
 80018aa:	f7ff fe27 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <Update_Page_0+0x124>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <Update_Page_0+0x13c>)
 80018b6:	f7ff fe21 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 80018ba:	4913      	ldr	r1, [pc, #76]	; (8001908 <Update_Page_0+0x140>)
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <Update_Page_0+0x144>)
 80018be:	f7ff fdc9 	bl	8001454 <NEXTION_SendString>

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	080110c0 	.word	0x080110c0
 80018d0:	20000454 	.word	0x20000454
 80018d4:	3e6b851f 	.word	0x3e6b851f
 80018d8:	3f0bb98c 	.word	0x3f0bb98c
 80018dc:	2000074c 	.word	0x2000074c
 80018e0:	200007a4 	.word	0x200007a4
 80018e4:	20000764 	.word	0x20000764
 80018e8:	08011098 	.word	0x08011098
 80018ec:	20000aac 	.word	0x20000aac
 80018f0:	08011054 	.word	0x08011054
 80018f4:	0801105c 	.word	0x0801105c
 80018f8:	08011058 	.word	0x08011058
 80018fc:	08011060 	.word	0x08011060
 8001900:	08011068 	.word	0x08011068
 8001904:	08011064 	.word	0x08011064
 8001908:	20000b00 	.word	0x20000b00
 800190c:	080110bc 	.word	0x080110bc

08001910 <Update_Page_2>:

void Update_Page_2() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <Update_Page_2+0x70>)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191e:	6018      	str	r0, [r3, #0]
 8001920:	3304      	adds	r3, #4
 8001922:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e00b      	b.n	8001942 <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 800192a:	1d3a      	adds	r2, r7, #4
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <Update_Page_2+0x74>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	460a      	mov	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b04      	cmp	r3, #4
 8001946:	ddf0      	ble.n	800192a <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <Update_Page_2+0x78>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <Update_Page_2+0x7c>)
 8001954:	f7ff fda4 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <Update_Page_2+0x78>)
 800195a:	edd3 7a01 	vldr	s15, [r3, #4]
 800195e:	eeb0 0a67 	vmov.f32	s0, s15
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <Update_Page_2+0x80>)
 8001964:	f7ff fd9c 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <Update_Page_2+0x78>)
 800196a:	edd3 7a02 	vldr	s15, [r3, #8]
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	4808      	ldr	r0, [pc, #32]	; (8001994 <Update_Page_2+0x84>)
 8001974:	f7ff fd94 	bl	80014a0 <NEXTION_SendFloat>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	080110c8 	.word	0x080110c8
 8001984:	20000454 	.word	0x20000454
 8001988:	20000aac 	.word	0x20000aac
 800198c:	08011098 	.word	0x08011098
 8001990:	08011054 	.word	0x08011054
 8001994:	08011058 	.word	0x08011058

08001998 <HandleGui>:



void HandleGui(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b0a4      	sub	sp, #144	; 0x90
 800199c:	af00      	add	r7, sp, #0
	//###################ErrorCheck##########################
	if (-1==temperature)
 800199e:	4bc5      	ldr	r3, [pc, #788]	; (8001cb4 <HandleGui+0x31c>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019a8:	eef4 7a47 	vcmp.f32	s15, s14
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d102      	bne.n	80019b8 <HandleGui+0x20>
	{
		State=Error;
 80019b2:	4bc1      	ldr	r3, [pc, #772]	; (8001cb8 <HandleGui+0x320>)
 80019b4:	2206      	movs	r2, #6
 80019b6:	701a      	strb	r2, [r3, #0]
	}

	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 80019b8:	2205      	movs	r2, #5
 80019ba:	49c0      	ldr	r1, [pc, #768]	; (8001cbc <HandleGui+0x324>)
 80019bc:	48c0      	ldr	r0, [pc, #768]	; (8001cc0 <HandleGui+0x328>)
 80019be:	f00b fedf 	bl	800d780 <strncmp>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HandleGui+0x34>
			Update_Page_0();
 80019c8:	f7ff fefe 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80019cc:	2205      	movs	r2, #5
 80019ce:	49bd      	ldr	r1, [pc, #756]	; (8001cc4 <HandleGui+0x32c>)
 80019d0:	48bb      	ldr	r0, [pc, #748]	; (8001cc0 <HandleGui+0x328>)
 80019d2:	f00b fed5 	bl	800d780 <strncmp>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HandleGui+0x48>
			Update_Page_3();
 80019dc:	f7ff fe94 	bl	8001708 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 80019e0:	2205      	movs	r2, #5
 80019e2:	49b9      	ldr	r1, [pc, #740]	; (8001cc8 <HandleGui+0x330>)
 80019e4:	48b6      	ldr	r0, [pc, #728]	; (8001cc0 <HandleGui+0x328>)
 80019e6:	f00b fecb 	bl	800d780 <strncmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HandleGui+0x60>
			startReflow();
 80019f0:	f000 fbca 	bl	8002188 <startReflow>
			Update_Page_0();
 80019f4:	f7ff fee8 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80019f8:	2205      	movs	r2, #5
 80019fa:	49b4      	ldr	r1, [pc, #720]	; (8001ccc <HandleGui+0x334>)
 80019fc:	48b0      	ldr	r0, [pc, #704]	; (8001cc0 <HandleGui+0x328>)
 80019fe:	f00b febf 	bl	800d780 <strncmp>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HandleGui+0x78>
			stopReflow();
 8001a08:	f000 fbec 	bl	80021e4 <stopReflow>
			Update_Page_0();
 8001a0c:	f7ff fedc 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 8001a10:	2205      	movs	r2, #5
 8001a12:	49ac      	ldr	r1, [pc, #688]	; (8001cc4 <HandleGui+0x32c>)
 8001a14:	48aa      	ldr	r0, [pc, #680]	; (8001cc0 <HandleGui+0x328>)
 8001a16:	f00b feb3 	bl	800d780 <strncmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HandleGui+0x8c>
			Update_Page_3();
 8001a20:	f7ff fe72 	bl	8001708 <Update_Page_3>
	}


	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 8001a24:	2205      	movs	r2, #5
 8001a26:	49aa      	ldr	r1, [pc, #680]	; (8001cd0 <HandleGui+0x338>)
 8001a28:	48a5      	ldr	r0, [pc, #660]	; (8001cc0 <HandleGui+0x328>)
 8001a2a:	f00b fea9 	bl	800d780 <strncmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HandleGui+0xa0>
		Update_Page_2();
 8001a34:	f7ff ff6c 	bl	8001910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 8001a38:	2205      	movs	r2, #5
 8001a3a:	49a6      	ldr	r1, [pc, #664]	; (8001cd4 <HandleGui+0x33c>)
 8001a3c:	48a0      	ldr	r0, [pc, #640]	; (8001cc0 <HandleGui+0x328>)
 8001a3e:	f00b fe9f 	bl	800d780 <strncmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d154      	bne.n	8001af2 <HandleGui+0x15a>
			  float32_t Output =0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8001a50:	f7ff fdea 	bl	8001628 <HandleKeyPad>
 8001a54:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a58:	e024      	b.n	8001aa4 <HandleGui+0x10c>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a5a:	4a9f      	ldr	r2, [pc, #636]	; (8001cd8 <HandleGui+0x340>)
 8001a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a64:	6018      	str	r0, [r3, #0]
 8001a66:	3304      	adds	r3, #4
 8001a68:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a70:	e010      	b.n	8001a94 <HandleGui+0xfc>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a7a:	4413      	add	r3, r2
 8001a7c:	7819      	ldrb	r1, [r3, #0]
 8001a7e:	4a90      	ldr	r2, [pc, #576]	; (8001cc0 <HandleGui+0x328>)
 8001a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a84:	4413      	add	r3, r2
 8001a86:	460a      	mov	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	ddea      	ble.n	8001a72 <HandleGui+0xda>
					}
				  Output = HandleKeyPad();
 8001a9c:	f7ff fdc4 	bl	8001628 <HandleKeyPad>
 8001aa0:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001aa4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001aa8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001cdc <HandleGui+0x344>
 8001aac:	eef4 7a47 	vcmp.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d0d1      	beq.n	8001a5a <HandleGui+0xc2>
			  }
			  if(Output == 8888){
 8001ab6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001aba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001ce0 <HandleGui+0x348>
 8001abe:	eef4 7a47 	vcmp.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	d103      	bne.n	8001ad0 <HandleGui+0x138>
				 Output = ReflowParameters.KP;
 8001ac8:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <HandleGui+0x34c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }
	    ReflowParameters.KP = Output;
 8001ad0:	4a84      	ldr	r2, [pc, #528]	; (8001ce4 <HandleGui+0x34c>)
 8001ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ad6:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8001ad8:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HandleGui+0x34c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a82      	ldr	r2, [pc, #520]	; (8001ce8 <HandleGui+0x350>)
 8001ade:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <HandleGui+0x350>)
 8001ae4:	f000 fd94 	bl	8002610 <arm_pid_init_f32>
		Update_Page_2();
 8001ae8:	f7ff ff12 	bl	8001910 <Update_Page_2>
		NEXTION_CMD("page 2");
 8001aec:	487f      	ldr	r0, [pc, #508]	; (8001cec <HandleGui+0x354>)
 8001aee:	f7ff fd2b 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 8001af2:	2205      	movs	r2, #5
 8001af4:	497e      	ldr	r1, [pc, #504]	; (8001cf0 <HandleGui+0x358>)
 8001af6:	4872      	ldr	r0, [pc, #456]	; (8001cc0 <HandleGui+0x328>)
 8001af8:	f00b fe42 	bl	800d780 <strncmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d154      	bne.n	8001bac <HandleGui+0x214>
			  float32_t Output =0;
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8001b0a:	f7ff fd8d 	bl	8001628 <HandleKeyPad>
 8001b0e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b12:	e024      	b.n	8001b5e <HandleGui+0x1c6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b14:	4a70      	ldr	r2, [pc, #448]	; (8001cd8 <HandleGui+0x340>)
 8001b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1e:	6018      	str	r0, [r3, #0]
 8001b20:	3304      	adds	r3, #4
 8001b22:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b2a:	e010      	b.n	8001b4e <HandleGui+0x1b6>
						UART_Recieved_Data[i]=defaultUart[i];
 8001b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b34:	4413      	add	r3, r2
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HandleGui+0x328>)
 8001b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3e:	4413      	add	r3, r2
 8001b40:	460a      	mov	r2, r1
 8001b42:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	ddea      	ble.n	8001b2c <HandleGui+0x194>
					}
				  Output = HandleKeyPad();
 8001b56:	f7ff fd67 	bl	8001628 <HandleKeyPad>
 8001b5a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b62:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001cdc <HandleGui+0x344>
 8001b66:	eef4 7a47 	vcmp.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d0d1      	beq.n	8001b14 <HandleGui+0x17c>
			  }
			  if(Output == 8888){
 8001b70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b74:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001ce0 <HandleGui+0x348>
 8001b78:	eef4 7a47 	vcmp.f32	s15, s14
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d103      	bne.n	8001b8a <HandleGui+0x1f2>
				 Output = ReflowParameters.Ki;
 8001b82:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HandleGui+0x34c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8001b8a:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <HandleGui+0x34c>)
 8001b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b90:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001b92:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <HandleGui+0x34c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HandleGui+0x350>)
 8001b98:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4852      	ldr	r0, [pc, #328]	; (8001ce8 <HandleGui+0x350>)
 8001b9e:	f000 fd37 	bl	8002610 <arm_pid_init_f32>
			Update_Page_2();
 8001ba2:	f7ff feb5 	bl	8001910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001ba6:	4851      	ldr	r0, [pc, #324]	; (8001cec <HandleGui+0x354>)
 8001ba8:	f7ff fcce 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001bac:	2205      	movs	r2, #5
 8001bae:	4951      	ldr	r1, [pc, #324]	; (8001cf4 <HandleGui+0x35c>)
 8001bb0:	4843      	ldr	r0, [pc, #268]	; (8001cc0 <HandleGui+0x328>)
 8001bb2:	f00b fde5 	bl	800d780 <strncmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d14b      	bne.n	8001c54 <HandleGui+0x2bc>
			  float32_t Output =0;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001bc2:	f7ff fd31 	bl	8001628 <HandleKeyPad>
 8001bc6:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001bca:	e01e      	b.n	8001c0a <HandleGui+0x272>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HandleGui+0x340>)
 8001bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd6:	6018      	str	r0, [r3, #0]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8001be0:	e00c      	b.n	8001bfc <HandleGui+0x264>
						UART_Recieved_Data[i]=defaultUart[i];
 8001be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be8:	4413      	add	r3, r2
 8001bea:	7819      	ldrb	r1, [r3, #0]
 8001bec:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HandleGui+0x328>)
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf0:	4413      	add	r3, r2
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	ddef      	ble.n	8001be2 <HandleGui+0x24a>
					}
				  Output = HandleKeyPad();
 8001c02:	f7ff fd11 	bl	8001628 <HandleKeyPad>
 8001c06:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001c0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c0e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001cdc <HandleGui+0x344>
 8001c12:	eef4 7a47 	vcmp.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d0d7      	beq.n	8001bcc <HandleGui+0x234>
			  }
			  if(Output == 8888){
 8001c1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ce0 <HandleGui+0x348>
 8001c24:	eef4 7a47 	vcmp.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d102      	bne.n	8001c34 <HandleGui+0x29c>
				 Output = ReflowParameters.KD;
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HandleGui+0x34c>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001c34:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <HandleGui+0x34c>)
 8001c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c38:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HandleGui+0x34c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HandleGui+0x350>)
 8001c40:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001c42:	2101      	movs	r1, #1
 8001c44:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <HandleGui+0x350>)
 8001c46:	f000 fce3 	bl	8002610 <arm_pid_init_f32>
			Update_Page_2();
 8001c4a:	f7ff fe61 	bl	8001910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001c4e:	4827      	ldr	r0, [pc, #156]	; (8001cec <HandleGui+0x354>)
 8001c50:	f7ff fc7a 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001c54:	2205      	movs	r2, #5
 8001c56:	4928      	ldr	r1, [pc, #160]	; (8001cf8 <HandleGui+0x360>)
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <HandleGui+0x328>)
 8001c5a:	f00b fd91 	bl	800d780 <strncmp>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HandleGui+0x2d0>
			Update_Page_3();
 8001c64:	f7ff fd50 	bl	8001708 <Update_Page_3>



	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001c68:	2205      	movs	r2, #5
 8001c6a:	4924      	ldr	r1, [pc, #144]	; (8001cfc <HandleGui+0x364>)
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <HandleGui+0x328>)
 8001c6e:	f00b fd87 	bl	800d780 <strncmp>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HandleGui+0x2e4>
		Update_Page_3();
 8001c78:	f7ff fd46 	bl	8001708 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	4920      	ldr	r1, [pc, #128]	; (8001d00 <HandleGui+0x368>)
 8001c80:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <HandleGui+0x328>)
 8001c82:	f00b fd7d 	bl	800d780 <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d17b      	bne.n	8001d84 <HandleGui+0x3ec>
			  float32_t Output =0;
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001c92:	f7ff fcc9 	bl	8001628 <HandleKeyPad>
 8001c96:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001c9a:	e047      	b.n	8001d2c <HandleGui+0x394>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HandleGui+0x340>)
 8001c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ca6:	6018      	str	r0, [r3, #0]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001cac:	2300      	movs	r3, #0
 8001cae:	673b      	str	r3, [r7, #112]	; 0x70
 8001cb0:	e035      	b.n	8001d1e <HandleGui+0x386>
 8001cb2:	bf00      	nop
 8001cb4:	20000764 	.word	0x20000764
 8001cb8:	20000a68 	.word	0x20000a68
 8001cbc:	080110d0 	.word	0x080110d0
 8001cc0:	20000454 	.word	0x20000454
 8001cc4:	080110d8 	.word	0x080110d8
 8001cc8:	080110e0 	.word	0x080110e0
 8001ccc:	080110e8 	.word	0x080110e8
 8001cd0:	080110f0 	.word	0x080110f0
 8001cd4:	080110f8 	.word	0x080110f8
 8001cd8:	08011170 	.word	0x08011170
 8001cdc:	461c3c00 	.word	0x461c3c00
 8001ce0:	460ae000 	.word	0x460ae000
 8001ce4:	20000aac 	.word	0x20000aac
 8001ce8:	20000a30 	.word	0x20000a30
 8001cec:	08011100 	.word	0x08011100
 8001cf0:	08011108 	.word	0x08011108
 8001cf4:	08011110 	.word	0x08011110
 8001cf8:	08011118 	.word	0x08011118
 8001cfc:	08011120 	.word	0x08011120
 8001d00:	08011128 	.word	0x08011128
						UART_Recieved_Data[i]=defaultUart[i];
 8001d04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7819      	ldrb	r1, [r3, #0]
 8001d0e:	4ab2      	ldr	r2, [pc, #712]	; (8001fd8 <HandleGui+0x640>)
 8001d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d12:	4413      	add	r3, r2
 8001d14:	460a      	mov	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	ddef      	ble.n	8001d04 <HandleGui+0x36c>
					}
				  Output = HandleKeyPad();
 8001d24:	f7ff fc80 	bl	8001628 <HandleKeyPad>
 8001d28:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001d2c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d30:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001fdc <HandleGui+0x644>
 8001d34:	eef4 7a47 	vcmp.f32	s15, s14
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	d0ae      	beq.n	8001c9c <HandleGui+0x304>
			  }
			  if(Output == 8888){
 8001d3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d42:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001fe0 <HandleGui+0x648>
 8001d46:	eef4 7a47 	vcmp.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d102      	bne.n	8001d56 <HandleGui+0x3be>
				 Output = ReflowParameters.firstHeatUpRate;
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <HandleGui+0x64c>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if(Output < 0.2)
 8001d56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	a39c      	add	r3, pc, #624	; (adr r3, 8001fd0 <HandleGui+0x638>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe febb 	bl	8000adc <__aeabi_dcmplt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HandleGui+0x3d8>
				  Output = 0.2;
 8001d6c:	4b9e      	ldr	r3, [pc, #632]	; (8001fe8 <HandleGui+0x650>)
 8001d6e:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001d70:	4a9c      	ldr	r2, [pc, #624]	; (8001fe4 <HandleGui+0x64c>)
 8001d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d74:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001d76:	f7ff fcc7 	bl	8001708 <Update_Page_3>
		NEXTION_CMD("page 3");
 8001d7a:	489c      	ldr	r0, [pc, #624]	; (8001fec <HandleGui+0x654>)
 8001d7c:	f7ff fbe4 	bl	8001548 <NEXTION_CMD>
		calculateReflowCurve();
 8001d80:	f000 fade 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001d84:	2205      	movs	r2, #5
 8001d86:	499a      	ldr	r1, [pc, #616]	; (8001ff0 <HandleGui+0x658>)
 8001d88:	4893      	ldr	r0, [pc, #588]	; (8001fd8 <HandleGui+0x640>)
 8001d8a:	f00b fcf9 	bl	800d780 <strncmp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d14f      	bne.n	8001e34 <HandleGui+0x49c>
			  float32_t Output =0;
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001d9a:	f7ff fc45 	bl	8001628 <HandleKeyPad>
 8001d9e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001da2:	e01e      	b.n	8001de2 <HandleGui+0x44a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001da4:	4a93      	ldr	r2, [pc, #588]	; (8001ff4 <HandleGui+0x65c>)
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dae:	6018      	str	r0, [r3, #0]
 8001db0:	3304      	adds	r3, #4
 8001db2:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001db4:	2300      	movs	r3, #0
 8001db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001db8:	e00c      	b.n	8001dd4 <HandleGui+0x43c>
						UART_Recieved_Data[i]=defaultUart[i];
 8001dba:	f107 0220 	add.w	r2, r7, #32
 8001dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc0:	4413      	add	r3, r2
 8001dc2:	7819      	ldrb	r1, [r3, #0]
 8001dc4:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HandleGui+0x640>)
 8001dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc8:	4413      	add	r3, r2
 8001dca:	460a      	mov	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	ddef      	ble.n	8001dba <HandleGui+0x422>
					}
				  Output = HandleKeyPad();
 8001dda:	f7ff fc25 	bl	8001628 <HandleKeyPad>
 8001dde:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001de2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001de6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001fdc <HandleGui+0x644>
 8001dea:	eef4 7a47 	vcmp.f32	s15, s14
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d0d7      	beq.n	8001da4 <HandleGui+0x40c>
			  }
			  if(Output == 8888){
 8001df4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001fe0 <HandleGui+0x648>
 8001dfc:	eef4 7a47 	vcmp.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d107      	bne.n	8001e16 <HandleGui+0x47e>
				 Output = ReflowParameters.SoakTime;
 8001e06:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HandleGui+0x64c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			  }
			ReflowParameters.SoakTime = Output;
 8001e16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 2a90 	vmov	r2, s15
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HandleGui+0x64c>)
 8001e24:	615a      	str	r2, [r3, #20]
			Update_Page_3();
 8001e26:	f7ff fc6f 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001e2a:	4870      	ldr	r0, [pc, #448]	; (8001fec <HandleGui+0x654>)
 8001e2c:	f7ff fb8c 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001e30:	f000 fa86 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001e34:	2205      	movs	r2, #5
 8001e36:	4970      	ldr	r1, [pc, #448]	; (8001ff8 <HandleGui+0x660>)
 8001e38:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <HandleGui+0x640>)
 8001e3a:	f00b fca1 	bl	800d780 <strncmp>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d14f      	bne.n	8001ee4 <HandleGui+0x54c>
			  float32_t Output =0;
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001e4a:	f7ff fbed 	bl	8001628 <HandleKeyPad>
 8001e4e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e52:	e01e      	b.n	8001e92 <HandleGui+0x4fa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e54:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HandleGui+0x65c>)
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e5e:	6018      	str	r0, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
 8001e68:	e00c      	b.n	8001e84 <HandleGui+0x4ec>
						UART_Recieved_Data[i]=defaultUart[i];
 8001e6a:	f107 0218 	add.w	r2, r7, #24
 8001e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e70:	4413      	add	r3, r2
 8001e72:	7819      	ldrb	r1, [r3, #0]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HandleGui+0x640>)
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	4413      	add	r3, r2
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e80:	3301      	adds	r3, #1
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
 8001e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	ddef      	ble.n	8001e6a <HandleGui+0x4d2>
					}
				  Output = HandleKeyPad();
 8001e8a:	f7ff fbcd 	bl	8001628 <HandleKeyPad>
 8001e8e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e92:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e96:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001fdc <HandleGui+0x644>
 8001e9a:	eef4 7a47 	vcmp.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d0d7      	beq.n	8001e54 <HandleGui+0x4bc>
			  }
			  if(Output == 8888){
 8001ea4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ea8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001fe0 <HandleGui+0x648>
 8001eac:	eef4 7a47 	vcmp.f32	s15, s14
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d107      	bne.n	8001ec6 <HandleGui+0x52e>
				 Output = ReflowParameters.SoakTempeture;
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HandleGui+0x64c>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			  }
			ReflowParameters.SoakTempeture = Output;
 8001ec6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 2a90 	vmov	r2, s15
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HandleGui+0x64c>)
 8001ed4:	611a      	str	r2, [r3, #16]
			Update_Page_3();
 8001ed6:	f7ff fc17 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001eda:	4844      	ldr	r0, [pc, #272]	; (8001fec <HandleGui+0x654>)
 8001edc:	f7ff fb34 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001ee0:	f000 fa2e 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	4945      	ldr	r1, [pc, #276]	; (8001ffc <HandleGui+0x664>)
 8001ee8:	483b      	ldr	r0, [pc, #236]	; (8001fd8 <HandleGui+0x640>)
 8001eea:	f00b fc49 	bl	800d780 <strncmp>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d152      	bne.n	8001f9a <HandleGui+0x602>
			  float32_t Output =0;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001efa:	f7ff fb95 	bl	8001628 <HandleKeyPad>
 8001efe:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f02:	e01e      	b.n	8001f42 <HandleGui+0x5aa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001f04:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HandleGui+0x65c>)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0e:	6018      	str	r0, [r3, #0]
 8001f10:	3304      	adds	r3, #4
 8001f12:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f18:	e00c      	b.n	8001f34 <HandleGui+0x59c>
						UART_Recieved_Data[i]=defaultUart[i];
 8001f1a:	f107 0210 	add.w	r2, r7, #16
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	4413      	add	r3, r2
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <HandleGui+0x640>)
 8001f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f28:	4413      	add	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	3301      	adds	r3, #1
 8001f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	ddef      	ble.n	8001f1a <HandleGui+0x582>
					}
				  Output = HandleKeyPad();
 8001f3a:	f7ff fb75 	bl	8001628 <HandleKeyPad>
 8001f3e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f46:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001fdc <HandleGui+0x644>
 8001f4a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d0d7      	beq.n	8001f04 <HandleGui+0x56c>
			  }
			  if(Output == 8888){
 8001f54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fe0 <HandleGui+0x648>
 8001f5c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d102      	bne.n	8001f6c <HandleGui+0x5d4>
				 Output = ReflowParameters.secondHeatUpRate;
 8001f66:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HandleGui+0x64c>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }
			  if(Output < 0.2)
 8001f6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f6e:	f7fe faeb 	bl	8000548 <__aeabi_f2d>
 8001f72:	a317      	add	r3, pc, #92	; (adr r3, 8001fd0 <HandleGui+0x638>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fdb0 	bl	8000adc <__aeabi_dcmplt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HandleGui+0x5ee>
						  Output = 0.2;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HandleGui+0x650>)
 8001f84:	65fb      	str	r3, [r7, #92]	; 0x5c
			ReflowParameters.secondHeatUpRate = Output;
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HandleGui+0x64c>)
 8001f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8a:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001f8c:	f7ff fbbc 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <HandleGui+0x654>)
 8001f92:	f7ff fad9 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001f96:	f000 f9d3 	bl	8002340 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	4918      	ldr	r1, [pc, #96]	; (8002000 <HandleGui+0x668>)
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <HandleGui+0x640>)
 8001fa0:	f00b fbee 	bl	800d780 <strncmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d169      	bne.n	800207e <HandleGui+0x6e6>
			  float32_t Output =0;
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001fb0:	f7ff fb3a 	bl	8001628 <HandleKeyPad>
 8001fb4:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001fb8:	e038      	b.n	800202c <HandleGui+0x694>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HandleGui+0x65c>)
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc4:	6018      	str	r0, [r3, #0]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8001fce:	e026      	b.n	800201e <HandleGui+0x686>
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	3fc99999 	.word	0x3fc99999
 8001fd8:	20000454 	.word	0x20000454
 8001fdc:	461c3c00 	.word	0x461c3c00
 8001fe0:	460ae000 	.word	0x460ae000
 8001fe4:	20000aac 	.word	0x20000aac
 8001fe8:	3e4ccccd 	.word	0x3e4ccccd
 8001fec:	08011130 	.word	0x08011130
 8001ff0:	08011138 	.word	0x08011138
 8001ff4:	08011170 	.word	0x08011170
 8001ff8:	08011140 	.word	0x08011140
 8001ffc:	08011148 	.word	0x08011148
 8002000:	08011150 	.word	0x08011150
						UART_Recieved_Data[i]=defaultUart[i];
 8002004:	f107 0208 	add.w	r2, r7, #8
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	4413      	add	r3, r2
 800200c:	7819      	ldrb	r1, [r3, #0]
 800200e:	4a55      	ldr	r2, [pc, #340]	; (8002164 <HandleGui+0x7cc>)
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	4413      	add	r3, r2
 8002014:	460a      	mov	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8002018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201a:	3301      	adds	r3, #1
 800201c:	653b      	str	r3, [r7, #80]	; 0x50
 800201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002020:	2b04      	cmp	r3, #4
 8002022:	ddef      	ble.n	8002004 <HandleGui+0x66c>
					}
				  Output = HandleKeyPad();
 8002024:	f7ff fb00 	bl	8001628 <HandleKeyPad>
 8002028:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 800202c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002030:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002168 <HandleGui+0x7d0>
 8002034:	eef4 7a47 	vcmp.f32	s15, s14
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d0bd      	beq.n	8001fba <HandleGui+0x622>
			  }
			  if(Output == 8888){
 800203e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002042:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800216c <HandleGui+0x7d4>
 8002046:	eef4 7a47 	vcmp.f32	s15, s14
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d107      	bne.n	8002060 <HandleGui+0x6c8>
				 Output = ReflowParameters.ReflowTime;
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HandleGui+0x7d8>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			  }
			ReflowParameters.ReflowTime = Output;
 8002060:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002068:	ee17 2a90 	vmov	r2, s15
 800206c:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HandleGui+0x7d8>)
 800206e:	621a      	str	r2, [r3, #32]
			Update_Page_3();
 8002070:	f7ff fb4a 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002074:	483f      	ldr	r0, [pc, #252]	; (8002174 <HandleGui+0x7dc>)
 8002076:	f7ff fa67 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 800207a:	f000 f961 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 800207e:	2205      	movs	r2, #5
 8002080:	493d      	ldr	r1, [pc, #244]	; (8002178 <HandleGui+0x7e0>)
 8002082:	4838      	ldr	r0, [pc, #224]	; (8002164 <HandleGui+0x7cc>)
 8002084:	f00b fb7c 	bl	800d780 <strncmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d14d      	bne.n	800212a <HandleGui+0x792>
			  float32_t Output =0;
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8002094:	f7ff fac8 	bl	8001628 <HandleKeyPad>
 8002098:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 800209c:	e01c      	b.n	80020d8 <HandleGui+0x740>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 800209e:	4a37      	ldr	r2, [pc, #220]	; (800217c <HandleGui+0x7e4>)
 80020a0:	463b      	mov	r3, r7
 80020a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	3304      	adds	r3, #4
 80020aa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80020ac:	2300      	movs	r3, #0
 80020ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80020b0:	e00b      	b.n	80020ca <HandleGui+0x732>
						UART_Recieved_Data[i]=defaultUart[i];
 80020b2:	463a      	mov	r2, r7
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	4413      	add	r3, r2
 80020b8:	7819      	ldrb	r1, [r3, #0]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HandleGui+0x7cc>)
 80020bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020be:	4413      	add	r3, r2
 80020c0:	460a      	mov	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	3301      	adds	r3, #1
 80020c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	ddf0      	ble.n	80020b2 <HandleGui+0x71a>
					}
				  Output = HandleKeyPad();
 80020d0:	f7ff faaa 	bl	8001628 <HandleKeyPad>
 80020d4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 80020d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020dc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002168 <HandleGui+0x7d0>
 80020e0:	eef4 7a47 	vcmp.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d0d9      	beq.n	800209e <HandleGui+0x706>
			  }
			  if(Output == 8888){
 80020ea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800216c <HandleGui+0x7d4>
 80020f2:	eef4 7a47 	vcmp.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	d107      	bne.n	800210c <HandleGui+0x774>
				 Output = ReflowParameters.ReflowTempeture;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HandleGui+0x7d8>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002108:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			  }
			ReflowParameters.ReflowTempeture = Output;
 800210c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HandleGui+0x7d8>)
 800211a:	61da      	str	r2, [r3, #28]
			Update_Page_3();
 800211c:	f7ff faf4 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <HandleGui+0x7dc>)
 8002122:	f7ff fa11 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8002126:	f000 f90b 	bl	8002340 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 800212a:	2205      	movs	r2, #5
 800212c:	4914      	ldr	r1, [pc, #80]	; (8002180 <HandleGui+0x7e8>)
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <HandleGui+0x7cc>)
 8002130:	f00b fb26 	bl	800d780 <strncmp>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HandleGui+0x7a6>
			Update_Page_2();
 800213a:	f7ff fbe9 	bl	8001910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 800213e:	2205      	movs	r2, #5
 8002140:	4910      	ldr	r1, [pc, #64]	; (8002184 <HandleGui+0x7ec>)
 8002142:	4808      	ldr	r0, [pc, #32]	; (8002164 <HandleGui+0x7cc>)
 8002144:	f00b fb1c 	bl	800d780 <strncmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HandleGui+0x7c2>
			Update_Page_0();
 800214e:	f7ff fb3b 	bl	80017c8 <Update_Page_0>
			Draw_Reflow_Curve();
 8002152:	f000 f871 	bl	8002238 <Draw_Reflow_Curve>
			SaveParameters();
 8002156:	f7ff f94f 	bl	80013f8 <SaveParameters>
//	NEXTION_SenduInt("t1",ReflowParameters.SoakTime );
//	NEXTION_SenduInt("t2",ReflowParameters.SoakTempeture );
//	NEXTION_SendFloat("t3",ReflowParameters.secondHeatUpRate );
//	NEXTION_SenduInt("t4",ReflowParameters.ReflowTime );
//	NEXTION_SenduInt("t5",ReflowParameters.ReflowTempeture );
}
 800215a:	bf00      	nop
 800215c:	3790      	adds	r7, #144	; 0x90
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000454 	.word	0x20000454
 8002168:	461c3c00 	.word	0x461c3c00
 800216c:	460ae000 	.word	0x460ae000
 8002170:	20000aac 	.word	0x20000aac
 8002174:	08011130 	.word	0x08011130
 8002178:	08011158 	.word	0x08011158
 800217c:	08011170 	.word	0x08011170
 8002180:	08011160 	.word	0x08011160
 8002184:	08011168 	.word	0x08011168

08002188 <startReflow>:

void startReflow(){
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

if(0==ReflowEnable)
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <startReflow+0x44>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <startReflow+0x16>
{
	initFlags();
 8002194:	f000 fa20 	bl	80025d8 <initFlags>
	State=Initializing;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <startReflow+0x48>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
}
ReflowEnable = 1;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <startReflow+0x44>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
NEXTION_CMD("page 0");
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <startReflow+0x4c>)
 80021a6:	f7ff f9cf 	bl	8001548 <NEXTION_CMD>
Draw_Reflow_Curve();
 80021aa:	f000 f845 	bl	8002238 <Draw_Reflow_Curve>
sprintf(ConsoleMSG,"REFLOW START");
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <startReflow+0x50>)
 80021b0:	480a      	ldr	r0, [pc, #40]	; (80021dc <startReflow+0x54>)
 80021b2:	f00b fac5 	bl	800d740 <siprintf>
Update_Page_0();
 80021b6:	f7ff fb07 	bl	80017c8 <Update_Page_0>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80021ba:	2017      	movs	r0, #23
 80021bc:	f002 f8ab 	bl	8004316 <HAL_NVIC_EnableIRQ>
HAL_TIM_Base_Start_IT(&htim5);
 80021c0:	4807      	ldr	r0, [pc, #28]	; (80021e0 <startReflow+0x58>)
 80021c2:	f004 ffdc 	bl	800717e <HAL_TIM_Base_Start_IT>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000074c 	.word	0x2000074c
 80021d0:	20000a68 	.word	0x20000a68
 80021d4:	08011178 	.word	0x08011178
 80021d8:	08011180 	.word	0x08011180
 80021dc:	20000b00 	.word	0x20000b00
 80021e0:	200008c0 	.word	0x200008c0

080021e4 <stopReflow>:

void stopReflow(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80021e8:	2017      	movs	r0, #23
 80021ea:	f002 f8a2 	bl	8004332 <HAL_NVIC_DisableIRQ>
	//HAL_TIM_Base_Stop_IT(&htim5);
	if(ReflowEnable ==1){
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <stopReflow+0x40>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <stopReflow+0x3a>
		ReflowEnable = 0;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <stopReflow+0x40>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80021fc:	2104      	movs	r1, #4
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <stopReflow+0x44>)
 8002200:	f005 f854 	bl	80072ac <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002204:	2108      	movs	r1, #8
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <stopReflow+0x44>)
 8002208:	f005 f850 	bl	80072ac <HAL_TIM_PWM_Stop>
		sprintf(ConsoleMSG,"STOPPED");
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <stopReflow+0x48>)
 800220e:	4808      	ldr	r0, [pc, #32]	; (8002230 <stopReflow+0x4c>)
 8002210:	f00b fa96 	bl	800d740 <siprintf>
		Update_Page_0();
 8002214:	f7ff fad8 	bl	80017c8 <Update_Page_0>
		 PIDFlag=0;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <stopReflow+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
	}
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000074c 	.word	0x2000074c
 8002228:	20000900 	.word	0x20000900
 800222c:	08011190 	.word	0x08011190
 8002230:	20000b00 	.word	0x20000b00
 8002234:	20000afc 	.word	0x20000afc

08002238 <Draw_Reflow_Curve>:

void Draw_Reflow_Curve(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0

	float32_t dx =0.23; //275px / 400s //92px 400s
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <Draw_Reflow_Curve+0x94>)
 8002240:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <Draw_Reflow_Curve+0x98>)
 8002244:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 28;
 8002246:	231c      	movs	r3, #28
 8002248:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 153; //151
 800224a:	2399      	movs	r3, #153	; 0x99
 800224c:	607b      	str	r3, [r7, #4]
//	float32_t dx = 0.625 / 4; //275px / 880s / 500 ms
//	float32_t dy = 0.8333; //200px / 240 Grad
//	uint32_t OffsetX = 35;
//	uint32_t OffsetY = 230;

	uint32_t index = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]



	while(ReflowCurve[index] != 0){
 8002252:	e02f      	b.n	80022b4 <Draw_Reflow_Curve+0x7c>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800226a:	ee17 2a90 	vmov	r2, s15
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	441a      	add	r2, r3
 8002272:	4918      	ldr	r1, [pc, #96]	; (80022d4 <Draw_Reflow_Curve+0x9c>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	440b      	add	r3, r1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002282:	edd7 7a03 	vldr	s15, [r7, #12]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228e:	ee17 1a90 	vmov	r1, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1a5b      	subs	r3, r3, r1
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7ff f973 	bl	8001584 <NextionDrawDot>
		index= index + 4;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 80022a4:	2205      	movs	r2, #5
 80022a6:	490c      	ldr	r1, [pc, #48]	; (80022d8 <Draw_Reflow_Curve+0xa0>)
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <Draw_Reflow_Curve+0xa4>)
 80022aa:	f00b fa69 	bl	800d780 <strncmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <Draw_Reflow_Curve+0x8a>
	while(ReflowCurve[index] != 0){
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <Draw_Reflow_Curve+0x9c>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4413      	add	r3, r2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1c9      	bne.n	8002254 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 80022c0:	e000      	b.n	80022c4 <Draw_Reflow_Curve+0x8c>
			break;
 80022c2:	bf00      	nop
}
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	3e6b851f 	.word	0x3e6b851f
 80022d0:	3f0bb98c 	.word	0x3f0bb98c
 80022d4:	20000b68 	.word	0x20000b68
 80022d8:	080110d8 	.word	0x080110d8
 80022dc:	20000454 	.word	0x20000454

080022e0 <setReflowParameters>:

void setReflowParameters(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	ReflowParameters.KP = 10; //203
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <setReflowParameters+0x48>)
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <setReflowParameters+0x4c>)
 80022e8:	601a      	str	r2, [r3, #0]
	ReflowParameters.Ki = 10; //5.2
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <setReflowParameters+0x48>)
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <setReflowParameters+0x4c>)
 80022ee:	605a      	str	r2, [r3, #4]
	ReflowParameters.KD = 0;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <setReflowParameters+0x48>)
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
	ReflowParameters.firstHeatUpRate = 1.2;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <setReflowParameters+0x48>)
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <setReflowParameters+0x50>)
 80022fc:	60da      	str	r2, [r3, #12]
	ReflowParameters.SoakTempeture = 100;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <setReflowParameters+0x48>)
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	611a      	str	r2, [r3, #16]
	ReflowParameters.SoakTime = 100;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <setReflowParameters+0x48>)
 8002306:	2264      	movs	r2, #100	; 0x64
 8002308:	615a      	str	r2, [r3, #20]
	ReflowParameters.secondHeatUpRate = 1.2;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <setReflowParameters+0x48>)
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <setReflowParameters+0x50>)
 800230e:	619a      	str	r2, [r3, #24]
	ReflowParameters.ReflowTempeture = 210;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <setReflowParameters+0x48>)
 8002312:	22d2      	movs	r2, #210	; 0xd2
 8002314:	61da      	str	r2, [r3, #28]
	ReflowParameters.ReflowTime =100;
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <setReflowParameters+0x48>)
 8002318:	2264      	movs	r2, #100	; 0x64
 800231a:	621a      	str	r2, [r3, #32]
	sprintf(ConsoleMSG,"IDLE");
 800231c:	4905      	ldr	r1, [pc, #20]	; (8002334 <setReflowParameters+0x54>)
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <setReflowParameters+0x58>)
 8002320:	f00b fa0e 	bl	800d740 <siprintf>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000aac 	.word	0x20000aac
 800232c:	41200000 	.word	0x41200000
 8002330:	3f99999a 	.word	0x3f99999a
 8002334:	08011198 	.word	0x08011198
 8002338:	20000b00 	.word	0x20000b00
 800233c:	00000000 	.word	0x00000000

08002340 <calculateReflowCurve>:

void calculateReflowCurve(){
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e007      	b.n	800235c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 800234c:	4a9e      	ldr	r2, [pc, #632]	; (80025c8 <calculateReflowCurve+0x288>)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	4413      	add	r3, r2
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002362:	dbf3      	blt.n	800234c <calculateReflowCurve+0xc>
	}

	int index = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
	float timestep = 0.5;
 8002368:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800236c:	61fb      	str	r3, [r7, #28]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 800236e:	e020      	b.n	80023b2 <calculateReflowCurve+0x72>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <calculateReflowCurve+0x28c>)
 8002372:	ed93 7a03 	vldr	s14, [r3, #12]
 8002376:	edd7 7a07 	vldr	s15, [r7, #28]
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238a:	edc7 7a01 	vstr	s15, [r7, #4]
 800238e:	793b      	ldrb	r3, [r7, #4]
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	4a8d      	ldr	r2, [pc, #564]	; (80025c8 <calculateReflowCurve+0x288>)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4413      	add	r3, r2
 8002398:	460a      	mov	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]
	index++;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3301      	adds	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 80023a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ae:	edc7 7a07 	vstr	s15, [r7, #28]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <calculateReflowCurve+0x28c>)
 80023b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80023b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80023c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <calculateReflowCurve+0x28c>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d9c8      	bls.n	8002370 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <calculateReflowCurve+0x290>)
 80023e4:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 80023e6:	4b79      	ldr	r3, [pc, #484]	; (80025cc <calculateReflowCurve+0x28c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	613b      	str	r3, [r7, #16]

	for(int i=0;i<Soakduration;i++){
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e00a      	b.n	800240a <calculateReflowCurve+0xca>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <calculateReflowCurve+0x28c>)
 80023f6:	6919      	ldr	r1, [r3, #16]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2c9      	uxtb	r1, r1
 8002400:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <calculateReflowCurve+0x288>)
 8002402:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	3301      	adds	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <calculateReflowCurve+0xb4>
	}


	//Second Heat Up:
	index = index + Soakduration;
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	623b      	str	r3, [r7, #32]
	PhaseIndex[2]=index;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <calculateReflowCurve+0x290>)
 8002420:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002422:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002426:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8002428:	e02e      	b.n	8002488 <calculateReflowCurve+0x148>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 800242a:	4b68      	ldr	r3, [pc, #416]	; (80025cc <calculateReflowCurve+0x28c>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002436:	edd7 7a07 	vldr	s15, [r7, #28]
 800243a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002442:	793b      	ldrb	r3, [r7, #4]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <calculateReflowCurve+0x28c>)
 8002450:	edd3 7a06 	vldr	s15, [r3, #24]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	edc7 7a01 	vstr	s15, [r7, #4]
 8002464:	793b      	ldrb	r3, [r7, #4]
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <calculateReflowCurve+0x288>)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	4413      	add	r3, r2
 800246e:	460a      	mov	r2, r1
 8002470:	701a      	strb	r2, [r3, #0]
	index++;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	3301      	adds	r3, #1
 8002476:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 8002478:	edd7 7a07 	vldr	s15, [r7, #28]
 800247c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	edc7 7a07 	vstr	s15, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <calculateReflowCurve+0x28c>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002494:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <calculateReflowCurve+0x28c>)
 8002496:	edd3 6a06 	vldr	s13, [r3, #24]
 800249a:	edd7 7a07 	vldr	s15, [r7, #28]
 800249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <calculateReflowCurve+0x28c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d9b6      	bls.n	800242a <calculateReflowCurve+0xea>
	}
	PhaseIndex[3]=index;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <calculateReflowCurve+0x290>)
 80024c2:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <calculateReflowCurve+0x28c>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<Reflowduration;i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00a      	b.n	80024e8 <calculateReflowCurve+0x1a8>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <calculateReflowCurve+0x28c>)
 80024d4:	69d9      	ldr	r1, [r3, #28]
 80024d6:	6a3a      	ldr	r2, [r7, #32]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4413      	add	r3, r2
 80024dc:	b2c9      	uxtb	r1, r1
 80024de:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <calculateReflowCurve+0x288>)
 80024e0:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf0      	blt.n	80024d2 <calculateReflowCurve+0x192>
	}

	index = index + Reflowduration;
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	623b      	str	r3, [r7, #32]
	ReflowCurve[index]=0;
 80024f8:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <calculateReflowCurve+0x288>)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4413      	add	r3, r2
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <calculateReflowCurve+0x290>)
 8002508:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 800250a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800250e:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002510:	e030      	b.n	8002574 <calculateReflowCurve+0x234>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <calculateReflowCurve+0x28c>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fff4 	bl	8000504 <__aeabi_ui2d>
 800251c:	4604      	mov	r4, r0
 800251e:	460d      	mov	r5, r1
 8002520:	69f8      	ldr	r0, [r7, #28]
 8002522:	f7fe f811 	bl	8000548 <__aeabi_f2d>
 8002526:	a326      	add	r3, pc, #152	; (adr r3, 80025c0 <calculateReflowCurve+0x280>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f864 	bl	80005f8 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fd fea6 	bl	8000288 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb30 	bl	8000ba8 <__aeabi_d2uiz>
 8002548:	4603      	mov	r3, r0
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <calculateReflowCurve+0x288>)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	4413      	add	r3, r2
 8002552:	460a      	mov	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
	index++;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	3301      	adds	r3, #1
 800255a:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002568:	edc7 7a07 	vstr	s15, [r7, #28]
	PhaseIndex[5]=index;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <calculateReflowCurve+0x290>)
 8002572:	815a      	strh	r2, [r3, #10]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <calculateReflowCurve+0x28c>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffc3 	bl	8000504 <__aeabi_ui2d>
 800257e:	4604      	mov	r4, r0
 8002580:	460d      	mov	r5, r1
 8002582:	69f8      	ldr	r0, [r7, #28]
 8002584:	f7fd ffe0 	bl	8000548 <__aeabi_f2d>
 8002588:	a30d      	add	r3, pc, #52	; (adr r3, 80025c0 <calculateReflowCurve+0x280>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe f833 	bl	80005f8 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe75 	bl	8000288 <__aeabi_dsub>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <calculateReflowCurve+0x294>)
 80025ac:	f7fe faaa 	bl	8000b04 <__aeabi_dcmpge>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ad      	bne.n	8002512 <calculateReflowCurve+0x1d2>
	}




}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	3ffccccc 	.word	0x3ffccccc
 80025c8:	20000b68 	.word	0x20000b68
 80025cc:	20000aac 	.word	0x20000aac
 80025d0:	20000758 	.word	0x20000758
 80025d4:	40380000 	.word	0x40380000

080025d8 <initFlags>:

void initFlags(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
	Flags.StartFlag=TRUE;
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <initFlags+0x34>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <initFlags+0x34>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <initFlags+0x34>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <initFlags+0x34>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <initFlags+0x34>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <initFlags+0x34>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	715a      	strb	r2, [r3, #5]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000b18 	.word	0x20000b18

08002610 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edd3 7a07 	vldr	s15, [r3, #28]
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002640:	eeb1 7a67 	vneg.f32	s14, s15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edd3 7a08 	vldr	s15, [r3, #32]
 800264a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	330c      	adds	r3, #12
 800266a:	220c      	movs	r2, #12
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f00a fb3a 	bl	800cce8 <memset>
  }

}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <delay_us>:
 return HAL_GetTick();

}

void delay_us(unsigned long delay_us)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 __HAL_TIM_SET_COUNTER(&htim5,0);
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <delay_us+0x2c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
// __HAL_TIM_SET_COUNTER(&htim6,0);
 while(__HAL_TIM_GET_COUNTER(&htim5)<delay_us);
 800268c:	bf00      	nop
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <delay_us+0x2c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	d8f9      	bhi.n	800268e <delay_us+0x12>


}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	200008c0 	.word	0x200008c0

080026ac <readTemperatureData>:

void readTemperatureData(volatile float* temperature_val)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2110      	movs	r1, #16
 80026b8:	4820      	ldr	r0, [pc, #128]	; (800273c <readTemperatureData+0x90>)
 80026ba:	f002 faf7 	bl	8004cac <HAL_GPIO_WritePin>
			uint8_t data8[2]={0};
 80026be:	2300      	movs	r3, #0
 80026c0:	81bb      	strh	r3, [r7, #12]
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2110      	movs	r1, #16
 80026c6:	481d      	ldr	r0, [pc, #116]	; (800273c <readTemperatureData+0x90>)
 80026c8:	f002 faf0 	bl	8004cac <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 80026cc:	f107 010c 	add.w	r1, r7, #12
 80026d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026d4:	2202      	movs	r2, #2
 80026d6:	481a      	ldr	r0, [pc, #104]	; (8002740 <readTemperatureData+0x94>)
 80026d8:	f004 f96a 	bl	80069b0 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2110      	movs	r1, #16
 80026e0:	4816      	ldr	r0, [pc, #88]	; (800273c <readTemperatureData+0x90>)
 80026e2:	f002 fae3 	bl	8004cac <HAL_GPIO_WritePin>
			uint16_t sum={0};
 80026e6:	2300      	movs	r3, #0
 80026e8:	81fb      	strh	r3, [r7, #14]
			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	7b3b      	ldrb	r3, [r7, #12]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	81fb      	strh	r3, [r7, #14]
			if(sum &	0x0004)//No TC connected, error -1
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <readTemperatureData+0x60>
			{
				(*temperature_val)=-1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <readTemperatureData+0x98>)
 8002708:	601a      	str	r2, [r3, #0]
				//sum2=(uint16_t) data8[3] | (uint16_t) data8[2]<< 8 ;
				(*temperature_val)=((sum>>3)/4.0);
			}


}
 800270a:	e013      	b.n	8002734 <readTemperatureData+0x88>
				(*temperature_val)=((sum>>3)/4.0);
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff06 	bl	8000524 <__aeabi_i2d>
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <readTemperatureData+0x9c>)
 800271e:	f7fe f895 	bl	800084c <__aeabi_ddiv>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe fa5d 	bl	8000be8 <__aeabi_d2f>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020000 	.word	0x40020000
 8002740:	200009cc 	.word	0x200009cc
 8002744:	bf800000 	.word	0xbf800000
 8002748:	40100000 	.word	0x40100000

0800274c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM2
        {
    //	counter_us++;
    	//counter_us2++;
        }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	static	SETPOINT Mod1; //Thermal profile setup
	Mod1.Tpreheat_setpoint=90.00;
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <main+0x160>)
 8002768:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <main+0x164>)
 800276a:	601a      	str	r2, [r3, #0]
	Mod1.Tsoak_setpoint=200.00;
 800276c:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <main+0x160>)
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <main+0x168>)
 8002770:	605a      	str	r2, [r3, #4]
	Mod1.Treflow_setpoint=250.00;
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <main+0x160>)
 8002774:	4a55      	ldr	r2, [pc, #340]	; (80028cc <main+0x16c>)
 8002776:	609a      	str	r2, [r3, #8]
	Mod1.Tcooldown_setpoint=30.00;
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <main+0x160>)
 800277a:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <main+0x170>)
 800277c:	60da      	str	r2, [r3, #12]
	Mod1.tPreheat=60;
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <main+0x160>)
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	61da      	str	r2, [r3, #28]
	Mod1.tSoak=60;
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <main+0x160>)
 8002786:	223c      	movs	r2, #60	; 0x3c
 8002788:	621a      	str	r2, [r3, #32]
	Mod1.tReflow=120;
 800278a:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <main+0x160>)
 800278c:	2278      	movs	r2, #120	; 0x78
 800278e:	625a      	str	r2, [r3, #36]	; 0x24


extern FLAGS Flags; //Flags for status

	Flags.StartFlag=TRUE;
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <main+0x174>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <main+0x174>)
 8002798:	2200      	movs	r2, #0
 800279a:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <main+0x174>)
 800279e:	2200      	movs	r2, #0
 80027a0:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <main+0x174>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80027a8:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <main+0x174>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <main+0x174>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027b4:	f001 f99c 	bl	8003af0 <HAL_Init>

  /* USER CODE BEGIN Init */
  setReflowParameters();
 80027b8:	f7ff fd92 	bl	80022e0 <setReflowParameters>
  LoadParameters();
 80027bc:	f7fe fe28 	bl	8001410 <LoadParameters>
  PID.Kp = ReflowParameters.KP;
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <main+0x178>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <main+0x17c>)
 80027c6:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.Ki;
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <main+0x178>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a43      	ldr	r2, [pc, #268]	; (80028dc <main+0x17c>)
 80027ce:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 80027d0:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <main+0x178>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <main+0x17c>)
 80027d6:	6213      	str	r3, [r2, #32]
  calculateReflowCurve();
 80027d8:	f7ff fdb2 	bl	8002340 <calculateReflowCurve>
  arm_pid_init_f32(&PID, 1);
 80027dc:	2101      	movs	r1, #1
 80027de:	483f      	ldr	r0, [pc, #252]	; (80028dc <main+0x17c>)
 80027e0:	f7ff ff16 	bl	8002610 <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e4:	f000 f898 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e8:	f000 fb26 	bl	8002e38 <MX_GPIO_Init>
  MX_SPI1_Init();
 80027ec:	f000 f950 	bl	8002a90 <MX_SPI1_Init>
  MX_TIM5_Init();
 80027f0:	f000 faaa 	bl	8002d48 <MX_TIM5_Init>
  MX_TIM1_Init();
 80027f4:	f000 f982 	bl	8002afc <MX_TIM1_Init>
  MX_TIM2_Init();
 80027f8:	f000 f9d8 	bl	8002bac <MX_TIM2_Init>
  MX_ADC1_Init();
 80027fc:	f000 f8f6 	bl	80029ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002800:	f000 faf0 	bl	8002de4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002804:	f000 fa1e 	bl	8002c44 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8002808:	f009 fda6 	bl	800c358 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


	void sendToNum(char *obj,uint16_t value);
	HAL_TIM_Base_Start_IT(&htim5);
 800280c:	4834      	ldr	r0, [pc, #208]	; (80028e0 <main+0x180>)
 800280e:	f004 fcb6 	bl	800717e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8002812:	4834      	ldr	r0, [pc, #208]	; (80028e4 <main+0x184>)
 8002814:	f004 fcb3 	bl	800717e <HAL_TIM_Base_Start_IT>
	//Init values for PWM duty cycle
	TIM3->CCR2=200;
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <main+0x188>)
 800281a:	22c8      	movs	r2, #200	; 0xc8
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3=450;
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <main+0x188>)
 8002820:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
	//  	    CH3_DC -= 10;
	//  	    HAL_Delay(1);
	//  	}

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_Delay(2000);
 8002826:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800282a:	f001 f9d3 	bl	8003bd4 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 800282e:	2205      	movs	r2, #5
 8002830:	492e      	ldr	r1, [pc, #184]	; (80028ec <main+0x18c>)
 8002832:	482f      	ldr	r0, [pc, #188]	; (80028f0 <main+0x190>)
 8002834:	f005 fd64 	bl	8008300 <HAL_UART_Receive_IT>
	sprintf(ConsoleMSG,"IDLE");
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <main+0x194>)
 800283a:	482f      	ldr	r0, [pc, #188]	; (80028f8 <main+0x198>)
 800283c:	f00a ff80 	bl	800d740 <siprintf>
	//State Status
	State=Initializing;
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <main+0x19c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
	Update_Page_0();
 8002846:	f7fe ffbf 	bl	80017c8 <Update_Page_0>
	Draw_Reflow_Curve();
 800284a:	f7ff fcf5 	bl	8002238 <Draw_Reflow_Curve>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 800284e:	2205      	movs	r2, #5
 8002850:	4926      	ldr	r1, [pc, #152]	; (80028ec <main+0x18c>)
 8002852:	4827      	ldr	r0, [pc, #156]	; (80028f0 <main+0x190>)
 8002854:	f005 fd54 	bl	8008300 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	f001 f9bb 	bl	8003bd4 <HAL_Delay>
	volatile uint32_t counter_us_delay=0;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		counter_us_delay++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3301      	adds	r3, #1
 8002866:	607b      	str	r3, [r7, #4]
		 boolflag=__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <main+0x1a0>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <main+0x1a4>)
 8002876:	701a      	strb	r2, [r3, #0]
		 HandleGui();
 8002878:	f7ff f88e 	bl	8001998 <HandleGui>


		 HAL_Delay(1);
 800287c:	2001      	movs	r0, #1
 800287e:	f001 f9a9 	bl	8003bd4 <HAL_Delay>
		 //melody for finished procedure
		 if(	(TRUE==Flags.cooldownComplete) &&	(Finish==State)	)
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <main+0x174>)
 8002884:	795b      	ldrb	r3, [r3, #5]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <main+0x146>
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <main+0x19c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d109      	bne.n	80028a6 <main+0x146>
		 {
			 if(0==songFlag)
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <main+0x1a8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <main+0x146>
			 {
			 sing(2);
 800289a:	2002      	movs	r0, #2
 800289c:	f7fe fbe8 	bl	8001070 <sing>
			 songFlag=1;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <main+0x1a8>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		 {
			 //do nothing
		 }


			 if(strncmp((char *)UART_Recieved_Data, (char *)"p0xxx", 5) == 0)
 80028a6:	2205      	movs	r2, #5
 80028a8:	4918      	ldr	r1, [pc, #96]	; (800290c <main+0x1ac>)
 80028aa:	4810      	ldr	r0, [pc, #64]	; (80028ec <main+0x18c>)
 80028ac:	f00a ff68 	bl	800d780 <strncmp>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1d5      	bne.n	8002862 <main+0x102>
			 {
					  debug = 5;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <main+0x1b0>)
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <main+0x1b4>)
 80028ba:	601a      	str	r2, [r3, #0]
		counter_us_delay++;
 80028bc:	e7d1      	b.n	8002862 <main+0x102>
 80028be:	bf00      	nop
 80028c0:	2000076c 	.word	0x2000076c
 80028c4:	42b40000 	.word	0x42b40000
 80028c8:	43480000 	.word	0x43480000
 80028cc:	437a0000 	.word	0x437a0000
 80028d0:	41f00000 	.word	0x41f00000
 80028d4:	20000b18 	.word	0x20000b18
 80028d8:	20000aac 	.word	0x20000aac
 80028dc:	20000a30 	.word	0x20000a30
 80028e0:	200008c0 	.word	0x200008c0
 80028e4:	20001b08 	.word	0x20001b08
 80028e8:	40000400 	.word	0x40000400
 80028ec:	20000454 	.word	0x20000454
 80028f0:	20000a6c 	.word	0x20000a6c
 80028f4:	080111a8 	.word	0x080111a8
 80028f8:	20000b00 	.word	0x20000b00
 80028fc:	20000a68 	.word	0x20000a68
 8002900:	40013c00 	.word	0x40013c00
 8002904:	20000768 	.word	0x20000768
 8002908:	20000769 	.word	0x20000769
 800290c:	080111b0 	.word	0x080111b0
 8002910:	20000750 	.word	0x20000750
 8002914:	40a00000 	.word	0x40a00000

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	; 0x50
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f00a f9de 	bl	800cce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <SystemClock_Config+0xcc>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <SystemClock_Config+0xcc>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <SystemClock_Config+0xcc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <SystemClock_Config+0xd0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <SystemClock_Config+0xd0>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <SystemClock_Config+0xd0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2302      	movs	r3, #2
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002988:	2304      	movs	r3, #4
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 800298c:	2378      	movs	r3, #120	; 0x78
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002990:	2302      	movs	r3, #2
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002994:	2305      	movs	r3, #5
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fb37 	bl	8006010 <HAL_RCC_OscConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029a8:	f000 fb6e 	bl	8003088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
 80029ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b0:	2302      	movs	r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fd90 	bl	80064f0 <HAL_RCC_ClockConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029d6:	f000 fb57 	bl	8003088 <Error_Handler>
  }
}
 80029da:	bf00      	nop
 80029dc:	3750      	adds	r7, #80	; 0x50
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000

080029ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029f2:	463b      	mov	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <MX_ADC1_Init+0x9c>)
 8002a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MX_ADC1_Init+0xa0>)
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a4c:	f001 f8e6 	bl	8003c1c <HAL_ADC_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002a56:	f000 fb17 	bl	8003088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a6c:	f001 f91a 	bl	8003ca4 <HAL_ADC_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002a76:	f000 fb07 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000b20 	.word	0x20000b20
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <MX_SPI1_Init+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ac4:	2238      	movs	r2, #56	; 0x38
 8002ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002adc:	220a      	movs	r2, #10
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ae0:	4804      	ldr	r0, [pc, #16]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ae2:	f003 ff01 	bl	80068e8 <HAL_SPI_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aec:	f000 facc 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200009cc 	.word	0x200009cc
 8002af8:	40013000 	.word	0x40013000

08002afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a f8ec 	bl	800cce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_TIM1_Init+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002b54:	230a      	movs	r3, #10
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002b64:	230a      	movs	r3, #10
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b70:	f004 fbf4 	bl	800735c <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b7a:	f000 fa85 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b8c:	f005 fa42 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b96:	f000 fa77 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000098c 	.word	0x2000098c
 8002ba8:	40010000 	.word	0x40010000

08002bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bd2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002bd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf0:	4813      	ldr	r0, [pc, #76]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bf2:	f004 fa99 	bl	8007128 <HAL_TIM_Base_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bfc:	f000 fa44 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002c0e:	f004 fe05 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c18:	f000 fa36 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002c2a:	f005 f9f3 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c34:	f000 fa28 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20001b08 	.word	0x20001b08

08002c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	f107 0320 	add.w	r3, r7, #32
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	615a      	str	r2, [r3, #20]
 8002c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <MX_TIM3_Init+0x100>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c7c:	f240 2257 	movw	r2, #599	; 0x257
 8002c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c9c:	4828      	ldr	r0, [pc, #160]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c9e:	f004 fa43 	bl	8007128 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ca8:	f000 f9ee 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4821      	ldr	r0, [pc, #132]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002cba:	f004 fdaf 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002cc4:	f000 f9e0 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc8:	481d      	ldr	r0, [pc, #116]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002cca:	f004 fa7c 	bl	80071c6 <HAL_TIM_PWM_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cd4:	f000 f9d8 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce0:	f107 0320 	add.w	r3, r7, #32
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4816      	ldr	r0, [pc, #88]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002ce8:	f005 f994 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cf2:	f000 f9c9 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	; 0x60
 8002cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2204      	movs	r2, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d0e:	f004 fcbf 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d18:	f000 f9b6 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d24:	f004 fcb4 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d2e:	f000 f9ab 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d32:	4803      	ldr	r0, [pc, #12]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d34:	f000 fb0e 	bl	8003354 <HAL_TIM_MspPostInit>

}
 8002d38:	bf00      	nop
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000900 	.word	0x20000900
 8002d44:	40000400 	.word	0x40000400

08002d48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <MX_TIM5_Init+0x98>)
 8002d68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 59;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d6c:	223b      	movs	r2, #59	; 0x3b
 8002d6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d8c:	f004 f9cc 	bl	8007128 <HAL_TIM_Base_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002d96:	f000 f977 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	4619      	mov	r1, r3
 8002da6:	480d      	ldr	r0, [pc, #52]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002da8:	f004 fd38 	bl	800781c <HAL_TIM_ConfigClockSource>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002db2:	f000 f969 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002db6:	2320      	movs	r3, #32
 8002db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4806      	ldr	r0, [pc, #24]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002dc4:	f005 f926 	bl	8008014 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002dce:	f000 f95b 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200008c0 	.word	0x200008c0
 8002de0:	40000c00 	.word	0x40000c00

08002de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <MX_USART1_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	f005 f98a 	bl	8008134 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e26:	f000 f92f 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000a6c 	.word	0x20000a6c
 8002e34:	40011000 	.word	0x40011000

08002e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a84      	ldr	r2, [pc, #528]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	4b77      	ldr	r3, [pc, #476]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b69      	ldr	r3, [pc, #420]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a68      	ldr	r2, [pc, #416]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	4b62      	ldr	r3, [pc, #392]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a61      	ldr	r2, [pc, #388]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2101      	movs	r1, #1
 8002efa:	485c      	ldr	r0, [pc, #368]	; (800306c <MX_GPIO_Init+0x234>)
 8002efc:	f001 fed6 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2110      	movs	r1, #16
 8002f04:	485a      	ldr	r0, [pc, #360]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f06:	f001 fed1 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002f10:	4858      	ldr	r0, [pc, #352]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f12:	f001 fecb 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIOTestPin_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002f16:	2200      	movs	r2, #0
 8002f18:	f64f 0110 	movw	r1, #63504	; 0xf810
 8002f1c:	4856      	ldr	r0, [pc, #344]	; (8003078 <MX_GPIO_Init+0x240>)
 8002f1e:	f001 fec5 	bl	8004cac <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2120      	movs	r1, #32
 8002f26:	4853      	ldr	r0, [pc, #332]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f28:	f001 fec0 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	484a      	ldr	r0, [pc, #296]	; (800306c <MX_GPIO_Init+0x234>)
 8002f44:	f001 fd16 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <MX_GPIO_Init+0x244>)
 8002f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4845      	ldr	r0, [pc, #276]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f5c:	f001 fd0a 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002f60:	2310      	movs	r3, #16
 8002f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	4619      	mov	r1, r3
 8002f76:	483e      	ldr	r0, [pc, #248]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f78:	f001 fcfc 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4839      	ldr	r0, [pc, #228]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f90:	f001 fcf0 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4835      	ldr	r0, [pc, #212]	; (8003080 <MX_GPIO_Init+0x248>)
 8002faa:	f001 fce3 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : BackFanPin_Pin ShutterPin_Pin AmbiLightPin_Pin */
  GPIO_InitStruct.Pin = BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin;
 8002fae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	482b      	ldr	r0, [pc, #172]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002fc8:	f001 fcd4 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIOTestPin_Pin */
  GPIO_InitStruct.Pin = GPIOTestPin_Pin;
 8002fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOTestPin_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4824      	ldr	r0, [pc, #144]	; (8003078 <MX_GPIO_Init+0x240>)
 8002fe6:	f001 fcc5 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002fea:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002fee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	481d      	ldr	r0, [pc, #116]	; (8003078 <MX_GPIO_Init+0x240>)
 8003004:	f001 fcb6 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_GPIO_Init+0x24c>)
 800300e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003010:	2302      	movs	r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	4814      	ldr	r0, [pc, #80]	; (800306c <MX_GPIO_Init+0x234>)
 800301c:	f001 fcaa 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003020:	2320      	movs	r3, #32
 8003022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4811      	ldr	r0, [pc, #68]	; (8003078 <MX_GPIO_Init+0x240>)
 8003034:	f001 fc9e 	bl	8004974 <HAL_GPIO_Init>

  /*Configure GPIO pin : BuzzerPin_Pin */
  GPIO_InitStruct.Pin = BuzzerPin_Pin;
 8003038:	2320      	movs	r3, #32
 800303a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800303c:	2311      	movs	r3, #17
 800303e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003040:	2301      	movs	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BuzzerPin_GPIO_Port, &GPIO_InitStruct);
 8003048:	f107 031c 	add.w	r3, r7, #28
 800304c:	4619      	mov	r1, r3
 800304e:	4809      	ldr	r0, [pc, #36]	; (8003074 <MX_GPIO_Init+0x23c>)
 8003050:	f001 fc90 	bl	8004974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	2017      	movs	r0, #23
 800305a:	f001 f940 	bl	80042de <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 800305e:	bf00      	nop
 8003060:	3730      	adds	r7, #48	; 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40020800 	.word	0x40020800
 8003070:	40020000 	.word	0x40020000
 8003074:	40020400 	.word	0x40020400
 8003078:	40020c00 	.word	0x40020c00
 800307c:	10120000 	.word	0x10120000
 8003080:	40021000 	.word	0x40021000
 8003084:	10110000 	.word	0x10110000

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_MspInit+0x4c>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_MspInit+0x4c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030d6:	2007      	movs	r0, #7
 80030d8:	f001 f8f6 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_ADC_MspInit+0x7c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d127      	bne.n	800315a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_ADC_MspInit+0x80>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_ADC_MspInit+0x80>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003142:	2306      	movs	r3, #6
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003146:	2303      	movs	r3, #3
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_ADC_MspInit+0x84>)
 8003156:	f001 fc0d 	bl	8004974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800315a:	bf00      	nop
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40012000 	.word	0x40012000
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000

08003170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_SPI_MspInit+0x84>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12b      	bne.n	80031ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80031ca:	23e0      	movs	r3, #224	; 0xe0
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031da:	2305      	movs	r3, #5
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <HAL_SPI_MspInit+0x8c>)
 80031e6:	f001 fbc5 	bl	8004974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40013000 	.word	0x40013000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000

08003200 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_TIM_Encoder_MspInit+0x94>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d134      	bne.n	800328c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003248:	f043 0310 	orr.w	r3, r3, #16
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderPin1_Pin|EncoderPin2_Pin;
 800325a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800325e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800326c:	2301      	movs	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4619      	mov	r1, r3
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_TIM_Encoder_MspInit+0x9c>)
 8003278:	f001 fb7c 	bl	8004974 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 2);
 800327c:	2202      	movs	r2, #2
 800327e:	2100      	movs	r1, #0
 8003280:	2018      	movs	r0, #24
 8003282:	f001 f82c 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003286:	2018      	movs	r0, #24
 8003288:	f001 f845 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40010000 	.word	0x40010000
 8003298:	40023800 	.word	0x40023800
 800329c:	40021000 	.word	0x40021000

080032a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d116      	bne.n	80032e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 80032ce:	2201      	movs	r2, #1
 80032d0:	2100      	movs	r1, #0
 80032d2:	201c      	movs	r0, #28
 80032d4:	f001 f803 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032d8:	201c      	movs	r0, #28
 80032da:	f001 f81c 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032de:	e02e      	b.n	800333e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_TIM_Base_MspInit+0xac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
}
 8003306:	e01a      	b.n	800333e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_TIM_Base_MspInit+0xb0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d115      	bne.n	800333e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 800332e:	2201      	movs	r2, #1
 8003330:	2100      	movs	r1, #0
 8003332:	2032      	movs	r0, #50	; 0x32
 8003334:	f000 ffd3 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003338:	2032      	movs	r0, #50	; 0x32
 800333a:	f000 ffec 	bl	8004316 <HAL_NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40000400 	.word	0x40000400
 8003350:	40000c00 	.word	0x40000c00

08003354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <HAL_TIM_MspPostInit+0x68>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11e      	bne.n	80033b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringPinBank1_Pin|FiringPinBank2_Pin;
 8003392:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	4619      	mov	r1, r3
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <HAL_TIM_MspPostInit+0x70>)
 80033b0:	f001 fae0 	bl	8004974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020800 	.word	0x40020800

080033c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_UART_MspInit+0x94>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d133      	bne.n	8003452 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	6453      	str	r3, [r2, #68]	; 0x44
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_UART_MspInit+0x98>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UART_MspInit+0x98>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_UART_MspInit+0x98>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003422:	23c0      	movs	r3, #192	; 0xc0
 8003424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003432:	2307      	movs	r3, #7
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4619      	mov	r1, r3
 800343c:	4809      	ldr	r0, [pc, #36]	; (8003464 <HAL_UART_MspInit+0x9c>)
 800343e:	f001 fa99 	bl	8004974 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8003442:	2201      	movs	r2, #1
 8003444:	2100      	movs	r1, #0
 8003446:	2025      	movs	r0, #37	; 0x25
 8003448:	f000 ff49 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800344c:	2025      	movs	r0, #37	; 0x25
 800344e:	f000 ff62 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003452:	bf00      	nop
 8003454:	3728      	adds	r7, #40	; 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40011000 	.word	0x40011000
 8003460:	40023800 	.word	0x40023800
 8003464:	40020400 	.word	0x40020400

08003468 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	edd7 7a00 	vldr	s15, [r7]
 800347e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 6a01 	vldr	s13, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edd3 7a03 	vldr	s15, [r3, #12]
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003492:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 6a02 	vldr	s13, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	edd3 7a04 	vldr	s15, [r3, #16]
 80034a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	ee07 3a90 	vmov	s15, r3

  }
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <HardFault_Handler+0x4>

080034f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <MemManage_Handler+0x4>

080034fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fe:	e7fe      	b.n	80034fe <BusFault_Handler+0x4>

08003500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <UsageFault_Handler+0x4>

08003506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003534:	f000 fb2e 	bl	8003b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <EXTI9_5_IRQHandler+0x3c>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <EXTI9_5_IRQHandler+0x30>
	{
		//Test output pin for zero crossing
		HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);
 800354c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003550:	480a      	ldr	r0, [pc, #40]	; (800357c <EXTI9_5_IRQHandler+0x40>)
 8003552:	f001 fbc4 	bl	8004cde <HAL_GPIO_TogglePin>

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003556:	2104      	movs	r1, #4
 8003558:	4809      	ldr	r0, [pc, #36]	; (8003580 <EXTI9_5_IRQHandler+0x44>)
 800355a:	f003 fe69 	bl	8007230 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800355e:	2108      	movs	r1, #8
 8003560:	4807      	ldr	r0, [pc, #28]	; (8003580 <EXTI9_5_IRQHandler+0x44>)
 8003562:	f003 fe65 	bl	8007230 <HAL_TIM_PWM_Start>
		PIDFlag=1;
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <EXTI9_5_IRQHandler+0x48>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800356c:	2040      	movs	r0, #64	; 0x40
 800356e:	f001 fbd1 	bl	8004d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40013c00 	.word	0x40013c00
 800357c:	40020c00 	.word	0x40020c00
 8003580:	20000900 	.word	0x20000900
 8003584:	20000afc 	.word	0x20000afc

08003588 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800358e:	f003 ff77 	bl	8007480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000098c 	.word	0x2000098c

0800359c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	counter3++;
 80035a0:	4ba2      	ldr	r3, [pc, #648]	; (800382c <TIM2_IRQHandler+0x290>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4aa1      	ldr	r2, [pc, #644]	; (800382c <TIM2_IRQHandler+0x290>)
 80035a8:	6013      	str	r3, [r2, #0]
	counter4++;
 80035aa:	4ba1      	ldr	r3, [pc, #644]	; (8003830 <TIM2_IRQHandler+0x294>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a9f      	ldr	r2, [pc, #636]	; (8003830 <TIM2_IRQHandler+0x294>)
 80035b2:	6013      	str	r3, [r2, #0]
	counter5++;
 80035b4:	4b9f      	ldr	r3, [pc, #636]	; (8003834 <TIM2_IRQHandler+0x298>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	4a9e      	ldr	r2, [pc, #632]	; (8003834 <TIM2_IRQHandler+0x298>)
 80035bc:	6013      	str	r3, [r2, #0]
	rate_counter++;
 80035be:	4b9e      	ldr	r3, [pc, #632]	; (8003838 <TIM2_IRQHandler+0x29c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a9c      	ldr	r2, [pc, #624]	; (8003838 <TIM2_IRQHandler+0x29c>)
 80035c6:	6013      	str	r3, [r2, #0]




	if(200==counter3)
 80035c8:	4b98      	ldr	r3, [pc, #608]	; (800382c <TIM2_IRQHandler+0x290>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2bc8      	cmp	r3, #200	; 0xc8
 80035ce:	d133      	bne.n	8003638 <TIM2_IRQHandler+0x9c>
	{
		counter3=0;
 80035d0:	4b96      	ldr	r3, [pc, #600]	; (800382c <TIM2_IRQHandler+0x290>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
		readTemperatureData(p_temperature);
 80035d6:	4b99      	ldr	r3, [pc, #612]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f866 	bl	80026ac <readTemperatureData>
		if(avg_temp==-100)
 80035e0:	4b97      	ldr	r3, [pc, #604]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003844 <TIM2_IRQHandler+0x2a8>
 80035ea:	eef4 7a47 	vcmp.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d104      	bne.n	80035fe <TIM2_IRQHandler+0x62>
		{
			avg_temp=(*p_temperature);
 80035f4:	4b91      	ldr	r3, [pc, #580]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a91      	ldr	r2, [pc, #580]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 80035fc:	6013      	str	r3, [r2, #0]
		}
		else
		{

		}
		avg_temp=alpha*(*p_temperature)+(1-alpha)*avg_temp;
 80035fe:	4b8f      	ldr	r3, [pc, #572]	; (800383c <TIM2_IRQHandler+0x2a0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003848 <TIM2_IRQHandler+0x2ac>
 800360a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360e:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8003848 <TIM2_IRQHandler+0x2ac>
 8003612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003616:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4b85      	ldr	r3, [pc, #532]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
		(*p_temperature)=avg_temp;
 800362e:	4b83      	ldr	r3, [pc, #524]	; (800383c <TIM2_IRQHandler+0x2a0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a83      	ldr	r2, [pc, #524]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
	if(500==counter5)
 8003638:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <TIM2_IRQHandler+0x298>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003640:	f040 80ee 	bne.w	8003820 <TIM2_IRQHandler+0x284>
	{
		if(1==ReflowEnable)
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <TIM2_IRQHandler+0x2b0>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	f040 80dd 	bne.w	8003808 <TIM2_IRQHandler+0x26c>
		{
			//Error
			pid_error =temperature  -(float32_t)ReflowCurve[ReflowIndex];
 800364e:	4b80      	ldr	r3, [pc, #512]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 8003650:	ed93 7a00 	vldr	s14, [r3]
 8003654:	4b7f      	ldr	r3, [pc, #508]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <TIM2_IRQHandler+0x2bc>)
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	4b7c      	ldr	r3, [pc, #496]	; (800385c <TIM2_IRQHandler+0x2c0>)
 800366c:	edc3 7a00 	vstr	s15, [r3]
			//Correction
			PidCorr = arm_pid_f32(&PID, pid_error);
 8003670:	4b7a      	ldr	r3, [pc, #488]	; (800385c <TIM2_IRQHandler+0x2c0>)
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	eeb0 0a67 	vmov.f32	s0, s15
 800367a:	4879      	ldr	r0, [pc, #484]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 800367c:	f7ff fef4 	bl	8003468 <arm_pid_f32>
 8003680:	eef0 7a40 	vmov.f32	s15, s0
 8003684:	4b77      	ldr	r3, [pc, #476]	; (8003864 <TIM2_IRQHandler+0x2c8>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
			PidCorrLim=(uint32_t)PidCorr;
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <TIM2_IRQHandler+0x2c8>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003694:	ee17 2a90 	vmov	r2, s15
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 800369a:	601a      	str	r2, [r3, #0]
			//Correction limits
			if (PidCorrLim > 999)
 800369c:	4b72      	ldr	r3, [pc, #456]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a4:	d303      	bcc.n	80036ae <TIM2_IRQHandler+0x112>
			{
				PIDBank1 = 999;
 80036a6:	4b71      	ldr	r3, [pc, #452]	; (800386c <TIM2_IRQHandler+0x2d0>)
 80036a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036ac:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if(PidCorrLim>450)
 80036ae:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80036b6:	d903      	bls.n	80036c0 <TIM2_IRQHandler+0x124>
			{
				PIDBank2 =450;
 80036b8:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <TIM2_IRQHandler+0x2d4>)
 80036ba:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80036be:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (450>=PidCorrLim)	)
 80036c0:	4b69      	ldr	r3, [pc, #420]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80036c8:	d809      	bhi.n	80036de <TIM2_IRQHandler+0x142>
			{
				PIDBank1 = PidCorrLim;
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <TIM2_IRQHandler+0x2d0>)
 80036d2:	801a      	strh	r2, [r3, #0]
				PIDBank2 = PidCorrLim;
 80036d4:	4b64      	ldr	r3, [pc, #400]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <TIM2_IRQHandler+0x2d4>)
 80036dc:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (999>=PidCorrLim)	)
 80036de:	4b62      	ldr	r3, [pc, #392]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e6:	d204      	bcs.n	80036f2 <TIM2_IRQHandler+0x156>
			{
				PIDBank1 = PidCorrLim;
 80036e8:	4b5f      	ldr	r3, [pc, #380]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b5f      	ldr	r3, [pc, #380]	; (800386c <TIM2_IRQHandler+0x2d0>)
 80036f0:	801a      	strh	r2, [r3, #0]
			else
			{

			}

			TIM3->CCR2=999-PIDBank1;
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <TIM2_IRQHandler+0x2d0>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80036fc:	3303      	adds	r3, #3
 80036fe:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <TIM2_IRQHandler+0x2d8>)
 8003700:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3=450-PIDBank2;
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <TIM2_IRQHandler+0x2d4>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f5c3 72e1 	rsb	r2, r3, #450	; 0x1c2
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <TIM2_IRQHandler+0x2d8>)
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c



			if(	(ReflowIndex >= (PhaseIndex[0]+10)	)	&&	(ReflowIndex < PhaseIndex[1])	 )
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	3309      	adds	r3, #9
 8003716:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	4293      	cmp	r3, r2
 800371c:	da0f      	bge.n	800373e <TIM2_IRQHandler+0x1a2>
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 8003720:	885a      	ldrh	r2, [r3, #2]
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d909      	bls.n	800373e <TIM2_IRQHandler+0x1a2>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 800372a:	4954      	ldr	r1, [pc, #336]	; (800387c <TIM2_IRQHandler+0x2e0>)
 800372c:	4854      	ldr	r0, [pc, #336]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 800372e:	f00a f807 	bl	800d740 <siprintf>
				Flags.initComplete=TRUE;
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 8003734:	2201      	movs	r2, #1
 8003736:	705a      	strb	r2, [r3, #1]
				State=Preheat;
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[1])
 800373e:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 8003740:	885a      	ldrh	r2, [r3, #2]
 8003742:	4b44      	ldr	r3, [pc, #272]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d109      	bne.n	800375e <TIM2_IRQHandler+0x1c2>
			{
				sprintf(ConsoleMSG,"SOAK");
 800374a:	4950      	ldr	r1, [pc, #320]	; (800388c <TIM2_IRQHandler+0x2f0>)
 800374c:	484c      	ldr	r0, [pc, #304]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 800374e:	f009 fff7 	bl	800d740 <siprintf>
				Flags.preheatComplete=TRUE;
 8003752:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 8003754:	2201      	movs	r2, #1
 8003756:	709a      	strb	r2, [r3, #2]
				State=Soak;
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[2])
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 8003760:	889a      	ldrh	r2, [r3, #4]
 8003762:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d10c      	bne.n	8003784 <TIM2_IRQHandler+0x1e8>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 800376a:	4944      	ldr	r1, [pc, #272]	; (800387c <TIM2_IRQHandler+0x2e0>)
 800376c:	4844      	ldr	r0, [pc, #272]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 800376e:	f009 ffe7 	bl	800d740 <siprintf>
				Flags.preheatComplete=FALSE;
 8003772:	4b44      	ldr	r3, [pc, #272]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 8003774:	2200      	movs	r2, #0
 8003776:	709a      	strb	r2, [r3, #2]
				Flags.soakComplete=TRUE;
 8003778:	4b42      	ldr	r3, [pc, #264]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 800377a:	2201      	movs	r2, #1
 800377c:	70da      	strb	r2, [r3, #3]
				State=Preheat;
 800377e:	4b42      	ldr	r3, [pc, #264]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[3])
 8003784:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 8003786:	88da      	ldrh	r2, [r3, #6]
 8003788:	4b32      	ldr	r3, [pc, #200]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d109      	bne.n	80037a4 <TIM2_IRQHandler+0x208>
			{
				sprintf(ConsoleMSG,"REFLOW");
 8003790:	493f      	ldr	r1, [pc, #252]	; (8003890 <TIM2_IRQHandler+0x2f4>)
 8003792:	483b      	ldr	r0, [pc, #236]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 8003794:	f009 ffd4 	bl	800d740 <siprintf>
				Flags.preheatComplete=TRUE;
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 800379a:	2201      	movs	r2, #1
 800379c:	709a      	strb	r2, [r3, #2]
				State=Reflow;
 800379e:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 80037a0:	2203      	movs	r2, #3
 80037a2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[4])
 80037a4:	4b34      	ldr	r3, [pc, #208]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80037a6:	891a      	ldrh	r2, [r3, #8]
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d114      	bne.n	80037da <TIM2_IRQHandler+0x23e>
			{
				HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80037b0:	2017      	movs	r0, #23
 80037b2:	f000 fdbe 	bl	8004332 <HAL_NVIC_DisableIRQ>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80037b6:	2104      	movs	r1, #4
 80037b8:	4836      	ldr	r0, [pc, #216]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 80037ba:	f003 fd77 	bl	80072ac <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80037be:	2108      	movs	r1, #8
 80037c0:	4834      	ldr	r0, [pc, #208]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 80037c2:	f003 fd73 	bl	80072ac <HAL_TIM_PWM_Stop>
				sprintf(ConsoleMSG,"COOL DOWN");
 80037c6:	4934      	ldr	r1, [pc, #208]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 80037c8:	482d      	ldr	r0, [pc, #180]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 80037ca:	f009 ffb9 	bl	800d740 <siprintf>
				Flags.reflowComplete=TRUE;
 80037ce:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	711a      	strb	r2, [r3, #4]
				State=Cooldown;
 80037d4:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 80037d6:	2204      	movs	r2, #4
 80037d8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if (PhaseIndex[5]==ReflowIndex)
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80037dc:	895a      	ldrh	r2, [r3, #10]
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d113      	bne.n	800380e <TIM2_IRQHandler+0x272>
			{
				sprintf(ConsoleMSG,"FINISHED");
 80037e6:	492d      	ldr	r1, [pc, #180]	; (800389c <TIM2_IRQHandler+0x300>)
 80037e8:	4825      	ldr	r0, [pc, #148]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 80037ea:	f009 ffa9 	bl	800d740 <siprintf>
				Flags.cooldownComplete=TRUE;
 80037ee:	4b25      	ldr	r3, [pc, #148]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	715a      	strb	r2, [r3, #5]
				State=Finish;
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 80037f6:	2205      	movs	r2, #5
 80037f8:	701a      	strb	r2, [r3, #0]
				ReflowEnable = 0;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <TIM2_IRQHandler+0x2b0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
				PIDFlag=0;
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <TIM2_IRQHandler+0x304>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e002      	b.n	800380e <TIM2_IRQHandler+0x272>
			}

		}
		else
		{
			ReflowIndex = 0;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
		}

		counter5=0;
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <TIM2_IRQHandler+0x298>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
		ReflowIndex++;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <TIM2_IRQHandler+0x2b8>)
 800381e:	801a      	strh	r2, [r3, #0]

	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003820:	4820      	ldr	r0, [pc, #128]	; (80038a4 <TIM2_IRQHandler+0x308>)
 8003822:	f003 fe2d 	bl	8007480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000798 	.word	0x20000798
 8003830:	2000079c 	.word	0x2000079c
 8003834:	200007a0 	.word	0x200007a0
 8003838:	20001b50 	.word	0x20001b50
 800383c:	20000460 	.word	0x20000460
 8003840:	2000045c 	.word	0x2000045c
 8003844:	c2c80000 	.word	0xc2c80000
 8003848:	3dcccccd 	.word	0x3dcccccd
 800384c:	2000074c 	.word	0x2000074c
 8003850:	20000764 	.word	0x20000764
 8003854:	200007a4 	.word	0x200007a4
 8003858:	20000b68 	.word	0x20000b68
 800385c:	20001b58 	.word	0x20001b58
 8003860:	20000a30 	.word	0x20000a30
 8003864:	20001b54 	.word	0x20001b54
 8003868:	20001b48 	.word	0x20001b48
 800386c:	20001b64 	.word	0x20001b64
 8003870:	20001b68 	.word	0x20001b68
 8003874:	40000400 	.word	0x40000400
 8003878:	20000758 	.word	0x20000758
 800387c:	080111b8 	.word	0x080111b8
 8003880:	20000b00 	.word	0x20000b00
 8003884:	20000b18 	.word	0x20000b18
 8003888:	20000a68 	.word	0x20000a68
 800388c:	080111c0 	.word	0x080111c0
 8003890:	080111c8 	.word	0x080111c8
 8003894:	20000900 	.word	0x20000900
 8003898:	080111d0 	.word	0x080111d0
 800389c:	080111dc 	.word	0x080111dc
 80038a0:	20000afc 	.word	0x20000afc
 80038a4:	20001b08 	.word	0x20001b08

080038a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <USART1_IRQHandler+0x10>)
 80038ae:	f004 fd7d 	bl	80083ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000a6c 	.word	0x20000a6c

080038bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM5_IRQHandler+0x10>)
 80038c2:	f003 fddd 	bl	8007480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200008c0 	.word	0x200008c0

080038d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <OTG_FS_IRQHandler+0x10>)
 80038d6:	f001 fbc9 	bl	800506c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20002060 	.word	0x20002060

080038e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	return 1;
 80038e8:	2301      	movs	r3, #1
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <_kill>:

int _kill(int pid, int sig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038fe:	f009 f9b9 	bl	800cc74 <__errno>
 8003902:	4603      	mov	r3, r0
 8003904:	2216      	movs	r2, #22
 8003906:	601a      	str	r2, [r3, #0]
	return -1;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_exit>:

void _exit (int status)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffe7 	bl	80038f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003926:	e7fe      	b.n	8003926 <_exit+0x12>

08003928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e00a      	b.n	8003950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800393a:	f3af 8000 	nop.w
 800393e:	4601      	mov	r1, r0
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	60ba      	str	r2, [r7, #8]
 8003946:	b2ca      	uxtb	r2, r1
 8003948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3301      	adds	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	dbf0      	blt.n	800393a <_read+0x12>
	}

return len;
 8003958:	687b      	ldr	r3, [r7, #4]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	e009      	b.n	8003988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	60ba      	str	r2, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbf1      	blt.n	8003974 <_write+0x12>
	}
	return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_close>:

int _close(int file)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return -1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c2:	605a      	str	r2, [r3, #4]
	return 0;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_isatty>:

int _isatty(int file)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	return 1;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <_sbrk+0x5c>)
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <_sbrk+0x60>)
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a18:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <_sbrk+0x64>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <_sbrk+0x64>)
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <_sbrk+0x68>)
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <_sbrk+0x64>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d207      	bcs.n	8003a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a34:	f009 f91e 	bl	800cc74 <__errno>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e009      	b.n	8003a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <_sbrk+0x64>)
 8003a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20020000 	.word	0x20020000
 8003a64:	00000400 	.word	0x00000400
 8003a68:	200007a8 	.word	0x200007a8
 8003a6c:	20002478 	.word	0x20002478

08003a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <SystemInit+0x28>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <SystemInit+0x28>)
 8003a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <SystemInit+0x28>)
 8003a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aa2:	e003      	b.n	8003aac <LoopCopyDataInit>

08003aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aaa:	3104      	adds	r1, #4

08003aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003aac:	480b      	ldr	r0, [pc, #44]	; (8003adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ab4:	d3f6      	bcc.n	8003aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ab8:	e002      	b.n	8003ac0 <LoopFillZerobss>

08003aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003abc:	f842 3b04 	str.w	r3, [r2], #4

08003ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ac4:	d3f9      	bcc.n	8003aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ac6:	f7ff ffd3 	bl	8003a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aca:	f009 f8d9 	bl	800cc80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ace:	f7fe fe47 	bl	8002760 <main>
  bx  lr    
 8003ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ad8:	0801176c 	.word	0x0801176c
  ldr  r0, =_sdata
 8003adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ae0:	20000714 	.word	0x20000714
  ldr  r2, =_sbss
 8003ae4:	20000714 	.word	0x20000714
  ldr  r3, = _ebss
 8003ae8:	20002478 	.word	0x20002478

08003aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC_IRQHandler>
	...

08003af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af4:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_Init+0x40>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0d      	ldr	r2, [pc, #52]	; (8003b30 <HAL_Init+0x40>)
 8003afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_Init+0x40>)
 8003b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_Init+0x40>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f000 fbd5 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f000 f808 	bl	8003b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b24:	f7ff fab8 	bl	8003098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00

08003b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_InitTick+0x54>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_InitTick+0x58>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fbfb 	bl	800434e <HAL_SYSTICK_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00e      	b.n	8003b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d80a      	bhi.n	8003b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f000 fbb5 	bl	80042de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <HAL_InitTick+0x5c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000464 	.word	0x20000464
 8003b8c:	2000046c 	.word	0x2000046c
 8003b90:	20000468 	.word	0x20000468

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000046c 	.word	0x2000046c
 8003bb8:	20001b6c 	.word	0x20001b6c

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20001b6c 	.word	0x20001b6c

08003bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff ffee 	bl	8003bbc <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d005      	beq.n	8003bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_Delay+0x44>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bfa:	bf00      	nop
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8f7      	bhi.n	8003bfc <HAL_Delay+0x28>
  {
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2000046c 	.word	0x2000046c

08003c1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e033      	b.n	8003c9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fa54 	bl	80030e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c62:	f023 0302 	bic.w	r3, r3, #2
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f93a 	bl	8003ee8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
 8003c8a:	e001      	b.n	8003c90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1c>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e105      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x228>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b09      	cmp	r3, #9
 8003cce:	d925      	bls.n	8003d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3b1e      	subs	r3, #30
 8003ce6:	2207      	movs	r2, #7
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43da      	mvns	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68d9      	ldr	r1, [r3, #12]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4618      	mov	r0, r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4403      	add	r3, r0
 8003d0e:	3b1e      	subs	r3, #30
 8003d10:	409a      	lsls	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e022      	b.n	8003d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6919      	ldr	r1, [r3, #16]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	2207      	movs	r2, #7
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6919      	ldr	r1, [r3, #16]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4403      	add	r3, r0
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d824      	bhi.n	8003db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b05      	subs	r3, #5
 8003d7c:	221f      	movs	r2, #31
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	400a      	ands	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	3b05      	subs	r3, #5
 8003da6:	fa00 f203 	lsl.w	r2, r0, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
 8003db2:	e04c      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d824      	bhi.n	8003e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b23      	subs	r3, #35	; 0x23
 8003dce:	221f      	movs	r2, #31
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	400a      	ands	r2, r1
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	3b23      	subs	r3, #35	; 0x23
 8003df8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
 8003e04:	e023      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	3b41      	subs	r3, #65	; 0x41
 8003e18:	221f      	movs	r2, #31
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4618      	mov	r0, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b41      	subs	r3, #65	; 0x41
 8003e42:	fa00 f203 	lsl.w	r2, r0, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <HAL_ADC_ConfigChannel+0x234>)
 8003e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_ADC_ConfigChannel+0x238>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d109      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x1cc>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b12      	cmp	r3, #18
 8003e62:	d105      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_ADC_ConfigChannel+0x238>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d123      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x21e>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d003      	beq.n	8003e8a <HAL_ADC_ConfigChannel+0x1e6>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b11      	cmp	r3, #17
 8003e88:	d11b      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d111      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_ADC_ConfigChannel+0x23c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a10      	ldr	r2, [pc, #64]	; (8003ee4 <HAL_ADC_ConfigChannel+0x240>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	0c9a      	lsrs	r2, r3, #18
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003eb4:	e002      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f9      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40012300 	.word	0x40012300
 8003edc:	40012000 	.word	0x40012000
 8003ee0:	20000464 	.word	0x20000464
 8003ee4:	431bde83 	.word	0x431bde83

08003ee8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef0:	4b79      	ldr	r3, [pc, #484]	; (80040d8 <ADC_Init+0x1f0>)
 8003ef2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	4a58      	ldr	r2, [pc, #352]	; (80040dc <ADC_Init+0x1f4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d022      	beq.n	8003fc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6899      	ldr	r1, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e00f      	b.n	8003fe6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0202 	bic.w	r2, r2, #2
 8003ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7e1b      	ldrb	r3, [r3, #24]
 8004000:	005a      	lsls	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004022:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004032:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	3b01      	subs	r3, #1
 8004040:	035a      	lsls	r2, r3, #13
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	e007      	b.n	800405c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	3b01      	subs	r3, #1
 8004078:	051a      	lsls	r2, r3, #20
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800409e:	025a      	lsls	r2, r3, #9
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	029a      	lsls	r2, r3, #10
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40012300 	.word	0x40012300
 80040dc:	0f000001 	.word	0x0f000001

080040e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <__NVIC_SetPriorityGrouping+0x44>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040fc:	4013      	ands	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <__NVIC_SetPriorityGrouping+0x44>)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	60d3      	str	r3, [r2, #12]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <__NVIC_GetPriorityGrouping+0x18>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0307 	and.w	r3, r3, #7
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db0b      	blt.n	800416e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <__NVIC_EnableIRQ+0x38>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2001      	movs	r0, #1
 8004166:	fa00 f202 	lsl.w	r2, r0, r2
 800416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000e100 	.word	0xe000e100

08004180 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db12      	blt.n	80041b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	490a      	ldr	r1, [pc, #40]	; (80041c4 <__NVIC_DisableIRQ+0x44>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	3320      	adds	r3, #32
 80041a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041ac:	f3bf 8f4f 	dsb	sy
}
 80041b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041b2:	f3bf 8f6f 	isb	sy
}
 80041b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff8e 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff05 	bl	80040e0 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff1a 	bl	8004128 <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff8e 	bl	800421c <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff0d 	bl	8004144 <__NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff1d 	bl	8004180 <__NVIC_DisableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff94 	bl	8004284 <SysTick_Config>
 800435c:	4603      	mov	r3, r0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d004      	beq.n	8004384 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00c      	b.n	800439e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2205      	movs	r2, #5
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_FLASH_Program+0xa0>)
 80043c0:	7e1b      	ldrb	r3, [r3, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_FLASH_Program+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e03b      	b.n	8004442 <HAL_FLASH_Program+0x96>
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_FLASH_Program+0xa0>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043d4:	f000 f87c 	bl	80044d0 <FLASH_WaitForLastOperation>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d12b      	bne.n	800443a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80043e8:	783b      	ldrb	r3, [r7, #0]
 80043ea:	4619      	mov	r1, r3
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f000 f927 	bl	8004640 <FLASH_Program_Byte>
 80043f2:	e016      	b.n	8004422 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80043fa:	883b      	ldrh	r3, [r7, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	68b8      	ldr	r0, [r7, #8]
 8004400:	f000 f8fa 	bl	80045f8 <FLASH_Program_HalfWord>
 8004404:	e00d      	b.n	8004422 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d105      	bne.n	8004418 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f000 f8cf 	bl	80045b4 <FLASH_Program_Word>
 8004416:	e004      	b.n	8004422 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441c:	68b8      	ldr	r0, [r7, #8]
 800441e:	f000 f897 	bl	8004550 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004422:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004426:	f000 f853 	bl	80044d0 <FLASH_WaitForLastOperation>
 800442a:	4603      	mov	r3, r0
 800442c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_FLASH_Program+0xa4>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_FLASH_Program+0xa4>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800443a:	4b04      	ldr	r3, [pc, #16]	; (800444c <HAL_FLASH_Program+0xa0>)
 800443c:	2200      	movs	r2, #0
 800443e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20001b70 	.word	0x20001b70
 8004450:	40023c00 	.word	0x40023c00

08004454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_FLASH_Unlock+0x38>)
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	da0b      	bge.n	800447e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_FLASH_Unlock+0x38>)
 8004468:	4a09      	ldr	r2, [pc, #36]	; (8004490 <HAL_FLASH_Unlock+0x3c>)
 800446a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_FLASH_Unlock+0x38>)
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_FLASH_Unlock+0x40>)
 8004470:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_FLASH_Unlock+0x38>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da01      	bge.n	800447e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800447e:	79fb      	ldrb	r3, [r7, #7]
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40023c00 	.word	0x40023c00
 8004490:	45670123 	.word	0x45670123
 8004494:	cdef89ab 	.word	0xcdef89ab

08004498 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_FLASH_Lock+0x1c>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <HAL_FLASH_Lock+0x1c>)
 80044a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40023c00 	.word	0x40023c00

080044b8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_FLASH_GetError+0x14>)
 80044be:	69db      	ldr	r3, [r3, #28]
}  
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20001b70 	.word	0x20001b70

080044d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <FLASH_WaitForLastOperation+0x78>)
 80044de:	2200      	movs	r2, #0
 80044e0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80044e2:	f7ff fb6b 	bl	8003bbc <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80044e8:	e010      	b.n	800450c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d00c      	beq.n	800450c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <FLASH_WaitForLastOperation+0x38>
 80044f8:	f7ff fb60 	bl	8003bbc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d201      	bcs.n	800450c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e019      	b.n	8004540 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <FLASH_WaitForLastOperation+0x7c>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e8      	bne.n	80044ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <FLASH_WaitForLastOperation+0x7c>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <FLASH_WaitForLastOperation+0x7c>)
 8004526:	2201      	movs	r2, #1
 8004528:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <FLASH_WaitForLastOperation+0x7c>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004536:	f000 f8a5 	bl	8004684 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
  
}  
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20001b70 	.word	0x20001b70
 800454c:	40023c00 	.word	0x40023c00

08004550 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 800456e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <FLASH_Program_DoubleWord+0x60>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004586:	f3bf 8f6f 	isb	sy
}
 800458a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800458c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	000a      	movs	r2, r1
 800459a:	2300      	movs	r3, #0
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	3104      	adds	r1, #4
 80045a0:	4613      	mov	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40023c00 	.word	0x40023c00

080045b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <FLASH_Program_Word+0x40>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	601a      	str	r2, [r3, #0]
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40023c00 	.word	0x40023c00

080045f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <FLASH_Program_HalfWord+0x44>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <FLASH_Program_HalfWord+0x44>)
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <FLASH_Program_HalfWord+0x44>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <FLASH_Program_HalfWord+0x44>)
 8004616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <FLASH_Program_HalfWord+0x44>)
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	4a06      	ldr	r2, [pc, #24]	; (800463c <FLASH_Program_HalfWord+0x44>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	801a      	strh	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023c00 	.word	0x40023c00

08004640 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <FLASH_Program_Byte+0x40>)
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	4a0b      	ldr	r2, [pc, #44]	; (8004680 <FLASH_Program_Byte+0x40>)
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <FLASH_Program_Byte+0x40>)
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <FLASH_Program_Byte+0x40>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <FLASH_Program_Byte+0x40>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4a06      	ldr	r2, [pc, #24]	; (8004680 <FLASH_Program_Byte+0x40>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	701a      	strb	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023c00 	.word	0x40023c00

08004684 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <FLASH_SetErrorCode+0xa8>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	4a23      	ldr	r2, [pc, #140]	; (800472c <FLASH_SetErrorCode+0xa8>)
 800469e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046a2:	2210      	movs	r2, #16
 80046a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f043 0308 	orr.w	r3, r3, #8
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046c0:	2220      	movs	r2, #32
 80046c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f043 0302 	orr.w	r3, r3, #2
 80046f6:	4a0d      	ldr	r2, [pc, #52]	; (800472c <FLASH_SetErrorCode+0xa8>)
 80046f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <FLASH_SetErrorCode+0xa8>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f043 0320 	orr.w	r3, r3, #32
 8004714:	4a05      	ldr	r2, [pc, #20]	; (800472c <FLASH_SetErrorCode+0xa8>)
 8004716:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <FLASH_SetErrorCode+0xa4>)
 800471a:	2202      	movs	r2, #2
 800471c:	60da      	str	r2, [r3, #12]
  }
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40023c00 	.word	0x40023c00
 800472c:	20001b70 	.word	0x20001b70

08004730 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_FLASHEx_Erase+0xd8>)
 8004744:	7e1b      	ldrb	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_FLASHEx_Erase+0x1e>
 800474a:	2302      	movs	r3, #2
 800474c:	e058      	b.n	8004800 <HAL_FLASHEx_Erase+0xd0>
 800474e:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_FLASHEx_Erase+0xd8>)
 8004750:	2201      	movs	r2, #1
 8004752:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004758:	f7ff feba 	bl	80044d0 <FLASH_WaitForLastOperation>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d148      	bne.n	80047f8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f04f 32ff 	mov.w	r2, #4294967295
 800476c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d115      	bne.n	80047a2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 f844 	bl	8004810 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800478c:	f7ff fea0 	bl	80044d0 <FLASH_WaitForLastOperation>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_FLASHEx_Erase+0xdc>)
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_FLASHEx_Erase+0xdc>)
 800479a:	f023 0304 	bic.w	r3, r3, #4
 800479e:	6113      	str	r3, [r2, #16]
 80047a0:	e028      	b.n	80047f4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	e01c      	b.n	80047e4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	68b8      	ldr	r0, [r7, #8]
 80047b4:	f000 f850 	bl	8004858 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047bc:	f7ff fe88 	bl	80044d0 <FLASH_WaitForLastOperation>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_FLASHEx_Erase+0xdc>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4a10      	ldr	r2, [pc, #64]	; (800480c <HAL_FLASHEx_Erase+0xdc>)
 80047ca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80047ce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	601a      	str	r2, [r3, #0]
          break;
 80047dc:	e00a      	b.n	80047f4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3da      	bcc.n	80047aa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80047f4:	f000 f878 	bl	80048e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <HAL_FLASHEx_Erase+0xd8>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	761a      	strb	r2, [r3, #24]

  return status;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20001b70 	.word	0x20001b70
 800480c:	40023c00 	.word	0x40023c00

08004810 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	6039      	str	r1, [r7, #0]
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <FLASH_MassErase+0x44>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <FLASH_MassErase+0x44>)
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <FLASH_MassErase+0x44>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <FLASH_MassErase+0x44>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <FLASH_MassErase+0x44>)
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	4313      	orrs	r3, r2
 800483e:	4a05      	ldr	r2, [pc, #20]	; (8004854 <FLASH_MassErase+0x44>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6113      	str	r3, [r2, #16]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023c00 	.word	0x40023c00

08004858 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e010      	b.n	8004896 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d103      	bne.n	8004882 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800487a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e009      	b.n	8004896 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d103      	bne.n	8004890 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004894:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	490f      	ldr	r1, [pc, #60]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	4a0c      	ldr	r2, [pc, #48]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <FLASH_Erase_Sector+0x8c>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	6113      	str	r3, [r2, #16]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40023c00 	.word	0x40023c00

080048e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80048ec:	4b20      	ldr	r3, [pc, #128]	; (8004970 <FLASH_FlushCaches+0x88>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <FLASH_FlushCaches+0x88>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <FLASH_FlushCaches+0x88>)
 80048fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004902:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <FLASH_FlushCaches+0x88>)
 800490a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a16      	ldr	r2, [pc, #88]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800491a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <FLASH_FlushCaches+0x88>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004926:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <FLASH_FlushCaches+0x88>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d017      	beq.n	8004964 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <FLASH_FlushCaches+0x88>)
 800493a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <FLASH_FlushCaches+0x88>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a07      	ldr	r2, [pc, #28]	; (8004970 <FLASH_FlushCaches+0x88>)
 8004952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004956:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <FLASH_FlushCaches+0x88>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <FLASH_FlushCaches+0x88>)
 800495e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004962:	6013      	str	r3, [r2, #0]
  }
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40023c00 	.word	0x40023c00

08004974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e16b      	b.n	8004c68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004990:	2201      	movs	r2, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 815a 	bne.w	8004c62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d00b      	beq.n	80049ce <HAL_GPIO_Init+0x5a>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c2:	2b11      	cmp	r3, #17
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b12      	cmp	r3, #18
 80049cc:	d130      	bne.n	8004a30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2203      	movs	r2, #3
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a04:	2201      	movs	r2, #1
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 0201 	and.w	r2, r3, #1
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0xfc>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b12      	cmp	r3, #18
 8004a6e:	d123      	bne.n	8004ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	220f      	movs	r2, #15
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	69b9      	ldr	r1, [r7, #24]
 8004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80b4 	beq.w	8004c62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <HAL_GPIO_Init+0x30c>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4a5f      	ldr	r2, [pc, #380]	; (8004c80 <HAL_GPIO_Init+0x30c>)
 8004b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b08:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_GPIO_Init+0x30c>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b16:	4a5b      	ldr	r2, [pc, #364]	; (8004c84 <HAL_GPIO_Init+0x310>)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	220f      	movs	r2, #15
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a52      	ldr	r2, [pc, #328]	; (8004c88 <HAL_GPIO_Init+0x314>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d02b      	beq.n	8004b9a <HAL_GPIO_Init+0x226>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a51      	ldr	r2, [pc, #324]	; (8004c8c <HAL_GPIO_Init+0x318>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d025      	beq.n	8004b96 <HAL_GPIO_Init+0x222>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a50      	ldr	r2, [pc, #320]	; (8004c90 <HAL_GPIO_Init+0x31c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01f      	beq.n	8004b92 <HAL_GPIO_Init+0x21e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4f      	ldr	r2, [pc, #316]	; (8004c94 <HAL_GPIO_Init+0x320>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d019      	beq.n	8004b8e <HAL_GPIO_Init+0x21a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a4e      	ldr	r2, [pc, #312]	; (8004c98 <HAL_GPIO_Init+0x324>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <HAL_GPIO_Init+0x216>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_GPIO_Init+0x328>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00d      	beq.n	8004b86 <HAL_GPIO_Init+0x212>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4c      	ldr	r2, [pc, #304]	; (8004ca0 <HAL_GPIO_Init+0x32c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <HAL_GPIO_Init+0x20e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_GPIO_Init+0x330>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_GPIO_Init+0x20a>
 8004b7a:	2307      	movs	r3, #7
 8004b7c:	e00e      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	e00c      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b82:	2306      	movs	r3, #6
 8004b84:	e00a      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b86:	2305      	movs	r3, #5
 8004b88:	e008      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e006      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e004      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_GPIO_Init+0x228>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	f002 0203 	and.w	r2, r2, #3
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	4093      	lsls	r3, r2
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bac:	4935      	ldr	r1, [pc, #212]	; (8004c84 <HAL_GPIO_Init+0x310>)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bba:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bde:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004be4:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c08:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c5c:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <HAL_GPIO_Init+0x334>)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	f67f ae90 	bls.w	8004990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	; 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40013800 	.word	0x40013800
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	40020800 	.word	0x40020800
 8004c94:	40020c00 	.word	0x40020c00
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40021400 	.word	0x40021400
 8004ca0:	40021800 	.word	0x40021800
 8004ca4:	40021c00 	.word	0x40021c00
 8004ca8:	40013c00 	.word	0x40013c00

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	887b      	ldrh	r3, [r7, #2]
 8004cf0:	401a      	ands	r2, r3
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d104      	bne.n	8004d02 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	041a      	lsls	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d00:	e002      	b.n	8004d08 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	619a      	str	r2, [r3, #24]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d2a:	4a05      	ldr	r2, [pc, #20]	; (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f806 	bl	8004d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40013c00 	.word	0x40013c00

08004d44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5c:	b08f      	sub	sp, #60	; 0x3c
 8004d5e:	af0a      	add	r7, sp, #40	; 0x28
 8004d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e10f      	b.n	8004f8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f007 fc6c 	bl	800c664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f004 fa2f 	bl	800920e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	687e      	ldr	r6, [r7, #4]
 8004db8:	466d      	mov	r5, sp
 8004dba:	f106 0410 	add.w	r4, r6, #16
 8004dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dce:	1d33      	adds	r3, r6, #4
 8004dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd2:	6838      	ldr	r0, [r7, #0]
 8004dd4:	f004 f906 	bl	8008fe4 <USB_CoreInit>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0d0      	b.n	8004f8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f004 fa1d 	bl	8009230 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e04a      	b.n	8004e92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	333d      	adds	r3, #61	; 0x3d
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	333c      	adds	r3, #60	; 0x3c
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	b298      	uxth	r0, r3
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3342      	adds	r3, #66	; 0x42
 8004e38:	4602      	mov	r2, r0
 8004e3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	333f      	adds	r3, #63	; 0x3f
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3344      	adds	r3, #68	; 0x44
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3348      	adds	r3, #72	; 0x48
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	3350      	adds	r3, #80	; 0x50
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
 8004e92:	7bfa      	ldrb	r2, [r7, #15]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3af      	bcc.n	8004dfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e044      	b.n	8004f2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d3b5      	bcc.n	8004ea2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	687e      	ldr	r6, [r7, #4]
 8004f3e:	466d      	mov	r5, sp
 8004f40:	f106 0410 	add.w	r4, r6, #16
 8004f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f50:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f54:	1d33      	adds	r3, r6, #4
 8004f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f58:	6838      	ldr	r0, [r7, #0]
 8004f5a:	f004 f993 	bl	8009284 <USB_DevInit>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e00d      	b.n	8004f8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f005 f8ff 	bl	800a188 <USB_DevDisconnect>

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_PCD_Start+0x1c>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e020      	b.n	8004ff2 <HAL_PCD_Start+0x5e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d109      	bne.n	8004fd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d005      	beq.n	8004fd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f004 f907 	bl	80091ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f005 f8af 	bl	800a146 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_PCD_Stop+0x1c>
 8005012:	2302      	movs	r3, #2
 8005014:	e026      	b.n	8005064 <HAL_PCD_Stop+0x6a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f004 f8f3 	bl	800920e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f005 f8ab 	bl	800a188 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2110      	movs	r1, #16
 8005038:	4618      	mov	r0, r3
 800503a:	f004 fa87 	bl	800954c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b01      	cmp	r3, #1
 8005044:	d109      	bne.n	800505a <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800504a:	2b01      	cmp	r3, #1
 800504c:	d005      	beq.n	800505a <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b08d      	sub	sp, #52	; 0x34
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f005 f934 	bl	800a2f0 <USB_GetMode>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 839d 	bne.w	80057ca <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f005 f898 	bl	800a1ca <USB_ReadInterrupts>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8393 	beq.w	80057c8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f005 f88f 	bl	800a1ca <USB_ReadInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d107      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f002 0202 	and.w	r2, r2, #2
 80050c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f005 f87d 	bl	800a1ca <USB_ReadInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d161      	bne.n	800519e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0210 	bic.w	r2, r2, #16
 80050e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 020f 	and.w	r2, r3, #15
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	3304      	adds	r3, #4
 8005108:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	0c5b      	lsrs	r3, r3, #17
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2b02      	cmp	r3, #2
 8005114:	d124      	bne.n	8005160 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d035      	beq.n	800518e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800512c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	6a38      	ldr	r0, [r7, #32]
 8005136:	f004 fee3 	bl	8009f00 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005146:	441a      	add	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005158:	441a      	add	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e016      	b.n	800518e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	0c5b      	lsrs	r3, r3, #17
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	2b06      	cmp	r3, #6
 800516a:	d110      	bne.n	800518e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005172:	2208      	movs	r2, #8
 8005174:	4619      	mov	r1, r3
 8005176:	6a38      	ldr	r0, [r7, #32]
 8005178:	f004 fec2 	bl	8009f00 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005188:	441a      	add	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0210 	orr.w	r2, r2, #16
 800519c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f005 f811 	bl	800a1ca <USB_ReadInterrupts>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051b2:	d16e      	bne.n	8005292 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f005 f817 	bl	800a1f0 <USB_ReadDevAllOutEpInterrupt>
 80051c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051c4:	e062      	b.n	800528c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d057      	beq.n	8005280 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f005 f83c 	bl	800a258 <USB_ReadDevOutEPInterrupt>
 80051e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2301      	movs	r3, #1
 80051fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fd4f 	bl	8005ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2308      	movs	r3, #8
 8005220:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fe49 	bl	8005ebc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	2310      	movs	r3, #16
 8005244:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	2320      	movs	r3, #32
 8005260:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800527e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	3301      	adds	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d199      	bne.n	80051c6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f004 ff97 	bl	800a1ca <USB_ReadInterrupts>
 800529c:	4603      	mov	r3, r0
 800529e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052a6:	f040 80c0 	bne.w	800542a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f004 ffb8 	bl	800a224 <USB_ReadDevAllInEpInterrupt>
 80052b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052ba:	e0b2      	b.n	8005422 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80a7 	beq.w	8005416 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f004 ffde 	bl	800a294 <USB_ReadDevInEPInterrupt>
 80052d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d057      	beq.n	8005394 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	2201      	movs	r2, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69f9      	ldr	r1, [r7, #28]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4013      	ands	r3, r2
 8005306:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	2301      	movs	r3, #1
 8005318:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d132      	bne.n	8005388 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3348      	adds	r3, #72	; 0x48
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4403      	add	r3, r0
 8005342:	3344      	adds	r3, #68	; 0x44
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4419      	add	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4403      	add	r3, r0
 8005356:	3348      	adds	r3, #72	; 0x48
 8005358:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d113      	bne.n	8005388 <HAL_PCD_IRQHandler+0x31c>
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3350      	adds	r3, #80	; 0x50
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005380:	461a      	mov	r2, r3
 8005382:	2101      	movs	r1, #1
 8005384:	f004 ffe6 	bl	800a354 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f007 fa07 	bl	800c7a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	2308      	movs	r3, #8
 80053ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	2310      	movs	r3, #16
 80053ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2340      	movs	r3, #64	; 0x40
 80053e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	461a      	mov	r2, r3
 8005400:	2302      	movs	r3, #2
 8005402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800540e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fbb9 	bl	8005b88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f af49 	bne.w	80052bc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f004 fecb 	bl	800a1ca <USB_ReadInterrupts>
 8005434:	4603      	mov	r3, r0
 8005436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d122      	bne.n	8005486 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800545a:	2b01      	cmp	r3, #1
 800545c:	d108      	bne.n	8005470 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005466:	2100      	movs	r1, #0
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fdc5 	bl	8005ff8 <HAL_PCDEx_LPM_Callback>
 800546e:	e002      	b.n	8005476 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f007 fa0d 	bl	800c890 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fe9d 	bl	800a1ca <USB_ReadInterrupts>
 8005490:	4603      	mov	r3, r0
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d112      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d102      	bne.n	80054b2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f007 f9c9 	bl	800c844 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 fe7f 	bl	800a1ca <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	f040 80c7 	bne.w	8005668 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2110      	movs	r1, #16
 80054f4:	4618      	mov	r0, r3
 80054f6:	f004 f829 	bl	800954c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fe:	e056      	b.n	80055ae <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005512:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005532:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005552:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	461a      	mov	r2, r3
 8005562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005566:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005586:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	3301      	adds	r3, #1
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3a3      	bcc.n	8005500 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e4:	f043 030b 	orr.w	r3, r3, #11
 80055e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fa:	f043 030b 	orr.w	r3, r3, #11
 80055fe:	6453      	str	r3, [r2, #68]	; 0x44
 8005600:	e015      	b.n	800562e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005614:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005618:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005628:	f043 030b 	orr.w	r3, r3, #11
 800562c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005640:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005652:	461a      	mov	r2, r3
 8005654:	f004 fe7e 	bl	800a354 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f004 fdac 	bl	800a1ca <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d124      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f004 fe42 	bl	800a30c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f003 ffbe 	bl	800960e <USB_GetDevSpeed>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681c      	ldr	r4, [r3, #0]
 800569e:	f001 f8ef 	bl	8006880 <HAL_RCC_GetHCLKFreq>
 80056a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	4620      	mov	r0, r4
 80056ae:	f003 fcfb 	bl	80090a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f007 f89d 	bl	800c7f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fd7c 	bl	800a1ca <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d10a      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f007 f87a 	bl	800c7d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f002 0208 	and.w	r2, r2, #8
 80056f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f004 fd67 	bl	800a1ca <USB_ReadInterrupts>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005706:	d10f      	bne.n	8005728 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f007 f8dc 	bl	800c8d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005726:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f004 fd4c 	bl	800a1ca <USB_ReadInterrupts>
 8005732:	4603      	mov	r3, r0
 8005734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573c:	d10f      	bne.n	800575e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	b2db      	uxtb	r3, r3
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f007 f8af 	bl	800c8ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800575c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f004 fd31 	bl	800a1ca <USB_ReadInterrupts>
 8005768:	4603      	mov	r3, r0
 800576a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d10a      	bne.n	800578a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f007 f8bd 	bl	800c8f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f004 fd1b 	bl	800a1ca <USB_ReadInterrupts>
 8005794:	4603      	mov	r3, r0
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d115      	bne.n	80057ca <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f007 f8ad 	bl	800c910 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e000      	b.n	80057ca <HAL_PCD_IRQHandler+0x75e>
      return;
 80057c8:	bf00      	nop
    }
  }
}
 80057ca:	3734      	adds	r7, #52	; 0x34
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}

080057d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_PCD_SetAddress+0x1a>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e013      	b.n	8005812 <HAL_PCD_SetAddress+0x42>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f004 fc79 	bl	800a0fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	4608      	mov	r0, r1
 8005824:	4611      	mov	r1, r2
 8005826:	461a      	mov	r2, r3
 8005828:	4603      	mov	r3, r0
 800582a:	70fb      	strb	r3, [r7, #3]
 800582c:	460b      	mov	r3, r1
 800582e:	803b      	strh	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	da0f      	bge.n	8005860 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	f003 020f 	and.w	r2, r3, #15
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3338      	adds	r3, #56	; 0x38
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	705a      	strb	r2, [r3, #1]
 800585e:	e00f      	b.n	8005880 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800588c:	883a      	ldrh	r2, [r7, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	78ba      	ldrb	r2, [r7, #2]
 8005896:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058aa:	78bb      	ldrb	r3, [r7, #2]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d102      	bne.n	80058b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_PCD_EP_Open+0xaa>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e00e      	b.n	80058e2 <HAL_PCD_EP_Open+0xc8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f003 fec0 	bl	8009658 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80058e0:	7afb      	ldrb	r3, [r7, #11]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	460b      	mov	r3, r1
 80058f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	b2da      	uxtb	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d102      	bne.n	8005946 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005946:	7afb      	ldrb	r3, [r7, #11]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	f004 f947 	bl	8009bf0 <USB_EP0StartXfer>
 8005962:	e008      	b.n	8005976 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	f003 fef9 	bl	8009768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	607a      	str	r2, [r7, #4]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	460b      	mov	r3, r1
 800598e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005990:	7afb      	ldrb	r3, [r7, #11]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	3338      	adds	r3, #56	; 0x38
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	3304      	adds	r3, #4
 80059a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2201      	movs	r2, #1
 80059be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c0:	7afb      	ldrb	r3, [r7, #11]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d102      	bne.n	80059da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	f004 f8fd 	bl	8009bf0 <USB_EP0StartXfer>
 80059f6:	e008      	b.n	8005a0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	f003 feaf 	bl	8009768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d901      	bls.n	8005a32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e050      	b.n	8005ad4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da0f      	bge.n	8005a5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	3338      	adds	r3, #56	; 0x38
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	705a      	strb	r2, [r3, #1]
 8005a58:	e00d      	b.n	8005a76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_PCD_EP_SetStall+0x82>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e01e      	b.n	8005ad4 <HAL_PCD_EP_SetStall+0xc0>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fa54 	bl	8009f52 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	b2d9      	uxtb	r1, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f004 fc45 	bl	800a354 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d901      	bls.n	8005afa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e042      	b.n	8005b80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	da0f      	bge.n	8005b22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	3338      	adds	r3, #56	; 0x38
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	3304      	adds	r3, #4
 8005b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	705a      	strb	r2, [r3, #1]
 8005b20:	e00f      	b.n	8005b42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	3304      	adds	r3, #4
 8005b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_PCD_EP_ClrStall+0x86>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e00e      	b.n	8005b80 <HAL_PCD_EP_ClrStall+0xa4>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f004 fa5c 	bl	800a02e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	3338      	adds	r3, #56	; 0x38
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d901      	bls.n	8005bc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06c      	b.n	8005c9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d902      	bls.n	8005bdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	3303      	adds	r3, #3
 8005be0:	089b      	lsrs	r3, r3, #2
 8005be2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005be4:	e02b      	b.n	8005c3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d902      	bls.n	8005c02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3303      	adds	r3, #3
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	4603      	mov	r3, r0
 8005c20:	6978      	ldr	r0, [r7, #20]
 8005c22:	f004 f938 	bl	8009e96 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d809      	bhi.n	8005c68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d203      	bcs.n	8005c68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1be      	bne.n	8005be6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d811      	bhi.n	8005c98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	6939      	ldr	r1, [r7, #16]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	333c      	adds	r3, #60	; 0x3c
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 80a0 	bne.w	8005e1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d015      	beq.n	8005d12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a72      	ldr	r2, [pc, #456]	; (8005eb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	f240 80dd 	bls.w	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80d7 	beq.w	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	6093      	str	r3, [r2, #8]
 8005d10:	e0cb      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	6093      	str	r3, [r2, #8]
 8005d2e:	e0bc      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 80b7 	bne.w	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a5d      	ldr	r2, [pc, #372]	; (8005eb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d90f      	bls.n	8005d64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d60:	6093      	str	r3, [r2, #8]
 8005d62:	e0a2      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	0159      	lsls	r1, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	440b      	add	r3, r1
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4403      	add	r3, r0
 8005d9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4403      	add	r3, r0
 8005dc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4419      	add	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4403      	add	r3, r0
 8005dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ddc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d114      	bne.n	8005e0e <PCD_EP_OutXfrComplete_int+0x16a>
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d108      	bne.n	8005e0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e06:	461a      	mov	r2, r3
 8005e08:	2101      	movs	r1, #1
 8005e0a:	f004 faa3 	bl	800a354 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f006 fca9 	bl	800c76c <HAL_PCD_DataOutStageCallback>
 8005e1a:	e046      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d124      	bne.n	8005e6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e40:	6093      	str	r3, [r2, #8]
 8005e42:	e032      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f006 fc80 	bl	800c76c <HAL_PCD_DataOutStageCallback>
 8005e6c:	e01d      	b.n	8005eaa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d114      	bne.n	8005e9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d108      	bne.n	8005e9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e96:	461a      	mov	r2, r3
 8005e98:	2100      	movs	r1, #0
 8005e9a:	f004 fa5b 	bl	800a354 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f006 fc61 	bl	800c76c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	4f54300a 	.word	0x4f54300a
 8005eb8:	4f54310a 	.word	0x4f54310a

08005ebc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	333c      	adds	r3, #60	; 0x3c
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d90e      	bls.n	8005f10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f006 fc19 	bl	800c748 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d90c      	bls.n	8005f38 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d108      	bne.n	8005f38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f30:	461a      	mov	r2, r3
 8005f32:	2101      	movs	r1, #1
 8005f34:	f004 fa0e 	bl	800a354 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	4f54300a 	.word	0x4f54300a

08005f48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
 8005f54:	4613      	mov	r3, r2
 8005f56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f66:	883b      	ldrh	r3, [r7, #0]
 8005f68:	0419      	lsls	r1, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
 8005f74:	e028      	b.n	8005fc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e00d      	b.n	8005fa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	3340      	adds	r3, #64	; 0x40
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d3ec      	bcc.n	8005f8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fb0:	883b      	ldrh	r3, [r7, #0]
 8005fb2:	0418      	lsls	r0, r3, #16
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	4302      	orrs	r2, r0
 8005fc0:	3340      	adds	r3, #64	; 0x40
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e25b      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d075      	beq.n	800611a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800602e:	4ba3      	ldr	r3, [pc, #652]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00c      	beq.n	8006054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800603a:	4ba0      	ldr	r3, [pc, #640]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006042:	2b08      	cmp	r3, #8
 8006044:	d112      	bne.n	800606c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006046:	4b9d      	ldr	r3, [pc, #628]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006052:	d10b      	bne.n	800606c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	4b99      	ldr	r3, [pc, #612]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05b      	beq.n	8006118 <HAL_RCC_OscConfig+0x108>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d157      	bne.n	8006118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e236      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d106      	bne.n	8006084 <HAL_RCC_OscConfig+0x74>
 8006076:	4b91      	ldr	r3, [pc, #580]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a90      	ldr	r2, [pc, #576]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e01d      	b.n	80060c0 <HAL_RCC_OscConfig+0xb0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800608c:	d10c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x98>
 800608e:	4b8b      	ldr	r3, [pc, #556]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a8a      	ldr	r2, [pc, #552]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b88      	ldr	r3, [pc, #544]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a87      	ldr	r2, [pc, #540]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e00b      	b.n	80060c0 <HAL_RCC_OscConfig+0xb0>
 80060a8:	4b84      	ldr	r3, [pc, #528]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a83      	ldr	r2, [pc, #524]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a80      	ldr	r2, [pc, #512]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d013      	beq.n	80060f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fd fd78 	bl	8003bbc <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d0:	f7fd fd74 	bl	8003bbc <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b64      	cmp	r3, #100	; 0x64
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e1fb      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e2:	4b76      	ldr	r3, [pc, #472]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0f0      	beq.n	80060d0 <HAL_RCC_OscConfig+0xc0>
 80060ee:	e014      	b.n	800611a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fd fd64 	bl	8003bbc <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060f8:	f7fd fd60 	bl	8003bbc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	; 0x64
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e1e7      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800610a:	4b6c      	ldr	r3, [pc, #432]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0xe8>
 8006116:	e000      	b.n	800611a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d063      	beq.n	80061ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006126:	4b65      	ldr	r3, [pc, #404]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006132:	4b62      	ldr	r3, [pc, #392]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800613a:	2b08      	cmp	r3, #8
 800613c:	d11c      	bne.n	8006178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613e:	4b5f      	ldr	r3, [pc, #380]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614a:	4b5c      	ldr	r3, [pc, #368]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_RCC_OscConfig+0x152>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d001      	beq.n	8006162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e1bb      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006162:	4b56      	ldr	r3, [pc, #344]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	4952      	ldr	r1, [pc, #328]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006172:	4313      	orrs	r3, r2
 8006174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006176:	e03a      	b.n	80061ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RCC_OscConfig+0x2b0>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fd fd19 	bl	8003bbc <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800618e:	f7fd fd15 	bl	8003bbc <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e19c      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a0:	4b46      	ldr	r3, [pc, #280]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ac:	4b43      	ldr	r3, [pc, #268]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4940      	ldr	r1, [pc, #256]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	600b      	str	r3, [r1, #0]
 80061c0:	e015      	b.n	80061ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c2:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <HAL_RCC_OscConfig+0x2b0>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fd fcf8 	bl	8003bbc <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d0:	f7fd fcf4 	bl	8003bbc <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e17b      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d030      	beq.n	800625c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006202:	4b30      	ldr	r3, [pc, #192]	; (80062c4 <HAL_RCC_OscConfig+0x2b4>)
 8006204:	2201      	movs	r2, #1
 8006206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006208:	f7fd fcd8 	bl	8003bbc <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006210:	f7fd fcd4 	bl	8003bbc <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e15b      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006222:	4b26      	ldr	r3, [pc, #152]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0x200>
 800622e:	e015      	b.n	800625c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_RCC_OscConfig+0x2b4>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006236:	f7fd fcc1 	bl	8003bbc <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623e:	f7fd fcbd 	bl	8003bbc <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e144      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006250:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f0      	bne.n	800623e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80a0 	beq.w	80063aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10f      	bne.n	800629a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a0e      	ldr	r2, [pc, #56]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <HAL_RCC_OscConfig+0x2ac>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <HAL_RCC_OscConfig+0x2b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d121      	bne.n	80062ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <HAL_RCC_OscConfig+0x2b8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <HAL_RCC_OscConfig+0x2b8>)
 80062ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b2:	f7fd fc83 	bl	8003bbc <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	e011      	b.n	80062de <HAL_RCC_OscConfig+0x2ce>
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	42470000 	.word	0x42470000
 80062c4:	42470e80 	.word	0x42470e80
 80062c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062cc:	f7fd fc76 	bl	8003bbc <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0fd      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062de:	4b81      	ldr	r3, [pc, #516]	; (80064e4 <HAL_RCC_OscConfig+0x4d4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x2f0>
 80062f2:	4b7d      	ldr	r3, [pc, #500]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a7c      	ldr	r2, [pc, #496]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
 80062fe:	e01c      	b.n	800633a <HAL_RCC_OscConfig+0x32a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b05      	cmp	r3, #5
 8006306:	d10c      	bne.n	8006322 <HAL_RCC_OscConfig+0x312>
 8006308:	4b77      	ldr	r3, [pc, #476]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800630a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630c:	4a76      	ldr	r2, [pc, #472]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	6713      	str	r3, [r2, #112]	; 0x70
 8006314:	4b74      	ldr	r3, [pc, #464]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	4a73      	ldr	r2, [pc, #460]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	6713      	str	r3, [r2, #112]	; 0x70
 8006320:	e00b      	b.n	800633a <HAL_RCC_OscConfig+0x32a>
 8006322:	4b71      	ldr	r3, [pc, #452]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	4a70      	ldr	r2, [pc, #448]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	6713      	str	r3, [r2, #112]	; 0x70
 800632e:	4b6e      	ldr	r3, [pc, #440]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a6d      	ldr	r2, [pc, #436]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006334:	f023 0304 	bic.w	r3, r3, #4
 8006338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d015      	beq.n	800636e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006342:	f7fd fc3b 	bl	8003bbc <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800634a:	f7fd fc37 	bl	8003bbc <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f241 3288 	movw	r2, #5000	; 0x1388
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e0bc      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006360:	4b61      	ldr	r3, [pc, #388]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0ee      	beq.n	800634a <HAL_RCC_OscConfig+0x33a>
 800636c:	e014      	b.n	8006398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636e:	f7fd fc25 	bl	8003bbc <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006374:	e00a      	b.n	800638c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fd fc21 	bl	8003bbc <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e0a6      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638c:	4b56      	ldr	r3, [pc, #344]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1ee      	bne.n	8006376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639e:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a51      	ldr	r2, [pc, #324]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80063a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8092 	beq.w	80064d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063b4:	4b4c      	ldr	r3, [pc, #304]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d05c      	beq.n	800647a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d141      	bne.n	800644c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c8:	4b48      	ldr	r3, [pc, #288]	; (80064ec <HAL_RCC_OscConfig+0x4dc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ce:	f7fd fbf5 	bl	8003bbc <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d6:	f7fd fbf1 	bl	8003bbc <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e078      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e8:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f0      	bne.n	80063d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	019b      	lsls	r3, r3, #6
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	3b01      	subs	r3, #1
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	061b      	lsls	r3, r3, #24
 8006418:	4933      	ldr	r1, [pc, #204]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800641a:	4313      	orrs	r3, r2
 800641c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641e:	4b33      	ldr	r3, [pc, #204]	; (80064ec <HAL_RCC_OscConfig+0x4dc>)
 8006420:	2201      	movs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fd fbca 	bl	8003bbc <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642c:	f7fd fbc6 	bl	8003bbc <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e04d      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643e:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x41c>
 800644a:	e045      	b.n	80064d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644c:	4b27      	ldr	r3, [pc, #156]	; (80064ec <HAL_RCC_OscConfig+0x4dc>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006452:	f7fd fbb3 	bl	8003bbc <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800645a:	f7fd fbaf 	bl	8003bbc <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e036      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f0      	bne.n	800645a <HAL_RCC_OscConfig+0x44a>
 8006478:	e02e      	b.n	80064d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e029      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_RCC_OscConfig+0x4d8>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	429a      	cmp	r2, r3
 8006498:	d11c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d115      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064ae:	4013      	ands	r3, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10d      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d106      	bne.n	80064d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40007000 	.word	0x40007000
 80064e8:	40023800 	.word	0x40023800
 80064ec:	42470060 	.word	0x42470060

080064f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0cc      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006504:	4b68      	ldr	r3, [pc, #416]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d90c      	bls.n	800652c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b65      	ldr	r3, [pc, #404]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b63      	ldr	r3, [pc, #396]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0b8      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d020      	beq.n	800657a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006544:	4b59      	ldr	r3, [pc, #356]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a58      	ldr	r2, [pc, #352]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800654e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800655c:	4b53      	ldr	r3, [pc, #332]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a52      	ldr	r2, [pc, #328]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006568:	4b50      	ldr	r3, [pc, #320]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	494d      	ldr	r1, [pc, #308]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d044      	beq.n	8006610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d119      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e07f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d003      	beq.n	80065ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ae:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e06f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065be:	4b3b      	ldr	r3, [pc, #236]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e067      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ce:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f023 0203 	bic.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4934      	ldr	r1, [pc, #208]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065e0:	f7fd faec 	bl	8003bbc <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	e00a      	b.n	80065fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e8:	f7fd fae8 	bl	8003bbc <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e04f      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fe:	4b2b      	ldr	r3, [pc, #172]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 020c 	and.w	r2, r3, #12
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	429a      	cmp	r2, r3
 800660e:	d1eb      	bne.n	80065e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d20c      	bcs.n	8006638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661e:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e032      	b.n	800669e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006644:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4916      	ldr	r1, [pc, #88]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	490e      	ldr	r1, [pc, #56]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006676:	f000 f821 	bl	80066bc <HAL_RCC_GetSysClockFreq>
 800667a:	4602      	mov	r2, r0
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	490a      	ldr	r1, [pc, #40]	; (80066b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	5ccb      	ldrb	r3, [r1, r3]
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fa4c 	bl	8003b34 <HAL_InitTick>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40023c00 	.word	0x40023c00
 80066ac:	40023800 	.word	0x40023800
 80066b0:	08011298 	.word	0x08011298
 80066b4:	20000464 	.word	0x20000464
 80066b8:	20000468 	.word	0x20000468

080066bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	2300      	movs	r3, #0
 80066ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066d4:	4b67      	ldr	r3, [pc, #412]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d00d      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0x40>
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	f200 80bd 	bhi.w	8006860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x34>
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d003      	beq.n	80066f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ee:	e0b7      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066f0:	4b61      	ldr	r3, [pc, #388]	; (8006878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066f2:	60bb      	str	r3, [r7, #8]
       break;
 80066f4:	e0b7      	b.n	8006866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066f6:	4b61      	ldr	r3, [pc, #388]	; (800687c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066f8:	60bb      	str	r3, [r7, #8]
      break;
 80066fa:	e0b4      	b.n	8006866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066fc:	4b5d      	ldr	r3, [pc, #372]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006706:	4b5b      	ldr	r3, [pc, #364]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04d      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006712:	4b58      	ldr	r3, [pc, #352]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	461a      	mov	r2, r3
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006722:	f04f 0100 	mov.w	r1, #0
 8006726:	ea02 0800 	and.w	r8, r2, r0
 800672a:	ea03 0901 	and.w	r9, r3, r1
 800672e:	4640      	mov	r0, r8
 8006730:	4649      	mov	r1, r9
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	014b      	lsls	r3, r1, #5
 800673c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006740:	0142      	lsls	r2, r0, #5
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	ebb0 0008 	subs.w	r0, r0, r8
 800674a:	eb61 0109 	sbc.w	r1, r1, r9
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	018b      	lsls	r3, r1, #6
 8006758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800675c:	0182      	lsls	r2, r0, #6
 800675e:	1a12      	subs	r2, r2, r0
 8006760:	eb63 0301 	sbc.w	r3, r3, r1
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f04f 0100 	mov.w	r1, #0
 800676c:	00d9      	lsls	r1, r3, #3
 800676e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006772:	00d0      	lsls	r0, r2, #3
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	eb12 0208 	adds.w	r2, r2, r8
 800677c:	eb43 0309 	adc.w	r3, r3, r9
 8006780:	f04f 0000 	mov.w	r0, #0
 8006784:	f04f 0100 	mov.w	r1, #0
 8006788:	0259      	lsls	r1, r3, #9
 800678a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800678e:	0250      	lsls	r0, r2, #9
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4610      	mov	r0, r2
 8006796:	4619      	mov	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	461a      	mov	r2, r3
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	f7fa fa72 	bl	8000c88 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e04a      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	4b31      	ldr	r3, [pc, #196]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	461a      	mov	r2, r3
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067be:	f04f 0100 	mov.w	r1, #0
 80067c2:	ea02 0400 	and.w	r4, r2, r0
 80067c6:	ea03 0501 	and.w	r5, r3, r1
 80067ca:	4620      	mov	r0, r4
 80067cc:	4629      	mov	r1, r5
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	014b      	lsls	r3, r1, #5
 80067d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067dc:	0142      	lsls	r2, r0, #5
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	1b00      	subs	r0, r0, r4
 80067e4:	eb61 0105 	sbc.w	r1, r1, r5
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	018b      	lsls	r3, r1, #6
 80067f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067f6:	0182      	lsls	r2, r0, #6
 80067f8:	1a12      	subs	r2, r2, r0
 80067fa:	eb63 0301 	sbc.w	r3, r3, r1
 80067fe:	f04f 0000 	mov.w	r0, #0
 8006802:	f04f 0100 	mov.w	r1, #0
 8006806:	00d9      	lsls	r1, r3, #3
 8006808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800680c:	00d0      	lsls	r0, r2, #3
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	1912      	adds	r2, r2, r4
 8006814:	eb45 0303 	adc.w	r3, r5, r3
 8006818:	f04f 0000 	mov.w	r0, #0
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	0299      	lsls	r1, r3, #10
 8006822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006826:	0290      	lsls	r0, r2, #10
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4610      	mov	r0, r2
 800682e:	4619      	mov	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	461a      	mov	r2, r3
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	f7fa fa26 	bl	8000c88 <__aeabi_uldivmod>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4613      	mov	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	3301      	adds	r3, #1
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	60bb      	str	r3, [r7, #8]
      break;
 800685e:	e002      	b.n	8006866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006862:	60bb      	str	r3, [r7, #8]
      break;
 8006864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006866:	68bb      	ldr	r3, [r7, #8]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006872:	bf00      	nop
 8006874:	40023800 	.word	0x40023800
 8006878:	00f42400 	.word	0x00f42400
 800687c:	007a1200 	.word	0x007a1200

08006880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <HAL_RCC_GetHCLKFreq+0x14>)
 8006886:	681b      	ldr	r3, [r3, #0]
}
 8006888:	4618      	mov	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000464 	.word	0x20000464

08006898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800689c:	f7ff fff0 	bl	8006880 <HAL_RCC_GetHCLKFreq>
 80068a0:	4602      	mov	r2, r0
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	0a9b      	lsrs	r3, r3, #10
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	4903      	ldr	r1, [pc, #12]	; (80068bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ae:	5ccb      	ldrb	r3, [r1, r3]
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40023800 	.word	0x40023800
 80068bc:	080112a8 	.word	0x080112a8

080068c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068c4:	f7ff ffdc 	bl	8006880 <HAL_RCC_GetHCLKFreq>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	0b5b      	lsrs	r3, r3, #13
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	4903      	ldr	r1, [pc, #12]	; (80068e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068d6:	5ccb      	ldrb	r3, [r1, r3]
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	40023800 	.word	0x40023800
 80068e4:	080112a8 	.word	0x080112a8

080068e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e056      	b.n	80069a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fc fc2b 	bl	8003170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006930:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	ea42 0103 	orr.w	r1, r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	0c1b      	lsrs	r3, r3, #16
 8006978:	f003 0104 	and.w	r1, r3, #4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006996:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069cc:	d112      	bne.n	80069f4 <HAL_SPI_Receive+0x44>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10e      	bne.n	80069f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2204      	movs	r2, #4
 80069da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f8e9 	bl	8006bc2 <HAL_SPI_TransmitReceive>
 80069f0:	4603      	mov	r3, r0
 80069f2:	e0e2      	b.n	8006bba <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Receive+0x52>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e0db      	b.n	8006bba <HAL_SPI_Receive+0x20a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a0a:	f7fd f8d7 	bl	8003bbc <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a20:	e0c2      	b.n	8006ba8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_SPI_Receive+0x7e>
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a32:	e0b9      	b.n	8006ba8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2204      	movs	r2, #4
 8006a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7a:	d107      	bne.n	8006a8c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d007      	beq.n	8006aaa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d162      	bne.n	8006b78 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ab2:	e02e      	b.n	8006b12 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d115      	bne.n	8006aee <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f103 020c 	add.w	r2, r3, #12
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	7812      	ldrb	r2, [r2, #0]
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aec:	e011      	b.n	8006b12 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aee:	f7fd f865 	bl	8003bbc <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d803      	bhi.n	8006b06 <HAL_SPI_Receive+0x156>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d102      	bne.n	8006b0c <HAL_SPI_Receive+0x15c>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b10:	e04a      	b.n	8006ba8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1cb      	bne.n	8006ab4 <HAL_SPI_Receive+0x104>
 8006b1c:	e031      	b.n	8006b82 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d113      	bne.n	8006b54 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	b292      	uxth	r2, r2
 8006b38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	1c9a      	adds	r2, r3, #2
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b52:	e011      	b.n	8006b78 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b54:	f7fd f832 	bl	8003bbc <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d803      	bhi.n	8006b6c <HAL_SPI_Receive+0x1bc>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d102      	bne.n	8006b72 <HAL_SPI_Receive+0x1c2>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b76:	e017      	b.n	8006ba8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1cd      	bne.n	8006b1e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fa27 	bl	8006fda <SPI_EndRxTransaction>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
 8006ba4:	e000      	b.n	8006ba8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08c      	sub	sp, #48	; 0x30
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <HAL_SPI_TransmitReceive+0x26>
 8006be4:	2302      	movs	r3, #2
 8006be6:	e18a      	b.n	8006efe <HAL_SPI_TransmitReceive+0x33c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bf0:	f7fc ffe4 	bl	8003bbc <HAL_GetTick>
 8006bf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c06:	887b      	ldrh	r3, [r7, #2]
 8006c08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d00f      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x70>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c18:	d107      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x68>
 8006c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d003      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c30:	e15b      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x82>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x82>
 8006c3e:	887b      	ldrh	r3, [r7, #2]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c4a:	e14e      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d003      	beq.n	8006c60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2205      	movs	r2, #5
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	887a      	ldrh	r2, [r7, #2]
 8006c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	887a      	ldrh	r2, [r7, #2]
 8006c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	887a      	ldrh	r2, [r7, #2]
 8006c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	887a      	ldrh	r2, [r7, #2]
 8006c88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d007      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cbc:	d178      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x10a>
 8006cc6:	8b7b      	ldrh	r3, [r7, #26]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d166      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	881a      	ldrh	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	1c9a      	adds	r2, r3, #2
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf0:	e053      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d11b      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x176>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d016      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x176>
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d113      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	881a      	ldrh	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	1c9a      	adds	r2, r3, #2
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d119      	bne.n	8006d7a <HAL_SPI_TransmitReceive+0x1b8>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d014      	beq.n	8006d7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	1c9a      	adds	r2, r3, #2
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d76:	2301      	movs	r3, #1
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d7a:	f7fc ff1f 	bl	8003bbc <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d807      	bhi.n	8006d9a <HAL_SPI_TransmitReceive+0x1d8>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d003      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d98:	e0a7      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1a6      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x130>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1a1      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x130>
 8006dae:	e07c      	b.n	8006eaa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x1fc>
 8006db8:	8b7b      	ldrh	r3, [r7, #26]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d16b      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de4:	e057      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d11c      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x26c>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_SPI_TransmitReceive+0x26c>
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d114      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x2ae>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e70:	f7fc fea4 	bl	8003bbc <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d803      	bhi.n	8006e88 <HAL_SPI_TransmitReceive+0x2c6>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x2cc>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e94:	e029      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1a2      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x224>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d19d      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f8f8 	bl	80070a4 <SPI_EndRxTxTransaction>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d006      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ec6:	e010      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	e000      	b.n	8006eea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3730      	adds	r7, #48	; 0x30
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f16:	e04c      	b.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d048      	beq.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f20:	f7fc fe4c 	bl	8003bbc <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d902      	bls.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d13d      	bne.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4e:	d111      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f58:	d004      	beq.n	8006f64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f62:	d107      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7c:	d10f      	bne.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e00f      	b.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1a3      	bne.n	8006f18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af02      	add	r7, sp, #8
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fee:	d111      	bne.n	8007014 <SPI_EndRxTransaction+0x3a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff8:	d004      	beq.n	8007004 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007002:	d107      	bne.n	8007014 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007012:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800701c:	d12a      	bne.n	8007074 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d012      	beq.n	800704e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff ff67 	bl	8006f06 <SPI_WaitFlagStateUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02d      	beq.n	800709a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e026      	b.n	800709c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	2101      	movs	r1, #1
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff ff54 	bl	8006f06 <SPI_WaitFlagStateUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e013      	b.n	800709c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	2101      	movs	r1, #1
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff ff41 	bl	8006f06 <SPI_WaitFlagStateUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f043 0220 	orr.w	r2, r3, #32
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e000      	b.n	800709c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <SPI_EndRxTxTransaction+0x7c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <SPI_EndRxTxTransaction+0x80>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	0d5b      	lsrs	r3, r3, #21
 80070bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ce:	d112      	bne.n	80070f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2180      	movs	r1, #128	; 0x80
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff ff13 	bl	8006f06 <SPI_WaitFlagStateUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e00f      	b.n	8007116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	3b01      	subs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d0f2      	beq.n	80070f6 <SPI_EndRxTxTransaction+0x52>
 8007110:	e000      	b.n	8007114 <SPI_EndRxTxTransaction+0x70>
        break;
 8007112:	bf00      	nop
  }

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000464 	.word	0x20000464
 8007124:	165e9f81 	.word	0x165e9f81

08007128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e01d      	b.n	8007176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fc f8a6 	bl	80032a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f000 fc44 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b06      	cmp	r3, #6
 80071a6:	d007      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e01d      	b.n	8007214 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f815 	bl	800721c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f000 fbf5 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fec0 	bl	8007fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <HAL_TIM_PWM_Start+0x74>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIM_PWM_Start+0x2c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <HAL_TIM_PWM_Start+0x78>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d101      	bne.n	8007260 <HAL_TIM_PWM_Start+0x30>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_TIM_PWM_Start+0x32>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d007      	beq.n	8007298 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40010400 	.word	0x40010400

080072ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fe82 	bl	8007fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <HAL_TIM_PWM_Stop+0xa8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_TIM_PWM_Stop+0x2c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_TIM_PWM_Stop+0xac>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_PWM_Stop+0x30>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <HAL_TIM_PWM_Stop+0x32>
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80072ec:	4013      	ands	r3, r2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10f      	bne.n	8007312 <HAL_TIM_PWM_Stop+0x66>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	f240 4344 	movw	r3, #1092	; 0x444
 80072fc:	4013      	ands	r3, r2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <HAL_TIM_PWM_Stop+0x66>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	f241 1311 	movw	r3, #4369	; 0x1111
 800731c:	4013      	ands	r3, r2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_TIM_PWM_Stop+0x96>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	f240 4344 	movw	r3, #1092	; 0x444
 800732c:	4013      	ands	r3, r2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d107      	bne.n	8007342 <HAL_TIM_PWM_Stop+0x96>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40010000 	.word	0x40010000
 8007358:	40010400 	.word	0x40010400

0800735c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e083      	b.n	8007478 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fb ff3b 	bl	8003200 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f000 fb1f 	bl	80079f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	4313      	orrs	r3, r2
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073fc:	f023 030c 	bic.w	r3, r3, #12
 8007400:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	4313      	orrs	r3, r2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	011a      	lsls	r2, r3, #4
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	031b      	lsls	r3, r3, #12
 800742c:	4313      	orrs	r3, r2
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800743a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	4313      	orrs	r3, r2
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b02      	cmp	r3, #2
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0202 	mvn.w	r2, #2
 80074ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa78 	bl	80079b8 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa6a 	bl	80079a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fa7b 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0204 	mvn.w	r2, #4
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa4e 	bl	80079b8 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa40 	bl	80079a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fa51 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b08      	cmp	r3, #8
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b08      	cmp	r3, #8
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0208 	mvn.w	r2, #8
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2204      	movs	r2, #4
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa24 	bl	80079b8 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa16 	bl	80079a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa27 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b10      	cmp	r3, #16
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b10      	cmp	r3, #16
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0210 	mvn.w	r2, #16
 80075a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2208      	movs	r2, #8
 80075ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9fa 	bl	80079b8 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9ec 	bl	80079a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9fd 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d10e      	bne.n	8007604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d107      	bne.n	8007604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0201 	mvn.w	r2, #1
 80075fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fb f8a4 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d10e      	bne.n	8007630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d107      	bne.n	8007630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fd78 	bl	8008120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d10e      	bne.n	800765c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	d107      	bne.n	800765c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f9c2 	bl	80079e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b20      	cmp	r3, #32
 8007668:	d10e      	bne.n	8007688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b20      	cmp	r3, #32
 8007676:	d107      	bne.n	8007688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0220 	mvn.w	r2, #32
 8007680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fd42 	bl	800810c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0b4      	b.n	8007814 <HAL_TIM_PWM_ConfigChannel+0x184>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2202      	movs	r2, #2
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	f200 809f 	bhi.w	8007800 <HAL_TIM_PWM_ConfigChannel+0x170>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	08007801 	.word	0x08007801
 80076d0:	08007801 	.word	0x08007801
 80076d4:	08007801 	.word	0x08007801
 80076d8:	0800773d 	.word	0x0800773d
 80076dc:	08007801 	.word	0x08007801
 80076e0:	08007801 	.word	0x08007801
 80076e4:	08007801 	.word	0x08007801
 80076e8:	0800777f 	.word	0x0800777f
 80076ec:	08007801 	.word	0x08007801
 80076f0:	08007801 	.word	0x08007801
 80076f4:	08007801 	.word	0x08007801
 80076f8:	080077bf 	.word	0x080077bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fa16 	bl	8007b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0208 	orr.w	r2, r2, #8
 8007716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0204 	bic.w	r2, r2, #4
 8007726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6999      	ldr	r1, [r3, #24]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	619a      	str	r2, [r3, #24]
      break;
 800773a:	e062      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fa66 	bl	8007c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	619a      	str	r2, [r3, #24]
      break;
 800777c:	e041      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fabb 	bl	8007d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0208 	orr.w	r2, r2, #8
 8007798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0204 	bic.w	r2, r2, #4
 80077a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69d9      	ldr	r1, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	61da      	str	r2, [r3, #28]
      break;
 80077bc:	e021      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fb0f 	bl	8007de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	021a      	lsls	r2, r3, #8
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	61da      	str	r2, [r3, #28]
      break;
 80077fe:	e000      	b.n	8007802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007800:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_TIM_ConfigClockSource+0x18>
 8007830:	2302      	movs	r3, #2
 8007832:	e0b3      	b.n	800799c <HAL_TIM_ConfigClockSource+0x180>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800785a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800786c:	d03e      	beq.n	80078ec <HAL_TIM_ConfigClockSource+0xd0>
 800786e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007872:	f200 8087 	bhi.w	8007984 <HAL_TIM_ConfigClockSource+0x168>
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	f000 8085 	beq.w	8007988 <HAL_TIM_ConfigClockSource+0x16c>
 800787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007882:	d87f      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 8007884:	2b70      	cmp	r3, #112	; 0x70
 8007886:	d01a      	beq.n	80078be <HAL_TIM_ConfigClockSource+0xa2>
 8007888:	2b70      	cmp	r3, #112	; 0x70
 800788a:	d87b      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 800788c:	2b60      	cmp	r3, #96	; 0x60
 800788e:	d050      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x116>
 8007890:	2b60      	cmp	r3, #96	; 0x60
 8007892:	d877      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 8007894:	2b50      	cmp	r3, #80	; 0x50
 8007896:	d03c      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0xf6>
 8007898:	2b50      	cmp	r3, #80	; 0x50
 800789a:	d873      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d058      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x136>
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d86f      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 80078a4:	2b30      	cmp	r3, #48	; 0x30
 80078a6:	d064      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x156>
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	d86b      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d060      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x156>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d867      	bhi.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d05c      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x156>
 80078b8:	2b10      	cmp	r3, #16
 80078ba:	d05a      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078bc:	e062      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f000 fb5b 	bl	8007f88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	609a      	str	r2, [r3, #8]
      break;
 80078ea:	e04e      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	6899      	ldr	r1, [r3, #8]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f000 fb44 	bl	8007f88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800790e:	609a      	str	r2, [r3, #8]
      break;
 8007910:	e03b      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6859      	ldr	r1, [r3, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	461a      	mov	r2, r3
 8007920:	f000 fab8 	bl	8007e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2150      	movs	r1, #80	; 0x50
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fb11 	bl	8007f52 <TIM_ITRx_SetConfig>
      break;
 8007930:	e02b      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	461a      	mov	r2, r3
 8007940:	f000 fad7 	bl	8007ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2160      	movs	r1, #96	; 0x60
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb01 	bl	8007f52 <TIM_ITRx_SetConfig>
      break;
 8007950:	e01b      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 fa98 	bl	8007e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2140      	movs	r1, #64	; 0x40
 800796a:	4618      	mov	r0, r3
 800796c:	f000 faf1 	bl	8007f52 <TIM_ITRx_SetConfig>
      break;
 8007970:	e00b      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f000 fae8 	bl	8007f52 <TIM_ITRx_SetConfig>
      break;
 8007982:	e002      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007984:	bf00      	nop
 8007986:	e000      	b.n	800798a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a40      	ldr	r2, [pc, #256]	; (8007b08 <TIM_Base_SetConfig+0x114>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d013      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a12:	d00f      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a3d      	ldr	r2, [pc, #244]	; (8007b0c <TIM_Base_SetConfig+0x118>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00b      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3c      	ldr	r2, [pc, #240]	; (8007b10 <TIM_Base_SetConfig+0x11c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3b      	ldr	r2, [pc, #236]	; (8007b14 <TIM_Base_SetConfig+0x120>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3a      	ldr	r2, [pc, #232]	; (8007b18 <TIM_Base_SetConfig+0x124>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d108      	bne.n	8007a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2f      	ldr	r2, [pc, #188]	; (8007b08 <TIM_Base_SetConfig+0x114>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d02b      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a54:	d027      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2c      	ldr	r2, [pc, #176]	; (8007b0c <TIM_Base_SetConfig+0x118>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d023      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2b      	ldr	r2, [pc, #172]	; (8007b10 <TIM_Base_SetConfig+0x11c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d01f      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2a      	ldr	r2, [pc, #168]	; (8007b14 <TIM_Base_SetConfig+0x120>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01b      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a29      	ldr	r2, [pc, #164]	; (8007b18 <TIM_Base_SetConfig+0x124>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d017      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <TIM_Base_SetConfig+0x128>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <TIM_Base_SetConfig+0x12c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00f      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a26      	ldr	r2, [pc, #152]	; (8007b24 <TIM_Base_SetConfig+0x130>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00b      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a25      	ldr	r2, [pc, #148]	; (8007b28 <TIM_Base_SetConfig+0x134>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a24      	ldr	r2, [pc, #144]	; (8007b2c <TIM_Base_SetConfig+0x138>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a23      	ldr	r2, [pc, #140]	; (8007b30 <TIM_Base_SetConfig+0x13c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0a      	ldr	r2, [pc, #40]	; (8007b08 <TIM_Base_SetConfig+0x114>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0xf8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <TIM_Base_SetConfig+0x124>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d103      	bne.n	8007af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	615a      	str	r2, [r3, #20]
}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800
 8007b28:	40001800 	.word	0x40001800
 8007b2c:	40001c00 	.word	0x40001c00
 8007b30:	40002000 	.word	0x40002000

08007b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f023 0201 	bic.w	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f023 0302 	bic.w	r3, r3, #2
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a20      	ldr	r2, [pc, #128]	; (8007c0c <TIM_OC1_SetConfig+0xd8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_OC1_SetConfig+0x64>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <TIM_OC1_SetConfig+0xdc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d10c      	bne.n	8007bb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f023 0308 	bic.w	r3, r3, #8
 8007b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f023 0304 	bic.w	r3, r3, #4
 8007bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <TIM_OC1_SetConfig+0xd8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_OC1_SetConfig+0x8e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <TIM_OC1_SetConfig+0xdc>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d111      	bne.n	8007be6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40010400 	.word	0x40010400

08007c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0210 	bic.w	r2, r3, #16
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0320 	bic.w	r3, r3, #32
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a22      	ldr	r2, [pc, #136]	; (8007cf8 <TIM_OC2_SetConfig+0xe4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_OC2_SetConfig+0x68>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <TIM_OC2_SetConfig+0xe8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10d      	bne.n	8007c98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <TIM_OC2_SetConfig+0xe4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_OC2_SetConfig+0x94>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a16      	ldr	r2, [pc, #88]	; (8007cfc <TIM_OC2_SetConfig+0xe8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d113      	bne.n	8007cd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40010000 	.word	0x40010000
 8007cfc:	40010400 	.word	0x40010400

08007d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <TIM_OC3_SetConfig+0xe0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_OC3_SetConfig+0x66>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a20      	ldr	r2, [pc, #128]	; (8007de4 <TIM_OC3_SetConfig+0xe4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d10d      	bne.n	8007d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <TIM_OC3_SetConfig+0xe0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d003      	beq.n	8007d92 <TIM_OC3_SetConfig+0x92>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a15      	ldr	r2, [pc, #84]	; (8007de4 <TIM_OC3_SetConfig+0xe4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d113      	bne.n	8007dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	621a      	str	r2, [r3, #32]
}
 8007dd4:	bf00      	nop
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	40010000 	.word	0x40010000
 8007de4:	40010400 	.word	0x40010400

08007de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <TIM_OC4_SetConfig+0xa4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d003      	beq.n	8007e50 <TIM_OC4_SetConfig+0x68>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a11      	ldr	r2, [pc, #68]	; (8007e90 <TIM_OC4_SetConfig+0xa8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d109      	bne.n	8007e64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	019b      	lsls	r3, r3, #6
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40010400 	.word	0x40010400

08007e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	f023 0201 	bic.w	r2, r3, #1
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 030a 	bic.w	r3, r3, #10
 8007ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f023 0210 	bic.w	r2, r3, #16
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	031b      	lsls	r3, r3, #12
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f043 0307 	orr.w	r3, r3, #7
 8007f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	609a      	str	r2, [r3, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	609a      	str	r2, [r3, #8]
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	2201      	movs	r2, #1
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	401a      	ands	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1a      	ldr	r2, [r3, #32]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008028:	2302      	movs	r3, #2
 800802a:	e05a      	b.n	80080e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a21      	ldr	r2, [pc, #132]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d022      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008078:	d01d      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d018      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a18      	ldr	r2, [pc, #96]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a17      	ldr	r2, [pc, #92]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a15      	ldr	r2, [pc, #84]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10c      	bne.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40000c00 	.word	0x40000c00
 8008100:	40010400 	.word	0x40010400
 8008104:	40014000 	.word	0x40014000
 8008108:	40001800 	.word	0x40001800

0800810c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e03f      	b.n	80081c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fb f934 	bl	80033c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fb97 	bl	80088ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800818c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695a      	ldr	r2, [r3, #20]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800819c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b088      	sub	sp, #32
 80081d2:	af02      	add	r7, sp, #8
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	603b      	str	r3, [r7, #0]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	f040 8083 	bne.w	80082f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <HAL_UART_Transmit+0x2e>
 80081f6:	88fb      	ldrh	r3, [r7, #6]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e07b      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <HAL_UART_Transmit+0x40>
 800820a:	2302      	movs	r3, #2
 800820c:	e074      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2221      	movs	r2, #33	; 0x21
 8008220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008224:	f7fb fcca 	bl	8003bbc <HAL_GetTick>
 8008228:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800823e:	e042      	b.n	80082c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008256:	d122      	bne.n	800829e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2200      	movs	r2, #0
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f9b6 	bl	80085d4 <UART_WaitOnFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e042      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008284:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3302      	adds	r3, #2
 8008292:	60bb      	str	r3, [r7, #8]
 8008294:	e017      	b.n	80082c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	3301      	adds	r3, #1
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	e013      	b.n	80082c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2200      	movs	r2, #0
 80082a6:	2180      	movs	r1, #128	; 0x80
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 f993 	bl	80085d4 <UART_WaitOnFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e01f      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	60ba      	str	r2, [r7, #8]
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1b7      	bne.n	8008240 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2200      	movs	r2, #0
 80082d8:	2140      	movs	r1, #64	; 0x40
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f97a 	bl	80085d4 <UART_WaitOnFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e006      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e000      	b.n	80082f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b20      	cmp	r3, #32
 8008318:	d140      	bne.n	800839c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_UART_Receive_IT+0x26>
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e039      	b.n	800839e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_UART_Receive_IT+0x38>
 8008334:	2302      	movs	r3, #2
 8008336:	e032      	b.n	800839e <HAL_UART_Receive_IT+0x9e>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	88fa      	ldrh	r2, [r7, #6]
 8008350:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2222      	movs	r2, #34	; 0x22
 800835c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008376:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695a      	ldr	r2, [r3, #20]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0220 	orr.w	r2, r2, #32
 8008396:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	e000      	b.n	800839e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800839c:	2302      	movs	r3, #2
  }
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
	...

080083ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10d      	bne.n	80083fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <HAL_UART_IRQHandler+0x52>
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9d6 	bl	80087a8 <UART_Receive_IT>
      return;
 80083fc:	e0d0      	b.n	80085a0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80b0 	beq.w	8008566 <HAL_UART_IRQHandler+0x1ba>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <HAL_UART_IRQHandler+0x70>
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80a5 	beq.w	8008566 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_UART_IRQHandler+0x90>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	f043 0201 	orr.w	r2, r3, #1
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <HAL_UART_IRQHandler+0xb0>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	f043 0202 	orr.w	r2, r3, #2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <HAL_UART_IRQHandler+0xd0>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	f043 0204 	orr.w	r2, r3, #4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <HAL_UART_IRQHandler+0xfa>
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_UART_IRQHandler+0xee>
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	f043 0208 	orr.w	r2, r3, #8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d077      	beq.n	800859e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <HAL_UART_IRQHandler+0x11c>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f970 	bl	80087a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	bf0c      	ite	eq
 80084d6:	2301      	moveq	r3, #1
 80084d8:	2300      	movne	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <HAL_UART_IRQHandler+0x144>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d031      	beq.n	8008554 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8b9 	bl	8008668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008500:	2b40      	cmp	r3, #64	; 0x40
 8008502:	d123      	bne.n	800854c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008512:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d013      	beq.n	8008544 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	4a21      	ldr	r2, [pc, #132]	; (80085a8 <HAL_UART_IRQHandler+0x1fc>)
 8008522:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	4618      	mov	r0, r3
 800852a:	f7fb ff1c 	bl	8004366 <HAL_DMA_Abort_IT>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d016      	beq.n	8008562 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800853e:	4610      	mov	r0, r2
 8008540:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008542:	e00e      	b.n	8008562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f83b 	bl	80085c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854a:	e00a      	b.n	8008562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f837 	bl	80085c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008552:	e006      	b.n	8008562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f833 	bl	80085c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008560:	e01d      	b.n	800859e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008562:	bf00      	nop
    return;
 8008564:	e01b      	b.n	800859e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856c:	2b00      	cmp	r3, #0
 800856e:	d008      	beq.n	8008582 <HAL_UART_IRQHandler+0x1d6>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8a6 	bl	80086cc <UART_Transmit_IT>
    return;
 8008580:	e00e      	b.n	80085a0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <HAL_UART_IRQHandler+0x1f4>
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8ee 	bl	8008778 <UART_EndTransmit_IT>
    return;
 800859c:	e000      	b.n	80085a0 <HAL_UART_IRQHandler+0x1f4>
    return;
 800859e:	bf00      	nop
  }
}
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	080086a5 	.word	0x080086a5

080085ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e4:	e02c      	b.n	8008640 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d028      	beq.n	8008640 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <UART_WaitOnFlagUntilTimeout+0x30>
 80085f4:	f7fb fae2 	bl	8003bbc <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	d21d      	bcs.n	8008640 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008612:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2220      	movs	r2, #32
 8008628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e00f      	b.n	8008660 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4013      	ands	r3, r2
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	429a      	cmp	r2, r3
 800865c:	d0c3      	beq.n	80085e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800867e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff ff7e 	bl	80085c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b21      	cmp	r3, #33	; 0x21
 80086de:	d144      	bne.n	800876a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e8:	d11a      	bne.n	8008720 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	1c9a      	adds	r2, r3, #2
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]
 8008712:	e00e      	b.n	8008732 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	621a      	str	r2, [r3, #32]
 800871e:	e008      	b.n	8008732 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	1c59      	adds	r1, r3, #1
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6211      	str	r1, [r2, #32]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008736:	b29b      	uxth	r3, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	b29b      	uxth	r3, r3
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	4619      	mov	r1, r3
 8008740:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10f      	bne.n	8008766 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008754:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008764:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	e000      	b.n	800876c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800876a:	2302      	movs	r3, #2
  }
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ff07 	bl	80085ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b22      	cmp	r3, #34	; 0x22
 80087ba:	d171      	bne.n	80088a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c4:	d123      	bne.n	800880e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10e      	bne.n	80087f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	1c9a      	adds	r2, r3, #2
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	629a      	str	r2, [r3, #40]	; 0x28
 80087f0:	e029      	b.n	8008846 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	629a      	str	r2, [r3, #40]	; 0x28
 800880c:	e01b      	b.n	8008846 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6858      	ldr	r0, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	1c59      	adds	r1, r3, #1
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6291      	str	r1, [r2, #40]	; 0x28
 8008826:	b2c2      	uxtb	r2, r0
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e00c      	b.n	8008846 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	b2da      	uxtb	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	1c58      	adds	r0, r3, #1
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	6288      	str	r0, [r1, #40]	; 0x28
 800883e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008842:	b2d2      	uxtb	r2, r2
 8008844:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884a:	b29b      	uxth	r3, r3
 800884c:	3b01      	subs	r3, #1
 800884e:	b29b      	uxth	r3, r3
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4619      	mov	r1, r3
 8008854:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008856:	2b00      	cmp	r3, #0
 8008858:	d120      	bne.n	800889c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0220 	bic.w	r2, r2, #32
 8008868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695a      	ldr	r2, [r3, #20]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0201 	bic.w	r2, r2, #1
 8008888:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f8 fdc8 	bl	8001428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e002      	b.n	80088a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	e000      	b.n	80088a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80088a0:	2302      	movs	r3, #2
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	b0bd      	sub	sp, #244	; 0xf4
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c8:	68d9      	ldr	r1, [r3, #12]
 80088ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	ea40 0301 	orr.w	r3, r0, r1
 80088d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	431a      	orrs	r2, r3
 80088ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80088f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008904:	f021 010c 	bic.w	r1, r1, #12
 8008908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008912:	430b      	orrs	r3, r1
 8008914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008926:	6999      	ldr	r1, [r3, #24]
 8008928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	ea40 0301 	orr.w	r3, r0, r1
 8008932:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800893e:	f040 81a5 	bne.w	8008c8c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4bcd      	ldr	r3, [pc, #820]	; (8008c80 <UART_SetConfig+0x3d4>)
 800894a:	429a      	cmp	r2, r3
 800894c:	d006      	beq.n	800895c <UART_SetConfig+0xb0>
 800894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4bcb      	ldr	r3, [pc, #812]	; (8008c84 <UART_SetConfig+0x3d8>)
 8008956:	429a      	cmp	r2, r3
 8008958:	f040 80cb 	bne.w	8008af2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800895c:	f7fd ffb0 	bl	80068c0 <HAL_RCC_GetPCLK2Freq>
 8008960:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008968:	461c      	mov	r4, r3
 800896a:	f04f 0500 	mov.w	r5, #0
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	1891      	adds	r1, r2, r2
 8008974:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008978:	415b      	adcs	r3, r3
 800897a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800897e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008982:	1912      	adds	r2, r2, r4
 8008984:	eb45 0303 	adc.w	r3, r5, r3
 8008988:	f04f 0000 	mov.w	r0, #0
 800898c:	f04f 0100 	mov.w	r1, #0
 8008990:	00d9      	lsls	r1, r3, #3
 8008992:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008996:	00d0      	lsls	r0, r2, #3
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	1911      	adds	r1, r2, r4
 800899e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80089a2:	416b      	adcs	r3, r5
 80089a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	1891      	adds	r1, r2, r2
 80089b6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80089ba:	415b      	adcs	r3, r3
 80089bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80089c4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80089c8:	f7f8 f95e 	bl	8000c88 <__aeabi_uldivmod>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4bad      	ldr	r3, [pc, #692]	; (8008c88 <UART_SetConfig+0x3dc>)
 80089d2:	fba3 2302 	umull	r2, r3, r3, r2
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	011e      	lsls	r6, r3, #4
 80089da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089de:	461c      	mov	r4, r3
 80089e0:	f04f 0500 	mov.w	r5, #0
 80089e4:	4622      	mov	r2, r4
 80089e6:	462b      	mov	r3, r5
 80089e8:	1891      	adds	r1, r2, r2
 80089ea:	67b9      	str	r1, [r7, #120]	; 0x78
 80089ec:	415b      	adcs	r3, r3
 80089ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089f0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80089f4:	1912      	adds	r2, r2, r4
 80089f6:	eb45 0303 	adc.w	r3, r5, r3
 80089fa:	f04f 0000 	mov.w	r0, #0
 80089fe:	f04f 0100 	mov.w	r1, #0
 8008a02:	00d9      	lsls	r1, r3, #3
 8008a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a08:	00d0      	lsls	r0, r2, #3
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	1911      	adds	r1, r2, r4
 8008a10:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008a14:	416b      	adcs	r3, r5
 8008a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	461a      	mov	r2, r3
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	1891      	adds	r1, r2, r2
 8008a28:	6739      	str	r1, [r7, #112]	; 0x70
 8008a2a:	415b      	adcs	r3, r3
 8008a2c:	677b      	str	r3, [r7, #116]	; 0x74
 8008a2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008a32:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008a36:	f7f8 f927 	bl	8000c88 <__aeabi_uldivmod>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4b92      	ldr	r3, [pc, #584]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008a40:	fba3 1302 	umull	r1, r3, r3, r2
 8008a44:	095b      	lsrs	r3, r3, #5
 8008a46:	2164      	movs	r1, #100	; 0x64
 8008a48:	fb01 f303 	mul.w	r3, r1, r3
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	3332      	adds	r3, #50	; 0x32
 8008a52:	4a8d      	ldr	r2, [pc, #564]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008a54:	fba2 2303 	umull	r2, r3, r2, r3
 8008a58:	095b      	lsrs	r3, r3, #5
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a60:	441e      	add	r6, r3
 8008a62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	1894      	adds	r4, r2, r2
 8008a72:	66bc      	str	r4, [r7, #104]	; 0x68
 8008a74:	415b      	adcs	r3, r3
 8008a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008a7c:	1812      	adds	r2, r2, r0
 8008a7e:	eb41 0303 	adc.w	r3, r1, r3
 8008a82:	f04f 0400 	mov.w	r4, #0
 8008a86:	f04f 0500 	mov.w	r5, #0
 8008a8a:	00dd      	lsls	r5, r3, #3
 8008a8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a90:	00d4      	lsls	r4, r2, #3
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	1814      	adds	r4, r2, r0
 8008a98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008a9c:	414b      	adcs	r3, r1
 8008a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	1891      	adds	r1, r2, r2
 8008ab0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ab2:	415b      	adcs	r3, r3
 8008ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ab6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008abe:	f7f8 f8e3 	bl	8000c88 <__aeabi_uldivmod>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4b70      	ldr	r3, [pc, #448]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	2164      	movs	r1, #100	; 0x64
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	3332      	adds	r3, #50	; 0x32
 8008ada:	4a6b      	ldr	r2, [pc, #428]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	f003 0207 	and.w	r2, r3, #7
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4432      	add	r2, r6
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	e26d      	b.n	8008fce <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008af2:	f7fd fed1 	bl	8006898 <HAL_RCC_GetPCLK1Freq>
 8008af6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008afa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008afe:	461c      	mov	r4, r3
 8008b00:	f04f 0500 	mov.w	r5, #0
 8008b04:	4622      	mov	r2, r4
 8008b06:	462b      	mov	r3, r5
 8008b08:	1891      	adds	r1, r2, r2
 8008b0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b0c:	415b      	adcs	r3, r3
 8008b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b14:	1912      	adds	r2, r2, r4
 8008b16:	eb45 0303 	adc.w	r3, r5, r3
 8008b1a:	f04f 0000 	mov.w	r0, #0
 8008b1e:	f04f 0100 	mov.w	r1, #0
 8008b22:	00d9      	lsls	r1, r3, #3
 8008b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b28:	00d0      	lsls	r0, r2, #3
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	1911      	adds	r1, r2, r4
 8008b30:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008b34:	416b      	adcs	r3, r5
 8008b36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	1891      	adds	r1, r2, r2
 8008b48:	6539      	str	r1, [r7, #80]	; 0x50
 8008b4a:	415b      	adcs	r3, r3
 8008b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b52:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008b56:	f7f8 f897 	bl	8000c88 <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4b4a      	ldr	r3, [pc, #296]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008b60:	fba3 2302 	umull	r2, r3, r3, r2
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	011e      	lsls	r6, r3, #4
 8008b68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	f04f 0500 	mov.w	r5, #0
 8008b72:	4622      	mov	r2, r4
 8008b74:	462b      	mov	r3, r5
 8008b76:	1891      	adds	r1, r2, r2
 8008b78:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b7a:	415b      	adcs	r3, r3
 8008b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b82:	1912      	adds	r2, r2, r4
 8008b84:	eb45 0303 	adc.w	r3, r5, r3
 8008b88:	f04f 0000 	mov.w	r0, #0
 8008b8c:	f04f 0100 	mov.w	r1, #0
 8008b90:	00d9      	lsls	r1, r3, #3
 8008b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b96:	00d0      	lsls	r0, r2, #3
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	1911      	adds	r1, r2, r4
 8008b9e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008ba2:	416b      	adcs	r3, r5
 8008ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	1891      	adds	r1, r2, r2
 8008bb6:	6439      	str	r1, [r7, #64]	; 0x40
 8008bb8:	415b      	adcs	r3, r3
 8008bba:	647b      	str	r3, [r7, #68]	; 0x44
 8008bbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bc0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008bc4:	f7f8 f860 	bl	8000c88 <__aeabi_uldivmod>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4b2e      	ldr	r3, [pc, #184]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008bce:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2164      	movs	r1, #100	; 0x64
 8008bd6:	fb01 f303 	mul.w	r3, r1, r3
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	3332      	adds	r3, #50	; 0x32
 8008be0:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bee:	441e      	add	r6, r3
 8008bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f04f 0100 	mov.w	r1, #0
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	1894      	adds	r4, r2, r2
 8008c00:	63bc      	str	r4, [r7, #56]	; 0x38
 8008c02:	415b      	adcs	r3, r3
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c0a:	1812      	adds	r2, r2, r0
 8008c0c:	eb41 0303 	adc.w	r3, r1, r3
 8008c10:	f04f 0400 	mov.w	r4, #0
 8008c14:	f04f 0500 	mov.w	r5, #0
 8008c18:	00dd      	lsls	r5, r3, #3
 8008c1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c1e:	00d4      	lsls	r4, r2, #3
 8008c20:	4622      	mov	r2, r4
 8008c22:	462b      	mov	r3, r5
 8008c24:	1814      	adds	r4, r2, r0
 8008c26:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008c2a:	414b      	adcs	r3, r1
 8008c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	1891      	adds	r1, r2, r2
 8008c3e:	6339      	str	r1, [r7, #48]	; 0x30
 8008c40:	415b      	adcs	r3, r3
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
 8008c44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c48:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c4c:	f7f8 f81c 	bl	8000c88 <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008c56:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2164      	movs	r1, #100	; 0x64
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	3332      	adds	r3, #50	; 0x32
 8008c68:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <UART_SetConfig+0x3dc>)
 8008c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	f003 0207 	and.w	r2, r3, #7
 8008c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4432      	add	r2, r6
 8008c7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008c7e:	e1a6      	b.n	8008fce <UART_SetConfig+0x722>
 8008c80:	40011000 	.word	0x40011000
 8008c84:	40011400 	.word	0x40011400
 8008c88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	4bd1      	ldr	r3, [pc, #836]	; (8008fd8 <UART_SetConfig+0x72c>)
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d006      	beq.n	8008ca6 <UART_SetConfig+0x3fa>
 8008c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4bcf      	ldr	r3, [pc, #828]	; (8008fdc <UART_SetConfig+0x730>)
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	f040 80ca 	bne.w	8008e3a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ca6:	f7fd fe0b 	bl	80068c0 <HAL_RCC_GetPCLK2Freq>
 8008caa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cb2:	461c      	mov	r4, r3
 8008cb4:	f04f 0500 	mov.w	r5, #0
 8008cb8:	4622      	mov	r2, r4
 8008cba:	462b      	mov	r3, r5
 8008cbc:	1891      	adds	r1, r2, r2
 8008cbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cc0:	415b      	adcs	r3, r3
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cc8:	1912      	adds	r2, r2, r4
 8008cca:	eb45 0303 	adc.w	r3, r5, r3
 8008cce:	f04f 0000 	mov.w	r0, #0
 8008cd2:	f04f 0100 	mov.w	r1, #0
 8008cd6:	00d9      	lsls	r1, r3, #3
 8008cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cdc:	00d0      	lsls	r0, r2, #3
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	eb12 0a04 	adds.w	sl, r2, r4
 8008ce6:	eb43 0b05 	adc.w	fp, r3, r5
 8008cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f04f 0100 	mov.w	r1, #0
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	008b      	lsls	r3, r1, #2
 8008d00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d04:	0082      	lsls	r2, r0, #2
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	f7f7 ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4bb3      	ldr	r3, [pc, #716]	; (8008fe0 <UART_SetConfig+0x734>)
 8008d14:	fba3 2302 	umull	r2, r3, r3, r2
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	011e      	lsls	r6, r3, #4
 8008d1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d20:	4618      	mov	r0, r3
 8008d22:	f04f 0100 	mov.w	r1, #0
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	1894      	adds	r4, r2, r2
 8008d2c:	623c      	str	r4, [r7, #32]
 8008d2e:	415b      	adcs	r3, r3
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
 8008d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d36:	1812      	adds	r2, r2, r0
 8008d38:	eb41 0303 	adc.w	r3, r1, r3
 8008d3c:	f04f 0400 	mov.w	r4, #0
 8008d40:	f04f 0500 	mov.w	r5, #0
 8008d44:	00dd      	lsls	r5, r3, #3
 8008d46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d4a:	00d4      	lsls	r4, r2, #3
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	1814      	adds	r4, r2, r0
 8008d52:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008d56:	414b      	adcs	r3, r1
 8008d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f04f 0100 	mov.w	r1, #0
 8008d68:	f04f 0200 	mov.w	r2, #0
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	008b      	lsls	r3, r1, #2
 8008d72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d76:	0082      	lsls	r2, r0, #2
 8008d78:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008d7c:	f7f7 ff84 	bl	8000c88 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4b96      	ldr	r3, [pc, #600]	; (8008fe0 <UART_SetConfig+0x734>)
 8008d86:	fba3 1302 	umull	r1, r3, r3, r2
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	2164      	movs	r1, #100	; 0x64
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	3332      	adds	r3, #50	; 0x32
 8008d98:	4a91      	ldr	r2, [pc, #580]	; (8008fe0 <UART_SetConfig+0x734>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008da4:	441e      	add	r6, r3
 8008da6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008daa:	4618      	mov	r0, r3
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	1894      	adds	r4, r2, r2
 8008db6:	61bc      	str	r4, [r7, #24]
 8008db8:	415b      	adcs	r3, r3
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dc0:	1812      	adds	r2, r2, r0
 8008dc2:	eb41 0303 	adc.w	r3, r1, r3
 8008dc6:	f04f 0400 	mov.w	r4, #0
 8008dca:	f04f 0500 	mov.w	r5, #0
 8008dce:	00dd      	lsls	r5, r3, #3
 8008dd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dd4:	00d4      	lsls	r4, r2, #3
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	462b      	mov	r3, r5
 8008dda:	1814      	adds	r4, r2, r0
 8008ddc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008de0:	414b      	adcs	r3, r1
 8008de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	008b      	lsls	r3, r1, #2
 8008dfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e00:	0082      	lsls	r2, r0, #2
 8008e02:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008e06:	f7f7 ff3f 	bl	8000c88 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4b74      	ldr	r3, [pc, #464]	; (8008fe0 <UART_SetConfig+0x734>)
 8008e10:	fba3 1302 	umull	r1, r3, r3, r2
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	2164      	movs	r1, #100	; 0x64
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	3332      	adds	r3, #50	; 0x32
 8008e22:	4a6f      	ldr	r2, [pc, #444]	; (8008fe0 <UART_SetConfig+0x734>)
 8008e24:	fba2 2303 	umull	r2, r3, r2, r3
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f003 020f 	and.w	r2, r3, #15
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4432      	add	r2, r6
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	e0c9      	b.n	8008fce <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e3a:	f7fd fd2d 	bl	8006898 <HAL_RCC_GetPCLK1Freq>
 8008e3e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e46:	461c      	mov	r4, r3
 8008e48:	f04f 0500 	mov.w	r5, #0
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	462b      	mov	r3, r5
 8008e50:	1891      	adds	r1, r2, r2
 8008e52:	6139      	str	r1, [r7, #16]
 8008e54:	415b      	adcs	r3, r3
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e5c:	1912      	adds	r2, r2, r4
 8008e5e:	eb45 0303 	adc.w	r3, r5, r3
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	00d9      	lsls	r1, r3, #3
 8008e6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e70:	00d0      	lsls	r0, r2, #3
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	eb12 0804 	adds.w	r8, r2, r4
 8008e7a:	eb43 0905 	adc.w	r9, r3, r5
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f04f 0100 	mov.w	r1, #0
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	008b      	lsls	r3, r1, #2
 8008e94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e98:	0082      	lsls	r2, r0, #2
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 fef3 	bl	8000c88 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <UART_SetConfig+0x734>)
 8008ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	011e      	lsls	r6, r3, #4
 8008eb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f04f 0100 	mov.w	r1, #0
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	1894      	adds	r4, r2, r2
 8008ec0:	60bc      	str	r4, [r7, #8]
 8008ec2:	415b      	adcs	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eca:	1812      	adds	r2, r2, r0
 8008ecc:	eb41 0303 	adc.w	r3, r1, r3
 8008ed0:	f04f 0400 	mov.w	r4, #0
 8008ed4:	f04f 0500 	mov.w	r5, #0
 8008ed8:	00dd      	lsls	r5, r3, #3
 8008eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ede:	00d4      	lsls	r4, r2, #3
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	1814      	adds	r4, r2, r0
 8008ee6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008eea:	414b      	adcs	r3, r1
 8008eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f04f 0100 	mov.w	r1, #0
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	008b      	lsls	r3, r1, #2
 8008f06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f0a:	0082      	lsls	r2, r0, #2
 8008f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f10:	f7f7 feba 	bl	8000c88 <__aeabi_uldivmod>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <UART_SetConfig+0x734>)
 8008f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	2164      	movs	r1, #100	; 0x64
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	3332      	adds	r3, #50	; 0x32
 8008f2c:	4a2c      	ldr	r2, [pc, #176]	; (8008fe0 <UART_SetConfig+0x734>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f38:	441e      	add	r6, r3
 8008f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f04f 0100 	mov.w	r1, #0
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	1894      	adds	r4, r2, r2
 8008f4a:	603c      	str	r4, [r7, #0]
 8008f4c:	415b      	adcs	r3, r3
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	1812      	adds	r2, r2, r0
 8008f56:	eb41 0303 	adc.w	r3, r1, r3
 8008f5a:	f04f 0400 	mov.w	r4, #0
 8008f5e:	f04f 0500 	mov.w	r5, #0
 8008f62:	00dd      	lsls	r5, r3, #3
 8008f64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f68:	00d4      	lsls	r4, r2, #3
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	1814      	adds	r4, r2, r0
 8008f70:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008f74:	414b      	adcs	r3, r1
 8008f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f04f 0100 	mov.w	r1, #0
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	008b      	lsls	r3, r1, #2
 8008f90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f94:	0082      	lsls	r2, r0, #2
 8008f96:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008f9a:	f7f7 fe75 	bl	8000c88 <__aeabi_uldivmod>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <UART_SetConfig+0x734>)
 8008fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	2164      	movs	r1, #100	; 0x64
 8008fac:	fb01 f303 	mul.w	r3, r1, r3
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	3332      	adds	r3, #50	; 0x32
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <UART_SetConfig+0x734>)
 8008fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	f003 020f 	and.w	r2, r3, #15
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4432      	add	r2, r6
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	e7ff      	b.n	8008fce <UART_SetConfig+0x722>
 8008fce:	bf00      	nop
 8008fd0:	37f4      	adds	r7, #244	; 0xf4
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd8:	40011000 	.word	0x40011000
 8008fdc:	40011400 	.word	0x40011400
 8008fe0:	51eb851f 	.word	0x51eb851f

08008fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	f107 001c 	add.w	r0, r7, #28
 8008ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d122      	bne.n	8009042 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009026:	2b01      	cmp	r3, #1
 8009028:	d105      	bne.n	8009036 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 f9ea 	bl	800a410 <USB_CoreReset>
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e01a      	b.n	8009078 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 f9de 	bl	800a410 <USB_CoreReset>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
 800906a:	e005      	b.n	8009078 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	2b01      	cmp	r3, #1
 800907c:	d10b      	bne.n	8009096 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f043 0206 	orr.w	r2, r3, #6
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f043 0220 	orr.w	r2, r3, #32
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a2:	b004      	add	sp, #16
 80090a4:	4770      	bx	lr
	...

080090a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d165      	bne.n	8009188 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a41      	ldr	r2, [pc, #260]	; (80091c4 <USB_SetTurnaroundTime+0x11c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d906      	bls.n	80090d2 <USB_SetTurnaroundTime+0x2a>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a40      	ldr	r2, [pc, #256]	; (80091c8 <USB_SetTurnaroundTime+0x120>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d202      	bcs.n	80090d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090cc:	230f      	movs	r3, #15
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e062      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a3c      	ldr	r2, [pc, #240]	; (80091c8 <USB_SetTurnaroundTime+0x120>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d306      	bcc.n	80090e8 <USB_SetTurnaroundTime+0x40>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a3b      	ldr	r2, [pc, #236]	; (80091cc <USB_SetTurnaroundTime+0x124>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d202      	bcs.n	80090e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090e2:	230e      	movs	r3, #14
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e057      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a38      	ldr	r2, [pc, #224]	; (80091cc <USB_SetTurnaroundTime+0x124>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d306      	bcc.n	80090fe <USB_SetTurnaroundTime+0x56>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a37      	ldr	r2, [pc, #220]	; (80091d0 <USB_SetTurnaroundTime+0x128>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d202      	bcs.n	80090fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090f8:	230d      	movs	r3, #13
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	e04c      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4a33      	ldr	r2, [pc, #204]	; (80091d0 <USB_SetTurnaroundTime+0x128>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d306      	bcc.n	8009114 <USB_SetTurnaroundTime+0x6c>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a32      	ldr	r2, [pc, #200]	; (80091d4 <USB_SetTurnaroundTime+0x12c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d802      	bhi.n	8009114 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800910e:	230c      	movs	r3, #12
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	e041      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a2f      	ldr	r2, [pc, #188]	; (80091d4 <USB_SetTurnaroundTime+0x12c>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d906      	bls.n	800912a <USB_SetTurnaroundTime+0x82>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4a2e      	ldr	r2, [pc, #184]	; (80091d8 <USB_SetTurnaroundTime+0x130>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d802      	bhi.n	800912a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009124:	230b      	movs	r3, #11
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e036      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4a2a      	ldr	r2, [pc, #168]	; (80091d8 <USB_SetTurnaroundTime+0x130>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d906      	bls.n	8009140 <USB_SetTurnaroundTime+0x98>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4a29      	ldr	r2, [pc, #164]	; (80091dc <USB_SetTurnaroundTime+0x134>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d802      	bhi.n	8009140 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800913a:	230a      	movs	r3, #10
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e02b      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	4a26      	ldr	r2, [pc, #152]	; (80091dc <USB_SetTurnaroundTime+0x134>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d906      	bls.n	8009156 <USB_SetTurnaroundTime+0xae>
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4a25      	ldr	r2, [pc, #148]	; (80091e0 <USB_SetTurnaroundTime+0x138>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d202      	bcs.n	8009156 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009150:	2309      	movs	r3, #9
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e020      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4a21      	ldr	r2, [pc, #132]	; (80091e0 <USB_SetTurnaroundTime+0x138>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d306      	bcc.n	800916c <USB_SetTurnaroundTime+0xc4>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	4a20      	ldr	r2, [pc, #128]	; (80091e4 <USB_SetTurnaroundTime+0x13c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d802      	bhi.n	800916c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009166:	2308      	movs	r3, #8
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e015      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <USB_SetTurnaroundTime+0x13c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d906      	bls.n	8009182 <USB_SetTurnaroundTime+0xda>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <USB_SetTurnaroundTime+0x140>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d202      	bcs.n	8009182 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800917c:	2307      	movs	r3, #7
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e00a      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009182:	2306      	movs	r3, #6
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e007      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800918e:	2309      	movs	r3, #9
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e001      	b.n	8009198 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009194:	2309      	movs	r3, #9
 8009196:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	029b      	lsls	r3, r3, #10
 80091ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091b0:	431a      	orrs	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	00d8acbf 	.word	0x00d8acbf
 80091c8:	00e4e1c0 	.word	0x00e4e1c0
 80091cc:	00f42400 	.word	0x00f42400
 80091d0:	01067380 	.word	0x01067380
 80091d4:	011a499f 	.word	0x011a499f
 80091d8:	01312cff 	.word	0x01312cff
 80091dc:	014ca43f 	.word	0x014ca43f
 80091e0:	016e3600 	.word	0x016e3600
 80091e4:	01a6ab1f 	.word	0x01a6ab1f
 80091e8:	01e84800 	.word	0x01e84800

080091ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f043 0201 	orr.w	r2, r3, #1
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f023 0201 	bic.w	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d106      	bne.n	800925c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	e00b      	b.n	8009274 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	e001      	b.n	8009274 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e003      	b.n	800927c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009274:	2032      	movs	r0, #50	; 0x32
 8009276:	f7fa fcad 	bl	8003bd4 <HAL_Delay>

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009284:	b084      	sub	sp, #16
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	e009      	b.n	80092b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3340      	adds	r3, #64	; 0x40
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	2200      	movs	r2, #0
 80092b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	3301      	adds	r3, #1
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2b0e      	cmp	r3, #14
 80092bc:	d9f2      	bls.n	80092a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11c      	bne.n	80092fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d2:	f043 0302 	orr.w	r3, r3, #2
 80092d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
 80092fc:	e00b      	b.n	8009316 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800931c:	461a      	mov	r2, r3
 800931e:	2300      	movs	r3, #0
 8009320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009328:	4619      	mov	r1, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009330:	461a      	mov	r2, r3
 8009332:	680b      	ldr	r3, [r1, #0]
 8009334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	2b01      	cmp	r3, #1
 800933a:	d10c      	bne.n	8009356 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009342:	2100      	movs	r1, #0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f949 	bl	80095dc <USB_SetDevSpeed>
 800934a:	e008      	b.n	800935e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800934c:	2101      	movs	r1, #1
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f944 	bl	80095dc <USB_SetDevSpeed>
 8009354:	e003      	b.n	800935e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009356:	2103      	movs	r1, #3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f93f 	bl	80095dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800935e:	2110      	movs	r1, #16
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8f3 	bl	800954c <USB_FlushTxFifo>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f911 	bl	8009598 <USB_FlushRxFifo>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	461a      	mov	r2, r3
 8009388:	2300      	movs	r3, #0
 800938a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009392:	461a      	mov	r2, r3
 8009394:	2300      	movs	r3, #0
 8009396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	461a      	mov	r2, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093a4:	2300      	movs	r3, #0
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	e043      	b.n	8009432 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093c0:	d118      	bne.n	80093f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	461a      	mov	r2, r3
 80093d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	e013      	b.n	8009406 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ea:	461a      	mov	r2, r3
 80093ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	e008      	b.n	8009406 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	461a      	mov	r2, r3
 8009402:	2300      	movs	r3, #0
 8009404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009412:	461a      	mov	r2, r3
 8009414:	2300      	movs	r3, #0
 8009416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	461a      	mov	r2, r3
 8009426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800942a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	3301      	adds	r3, #1
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	429a      	cmp	r2, r3
 8009438:	d3b7      	bcc.n	80093aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800943a:	2300      	movs	r3, #0
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	e043      	b.n	80094c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009456:	d118      	bne.n	800948a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10a      	bne.n	8009474 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946a:	461a      	mov	r2, r3
 800946c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e013      	b.n	800949c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009480:	461a      	mov	r2, r3
 8009482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	e008      	b.n	800949c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	461a      	mov	r2, r3
 8009498:	2300      	movs	r3, #0
 800949a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	461a      	mov	r2, r3
 80094aa:	2300      	movs	r3, #0
 80094ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ba:	461a      	mov	r2, r3
 80094bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	3301      	adds	r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d3b7      	bcc.n	8009440 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f043 0210 	orr.w	r2, r3, #16
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <USB_DevInit+0x2c4>)
 800950a:	4313      	orrs	r3, r2
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f043 0208 	orr.w	r2, r3, #8
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d107      	bne.n	8009538 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009530:	f043 0304 	orr.w	r3, r3, #4
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009544:	b004      	add	sp, #16
 8009546:	4770      	bx	lr
 8009548:	803c3800 	.word	0x803c3800

0800954c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	019b      	lsls	r3, r3, #6
 800955e:	f043 0220 	orr.w	r2, r3, #32
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3301      	adds	r3, #1
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a09      	ldr	r2, [pc, #36]	; (8009594 <USB_FlushTxFifo+0x48>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d901      	bls.n	8009578 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e006      	b.n	8009586 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b20      	cmp	r3, #32
 8009582:	d0f0      	beq.n	8009566 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	00030d40 	.word	0x00030d40

08009598 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2210      	movs	r2, #16
 80095a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <USB_FlushRxFifo+0x40>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d901      	bls.n	80095bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e006      	b.n	80095ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f003 0310 	and.w	r3, r3, #16
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d0f0      	beq.n	80095aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	00030d40 	.word	0x00030d40

080095dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095fc:	4313      	orrs	r3, r2
 80095fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800960e:	b480      	push	{r7}
 8009610:	b087      	sub	sp, #28
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0306 	and.w	r3, r3, #6
 8009626:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
 8009632:	e00a      	b.n	800964a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d002      	beq.n	8009640 <USB_GetDevSpeed+0x32>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b06      	cmp	r3, #6
 800963e:	d102      	bne.n	8009646 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009640:	2302      	movs	r3, #2
 8009642:	75fb      	strb	r3, [r7, #23]
 8009644:	e001      	b.n	800964a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009646:	230f      	movs	r3, #15
 8009648:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d13a      	bne.n	80096ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967a:	69da      	ldr	r2, [r3, #28]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	f003 030f 	and.w	r3, r3, #15
 8009684:	2101      	movs	r1, #1
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	b29b      	uxth	r3, r3
 800968c:	68f9      	ldr	r1, [r7, #12]
 800968e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009692:	4313      	orrs	r3, r2
 8009694:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d155      	bne.n	8009758 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	78db      	ldrb	r3, [r3, #3]
 80096c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	059b      	lsls	r3, r3, #22
 80096ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096d0:	4313      	orrs	r3, r2
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	0151      	lsls	r1, r2, #5
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	440a      	add	r2, r1
 80096da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	e036      	b.n	8009758 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f0:	69da      	ldr	r2, [r3, #28]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	2101      	movs	r1, #1
 80096fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009700:	041b      	lsls	r3, r3, #16
 8009702:	68f9      	ldr	r1, [r7, #12]
 8009704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009708:	4313      	orrs	r3, r2
 800970a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d11a      	bne.n	8009758 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	78db      	ldrb	r3, [r3, #3]
 800973c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800973e:	430b      	orrs	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009756:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f040 815c 	bne.w	8009a42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d132      	bne.n	80097f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f0:	0cdb      	lsrs	r3, r3, #19
 80097f2:	04db      	lsls	r3, r3, #19
 80097f4:	6113      	str	r3, [r2, #16]
 80097f6:	e074      	b.n	80098e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	440a      	add	r2, r1
 800980e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009812:	0cdb      	lsrs	r3, r3, #19
 8009814:	04db      	lsls	r3, r3, #19
 8009816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800983a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6959      	ldr	r1, [r3, #20]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	440b      	add	r3, r1
 8009854:	1e59      	subs	r1, r3, #1
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	fbb1 f3f3 	udiv	r3, r1, r3
 800985e:	04d9      	lsls	r1, r3, #19
 8009860:	4b9d      	ldr	r3, [pc, #628]	; (8009ad8 <USB_EPStartXfer+0x370>)
 8009862:	400b      	ands	r3, r1
 8009864:	69b9      	ldr	r1, [r7, #24]
 8009866:	0148      	lsls	r0, r1, #5
 8009868:	69f9      	ldr	r1, [r7, #28]
 800986a:	4401      	add	r1, r0
 800986c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009870:	4313      	orrs	r3, r2
 8009872:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	691a      	ldr	r2, [r3, #16]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800988a:	69b9      	ldr	r1, [r7, #24]
 800988c:	0148      	lsls	r0, r1, #5
 800988e:	69f9      	ldr	r1, [r7, #28]
 8009890:	4401      	add	r1, r0
 8009892:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009896:	4313      	orrs	r3, r2
 8009898:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	78db      	ldrb	r3, [r3, #3]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d11f      	bne.n	80098e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80098c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d14b      	bne.n	8009980 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	461a      	mov	r2, r3
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	78db      	ldrb	r3, [r3, #3]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d128      	bne.n	800995e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d110      	bne.n	800993e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e00f      	b.n	800995e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800995c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	0151      	lsls	r1, r2, #5
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	440a      	add	r2, r1
 8009974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e12f      	b.n	8009be0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800999e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	78db      	ldrb	r3, [r3, #3]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d015      	beq.n	80099d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8117 	beq.w	8009be0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	2101      	movs	r1, #1
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	69f9      	ldr	r1, [r7, #28]
 80099ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ce:	4313      	orrs	r3, r2
 80099d0:	634b      	str	r3, [r1, #52]	; 0x34
 80099d2:	e105      	b.n	8009be0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d110      	bne.n	8009a06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	e00f      	b.n	8009a26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	68d9      	ldr	r1, [r3, #12]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	b298      	uxth	r0, r3
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	4603      	mov	r3, r0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fa2b 	bl	8009e96 <USB_WritePacket>
 8009a40:	e0ce      	b.n	8009be0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5c:	0cdb      	lsrs	r3, r3, #19
 8009a5e:	04db      	lsls	r3, r3, #19
 8009a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d126      	bne.n	8009adc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	691a      	ldr	r2, [r3, #16]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aa4:	69b9      	ldr	r1, [r7, #24]
 8009aa6:	0148      	lsls	r0, r1, #5
 8009aa8:	69f9      	ldr	r1, [r7, #28]
 8009aaa:	4401      	add	r1, r0
 8009aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	0151      	lsls	r1, r2, #5
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	440a      	add	r2, r1
 8009aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ad2:	6113      	str	r3, [r2, #16]
 8009ad4:	e036      	b.n	8009b44 <USB_EPStartXfer+0x3dc>
 8009ad6:	bf00      	nop
 8009ad8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	695a      	ldr	r2, [r3, #20]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	1e5a      	subs	r2, r3, #1
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	8afb      	ldrh	r3, [r7, #22]
 8009b02:	04d9      	lsls	r1, r3, #19
 8009b04:	4b39      	ldr	r3, [pc, #228]	; (8009bec <USB_EPStartXfer+0x484>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	69b9      	ldr	r1, [r7, #24]
 8009b0a:	0148      	lsls	r0, r1, #5
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	4401      	add	r1, r0
 8009b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b14:	4313      	orrs	r3, r2
 8009b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	8af9      	ldrh	r1, [r7, #22]
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
 8009b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b34:	69b9      	ldr	r1, [r7, #24]
 8009b36:	0148      	lsls	r0, r1, #5
 8009b38:	69f9      	ldr	r1, [r7, #28]
 8009b3a:	4401      	add	r1, r0
 8009b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b40:	4313      	orrs	r3, r2
 8009b42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d10d      	bne.n	8009b66 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	68d9      	ldr	r1, [r3, #12]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	460a      	mov	r2, r1
 8009b64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	78db      	ldrb	r3, [r3, #3]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d128      	bne.n	8009bc0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d110      	bne.n	8009ba0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e00f      	b.n	8009bc0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	0151      	lsls	r1, r2, #5
 8009bd2:	69fa      	ldr	r2, [r7, #28]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	1ff80000 	.word	0x1ff80000

08009bf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	785b      	ldrb	r3, [r3, #1]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	f040 80cd 	bne.w	8009dac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d132      	bne.n	8009c80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	0151      	lsls	r1, r2, #5
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	440a      	add	r2, r1
 8009c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c78:	0cdb      	lsrs	r3, r3, #19
 8009c7a:	04db      	lsls	r3, r3, #19
 8009c7c:	6113      	str	r3, [r2, #16]
 8009c7e:	e04e      	b.n	8009d1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9a:	0cdb      	lsrs	r3, r3, #19
 8009c9c:	04db      	lsls	r3, r3, #19
 8009c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	695a      	ldr	r2, [r3, #20]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d903      	bls.n	8009cd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	0151      	lsls	r1, r2, #5
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	440a      	add	r2, r1
 8009cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d04:	691a      	ldr	r2, [r3, #16]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d0e:	6939      	ldr	r1, [r7, #16]
 8009d10:	0148      	lsls	r0, r1, #5
 8009d12:	6979      	ldr	r1, [r7, #20]
 8009d14:	4401      	add	r1, r0
 8009d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d11e      	bne.n	8009d62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d009      	beq.n	8009d40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	e092      	b.n	8009e88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	0151      	lsls	r1, r2, #5
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	440a      	add	r2, r1
 8009d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d07e      	beq.n	8009e88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	6979      	ldr	r1, [r7, #20]
 8009da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da6:	4313      	orrs	r3, r2
 8009da8:	634b      	str	r3, [r1, #52]	; 0x34
 8009daa:	e06d      	b.n	8009e88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc6:	0cdb      	lsrs	r3, r3, #19
 8009dc8:	04db      	lsls	r3, r3, #19
 8009dca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e36:	6939      	ldr	r1, [r7, #16]
 8009e38:	0148      	lsls	r0, r1, #5
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	4401      	add	r1, r0
 8009e3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e42:	4313      	orrs	r3, r2
 8009e44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d10d      	bne.n	8009e68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	68d9      	ldr	r1, [r3, #12]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e64:	460a      	mov	r2, r1
 8009e66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	371c      	adds	r7, #28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b089      	sub	sp, #36	; 0x24
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	71fb      	strb	r3, [r7, #7]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11a      	bne.n	8009ef2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ebc:	88bb      	ldrh	r3, [r7, #4]
 8009ebe:	3303      	adds	r3, #3
 8009ec0:	089b      	lsrs	r3, r3, #2
 8009ec2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	e00f      	b.n	8009eea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	031a      	lsls	r2, r3, #12
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d3eb      	bcc.n	8009eca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3724      	adds	r7, #36	; 0x24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b089      	sub	sp, #36	; 0x24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	3303      	adds	r3, #3
 8009f1a:	089b      	lsrs	r3, r3, #2
 8009f1c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	e00b      	b.n	8009f3c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3304      	adds	r3, #4
 8009f34:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	61bb      	str	r3, [r7, #24]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d3ef      	bcc.n	8009f24 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009f44:	69fb      	ldr	r3, [r7, #28]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3724      	adds	r7, #36	; 0x24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	785b      	ldrb	r3, [r3, #1]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d12c      	bne.n	8009fc8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	db12      	blt.n	8009fa6 <USB_EPSetStall+0x54>
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00f      	beq.n	8009fa6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fa4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e02b      	b.n	800a020 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	db12      	blt.n	800a000 <USB_EPSetStall+0xae>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00f      	beq.n	800a000 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	0151      	lsls	r1, r2, #5
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ffe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	0151      	lsls	r1, r2, #5
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	440a      	add	r2, r1
 800a016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a01e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a02e:	b480      	push	{r7}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d128      	bne.n	800a09c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a064:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a068:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	78db      	ldrb	r3, [r3, #3]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d003      	beq.n	800a07a <USB_EPClearStall+0x4c>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	78db      	ldrb	r3, [r3, #3]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d138      	bne.n	800a0ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	e027      	b.n	800a0ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	78db      	ldrb	r3, [r3, #3]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d003      	beq.n	800a0cc <USB_EPClearStall+0x9e>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	78db      	ldrb	r3, [r3, #3]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d10f      	bne.n	800a0ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a118:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a11c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a12e:	68f9      	ldr	r1, [r7, #12]
 800a130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a134:	4313      	orrs	r3, r2
 800a136:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a174:	f023 0302 	bic.w	r3, r3, #2
 800a178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b6:	f043 0302 	orr.w	r3, r3, #2
 800a1ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4013      	ands	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	0c1b      	lsrs	r3, r3, #16
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	4013      	ands	r3, r2
 800a246:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	b29b      	uxth	r3, r3
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	4013      	ands	r3, r2
 800a284:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a286:	68bb      	ldr	r3, [r7, #8]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c4:	01db      	lsls	r3, r3, #7
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	371c      	adds	r7, #28
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	f003 0301 	and.w	r3, r3, #1
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a326:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a32a:	f023 0307 	bic.w	r3, r3, #7
 800a32e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a33e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a342:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
	...

0800a354 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	460b      	mov	r3, r1
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	333c      	adds	r3, #60	; 0x3c
 800a36a:	3304      	adds	r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	4a26      	ldr	r2, [pc, #152]	; (800a40c <USB_EP0_OutStart+0xb8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d90a      	bls.n	800a38e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a388:	d101      	bne.n	800a38e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e037      	b.n	800a3fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	461a      	mov	r2, r3
 800a396:	2300      	movs	r3, #0
 800a398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f043 0318 	orr.w	r3, r3, #24
 800a3c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d10f      	bne.n	800a3fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	4f54300a 	.word	0x4f54300a

0800a410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4a13      	ldr	r2, [pc, #76]	; (800a474 <USB_CoreReset+0x64>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d901      	bls.n	800a42e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e01b      	b.n	800a466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	daf2      	bge.n	800a41c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f043 0201 	orr.w	r2, r3, #1
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4a09      	ldr	r2, [pc, #36]	; (800a474 <USB_CoreReset+0x64>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d901      	bls.n	800a458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e006      	b.n	800a466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b01      	cmp	r3, #1
 800a462:	d0f0      	beq.n	800a446 <USB_CoreReset+0x36>

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	00030d40 	.word	0x00030d40

0800a478 <__NVIC_SystemReset>:
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a47c:	f3bf 8f4f 	dsb	sy
}
 800a480:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a482:	4b06      	ldr	r3, [pc, #24]	; (800a49c <__NVIC_SystemReset+0x24>)
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a48a:	4904      	ldr	r1, [pc, #16]	; (800a49c <__NVIC_SystemReset+0x24>)
 800a48c:	4b04      	ldr	r3, [pc, #16]	; (800a4a0 <__NVIC_SystemReset+0x28>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a492:	f3bf 8f4f 	dsb	sy
}
 800a496:	bf00      	nop
    __NOP();
 800a498:	bf00      	nop
 800a49a:	e7fd      	b.n	800a498 <__NVIC_SystemReset+0x20>
 800a49c:	e000ed00 	.word	0xe000ed00
 800a4a0:	05fa0004 	.word	0x05fa0004

0800a4a4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800a4b0:	f240 401c 	movw	r0, #1052	; 0x41c
 800a4b4:	f002 fc08 	bl	800ccc8 <malloc>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d105      	bne.n	800a4ce <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e03f      	b.n	800a54e <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	e000      	b.n	800a54e <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800a56c:	2302      	movs	r3, #2
 800a56e:	e027      	b.n	800a5c0 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a576:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2202      	movs	r2, #2
 800a58c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f002 fb91 	bl	800ccd8 <free>
  pdev->pClassData = NULL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d03f      	beq.n	800a676 <USBD_DFU_Setup+0xae>
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	f040 80c3 	bne.w	800a782 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	2b06      	cmp	r3, #6
 800a602:	d830      	bhi.n	800a666 <USBD_DFU_Setup+0x9e>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <USBD_DFU_Setup+0x44>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a65d 	.word	0x0800a65d
 800a610:	0800a629 	.word	0x0800a629
 800a614:	0800a633 	.word	0x0800a633
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a64d 	.word	0x0800a64d
 800a624:	0800a655 	.word	0x0800a655
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa5c 	bl	800aae8 <DFU_Download>
      break;
 800a630:	e020      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fac0 	bl	800abba <DFU_Upload>
      break;
 800a63a:	e01b      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb91 	bl	800ad64 <DFU_GetStatus>
      break;
 800a642:	e017      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fc3f 	bl	800aec8 <DFU_ClearStatus>
      break;
 800a64a:	e013      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fc8b 	bl	800af68 <DFU_GetState>
      break;
 800a652:	e00f      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fc9b 	bl	800af90 <DFU_Abort>
      break;
 800a65a:	e00b      	b.n	800a674 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9e2 	bl	800aa28 <DFU_Detach>
      break;
 800a664:	e006      	b.n	800a674 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 fd84 	bl	800c176 <USBD_CtlError>
      ret = USBD_FAIL;
 800a66e:	2303      	movs	r3, #3
 800a670:	77fb      	strb	r3, [r7, #31]
      break;
 800a672:	bf00      	nop
    }
    break;
 800a674:	e08c      	b.n	800a790 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b0b      	cmp	r3, #11
 800a67c:	d878      	bhi.n	800a770 <USBD_DFU_Setup+0x1a8>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <USBD_DFU_Setup+0xbc>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a6b5 	.word	0x0800a6b5
 800a688:	0800a77f 	.word	0x0800a77f
 800a68c:	0800a771 	.word	0x0800a771
 800a690:	0800a771 	.word	0x0800a771
 800a694:	0800a771 	.word	0x0800a771
 800a698:	0800a771 	.word	0x0800a771
 800a69c:	0800a6dd 	.word	0x0800a6dd
 800a6a0:	0800a771 	.word	0x0800a771
 800a6a4:	0800a771 	.word	0x0800a771
 800a6a8:	0800a771 	.word	0x0800a771
 800a6ac:	0800a707 	.word	0x0800a707
 800a6b0:	0800a731 	.word	0x0800a731
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d107      	bne.n	800a6ce <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6be:	f107 030e 	add.w	r3, r7, #14
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fdc6 	bl	800c258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6cc:	e058      	b.n	800a780 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 fd50 	bl	800c176 <USBD_CtlError>
        ret = USBD_FAIL;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	77fb      	strb	r3, [r7, #31]
      break;
 800a6da:	e051      	b.n	800a780 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	0a1b      	lsrs	r3, r3, #8
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b21      	cmp	r3, #33	; 0x21
 800a6e6:	d107      	bne.n	800a6f8 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800a6e8:	4b2c      	ldr	r3, [pc, #176]	; (800a79c <USBD_DFU_Setup+0x1d4>)
 800a6ea:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	88db      	ldrh	r3, [r3, #6]
 800a6f0:	2b09      	cmp	r3, #9
 800a6f2:	bf28      	it	cs
 800a6f4:	2309      	movcs	r3, #9
 800a6f6:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6f8:	8afb      	ldrh	r3, [r7, #22]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	69b9      	ldr	r1, [r7, #24]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f001 fdaa 	bl	800c258 <USBD_CtlSendData>
      break;
 800a704:	e03c      	b.n	800a780 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d108      	bne.n	800a722 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a716:	2201      	movs	r2, #1
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fd9c 	bl	800c258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a720:	e02e      	b.n	800a780 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fd26 	bl	800c176 <USBD_CtlError>
        ret = USBD_FAIL;
 800a72a:	2303      	movs	r3, #3
 800a72c:	77fb      	strb	r3, [r7, #31]
      break;
 800a72e:	e027      	b.n	800a780 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	885b      	ldrh	r3, [r3, #2]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d113      	bne.n	800a762 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a740:	2b03      	cmp	r3, #3
 800a742:	d107      	bne.n	800a754 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	885b      	ldrh	r3, [r3, #2]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a752:	e015      	b.n	800a780 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 fd0d 	bl	800c176 <USBD_CtlError>
          ret = USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	77fb      	strb	r3, [r7, #31]
      break;
 800a760:	e00e      	b.n	800a780 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fd06 	bl	800c176 <USBD_CtlError>
        ret = USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	77fb      	strb	r3, [r7, #31]
      break;
 800a76e:	e007      	b.n	800a780 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fcff 	bl	800c176 <USBD_CtlError>
      ret = USBD_FAIL;
 800a778:	2303      	movs	r3, #3
 800a77a:	77fb      	strb	r3, [r7, #31]
      break;
 800a77c:	e000      	b.n	800a780 <USBD_DFU_Setup+0x1b8>
      break;
 800a77e:	bf00      	nop
    }
    break;
 800a780:	e006      	b.n	800a790 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fcf6 	bl	800c176 <USBD_CtlError>
    ret = USBD_FAIL;
 800a78a:	2303      	movs	r3, #3
 800a78c:	77fb      	strb	r3, [r7, #31]
    break;
 800a78e:	bf00      	nop
  }

  return (uint8_t)ret;
 800a790:	7ffb      	ldrb	r3, [r7, #31]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3720      	adds	r7, #32
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	200004be 	.word	0x200004be

0800a7a0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	221b      	movs	r2, #27
 800a7ac:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800a7ae:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <USBD_DFU_GetCfgDesc+0x1c>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	200004ac 	.word	0x200004ac

0800a7c0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b088      	sub	sp, #32
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7e4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ec:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	f040 80bb 	bne.w	800a970 <USBD_DFU_EP0_TxReady+0x19a>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a800:	2b00      	cmp	r3, #0
 800a802:	d17a      	bne.n	800a8fa <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	f000 8091 	beq.w	800a932 <USBD_DFU_EP0_TxReady+0x15c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a816:	2b05      	cmp	r3, #5
 800a818:	d15c      	bne.n	800a8d4 <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b21      	cmp	r3, #33	; 0x21
 800a820:	d124      	bne.n	800a86c <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	461a      	mov	r2, r3
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	789b      	ldrb	r3, [r3, #2]
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	441a      	add	r2, r3
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	78db      	ldrb	r3, [r3, #3]
 800a84c:	041b      	lsls	r3, r3, #16
 800a84e:	441a      	add	r2, r3
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	791b      	ldrb	r3, [r3, #4]
 800a860:	061b      	lsls	r3, r3, #24
 800a862:	441a      	add	r2, r3
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800a86a:	e062      	b.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b41      	cmp	r3, #65	; 0x41
 800a872:	d15e      	bne.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	785b      	ldrb	r3, [r3, #1]
 800a878:	461a      	mov	r2, r3
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	789b      	ldrb	r3, [r3, #2]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	441a      	add	r2, r3
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	78db      	ldrb	r3, [r3, #3]
 800a89e:	041b      	lsls	r3, r3, #16
 800a8a0:	441a      	add	r2, r3
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	061b      	lsls	r3, r3, #24
 800a8b4:	441a      	add	r2, r3
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	69fa      	ldr	r2, [r7, #28]
 800a8c2:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d030      	beq.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
          {
            return (uint8_t)USBD_FAIL;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e056      	b.n	800a982 <USBD_DFU_EP0_TxReady+0x1ac>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 fc3f 	bl	800c176 <USBD_CtlError>
 800a8f8:	e01b      	b.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a900:	2b01      	cmp	r3, #1
 800a902:	d916      	bls.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a90a:	3b02      	subs	r3, #2
 800a90c:	029a      	lsls	r2, r3, #10
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a914:	4413      	add	r3, r2
 800a916:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	69f8      	ldr	r0, [r7, #28]
 800a91e:	6979      	ldr	r1, [r7, #20]
 800a920:	69fa      	ldr	r2, [r7, #28]
 800a922:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800a926:	4798      	blx	r3
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <USBD_DFU_EP0_TxReady+0x15c>
        {
          return (uint8_t)USBD_FAIL;
 800a92e:	2303      	movs	r3, #3
 800a930:	e027      	b.n	800a982 <USBD_DFU_EP0_TxReady+0x1ac>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	2200      	movs	r2, #0
 800a936:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	2203      	movs	r2, #3
 800a946:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800a96e:	e007      	b.n	800a980 <USBD_DFU_EP0_TxReady+0x1aa>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a976:	2b07      	cmp	r3, #7
 800a978:	d102      	bne.n	800a980 <USBD_DFU_EP0_TxReady+0x1aa>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fb56 	bl	800b02c <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3720      	adds	r7, #32
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800a9ae:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	200004c8 	.word	0x200004c8

0800a9c0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9d4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	d808      	bhi.n	800a9ee <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	4905      	ldr	r1, [pc, #20]	; (800a9f8 <USBD_DFU_GetUsrStringDesc+0x38>)
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 fbd7 	bl	800c198 <USBD_GetString>
    return USBD_StrDesc;
 800a9ea:	4b03      	ldr	r3, [pc, #12]	; (800a9f8 <USBD_DFU_GetUsrStringDesc+0x38>)
 800a9ec:	e000      	b.n	800a9f0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a9ee:	2300      	movs	r3, #0
  }
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200007ac 	.word	0x200007ac

0800a9fc <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e004      	b.n	800aa1a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
	...

0800aa28 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa38:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d013      	beq.n	800aa6c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d00e      	beq.n	800aa6c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800aa54:	2b05      	cmp	r3, #5
 800aa56:	d009      	beq.n	800aa6c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800aa5e:	2b06      	cmp	r3, #6
 800aa60:	d004      	beq.n	800aa6c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800aa68:	2b09      	cmp	r3, #9
 800aa6a:	d125      	bne.n	800aab8 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <DFU_Detach+0xbc>)
 800aaba:	7d5b      	ldrb	r3, [r3, #21]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fb5e 	bl	800b186 <USBD_Stop>
    (void)USBD_Start(pdev);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fb4f 	bl	800b16e <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800aad0:	e004      	b.n	800aadc <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f9 f87c 	bl	8003bd4 <HAL_Delay>
}
 800aadc:	bf00      	nop
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	200004ac 	.word	0x200004ac

0800aae8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	88db      	ldrh	r3, [r3, #6]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d02d      	beq.n	800ab5e <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d004      	beq.n	800ab16 <DFU_Download+0x2e>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab12:	2b05      	cmp	r3, #5
 800ab14:	d11e      	bne.n	800ab54 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	885b      	ldrh	r3, [r3, #2]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	88db      	ldrh	r3, [r3, #6]
 800ab26:	461a      	mov	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2203      	movs	r2, #3
 800ab32:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 fbaf 	bl	800c2b0 <USBD_CtlPrepareRx>
 800ab52:	e02e      	b.n	800abb2 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fb0d 	bl	800c176 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800ab5c:	e029      	b.n	800abb2 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab64:	2b05      	cmp	r3, #5
 800ab66:	d004      	beq.n	800ab72 <DFU_Download+0x8a>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d11a      	bne.n	800aba8 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2206      	movs	r2, #6
 800ab7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800aba6:	e004      	b.n	800abb2 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 fae3 	bl	800c176 <USBD_CtlError>
}
 800abb0:	e7ff      	b.n	800abb2 <DFU_Download+0xca>
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b086      	sub	sp, #24
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abca:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abd2:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	88db      	ldrh	r3, [r3, #6]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80a8 	beq.w	800ad2e <DFU_Upload+0x174>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d005      	beq.n	800abf4 <DFU_Upload+0x3a>
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800abee:	2b09      	cmp	r3, #9
 800abf0:	f040 8090 	bne.w	800ad14 <DFU_Upload+0x15a>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	885b      	ldrh	r3, [r3, #2]
 800abf8:	461a      	mov	r2, r3
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	88db      	ldrh	r3, [r3, #6]
 800ac04:	461a      	mov	r2, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d12c      	bne.n	800ac70 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d901      	bls.n	800ac24 <DFU_Upload+0x6a>
 800ac20:	2202      	movs	r2, #2
 800ac22:	e000      	b.n	800ac26 <DFU_Upload+0x6c>
 800ac24:	2209      	movs	r2, #9
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2200      	movs	r2, #0
 800ac54:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2221      	movs	r2, #33	; 0x21
 800ac5a:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2241      	movs	r2, #65	; 0x41
 800ac60:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2203      	movs	r2, #3
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f001 faf5 	bl	800c258 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800ac6e:	e075      	b.n	800ad5c <DFU_Upload+0x1a2>
      }
      else if (hdfu->wblock_num > 1U)
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d931      	bls.n	800acde <DFU_Upload+0x124>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2209      	movs	r2, #9
 800ac7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800acac:	3b02      	subs	r3, #2
 800acae:	029a      	lsls	r2, r3, #10
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800acb6:	4413      	add	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	6979      	ldr	r1, [r7, #20]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800acc8:	4798      	blx	r3
 800acca:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acd2:	461a      	mov	r2, r3
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 fabe 	bl	800c258 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800acdc:	e03e      	b.n	800ad5c <DFU_Upload+0x1a2>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	220f      	movs	r2, #15
 800ace2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f001 fa32 	bl	800c176 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800ad12:	e023      	b.n	800ad5c <DFU_Upload+0x1a2>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 fa25 	bl	800c176 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800ad2c:	e016      	b.n	800ad5c <DFU_Upload+0x1a2>
    hdfu->dev_state = DFU_STATE_IDLE;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2202      	movs	r2, #2
 800ad32:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800ad5a:	e7ff      	b.n	800ad5c <DFU_Upload+0x1a2>
 800ad5c:	bf00      	nop
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad72:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad7a:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d002      	beq.n	800ad8c <DFU_GetStatus+0x28>
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	d051      	beq.n	800ae2e <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 800ad8a:	e08e      	b.n	800aeaa <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d034      	beq.n	800ae00 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2204      	movs	r2, #4
 800ad9a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10e      	bne.n	800adea <DFU_GetStatus+0x86>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b41      	cmp	r3, #65	; 0x41
 800add2:	d10a      	bne.n	800adea <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800ade4:	2100      	movs	r1, #0
 800ade6:	4798      	blx	r3
    break;
 800ade8:	e05f      	b.n	800aeaa <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800adfa:	2101      	movs	r1, #1
 800adfc:	4798      	blx	r3
    break;
 800adfe:	e054      	b.n	800aeaa <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2205      	movs	r2, #5
 800ae04:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800ae2c:	e03d      	b.n	800aeaa <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d116      	bne.n	800ae66 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2207      	movs	r2, #7
 800ae3c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800ae64:	e020      	b.n	800aea8 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d11b      	bne.n	800aea8 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800ae70:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <DFU_GetStatus+0x160>)
 800ae72:	7d1b      	ldrb	r3, [r3, #20]
 800ae74:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d015      	beq.n	800aea8 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800aea8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800aeb0:	2206      	movs	r2, #6
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f9cf 	bl	800c258 <USBD_CtlSendData>
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200004ac 	.word	0x200004ac

0800aec8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aed6:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aede:	2b0a      	cmp	r3, #10
 800aee0:	d11e      	bne.n	800af20 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2202      	movs	r2, #2
 800aee6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 800af1e:	e01d      	b.n	800af5c <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	220a      	movs	r2, #10
 800af24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	220e      	movs	r2, #14
 800af2c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af76:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800af7e:	2201      	movs	r2, #1
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 f968 	bl	800c258 <USBD_CtlSendData>
}
 800af88:	bf00      	nop
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af9e:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d013      	beq.n	800afd2 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d00e      	beq.n	800afd2 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800afba:	2b05      	cmp	r3, #5
 800afbc:	d009      	beq.n	800afd2 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800afc4:	2b06      	cmp	r3, #6
 800afc6:	d004      	beq.n	800afd2 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d125      	bne.n	800b01e <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2202      	movs	r2, #2
 800afd6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800b01e:	bf00      	nop
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b03a:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800b044:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <DFU_Leave+0x90>)
 800b046:	7d1b      	ldrb	r3, [r3, #20]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d016      	beq.n	800b07e <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2206      	movs	r2, #6
 800b054:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800b07c:	e01a      	b.n	800b0b4 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2208      	movs	r2, #8
 800b082:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f86b 	bl	800b186 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800b0b0:	f7ff f9e2 	bl	800a478 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200004ac 	.word	0x200004ac

0800b0c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e025      	b.n	800b124 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	79fa      	ldrb	r2, [r7, #7]
 800b116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f001 fc07 	bl	800c92c <USBD_LL_Init>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	e010      	b.n	800b166 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	f107 020e 	add.w	r2, r7, #14
 800b158:	4610      	mov	r0, r2
 800b15a:	4798      	blx	r3
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f001 fc24 	bl	800c9c4 <USBD_LL_Start>
 800b17c:	4603      	mov	r3, r0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d009      	beq.n	800b1ac <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6852      	ldr	r2, [r2, #4]
 800b1a4:	b2d2      	uxtb	r2, r2
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 fc1b 	bl	800c9fa <USBD_LL_Stop>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]

  return ret;
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	78fa      	ldrb	r2, [r7, #3]
 800b20c:	4611      	mov	r1, r2
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b216:	7bfb      	ldrb	r3, [r7, #15]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	78fa      	ldrb	r2, [r7, #3]
 800b240:	4611      	mov	r1, r2
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
  }

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f000 ff4d 	bl	800c102 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b276:	461a      	mov	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b284:	f003 031f 	and.w	r3, r3, #31
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d01a      	beq.n	800b2c2 <USBD_LL_SetupStage+0x72>
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d822      	bhi.n	800b2d6 <USBD_LL_SetupStage+0x86>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <USBD_LL_SetupStage+0x4a>
 800b294:	2b01      	cmp	r3, #1
 800b296:	d00a      	beq.n	800b2ae <USBD_LL_SetupStage+0x5e>
 800b298:	e01d      	b.n	800b2d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa18 	bl	800b6d8 <USBD_StdDevReq>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ac:	e020      	b.n	800b2f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa7c 	bl	800b7b4 <USBD_StdItfReq>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c0:	e016      	b.n	800b2f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 faba 	bl	800b844 <USBD_StdEPReq>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d4:	e00c      	b.n	800b2f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f001 fbc9 	bl	800ca7c <USBD_LL_StallEP>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ee:	bf00      	nop
  }

  return ret;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	460b      	mov	r3, r1
 800b304:	607a      	str	r2, [r7, #4]
 800b306:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d137      	bne.n	800b37e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b314:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d14a      	bne.n	800b3b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	689a      	ldr	r2, [r3, #8]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d913      	bls.n	800b354 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	1ad2      	subs	r2, r2, r3
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	68da      	ldr	r2, [r3, #12]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	4293      	cmp	r3, r2
 800b344:	bf28      	it	cs
 800b346:	4613      	movcs	r3, r2
 800b348:	461a      	mov	r2, r3
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 ffcc 	bl	800c2ea <USBD_CtlContinueRx>
 800b352:	e030      	b.n	800b3b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00a      	beq.n	800b376 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b366:	2b03      	cmp	r3, #3
 800b368:	d105      	bne.n	800b376 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 ffc8 	bl	800c30c <USBD_CtlSendStatus>
 800b37c:	e01b      	b.n	800b3b6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d013      	beq.n	800b3b2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b390:	2b03      	cmp	r3, #3
 800b392:	d10e      	bne.n	800b3b2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	7afa      	ldrb	r2, [r7, #11]
 800b39e:	4611      	mov	r1, r2
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	4798      	blx	r3
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d003      	beq.n	800b3b6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	e002      	b.n	800b3b8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e000      	b.n	800b3b8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b3ce:	7afb      	ldrb	r3, [r7, #11]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d16a      	bne.n	800b4aa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3314      	adds	r3, #20
 800b3d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d155      	bne.n	800b490 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d914      	bls.n	800b41a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	1ad2      	subs	r2, r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	461a      	mov	r2, r3
 800b404:	6879      	ldr	r1, [r7, #4]
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 ff41 	bl	800c28e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	2100      	movs	r1, #0
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f001 fbdc 	bl	800cbd0 <USBD_LL_PrepareReceive>
 800b418:	e03a      	b.n	800b490 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	429a      	cmp	r2, r3
 800b424:	d11c      	bne.n	800b460 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b42e:	429a      	cmp	r2, r3
 800b430:	d316      	bcc.n	800b460 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d20f      	bcs.n	800b460 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 ff22 	bl	800c28e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b452:	2300      	movs	r3, #0
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f001 fbb9 	bl	800cbd0 <USBD_LL_PrepareReceive>
 800b45e:	e017      	b.n	800b490 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b472:	2b03      	cmp	r3, #3
 800b474:	d105      	bne.n	800b482 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b482:	2180      	movs	r1, #128	; 0x80
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f001 faf9 	bl	800ca7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 ff51 	bl	800c332 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d123      	bne.n	800b4e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fe99 	bl	800b1d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4a8:	e01b      	b.n	800b4e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d013      	beq.n	800b4de <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d10e      	bne.n	800b4de <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	7afa      	ldrb	r2, [r7, #11]
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	4798      	blx	r3
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d003      	beq.n	800b4e2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	e002      	b.n	800b4e4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e000      	b.n	800b4e4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	6852      	ldr	r2, [r2, #4]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	4611      	mov	r1, r2
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	2200      	movs	r2, #0
 800b534:	2100      	movs	r1, #0
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 fa7a 	bl	800ca30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2240      	movs	r2, #64	; 0x40
 800b548:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b54c:	2340      	movs	r3, #64	; 0x40
 800b54e:	2200      	movs	r2, #0
 800b550:	2180      	movs	r1, #128	; 0x80
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 fa6c 	bl	800ca30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2240      	movs	r2, #64	; 0x40
 800b562:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	460b      	mov	r3, r1
 800b578:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2204      	movs	r2, #4
 800b5a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d105      	bne.n	800b5d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d10b      	bne.n	800b60e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b632:	b480      	push	{r7}
 800b634:	b083      	sub	sp, #12
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	460b      	mov	r3, r1
 800b63c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	6852      	ldr	r2, [r2, #4]
 800b688:	b2d2      	uxtb	r2, r2
 800b68a:	4611      	mov	r1, r2
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	4798      	blx	r3
  }

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b087      	sub	sp, #28
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6b8:	8a3b      	ldrh	r3, [r7, #16]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	b21a      	sxth	r2, r3
 800b6be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6ee:	2b40      	cmp	r3, #64	; 0x40
 800b6f0:	d005      	beq.n	800b6fe <USBD_StdDevReq+0x26>
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d853      	bhi.n	800b79e <USBD_StdDevReq+0xc6>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00b      	beq.n	800b712 <USBD_StdDevReq+0x3a>
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d14f      	bne.n	800b79e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	4798      	blx	r3
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
    break;
 800b710:	e04a      	b.n	800b7a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b09      	cmp	r3, #9
 800b718:	d83b      	bhi.n	800b792 <USBD_StdDevReq+0xba>
 800b71a:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <USBD_StdDevReq+0x48>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b789 	.word	0x0800b789
 800b728:	0800b793 	.word	0x0800b793
 800b72c:	0800b77f 	.word	0x0800b77f
 800b730:	0800b793 	.word	0x0800b793
 800b734:	0800b753 	.word	0x0800b753
 800b738:	0800b749 	.word	0x0800b749
 800b73c:	0800b793 	.word	0x0800b793
 800b740:	0800b76b 	.word	0x0800b76b
 800b744:	0800b75d 	.word	0x0800b75d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f9d8 	bl	800bb00 <USBD_GetDescriptor>
      break;
 800b750:	e024      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fb4f 	bl	800bdf8 <USBD_SetAddress>
      break;
 800b75a:	e01f      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fb8e 	bl	800be80 <USBD_SetConfig>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
      break;
 800b768:	e018      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fc2b 	bl	800bfc8 <USBD_GetConfig>
      break;
 800b772:	e013      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fc5b 	bl	800c032 <USBD_GetStatus>
      break;
 800b77c:	e00e      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fc89 	bl	800c098 <USBD_SetFeature>
      break;
 800b786:	e009      	b.n	800b79c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fc98 	bl	800c0c0 <USBD_ClrFeature>
      break;
 800b790:	e004      	b.n	800b79c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fcee 	bl	800c176 <USBD_CtlError>
      break;
 800b79a:	bf00      	nop
    }
    break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fce8 	bl	800c176 <USBD_CtlError>
    break;
 800b7a6:	bf00      	nop
  }

  return ret;
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop

0800b7b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	d005      	beq.n	800b7da <USBD_StdItfReq+0x26>
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	d82e      	bhi.n	800b830 <USBD_StdItfReq+0x7c>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <USBD_StdItfReq+0x26>
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d12a      	bne.n	800b830 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d81d      	bhi.n	800b822 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	889b      	ldrh	r3, [r3, #4]
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d813      	bhi.n	800b818 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	4798      	blx	r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	88db      	ldrh	r3, [r3, #6]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d110      	bne.n	800b82c <USBD_StdItfReq+0x78>
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10d      	bne.n	800b82c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fd7b 	bl	800c30c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b816:	e009      	b.n	800b82c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fcab 	bl	800c176 <USBD_CtlError>
      break;
 800b820:	e004      	b.n	800b82c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fca6 	bl	800c176 <USBD_CtlError>
      break;
 800b82a:	e000      	b.n	800b82e <USBD_StdItfReq+0x7a>
      break;
 800b82c:	bf00      	nop
    }
    break;
 800b82e:	e004      	b.n	800b83a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fc9f 	bl	800c176 <USBD_CtlError>
    break;
 800b838:	bf00      	nop
  }

  return ret;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	889b      	ldrh	r3, [r3, #4]
 800b856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b860:	2b40      	cmp	r3, #64	; 0x40
 800b862:	d007      	beq.n	800b874 <USBD_StdEPReq+0x30>
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	f200 8140 	bhi.w	800baea <USBD_StdEPReq+0x2a6>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00c      	beq.n	800b888 <USBD_StdEPReq+0x44>
 800b86e:	2b20      	cmp	r3, #32
 800b870:	f040 813b 	bne.w	800baea <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]
    break;
 800b886:	e135      	b.n	800baf4 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d007      	beq.n	800b8a0 <USBD_StdEPReq+0x5c>
 800b890:	2b03      	cmp	r3, #3
 800b892:	f300 8124 	bgt.w	800bade <USBD_StdEPReq+0x29a>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d07b      	beq.n	800b992 <USBD_StdEPReq+0x14e>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d03b      	beq.n	800b916 <USBD_StdEPReq+0xd2>
 800b89e:	e11e      	b.n	800bade <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d002      	beq.n	800b8b0 <USBD_StdEPReq+0x6c>
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d016      	beq.n	800b8dc <USBD_StdEPReq+0x98>
 800b8ae:	e02c      	b.n	800b90a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00d      	beq.n	800b8d2 <USBD_StdEPReq+0x8e>
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	2b80      	cmp	r3, #128	; 0x80
 800b8ba:	d00a      	beq.n	800b8d2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f001 f8db 	bl	800ca7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8c6:	2180      	movs	r1, #128	; 0x80
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 f8d7 	bl	800ca7c <USBD_LL_StallEP>
 800b8ce:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b8d0:	e020      	b.n	800b914 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc4e 	bl	800c176 <USBD_CtlError>
        break;
 800b8da:	e01b      	b.n	800b914 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	885b      	ldrh	r3, [r3, #2]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10e      	bne.n	800b902 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <USBD_StdEPReq+0xbe>
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b80      	cmp	r3, #128	; 0x80
 800b8ee:	d008      	beq.n	800b902 <USBD_StdEPReq+0xbe>
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	88db      	ldrh	r3, [r3, #6]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f8bd 	bl	800ca7c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fd02 	bl	800c30c <USBD_CtlSendStatus>

        break;
 800b908:	e004      	b.n	800b914 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fc32 	bl	800c176 <USBD_CtlError>
        break;
 800b912:	bf00      	nop
      }
      break;
 800b914:	e0e8      	b.n	800bae8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d002      	beq.n	800b926 <USBD_StdEPReq+0xe2>
 800b920:	2b03      	cmp	r3, #3
 800b922:	d016      	beq.n	800b952 <USBD_StdEPReq+0x10e>
 800b924:	e02e      	b.n	800b984 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00d      	beq.n	800b948 <USBD_StdEPReq+0x104>
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b80      	cmp	r3, #128	; 0x80
 800b930:	d00a      	beq.n	800b948 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 f8a0 	bl	800ca7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b93c:	2180      	movs	r1, #128	; 0x80
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 f89c 	bl	800ca7c <USBD_LL_StallEP>
 800b944:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b946:	e023      	b.n	800b990 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fc13 	bl	800c176 <USBD_CtlError>
        break;
 800b950:	e01e      	b.n	800b990 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	885b      	ldrh	r3, [r3, #2]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d119      	bne.n	800b98e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b960:	2b00      	cmp	r3, #0
 800b962:	d004      	beq.n	800b96e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 f8a6 	bl	800caba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fccc 	bl	800c30c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
        }
        break;
 800b982:	e004      	b.n	800b98e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fbf5 	bl	800c176 <USBD_CtlError>
        break;
 800b98c:	e000      	b.n	800b990 <USBD_StdEPReq+0x14c>
        break;
 800b98e:	bf00      	nop
      }
      break;
 800b990:	e0aa      	b.n	800bae8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d002      	beq.n	800b9a2 <USBD_StdEPReq+0x15e>
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d032      	beq.n	800ba06 <USBD_StdEPReq+0x1c2>
 800b9a0:	e097      	b.n	800bad2 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <USBD_StdEPReq+0x174>
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b80      	cmp	r3, #128	; 0x80
 800b9ac:	d004      	beq.n	800b9b8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fbe0 	bl	800c176 <USBD_CtlError>
          break;
 800b9b6:	e091      	b.n	800badc <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da0b      	bge.n	800b9d8 <USBD_StdEPReq+0x194>
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	3310      	adds	r3, #16
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	e00b      	b.n	800b9f0 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9de:	4613      	mov	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fc2a 	bl	800c258 <USBD_CtlSendData>
        break;
 800ba04:	e06a      	b.n	800badc <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ba06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	da11      	bge.n	800ba32 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	f003 020f 	and.w	r2, r3, #15
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	4613      	mov	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	440b      	add	r3, r1
 800ba20:	3324      	adds	r3, #36	; 0x24
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d117      	bne.n	800ba58 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fba3 	bl	800c176 <USBD_CtlError>
            break;
 800ba30:	e054      	b.n	800badc <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	f003 020f 	and.w	r2, r3, #15
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d104      	bne.n	800ba58 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fb90 	bl	800c176 <USBD_CtlError>
            break;
 800ba56:	e041      	b.n	800badc <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	da0b      	bge.n	800ba78 <USBD_StdEPReq+0x234>
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	3310      	adds	r3, #16
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	4413      	add	r3, r2
 800ba74:	3304      	adds	r3, #4
 800ba76:	e00b      	b.n	800ba90 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	3304      	adds	r3, #4
 800ba90:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <USBD_StdEPReq+0x25a>
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b80      	cmp	r3, #128	; 0x80
 800ba9c:	d103      	bne.n	800baa6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	e00e      	b.n	800bac4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 f824 	bl	800caf8 <USBD_LL_IsStallEP>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2201      	movs	r2, #1
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	e002      	b.n	800bac4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2202      	movs	r2, #2
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fbc4 	bl	800c258 <USBD_CtlSendData>
          break;
 800bad0:	e004      	b.n	800badc <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fb4e 	bl	800c176 <USBD_CtlError>
        break;
 800bada:	bf00      	nop
      }
      break;
 800badc:	e004      	b.n	800bae8 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fb48 	bl	800c176 <USBD_CtlError>
      break;
 800bae6:	bf00      	nop
    }
    break;
 800bae8:	e004      	b.n	800baf4 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fb42 	bl	800c176 <USBD_CtlError>
    break;
 800baf2:	bf00      	nop
  }

  return ret;
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	0a1b      	lsrs	r3, r3, #8
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b06      	cmp	r3, #6
 800bb22:	f200 813b 	bhi.w	800bd9c <USBD_GetDescriptor+0x29c>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBD_GetDescriptor+0x2c>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb49 	.word	0x0800bb49
 800bb30:	0800bb61 	.word	0x0800bb61
 800bb34:	0800bba1 	.word	0x0800bba1
 800bb38:	0800bd9d 	.word	0x0800bd9d
 800bb3c:	0800bd9d 	.word	0x0800bd9d
 800bb40:	0800bd3d 	.word	0x0800bd3d
 800bb44:	0800bd69 	.word	0x0800bd69
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	7c12      	ldrb	r2, [r2, #16]
 800bb54:	f107 0108 	add.w	r1, r7, #8
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	60f8      	str	r0, [r7, #12]
    break;
 800bb5e:	e125      	b.n	800bdac <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7c1b      	ldrb	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10d      	bne.n	800bb84 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	f107 0208 	add.w	r2, r7, #8
 800bb74:	4610      	mov	r0, r2
 800bb76:	4798      	blx	r3
 800bb78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	2202      	movs	r2, #2
 800bb80:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bb82:	e113      	b.n	800bdac <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	f107 0208 	add.w	r2, r7, #8
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	701a      	strb	r2, [r3, #0]
    break;
 800bb9e:	e105      	b.n	800bdac <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	885b      	ldrh	r3, [r3, #2]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b05      	cmp	r3, #5
 800bba8:	f200 80ac 	bhi.w	800bd04 <USBD_GetDescriptor+0x204>
 800bbac:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <USBD_GetDescriptor+0xb4>)
 800bbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb2:	bf00      	nop
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bc01 	.word	0x0800bc01
 800bbbc:	0800bc35 	.word	0x0800bc35
 800bbc0:	0800bc69 	.word	0x0800bc69
 800bbc4:	0800bc9d 	.word	0x0800bc9d
 800bbc8:	0800bcd1 	.word	0x0800bcd1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	7c12      	ldrb	r2, [r2, #16]
 800bbe4:	f107 0108 	add.w	r1, r7, #8
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3
 800bbec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbee:	e0a4      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fabf 	bl	800c176 <USBD_CtlError>
        err++;
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	72fb      	strb	r3, [r7, #11]
      break;
 800bbfe:	e09c      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	f107 0108 	add.w	r1, r7, #8
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc22:	e08a      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 faa5 	bl	800c176 <USBD_CtlError>
        err++;
 800bc2c:	7afb      	ldrb	r3, [r7, #11]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	72fb      	strb	r3, [r7, #11]
      break;
 800bc32:	e082      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	7c12      	ldrb	r2, [r2, #16]
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc56:	e070      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fa8b 	bl	800c176 <USBD_CtlError>
        err++;
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	3301      	adds	r3, #1
 800bc64:	72fb      	strb	r3, [r7, #11]
      break;
 800bc66:	e068      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00b      	beq.n	800bc8c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	7c12      	ldrb	r2, [r2, #16]
 800bc80:	f107 0108 	add.w	r1, r7, #8
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc8a:	e056      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa71 	bl	800c176 <USBD_CtlError>
        err++;
 800bc94:	7afb      	ldrb	r3, [r7, #11]
 800bc96:	3301      	adds	r3, #1
 800bc98:	72fb      	strb	r3, [r7, #11]
      break;
 800bc9a:	e04e      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	7c12      	ldrb	r2, [r2, #16]
 800bcb4:	f107 0108 	add.w	r1, r7, #8
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
 800bcbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcbe:	e03c      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa57 	bl	800c176 <USBD_CtlError>
        err++;
 800bcc8:	7afb      	ldrb	r3, [r7, #11]
 800bcca:	3301      	adds	r3, #1
 800bccc:	72fb      	strb	r3, [r7, #11]
      break;
 800bcce:	e034      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c12      	ldrb	r2, [r2, #16]
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
 800bcf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcf2:	e022      	b.n	800bd3a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa3d 	bl	800c176 <USBD_CtlError>
        err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
      break;
 800bd02:	e01a      	b.n	800bd3a <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	8852      	ldrh	r2, [r2, #2]
 800bd1c:	b2d1      	uxtb	r1, r2
 800bd1e:	f107 0208 	add.w	r2, r7, #8
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
 800bd26:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 800bd28:	e006      	b.n	800bd38 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fa22 	bl	800c176 <USBD_CtlError>
        err++;
 800bd32:	7afb      	ldrb	r3, [r7, #11]
 800bd34:	3301      	adds	r3, #1
 800bd36:	72fb      	strb	r3, [r7, #11]
      break;
 800bd38:	bf00      	nop
    }
    break;
 800bd3a:	e037      	b.n	800bdac <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	7c1b      	ldrb	r3, [r3, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d109      	bne.n	800bd58 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4c:	f107 0208 	add.w	r2, r7, #8
 800bd50:	4610      	mov	r0, r2
 800bd52:	4798      	blx	r3
 800bd54:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bd56:	e029      	b.n	800bdac <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa0b 	bl	800c176 <USBD_CtlError>
      err++;
 800bd60:	7afb      	ldrb	r3, [r7, #11]
 800bd62:	3301      	adds	r3, #1
 800bd64:	72fb      	strb	r3, [r7, #11]
    break;
 800bd66:	e021      	b.n	800bdac <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7c1b      	ldrb	r3, [r3, #16]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10d      	bne.n	800bd8c <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd78:	f107 0208 	add.w	r2, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3301      	adds	r3, #1
 800bd86:	2207      	movs	r2, #7
 800bd88:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bd8a:	e00f      	b.n	800bdac <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9f1 	bl	800c176 <USBD_CtlError>
      err++;
 800bd94:	7afb      	ldrb	r3, [r7, #11]
 800bd96:	3301      	adds	r3, #1
 800bd98:	72fb      	strb	r3, [r7, #11]
    break;
 800bd9a:	e007      	b.n	800bdac <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f9e9 	bl	800c176 <USBD_CtlError>
    err++;
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	3301      	adds	r3, #1
 800bda8:	72fb      	strb	r3, [r7, #11]
    break;
 800bdaa:	bf00      	nop
  }

  if (err != 0U)
 800bdac:	7afb      	ldrb	r3, [r7, #11]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d11e      	bne.n	800bdf0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	88db      	ldrh	r3, [r3, #6]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d016      	beq.n	800bde8 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 800bdba:	893b      	ldrh	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00e      	beq.n	800bdde <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	88da      	ldrh	r2, [r3, #6]
 800bdc4:	893b      	ldrh	r3, [r7, #8]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bf28      	it	cs
 800bdca:	4613      	movcs	r3, r2
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdd0:	893b      	ldrh	r3, [r7, #8]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	68f9      	ldr	r1, [r7, #12]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa3e 	bl	800c258 <USBD_CtlSendData>
 800bddc:	e009      	b.n	800bdf2 <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f9c8 	bl	800c176 <USBD_CtlError>
 800bde6:	e004      	b.n	800bdf2 <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fa8f 	bl	800c30c <USBD_CtlSendStatus>
 800bdee:	e000      	b.n	800bdf2 <USBD_GetDescriptor+0x2f2>
    return;
 800bdf0:	bf00      	nop
    }
  }
}
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	889b      	ldrh	r3, [r3, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d130      	bne.n	800be6c <USBD_SetAddress+0x74>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	88db      	ldrh	r3, [r3, #6]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d12c      	bne.n	800be6c <USBD_SetAddress+0x74>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	885b      	ldrh	r3, [r3, #2]
 800be16:	2b7f      	cmp	r3, #127	; 0x7f
 800be18:	d828      	bhi.n	800be6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	885b      	ldrh	r3, [r3, #2]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d104      	bne.n	800be3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f99f 	bl	800c176 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be38:	e01d      	b.n	800be76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7bfa      	ldrb	r2, [r7, #15]
 800be3e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	4619      	mov	r1, r3
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fe82 	bl	800cb50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fa5d 	bl	800c30c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be60:	e009      	b.n	800be76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6a:	e004      	b.n	800be76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f981 	bl	800c176 <USBD_CtlError>
  }
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	885b      	ldrh	r3, [r3, #2]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	4b4b      	ldr	r3, [pc, #300]	; (800bfc4 <USBD_SetConfig+0x144>)
 800be96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be98:	4b4a      	ldr	r3, [pc, #296]	; (800bfc4 <USBD_SetConfig+0x144>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d905      	bls.n	800beac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f967 	bl	800c176 <USBD_CtlError>
    return USBD_FAIL;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e087      	b.n	800bfbc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d002      	beq.n	800bebc <USBD_SetConfig+0x3c>
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d025      	beq.n	800bf06 <USBD_SetConfig+0x86>
 800beba:	e071      	b.n	800bfa0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800bebc:	4b41      	ldr	r3, [pc, #260]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d01c      	beq.n	800befe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bec4:	4b3f      	ldr	r3, [pc, #252]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bece:	4b3d      	ldr	r3, [pc, #244]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff f987 	bl	800b1e8 <USBD_SetClassConfig>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d004      	beq.n	800beee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f945 	bl	800c176 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800beec:	e065      	b.n	800bfba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa0c 	bl	800c30c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2203      	movs	r2, #3
 800bef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800befc:	e05d      	b.n	800bfba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa04 	bl	800c30c <USBD_CtlSendStatus>
    break;
 800bf04:	e059      	b.n	800bfba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800bf06:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d112      	bne.n	800bf34 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2202      	movs	r2, #2
 800bf12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800bf16:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf20:	4b28      	ldr	r3, [pc, #160]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff f97a 	bl	800b220 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f9ed 	bl	800c30c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bf32:	e042      	b.n	800bfba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bf34:	4b23      	ldr	r3, [pc, #140]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d02a      	beq.n	800bf98 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff f968 	bl	800b220 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bf50:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	461a      	mov	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf5a:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff f941 	bl	800b1e8 <USBD_SetClassConfig>
 800bf66:	4603      	mov	r3, r0
 800bf68:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00f      	beq.n	800bf90 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f8ff 	bl	800c176 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff f94d 	bl	800b220 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2202      	movs	r2, #2
 800bf8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bf8e:	e014      	b.n	800bfba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f9bb 	bl	800c30c <USBD_CtlSendStatus>
    break;
 800bf96:	e010      	b.n	800bfba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f9b7 	bl	800c30c <USBD_CtlSendStatus>
    break;
 800bf9e:	e00c      	b.n	800bfba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f8e7 	bl	800c176 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfa8:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <USBD_SetConfig+0x144>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff f936 	bl	800b220 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb8:	bf00      	nop
  }

  return ret;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	200008ab 	.word	0x200008ab

0800bfc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	88db      	ldrh	r3, [r3, #6]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d004      	beq.n	800bfe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f8ca 	bl	800c176 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bfe2:	e022      	b.n	800c02a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	dc02      	bgt.n	800bff4 <USBD_GetConfig+0x2c>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	dc03      	bgt.n	800bffa <USBD_GetConfig+0x32>
 800bff2:	e015      	b.n	800c020 <USBD_GetConfig+0x58>
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d00b      	beq.n	800c010 <USBD_GetConfig+0x48>
 800bff8:	e012      	b.n	800c020 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3308      	adds	r3, #8
 800c004:	2201      	movs	r2, #1
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f925 	bl	800c258 <USBD_CtlSendData>
      break;
 800c00e:	e00c      	b.n	800c02a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	2201      	movs	r2, #1
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f91d 	bl	800c258 <USBD_CtlSendData>
      break;
 800c01e:	e004      	b.n	800c02a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f8a7 	bl	800c176 <USBD_CtlError>
      break;
 800c028:	bf00      	nop
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c042:	3b01      	subs	r3, #1
 800c044:	2b02      	cmp	r3, #2
 800c046:	d81e      	bhi.n	800c086 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	88db      	ldrh	r3, [r3, #6]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d004      	beq.n	800c05a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f88f 	bl	800c176 <USBD_CtlError>
      break;
 800c058:	e01a      	b.n	800c090 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	f043 0202 	orr.w	r2, r3, #2
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	330c      	adds	r3, #12
 800c07a:	2202      	movs	r2, #2
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f8ea 	bl	800c258 <USBD_CtlSendData>
    break;
 800c084:	e004      	b.n	800c090 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f874 	bl	800c176 <USBD_CtlError>
    break;
 800c08e:	bf00      	nop
  }
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	885b      	ldrh	r3, [r3, #2]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d106      	bne.n	800c0b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f92a 	bl	800c30c <USBD_CtlSendStatus>
  }
}
 800c0b8:	bf00      	nop
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d80b      	bhi.n	800c0ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d10c      	bne.n	800c0f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f910 	bl	800c30c <USBD_CtlSendStatus>
      }
      break;
 800c0ec:	e004      	b.n	800c0f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f840 	bl	800c176 <USBD_CtlError>
      break;
 800c0f6:	e000      	b.n	800c0fa <USBD_ClrFeature+0x3a>
      break;
 800c0f8:	bf00      	nop
  }
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3301      	adds	r3, #1
 800c12a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7ff fab4 	bl	800b69a <SWAPBYTE>
 800c132:	4603      	mov	r3, r0
 800c134:	461a      	mov	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff faa7 	bl	800b69a <SWAPBYTE>
 800c14c:	4603      	mov	r3, r0
 800c14e:	461a      	mov	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3301      	adds	r3, #1
 800c15e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fa9a 	bl	800b69a <SWAPBYTE>
 800c166:	4603      	mov	r3, r0
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	80da      	strh	r2, [r3, #6]
}
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c180:	2180      	movs	r1, #128	; 0x80
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fc7a 	bl	800ca7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c188:	2100      	movs	r1, #0
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fc76 	bl	800ca7c <USBD_LL_StallEP>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d036      	beq.n	800c21c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1b2:	6938      	ldr	r0, [r7, #16]
 800c1b4:	f000 f836 	bl	800c224 <USBD_GetLen>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	2203      	movs	r2, #3
 800c1e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c1e8:	e013      	b.n	800c212 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	7812      	ldrb	r2, [r2, #0]
 800c1f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	613b      	str	r3, [r7, #16]
    idx++;
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	3301      	adds	r3, #1
 800c200:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	4413      	add	r3, r2
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c20c:	7dfb      	ldrb	r3, [r7, #23]
 800c20e:	3301      	adds	r3, #1
 800c210:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1e7      	bne.n	800c1ea <USBD_GetString+0x52>
 800c21a:	e000      	b.n	800c21e <USBD_GetString+0x86>
    return;
 800c21c:	bf00      	nop
  }
}
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c22c:	2300      	movs	r3, #0
 800c22e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c234:	e005      	b.n	800c242 <USBD_GetLen+0x1e>
  {
    len++;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	3301      	adds	r3, #1
 800c23a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	3301      	adds	r3, #1
 800c240:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1f5      	bne.n	800c236 <USBD_GetLen+0x12>
  }

  return len;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2202      	movs	r2, #2
 800c268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	2100      	movs	r1, #0
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 fc85 	bl	800cb8e <USBD_LL_Transmit>

  return USBD_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	2100      	movs	r1, #0
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f000 fc74 	bl	800cb8e <USBD_LL_Transmit>

  return USBD_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	2100      	movs	r1, #0
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 fc78 	bl	800cbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 fc67 	bl	800cbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2204      	movs	r2, #4
 800c318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c31c:	2300      	movs	r3, #0
 800c31e:	2200      	movs	r2, #0
 800c320:	2100      	movs	r1, #0
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc33 	bl	800cb8e <USBD_LL_Transmit>

  return USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2205      	movs	r2, #5
 800c33e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c342:	2300      	movs	r3, #0
 800c344:	2200      	movs	r2, #0
 800c346:	2100      	movs	r1, #0
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fc41 	bl	800cbd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c35c:	2200      	movs	r2, #0
 800c35e:	4912      	ldr	r1, [pc, #72]	; (800c3a8 <MX_USB_DEVICE_Init+0x50>)
 800c360:	4812      	ldr	r0, [pc, #72]	; (800c3ac <MX_USB_DEVICE_Init+0x54>)
 800c362:	f7fe fead 	bl	800b0c0 <USBD_Init>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c36c:	f7f6 fe8c 	bl	8003088 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800c370:	490f      	ldr	r1, [pc, #60]	; (800c3b0 <MX_USB_DEVICE_Init+0x58>)
 800c372:	480e      	ldr	r0, [pc, #56]	; (800c3ac <MX_USB_DEVICE_Init+0x54>)
 800c374:	f7fe feda 	bl	800b12c <USBD_RegisterClass>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c37e:	f7f6 fe83 	bl	8003088 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800c382:	490c      	ldr	r1, [pc, #48]	; (800c3b4 <MX_USB_DEVICE_Init+0x5c>)
 800c384:	4809      	ldr	r0, [pc, #36]	; (800c3ac <MX_USB_DEVICE_Init+0x54>)
 800c386:	f7fe fb39 	bl	800a9fc <USBD_DFU_RegisterMedia>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d001      	beq.n	800c394 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c390:	f7f6 fe7a 	bl	8003088 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c394:	4805      	ldr	r0, [pc, #20]	; (800c3ac <MX_USB_DEVICE_Init+0x54>)
 800c396:	f7fe feea 	bl	800b16e <USBD_Start>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3a0:	f7f6 fe72 	bl	8003088 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3a4:	bf00      	nop
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	200004d4 	.word	0x200004d4
 800c3ac:	20001b90 	.word	0x20001b90
 800c3b0:	20000470 	.word	0x20000470
 800c3b4:	20000524 	.word	0x20000524

0800c3b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2212      	movs	r2, #18
 800c3c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3ca:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	200004f0 	.word	0x200004f0

0800c3dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	6039      	str	r1, [r7, #0]
 800c3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3ee:	4b03      	ldr	r3, [pc, #12]	; (800c3fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20000504 	.word	0x20000504

0800c400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	6039      	str	r1, [r7, #0]
 800c40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c40c:	79fb      	ldrb	r3, [r7, #7]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	4907      	ldr	r1, [pc, #28]	; (800c434 <USBD_FS_ProductStrDescriptor+0x34>)
 800c416:	4808      	ldr	r0, [pc, #32]	; (800c438 <USBD_FS_ProductStrDescriptor+0x38>)
 800c418:	f7ff febe 	bl	800c198 <USBD_GetString>
 800c41c:	e004      	b.n	800c428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	4904      	ldr	r1, [pc, #16]	; (800c434 <USBD_FS_ProductStrDescriptor+0x34>)
 800c422:	4805      	ldr	r0, [pc, #20]	; (800c438 <USBD_FS_ProductStrDescriptor+0x38>)
 800c424:	f7ff feb8 	bl	800c198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c428:	4b02      	ldr	r3, [pc, #8]	; (800c434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20001e60 	.word	0x20001e60
 800c438:	080111e8 	.word	0x080111e8

0800c43c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	6039      	str	r1, [r7, #0]
 800c446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	4904      	ldr	r1, [pc, #16]	; (800c45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c44c:	4804      	ldr	r0, [pc, #16]	; (800c460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c44e:	f7ff fea3 	bl	800c198 <USBD_GetString>
  return USBD_StrDesc;
 800c452:	4b02      	ldr	r3, [pc, #8]	; (800c45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c454:	4618      	mov	r0, r3
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20001e60 	.word	0x20001e60
 800c460:	08011208 	.word	0x08011208

0800c464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	221a      	movs	r2, #26
 800c474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c476:	f000 f843 	bl	800c500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c47a:	4b02      	ldr	r3, [pc, #8]	; (800c484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000508 	.word	0x20000508

0800c488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	6039      	str	r1, [r7, #0]
 800c492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d105      	bne.n	800c4a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4907      	ldr	r1, [pc, #28]	; (800c4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c49e:	4808      	ldr	r0, [pc, #32]	; (800c4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4a0:	f7ff fe7a 	bl	800c198 <USBD_GetString>
 800c4a4:	e004      	b.n	800c4b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	4904      	ldr	r1, [pc, #16]	; (800c4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4aa:	4805      	ldr	r0, [pc, #20]	; (800c4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4ac:	f7ff fe74 	bl	800c198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4b0:	4b02      	ldr	r3, [pc, #8]	; (800c4bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20001e60 	.word	0x20001e60
 800c4c0:	0801121c 	.word	0x0801121c

0800c4c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d105      	bne.n	800c4e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	4907      	ldr	r1, [pc, #28]	; (800c4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4da:	4808      	ldr	r0, [pc, #32]	; (800c4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4dc:	f7ff fe5c 	bl	800c198 <USBD_GetString>
 800c4e0:	e004      	b.n	800c4ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	4904      	ldr	r1, [pc, #16]	; (800c4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4e6:	4805      	ldr	r0, [pc, #20]	; (800c4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4e8:	f7ff fe56 	bl	800c198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4ec:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20001e60 	.word	0x20001e60
 800c4fc:	08011228 	.word	0x08011228

0800c500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c506:	4b0f      	ldr	r3, [pc, #60]	; (800c544 <Get_SerialNum+0x44>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c50c:	4b0e      	ldr	r3, [pc, #56]	; (800c548 <Get_SerialNum+0x48>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c512:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <Get_SerialNum+0x4c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d009      	beq.n	800c53a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c526:	2208      	movs	r2, #8
 800c528:	4909      	ldr	r1, [pc, #36]	; (800c550 <Get_SerialNum+0x50>)
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 f814 	bl	800c558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c530:	2204      	movs	r2, #4
 800c532:	4908      	ldr	r1, [pc, #32]	; (800c554 <Get_SerialNum+0x54>)
 800c534:	68b8      	ldr	r0, [r7, #8]
 800c536:	f000 f80f 	bl	800c558 <IntToUnicode>
  }
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	1fff7a10 	.word	0x1fff7a10
 800c548:	1fff7a14 	.word	0x1fff7a14
 800c54c:	1fff7a18 	.word	0x1fff7a18
 800c550:	2000050a 	.word	0x2000050a
 800c554:	2000051a 	.word	0x2000051a

0800c558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	4613      	mov	r3, r2
 800c564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c56a:	2300      	movs	r3, #0
 800c56c:	75fb      	strb	r3, [r7, #23]
 800c56e:	e027      	b.n	800c5c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	0f1b      	lsrs	r3, r3, #28
 800c574:	2b09      	cmp	r3, #9
 800c576:	d80b      	bhi.n	800c590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	0f1b      	lsrs	r3, r3, #28
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4619      	mov	r1, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	440b      	add	r3, r1
 800c588:	3230      	adds	r2, #48	; 0x30
 800c58a:	b2d2      	uxtb	r2, r2
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	e00a      	b.n	800c5a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	0f1b      	lsrs	r3, r3, #28
 800c594:	b2da      	uxtb	r2, r3
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	4619      	mov	r1, r3
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	440b      	add	r3, r1
 800c5a0:	3237      	adds	r2, #55	; 0x37
 800c5a2:	b2d2      	uxtb	r2, r2
 800c5a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	011b      	lsls	r3, r3, #4
 800c5aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	75fb      	strb	r3, [r7, #23]
 800c5c0:	7dfa      	ldrb	r2, [r7, #23]
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d3d3      	bcc.n	800c570 <IntToUnicode+0x18>
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800c5da:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800c5ea:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800c5fe:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800c618:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800c632:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	460b      	mov	r3, r1
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800c652:	bf00      	nop
  }
  return (USBD_OK);
 800c654:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c656:	4618      	mov	r0, r3
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
	...

0800c664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c66c:	f107 0314 	add.w	r3, r7, #20
 800c670:	2200      	movs	r2, #0
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	605a      	str	r2, [r3, #4]
 800c676:	609a      	str	r2, [r3, #8]
 800c678:	60da      	str	r2, [r3, #12]
 800c67a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c684:	d158      	bne.n	800c738 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c686:	2300      	movs	r3, #0
 800c688:	613b      	str	r3, [r7, #16]
 800c68a:	4b2d      	ldr	r3, [pc, #180]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	4a2c      	ldr	r2, [pc, #176]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c690:	f043 0301 	orr.w	r3, r3, #1
 800c694:	6313      	str	r3, [r2, #48]	; 0x30
 800c696:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	613b      	str	r3, [r7, #16]
 800c6a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800c6a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6b4:	230a      	movs	r3, #10
 800c6b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6b8:	f107 0314 	add.w	r3, r7, #20
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4821      	ldr	r0, [pc, #132]	; (800c744 <HAL_PCD_MspInit+0xe0>)
 800c6c0:	f7f8 f958 	bl	8004974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c6d2:	f107 0314 	add.w	r3, r7, #20
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	481a      	ldr	r0, [pc, #104]	; (800c744 <HAL_PCD_MspInit+0xe0>)
 800c6da:	f7f8 f94b 	bl	8004974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c6de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c6e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6f0:	230a      	movs	r3, #10
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6f4:	f107 0314 	add.w	r3, r7, #20
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4812      	ldr	r0, [pc, #72]	; (800c744 <HAL_PCD_MspInit+0xe0>)
 800c6fc:	f7f8 f93a 	bl	8004974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c700:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c704:	4a0e      	ldr	r2, [pc, #56]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c70a:	6353      	str	r3, [r2, #52]	; 0x34
 800c70c:	2300      	movs	r3, #0
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c714:	4a0a      	ldr	r2, [pc, #40]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c71a:	6453      	str	r3, [r2, #68]	; 0x44
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <HAL_PCD_MspInit+0xdc>)
 800c71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 1);
 800c728:	2201      	movs	r2, #1
 800c72a:	2100      	movs	r1, #0
 800c72c:	2043      	movs	r0, #67	; 0x43
 800c72e:	f7f7 fdd6 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c732:	2043      	movs	r0, #67	; 0x43
 800c734:	f7f7 fdef 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c738:	bf00      	nop
 800c73a:	3728      	adds	r7, #40	; 0x28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	40023800 	.word	0x40023800
 800c744:	40020000 	.word	0x40020000

0800c748 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c75c:	4619      	mov	r1, r3
 800c75e:	4610      	mov	r0, r2
 800c760:	f7fe fd76 	bl	800b250 <USBD_LL_SetupStage>
}
 800c764:	bf00      	nop
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c77e:	78fa      	ldrb	r2, [r7, #3]
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4613      	mov	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	78fb      	ldrb	r3, [r7, #3]
 800c794:	4619      	mov	r1, r3
 800c796:	f7fe fdb0 	bl	800b2fa <USBD_LL_DataOutStage>
}
 800c79a:	bf00      	nop
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7b4:	78fa      	ldrb	r2, [r7, #3]
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	1a9b      	subs	r3, r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	3348      	adds	r3, #72	; 0x48
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	78fb      	ldrb	r3, [r7, #3]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f7fe fdf9 	bl	800b3c0 <USBD_LL_DataInStage>
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe fefd 	bl	800b5e4 <USBD_LL_SOF>
}
 800c7ea:	bf00      	nop
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d102      	bne.n	800c80c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c806:	2300      	movs	r3, #0
 800c808:	73fb      	strb	r3, [r7, #15]
 800c80a:	e008      	b.n	800c81e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d102      	bne.n	800c81a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c814:	2301      	movs	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]
 800c818:	e001      	b.n	800c81e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c81a:	f7f6 fc35 	bl	8003088 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c824:	7bfa      	ldrb	r2, [r7, #15]
 800c826:	4611      	mov	r1, r2
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe fea0 	bl	800b56e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fe59 	bl	800b4ec <USBD_LL_Reset>
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fe9b 	bl	800b58e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	6812      	ldr	r2, [r2, #0]
 800c866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c86a:	f043 0301 	orr.w	r3, r3, #1
 800c86e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d005      	beq.n	800c884 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c878:	4b04      	ldr	r3, [pc, #16]	; (800c88c <HAL_PCD_SuspendCallback+0x48>)
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	4a03      	ldr	r2, [pc, #12]	; (800c88c <HAL_PCD_SuspendCallback+0x48>)
 800c87e:	f043 0306 	orr.w	r3, r3, #6
 800c882:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	e000ed00 	.word	0xe000ed00

0800c890 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fe8a 	bl	800b5b8 <USBD_LL_Resume>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8be:	78fa      	ldrb	r2, [r7, #3]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe feb5 	bl	800b632 <USBD_LL_IsoOUTIncomplete>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fe96 	bl	800b618 <USBD_LL_IsoINIncomplete>
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c902:	4618      	mov	r0, r3
 800c904:	f7fe fea2 	bl	800b64c <USBD_LL_DevConnected>
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fe9f 	bl	800b662 <USBD_LL_DevDisconnected>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d13c      	bne.n	800c9b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c93c:	4a20      	ldr	r2, [pc, #128]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a1e      	ldr	r2, [pc, #120]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c948:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c94c:	4b1c      	ldr	r3, [pc, #112]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c94e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c954:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c956:	2204      	movs	r2, #4
 800c958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c95a:	4b19      	ldr	r3, [pc, #100]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c95c:	2202      	movs	r2, #2
 800c95e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c960:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c962:	2200      	movs	r2, #0
 800c964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c966:	4b16      	ldr	r3, [pc, #88]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c968:	2202      	movs	r2, #2
 800c96a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c96c:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c96e:	2201      	movs	r2, #1
 800c970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c972:	4b13      	ldr	r3, [pc, #76]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c974:	2200      	movs	r2, #0
 800c976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c978:	4b11      	ldr	r3, [pc, #68]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c97e:	4b10      	ldr	r3, [pc, #64]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c980:	2201      	movs	r2, #1
 800c982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c984:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c986:	2200      	movs	r2, #0
 800c988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c98a:	480d      	ldr	r0, [pc, #52]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c98c:	f7f8 f9e5 	bl	8004d5a <HAL_PCD_Init>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c996:	f7f6 fb77 	bl	8003088 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c99a:	2180      	movs	r1, #128	; 0x80
 800c99c:	4808      	ldr	r0, [pc, #32]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c99e:	f7f9 fb1a 	bl	8005fd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9a2:	2240      	movs	r2, #64	; 0x40
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4806      	ldr	r0, [pc, #24]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c9a8:	f7f9 face 	bl	8005f48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c9ac:	2280      	movs	r2, #128	; 0x80
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	4803      	ldr	r0, [pc, #12]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c9b2:	f7f9 fac9 	bl	8005f48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20002060 	.word	0x20002060

0800c9c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f8 fada 	bl	8004f94 <HAL_PCD_Start>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 f914 	bl	800cc14 <USBD_Get_USB_Status>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f8 faf2 	bl	8004ffa <HAL_PCD_Stop>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 f8f9 	bl	800cc14 <USBD_Get_USB_Status>
 800ca22:	4603      	mov	r3, r0
 800ca24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	4608      	mov	r0, r1
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	70fb      	strb	r3, [r7, #3]
 800ca42:	460b      	mov	r3, r1
 800ca44:	70bb      	strb	r3, [r7, #2]
 800ca46:	4613      	mov	r3, r2
 800ca48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca58:	78bb      	ldrb	r3, [r7, #2]
 800ca5a:	883a      	ldrh	r2, [r7, #0]
 800ca5c:	78f9      	ldrb	r1, [r7, #3]
 800ca5e:	f7f8 fedc 	bl	800581a <HAL_PCD_EP_Open>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f8d3 	bl	800cc14 <USBD_Get_USB_Status>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca96:	78fa      	ldrb	r2, [r7, #3]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f8 ffba 	bl	8005a14 <HAL_PCD_EP_SetStall>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f8b4 	bl	800cc14 <USBD_Get_USB_Status>
 800caac:	4603      	mov	r3, r0
 800caae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cad4:	78fa      	ldrb	r2, [r7, #3]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f8 ffff 	bl	8005adc <HAL_PCD_EP_ClrStall>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 f895 	bl	800cc14 <USBD_Get_USB_Status>
 800caea:	4603      	mov	r3, r0
 800caec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caee:	7bbb      	ldrb	r3, [r7, #14]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	da0b      	bge.n	800cb2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	00db      	lsls	r3, r3, #3
 800cb20:	1a9b      	subs	r3, r3, r2
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	440b      	add	r3, r1
 800cb26:	333e      	adds	r3, #62	; 0x3e
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	e00b      	b.n	800cb44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb32:	68f9      	ldr	r1, [r7, #12]
 800cb34:	4613      	mov	r3, r2
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	1a9b      	subs	r3, r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	440b      	add	r3, r1
 800cb3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f8 fe2e 	bl	80057d0 <HAL_PCD_SetAddress>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 f84a 	bl	800cc14 <USBD_Get_USB_Status>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b086      	sub	sp, #24
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbac:	7af9      	ldrb	r1, [r7, #11]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	f7f8 fee5 	bl	8005980 <HAL_PCD_EP_Transmit>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbba:	7dfb      	ldrb	r3, [r7, #23]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 f829 	bl	800cc14 <USBD_Get_USB_Status>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	607a      	str	r2, [r7, #4]
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbee:	7af9      	ldrb	r1, [r7, #11]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	f7f8 fe79 	bl	80058ea <HAL_PCD_EP_Receive>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbfc:	7dfb      	ldrb	r3, [r7, #23]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f808 	bl	800cc14 <USBD_Get_USB_Status>
 800cc04:	4603      	mov	r3, r0
 800cc06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc08:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc22:	79fb      	ldrb	r3, [r7, #7]
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d817      	bhi.n	800cc58 <USBD_Get_USB_Status+0x44>
 800cc28:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <USBD_Get_USB_Status+0x1c>)
 800cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2e:	bf00      	nop
 800cc30:	0800cc41 	.word	0x0800cc41
 800cc34:	0800cc47 	.word	0x0800cc47
 800cc38:	0800cc4d 	.word	0x0800cc4d
 800cc3c:	0800cc53 	.word	0x0800cc53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
    break;
 800cc44:	e00b      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc46:	2303      	movs	r3, #3
 800cc48:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4a:	e008      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc50:	e005      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc52:	2303      	movs	r3, #3
 800cc54:	73fb      	strb	r3, [r7, #15]
    break;
 800cc56:	e002      	b.n	800cc5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc5c:	bf00      	nop
  }
  return usb_status;
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <atof>:
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	f001 bbc1 	b.w	800e3f4 <strtod>
	...

0800cc74 <__errno>:
 800cc74:	4b01      	ldr	r3, [pc, #4]	; (800cc7c <__errno+0x8>)
 800cc76:	6818      	ldr	r0, [r3, #0]
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20000540 	.word	0x20000540

0800cc80 <__libc_init_array>:
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	4d0d      	ldr	r5, [pc, #52]	; (800ccb8 <__libc_init_array+0x38>)
 800cc84:	4c0d      	ldr	r4, [pc, #52]	; (800ccbc <__libc_init_array+0x3c>)
 800cc86:	1b64      	subs	r4, r4, r5
 800cc88:	10a4      	asrs	r4, r4, #2
 800cc8a:	2600      	movs	r6, #0
 800cc8c:	42a6      	cmp	r6, r4
 800cc8e:	d109      	bne.n	800cca4 <__libc_init_array+0x24>
 800cc90:	4d0b      	ldr	r5, [pc, #44]	; (800ccc0 <__libc_init_array+0x40>)
 800cc92:	4c0c      	ldr	r4, [pc, #48]	; (800ccc4 <__libc_init_array+0x44>)
 800cc94:	f004 f9ba 	bl	801100c <_init>
 800cc98:	1b64      	subs	r4, r4, r5
 800cc9a:	10a4      	asrs	r4, r4, #2
 800cc9c:	2600      	movs	r6, #0
 800cc9e:	42a6      	cmp	r6, r4
 800cca0:	d105      	bne.n	800ccae <__libc_init_array+0x2e>
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca8:	4798      	blx	r3
 800ccaa:	3601      	adds	r6, #1
 800ccac:	e7ee      	b.n	800cc8c <__libc_init_array+0xc>
 800ccae:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccb2:	4798      	blx	r3
 800ccb4:	3601      	adds	r6, #1
 800ccb6:	e7f2      	b.n	800cc9e <__libc_init_array+0x1e>
 800ccb8:	08011764 	.word	0x08011764
 800ccbc:	08011764 	.word	0x08011764
 800ccc0:	08011764 	.word	0x08011764
 800ccc4:	08011768 	.word	0x08011768

0800ccc8 <malloc>:
 800ccc8:	4b02      	ldr	r3, [pc, #8]	; (800ccd4 <malloc+0xc>)
 800ccca:	4601      	mov	r1, r0
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	f000 b863 	b.w	800cd98 <_malloc_r>
 800ccd2:	bf00      	nop
 800ccd4:	20000540 	.word	0x20000540

0800ccd8 <free>:
 800ccd8:	4b02      	ldr	r3, [pc, #8]	; (800cce4 <free+0xc>)
 800ccda:	4601      	mov	r1, r0
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	f000 b80b 	b.w	800ccf8 <_free_r>
 800cce2:	bf00      	nop
 800cce4:	20000540 	.word	0x20000540

0800cce8 <memset>:
 800cce8:	4402      	add	r2, r0
 800ccea:	4603      	mov	r3, r0
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d100      	bne.n	800ccf2 <memset+0xa>
 800ccf0:	4770      	bx	lr
 800ccf2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf6:	e7f9      	b.n	800ccec <memset+0x4>

0800ccf8 <_free_r>:
 800ccf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccfa:	2900      	cmp	r1, #0
 800ccfc:	d048      	beq.n	800cd90 <_free_r+0x98>
 800ccfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd02:	9001      	str	r0, [sp, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f1a1 0404 	sub.w	r4, r1, #4
 800cd0a:	bfb8      	it	lt
 800cd0c:	18e4      	addlt	r4, r4, r3
 800cd0e:	f002 fd8b 	bl	800f828 <__malloc_lock>
 800cd12:	4a20      	ldr	r2, [pc, #128]	; (800cd94 <_free_r+0x9c>)
 800cd14:	9801      	ldr	r0, [sp, #4]
 800cd16:	6813      	ldr	r3, [r2, #0]
 800cd18:	4615      	mov	r5, r2
 800cd1a:	b933      	cbnz	r3, 800cd2a <_free_r+0x32>
 800cd1c:	6063      	str	r3, [r4, #4]
 800cd1e:	6014      	str	r4, [r2, #0]
 800cd20:	b003      	add	sp, #12
 800cd22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd26:	f002 bd85 	b.w	800f834 <__malloc_unlock>
 800cd2a:	42a3      	cmp	r3, r4
 800cd2c:	d90b      	bls.n	800cd46 <_free_r+0x4e>
 800cd2e:	6821      	ldr	r1, [r4, #0]
 800cd30:	1862      	adds	r2, r4, r1
 800cd32:	4293      	cmp	r3, r2
 800cd34:	bf04      	itt	eq
 800cd36:	681a      	ldreq	r2, [r3, #0]
 800cd38:	685b      	ldreq	r3, [r3, #4]
 800cd3a:	6063      	str	r3, [r4, #4]
 800cd3c:	bf04      	itt	eq
 800cd3e:	1852      	addeq	r2, r2, r1
 800cd40:	6022      	streq	r2, [r4, #0]
 800cd42:	602c      	str	r4, [r5, #0]
 800cd44:	e7ec      	b.n	800cd20 <_free_r+0x28>
 800cd46:	461a      	mov	r2, r3
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	b10b      	cbz	r3, 800cd50 <_free_r+0x58>
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	d9fa      	bls.n	800cd46 <_free_r+0x4e>
 800cd50:	6811      	ldr	r1, [r2, #0]
 800cd52:	1855      	adds	r5, r2, r1
 800cd54:	42a5      	cmp	r5, r4
 800cd56:	d10b      	bne.n	800cd70 <_free_r+0x78>
 800cd58:	6824      	ldr	r4, [r4, #0]
 800cd5a:	4421      	add	r1, r4
 800cd5c:	1854      	adds	r4, r2, r1
 800cd5e:	42a3      	cmp	r3, r4
 800cd60:	6011      	str	r1, [r2, #0]
 800cd62:	d1dd      	bne.n	800cd20 <_free_r+0x28>
 800cd64:	681c      	ldr	r4, [r3, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	6053      	str	r3, [r2, #4]
 800cd6a:	4421      	add	r1, r4
 800cd6c:	6011      	str	r1, [r2, #0]
 800cd6e:	e7d7      	b.n	800cd20 <_free_r+0x28>
 800cd70:	d902      	bls.n	800cd78 <_free_r+0x80>
 800cd72:	230c      	movs	r3, #12
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	e7d3      	b.n	800cd20 <_free_r+0x28>
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	1961      	adds	r1, r4, r5
 800cd7c:	428b      	cmp	r3, r1
 800cd7e:	bf04      	itt	eq
 800cd80:	6819      	ldreq	r1, [r3, #0]
 800cd82:	685b      	ldreq	r3, [r3, #4]
 800cd84:	6063      	str	r3, [r4, #4]
 800cd86:	bf04      	itt	eq
 800cd88:	1949      	addeq	r1, r1, r5
 800cd8a:	6021      	streq	r1, [r4, #0]
 800cd8c:	6054      	str	r4, [r2, #4]
 800cd8e:	e7c7      	b.n	800cd20 <_free_r+0x28>
 800cd90:	b003      	add	sp, #12
 800cd92:	bd30      	pop	{r4, r5, pc}
 800cd94:	200008ac 	.word	0x200008ac

0800cd98 <_malloc_r>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	1ccd      	adds	r5, r1, #3
 800cd9c:	f025 0503 	bic.w	r5, r5, #3
 800cda0:	3508      	adds	r5, #8
 800cda2:	2d0c      	cmp	r5, #12
 800cda4:	bf38      	it	cc
 800cda6:	250c      	movcc	r5, #12
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	4606      	mov	r6, r0
 800cdac:	db01      	blt.n	800cdb2 <_malloc_r+0x1a>
 800cdae:	42a9      	cmp	r1, r5
 800cdb0:	d903      	bls.n	800cdba <_malloc_r+0x22>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	6033      	str	r3, [r6, #0]
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdba:	f002 fd35 	bl	800f828 <__malloc_lock>
 800cdbe:	4921      	ldr	r1, [pc, #132]	; (800ce44 <_malloc_r+0xac>)
 800cdc0:	680a      	ldr	r2, [r1, #0]
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	b99c      	cbnz	r4, 800cdee <_malloc_r+0x56>
 800cdc6:	4f20      	ldr	r7, [pc, #128]	; (800ce48 <_malloc_r+0xb0>)
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	b923      	cbnz	r3, 800cdd6 <_malloc_r+0x3e>
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 fca6 	bl	800d720 <_sbrk_r>
 800cdd4:	6038      	str	r0, [r7, #0]
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f000 fca1 	bl	800d720 <_sbrk_r>
 800cdde:	1c43      	adds	r3, r0, #1
 800cde0:	d123      	bne.n	800ce2a <_malloc_r+0x92>
 800cde2:	230c      	movs	r3, #12
 800cde4:	6033      	str	r3, [r6, #0]
 800cde6:	4630      	mov	r0, r6
 800cde8:	f002 fd24 	bl	800f834 <__malloc_unlock>
 800cdec:	e7e3      	b.n	800cdb6 <_malloc_r+0x1e>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	1b5b      	subs	r3, r3, r5
 800cdf2:	d417      	bmi.n	800ce24 <_malloc_r+0x8c>
 800cdf4:	2b0b      	cmp	r3, #11
 800cdf6:	d903      	bls.n	800ce00 <_malloc_r+0x68>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	441c      	add	r4, r3
 800cdfc:	6025      	str	r5, [r4, #0]
 800cdfe:	e004      	b.n	800ce0a <_malloc_r+0x72>
 800ce00:	6863      	ldr	r3, [r4, #4]
 800ce02:	42a2      	cmp	r2, r4
 800ce04:	bf0c      	ite	eq
 800ce06:	600b      	streq	r3, [r1, #0]
 800ce08:	6053      	strne	r3, [r2, #4]
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f002 fd12 	bl	800f834 <__malloc_unlock>
 800ce10:	f104 000b 	add.w	r0, r4, #11
 800ce14:	1d23      	adds	r3, r4, #4
 800ce16:	f020 0007 	bic.w	r0, r0, #7
 800ce1a:	1ac2      	subs	r2, r0, r3
 800ce1c:	d0cc      	beq.n	800cdb8 <_malloc_r+0x20>
 800ce1e:	1a1b      	subs	r3, r3, r0
 800ce20:	50a3      	str	r3, [r4, r2]
 800ce22:	e7c9      	b.n	800cdb8 <_malloc_r+0x20>
 800ce24:	4622      	mov	r2, r4
 800ce26:	6864      	ldr	r4, [r4, #4]
 800ce28:	e7cc      	b.n	800cdc4 <_malloc_r+0x2c>
 800ce2a:	1cc4      	adds	r4, r0, #3
 800ce2c:	f024 0403 	bic.w	r4, r4, #3
 800ce30:	42a0      	cmp	r0, r4
 800ce32:	d0e3      	beq.n	800cdfc <_malloc_r+0x64>
 800ce34:	1a21      	subs	r1, r4, r0
 800ce36:	4630      	mov	r0, r6
 800ce38:	f000 fc72 	bl	800d720 <_sbrk_r>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d1dd      	bne.n	800cdfc <_malloc_r+0x64>
 800ce40:	e7cf      	b.n	800cde2 <_malloc_r+0x4a>
 800ce42:	bf00      	nop
 800ce44:	200008ac 	.word	0x200008ac
 800ce48:	200008b0 	.word	0x200008b0

0800ce4c <__cvt>:
 800ce4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce50:	ec55 4b10 	vmov	r4, r5, d0
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	460e      	mov	r6, r1
 800ce58:	4619      	mov	r1, r3
 800ce5a:	462b      	mov	r3, r5
 800ce5c:	bfbb      	ittet	lt
 800ce5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce62:	461d      	movlt	r5, r3
 800ce64:	2300      	movge	r3, #0
 800ce66:	232d      	movlt	r3, #45	; 0x2d
 800ce68:	700b      	strb	r3, [r1, #0]
 800ce6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce70:	4691      	mov	r9, r2
 800ce72:	f023 0820 	bic.w	r8, r3, #32
 800ce76:	bfbc      	itt	lt
 800ce78:	4622      	movlt	r2, r4
 800ce7a:	4614      	movlt	r4, r2
 800ce7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce80:	d005      	beq.n	800ce8e <__cvt+0x42>
 800ce82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce86:	d100      	bne.n	800ce8a <__cvt+0x3e>
 800ce88:	3601      	adds	r6, #1
 800ce8a:	2102      	movs	r1, #2
 800ce8c:	e000      	b.n	800ce90 <__cvt+0x44>
 800ce8e:	2103      	movs	r1, #3
 800ce90:	ab03      	add	r3, sp, #12
 800ce92:	9301      	str	r3, [sp, #4]
 800ce94:	ab02      	add	r3, sp, #8
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	ec45 4b10 	vmov	d0, r4, r5
 800ce9c:	4653      	mov	r3, sl
 800ce9e:	4632      	mov	r2, r6
 800cea0:	f001 fb42 	bl	800e528 <_dtoa_r>
 800cea4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cea8:	4607      	mov	r7, r0
 800ceaa:	d102      	bne.n	800ceb2 <__cvt+0x66>
 800ceac:	f019 0f01 	tst.w	r9, #1
 800ceb0:	d022      	beq.n	800cef8 <__cvt+0xac>
 800ceb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ceb6:	eb07 0906 	add.w	r9, r7, r6
 800ceba:	d110      	bne.n	800cede <__cvt+0x92>
 800cebc:	783b      	ldrb	r3, [r7, #0]
 800cebe:	2b30      	cmp	r3, #48	; 0x30
 800cec0:	d10a      	bne.n	800ced8 <__cvt+0x8c>
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	4620      	mov	r0, r4
 800cec8:	4629      	mov	r1, r5
 800ceca:	f7f3 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cece:	b918      	cbnz	r0, 800ced8 <__cvt+0x8c>
 800ced0:	f1c6 0601 	rsb	r6, r6, #1
 800ced4:	f8ca 6000 	str.w	r6, [sl]
 800ced8:	f8da 3000 	ldr.w	r3, [sl]
 800cedc:	4499      	add	r9, r3
 800cede:	2200      	movs	r2, #0
 800cee0:	2300      	movs	r3, #0
 800cee2:	4620      	mov	r0, r4
 800cee4:	4629      	mov	r1, r5
 800cee6:	f7f3 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceea:	b108      	cbz	r0, 800cef0 <__cvt+0xa4>
 800ceec:	f8cd 900c 	str.w	r9, [sp, #12]
 800cef0:	2230      	movs	r2, #48	; 0x30
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	454b      	cmp	r3, r9
 800cef6:	d307      	bcc.n	800cf08 <__cvt+0xbc>
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cefc:	1bdb      	subs	r3, r3, r7
 800cefe:	4638      	mov	r0, r7
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	b004      	add	sp, #16
 800cf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf08:	1c59      	adds	r1, r3, #1
 800cf0a:	9103      	str	r1, [sp, #12]
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e7f0      	b.n	800cef2 <__cvt+0xa6>

0800cf10 <__exponent>:
 800cf10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf12:	4603      	mov	r3, r0
 800cf14:	2900      	cmp	r1, #0
 800cf16:	bfb8      	it	lt
 800cf18:	4249      	neglt	r1, r1
 800cf1a:	f803 2b02 	strb.w	r2, [r3], #2
 800cf1e:	bfb4      	ite	lt
 800cf20:	222d      	movlt	r2, #45	; 0x2d
 800cf22:	222b      	movge	r2, #43	; 0x2b
 800cf24:	2909      	cmp	r1, #9
 800cf26:	7042      	strb	r2, [r0, #1]
 800cf28:	dd2a      	ble.n	800cf80 <__exponent+0x70>
 800cf2a:	f10d 0407 	add.w	r4, sp, #7
 800cf2e:	46a4      	mov	ip, r4
 800cf30:	270a      	movs	r7, #10
 800cf32:	46a6      	mov	lr, r4
 800cf34:	460a      	mov	r2, r1
 800cf36:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf3a:	fb07 1516 	mls	r5, r7, r6, r1
 800cf3e:	3530      	adds	r5, #48	; 0x30
 800cf40:	2a63      	cmp	r2, #99	; 0x63
 800cf42:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	dcf1      	bgt.n	800cf32 <__exponent+0x22>
 800cf4e:	3130      	adds	r1, #48	; 0x30
 800cf50:	f1ae 0502 	sub.w	r5, lr, #2
 800cf54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf58:	1c44      	adds	r4, r0, #1
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4561      	cmp	r1, ip
 800cf5e:	d30a      	bcc.n	800cf76 <__exponent+0x66>
 800cf60:	f10d 0209 	add.w	r2, sp, #9
 800cf64:	eba2 020e 	sub.w	r2, r2, lr
 800cf68:	4565      	cmp	r5, ip
 800cf6a:	bf88      	it	hi
 800cf6c:	2200      	movhi	r2, #0
 800cf6e:	4413      	add	r3, r2
 800cf70:	1a18      	subs	r0, r3, r0
 800cf72:	b003      	add	sp, #12
 800cf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cf7e:	e7ed      	b.n	800cf5c <__exponent+0x4c>
 800cf80:	2330      	movs	r3, #48	; 0x30
 800cf82:	3130      	adds	r1, #48	; 0x30
 800cf84:	7083      	strb	r3, [r0, #2]
 800cf86:	70c1      	strb	r1, [r0, #3]
 800cf88:	1d03      	adds	r3, r0, #4
 800cf8a:	e7f1      	b.n	800cf70 <__exponent+0x60>

0800cf8c <_printf_float>:
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	ed2d 8b02 	vpush	{d8}
 800cf94:	b08d      	sub	sp, #52	; 0x34
 800cf96:	460c      	mov	r4, r1
 800cf98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	461f      	mov	r7, r3
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	f002 fc1d 	bl	800f7e0 <_localeconv_r>
 800cfa6:	f8d0 a000 	ldr.w	sl, [r0]
 800cfaa:	4650      	mov	r0, sl
 800cfac:	f7f3 f910 	bl	80001d0 <strlen>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	9305      	str	r3, [sp, #20]
 800cfb8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cfc0:	3307      	adds	r3, #7
 800cfc2:	f023 0307 	bic.w	r3, r3, #7
 800cfc6:	f103 0208 	add.w	r2, r3, #8
 800cfca:	f8c8 2000 	str.w	r2, [r8]
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cfd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cfda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cfe4:	ee08 0a10 	vmov	s16, r0
 800cfe8:	4b9f      	ldr	r3, [pc, #636]	; (800d268 <_printf_float+0x2dc>)
 800cfea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295
 800cff2:	f7f3 fd9b 	bl	8000b2c <__aeabi_dcmpun>
 800cff6:	bb88      	cbnz	r0, 800d05c <_printf_float+0xd0>
 800cff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cffc:	4b9a      	ldr	r3, [pc, #616]	; (800d268 <_printf_float+0x2dc>)
 800cffe:	f04f 32ff 	mov.w	r2, #4294967295
 800d002:	f7f3 fd75 	bl	8000af0 <__aeabi_dcmple>
 800d006:	bb48      	cbnz	r0, 800d05c <_printf_float+0xd0>
 800d008:	2200      	movs	r2, #0
 800d00a:	2300      	movs	r3, #0
 800d00c:	4640      	mov	r0, r8
 800d00e:	4649      	mov	r1, r9
 800d010:	f7f3 fd64 	bl	8000adc <__aeabi_dcmplt>
 800d014:	b110      	cbz	r0, 800d01c <_printf_float+0x90>
 800d016:	232d      	movs	r3, #45	; 0x2d
 800d018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d01c:	4b93      	ldr	r3, [pc, #588]	; (800d26c <_printf_float+0x2e0>)
 800d01e:	4894      	ldr	r0, [pc, #592]	; (800d270 <_printf_float+0x2e4>)
 800d020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d024:	bf94      	ite	ls
 800d026:	4698      	movls	r8, r3
 800d028:	4680      	movhi	r8, r0
 800d02a:	2303      	movs	r3, #3
 800d02c:	6123      	str	r3, [r4, #16]
 800d02e:	9b05      	ldr	r3, [sp, #20]
 800d030:	f023 0204 	bic.w	r2, r3, #4
 800d034:	6022      	str	r2, [r4, #0]
 800d036:	f04f 0900 	mov.w	r9, #0
 800d03a:	9700      	str	r7, [sp, #0]
 800d03c:	4633      	mov	r3, r6
 800d03e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f9d8 	bl	800d3f8 <_printf_common>
 800d048:	3001      	adds	r0, #1
 800d04a:	f040 8090 	bne.w	800d16e <_printf_float+0x1e2>
 800d04e:	f04f 30ff 	mov.w	r0, #4294967295
 800d052:	b00d      	add	sp, #52	; 0x34
 800d054:	ecbd 8b02 	vpop	{d8}
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	4642      	mov	r2, r8
 800d05e:	464b      	mov	r3, r9
 800d060:	4640      	mov	r0, r8
 800d062:	4649      	mov	r1, r9
 800d064:	f7f3 fd62 	bl	8000b2c <__aeabi_dcmpun>
 800d068:	b140      	cbz	r0, 800d07c <_printf_float+0xf0>
 800d06a:	464b      	mov	r3, r9
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bfbc      	itt	lt
 800d070:	232d      	movlt	r3, #45	; 0x2d
 800d072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d076:	487f      	ldr	r0, [pc, #508]	; (800d274 <_printf_float+0x2e8>)
 800d078:	4b7f      	ldr	r3, [pc, #508]	; (800d278 <_printf_float+0x2ec>)
 800d07a:	e7d1      	b.n	800d020 <_printf_float+0x94>
 800d07c:	6863      	ldr	r3, [r4, #4]
 800d07e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d082:	9206      	str	r2, [sp, #24]
 800d084:	1c5a      	adds	r2, r3, #1
 800d086:	d13f      	bne.n	800d108 <_printf_float+0x17c>
 800d088:	2306      	movs	r3, #6
 800d08a:	6063      	str	r3, [r4, #4]
 800d08c:	9b05      	ldr	r3, [sp, #20]
 800d08e:	6861      	ldr	r1, [r4, #4]
 800d090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d094:	2300      	movs	r3, #0
 800d096:	9303      	str	r3, [sp, #12]
 800d098:	ab0a      	add	r3, sp, #40	; 0x28
 800d09a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d09e:	ab09      	add	r3, sp, #36	; 0x24
 800d0a0:	ec49 8b10 	vmov	d0, r8, r9
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	6022      	str	r2, [r4, #0]
 800d0a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f7ff fecd 	bl	800ce4c <__cvt>
 800d0b2:	9b06      	ldr	r3, [sp, #24]
 800d0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0b6:	2b47      	cmp	r3, #71	; 0x47
 800d0b8:	4680      	mov	r8, r0
 800d0ba:	d108      	bne.n	800d0ce <_printf_float+0x142>
 800d0bc:	1cc8      	adds	r0, r1, #3
 800d0be:	db02      	blt.n	800d0c6 <_printf_float+0x13a>
 800d0c0:	6863      	ldr	r3, [r4, #4]
 800d0c2:	4299      	cmp	r1, r3
 800d0c4:	dd41      	ble.n	800d14a <_printf_float+0x1be>
 800d0c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800d0ca:	fa5f fb8b 	uxtb.w	fp, fp
 800d0ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0d2:	d820      	bhi.n	800d116 <_printf_float+0x18a>
 800d0d4:	3901      	subs	r1, #1
 800d0d6:	465a      	mov	r2, fp
 800d0d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d0dc:	9109      	str	r1, [sp, #36]	; 0x24
 800d0de:	f7ff ff17 	bl	800cf10 <__exponent>
 800d0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0e4:	1813      	adds	r3, r2, r0
 800d0e6:	2a01      	cmp	r2, #1
 800d0e8:	4681      	mov	r9, r0
 800d0ea:	6123      	str	r3, [r4, #16]
 800d0ec:	dc02      	bgt.n	800d0f4 <_printf_float+0x168>
 800d0ee:	6822      	ldr	r2, [r4, #0]
 800d0f0:	07d2      	lsls	r2, r2, #31
 800d0f2:	d501      	bpl.n	800d0f8 <_printf_float+0x16c>
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	6123      	str	r3, [r4, #16]
 800d0f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d09c      	beq.n	800d03a <_printf_float+0xae>
 800d100:	232d      	movs	r3, #45	; 0x2d
 800d102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d106:	e798      	b.n	800d03a <_printf_float+0xae>
 800d108:	9a06      	ldr	r2, [sp, #24]
 800d10a:	2a47      	cmp	r2, #71	; 0x47
 800d10c:	d1be      	bne.n	800d08c <_printf_float+0x100>
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1bc      	bne.n	800d08c <_printf_float+0x100>
 800d112:	2301      	movs	r3, #1
 800d114:	e7b9      	b.n	800d08a <_printf_float+0xfe>
 800d116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d11a:	d118      	bne.n	800d14e <_printf_float+0x1c2>
 800d11c:	2900      	cmp	r1, #0
 800d11e:	6863      	ldr	r3, [r4, #4]
 800d120:	dd0b      	ble.n	800d13a <_printf_float+0x1ae>
 800d122:	6121      	str	r1, [r4, #16]
 800d124:	b913      	cbnz	r3, 800d12c <_printf_float+0x1a0>
 800d126:	6822      	ldr	r2, [r4, #0]
 800d128:	07d0      	lsls	r0, r2, #31
 800d12a:	d502      	bpl.n	800d132 <_printf_float+0x1a6>
 800d12c:	3301      	adds	r3, #1
 800d12e:	440b      	add	r3, r1
 800d130:	6123      	str	r3, [r4, #16]
 800d132:	65a1      	str	r1, [r4, #88]	; 0x58
 800d134:	f04f 0900 	mov.w	r9, #0
 800d138:	e7de      	b.n	800d0f8 <_printf_float+0x16c>
 800d13a:	b913      	cbnz	r3, 800d142 <_printf_float+0x1b6>
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	07d2      	lsls	r2, r2, #31
 800d140:	d501      	bpl.n	800d146 <_printf_float+0x1ba>
 800d142:	3302      	adds	r3, #2
 800d144:	e7f4      	b.n	800d130 <_printf_float+0x1a4>
 800d146:	2301      	movs	r3, #1
 800d148:	e7f2      	b.n	800d130 <_printf_float+0x1a4>
 800d14a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d150:	4299      	cmp	r1, r3
 800d152:	db05      	blt.n	800d160 <_printf_float+0x1d4>
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	6121      	str	r1, [r4, #16]
 800d158:	07d8      	lsls	r0, r3, #31
 800d15a:	d5ea      	bpl.n	800d132 <_printf_float+0x1a6>
 800d15c:	1c4b      	adds	r3, r1, #1
 800d15e:	e7e7      	b.n	800d130 <_printf_float+0x1a4>
 800d160:	2900      	cmp	r1, #0
 800d162:	bfd4      	ite	le
 800d164:	f1c1 0202 	rsble	r2, r1, #2
 800d168:	2201      	movgt	r2, #1
 800d16a:	4413      	add	r3, r2
 800d16c:	e7e0      	b.n	800d130 <_printf_float+0x1a4>
 800d16e:	6823      	ldr	r3, [r4, #0]
 800d170:	055a      	lsls	r2, r3, #21
 800d172:	d407      	bmi.n	800d184 <_printf_float+0x1f8>
 800d174:	6923      	ldr	r3, [r4, #16]
 800d176:	4642      	mov	r2, r8
 800d178:	4631      	mov	r1, r6
 800d17a:	4628      	mov	r0, r5
 800d17c:	47b8      	blx	r7
 800d17e:	3001      	adds	r0, #1
 800d180:	d12c      	bne.n	800d1dc <_printf_float+0x250>
 800d182:	e764      	b.n	800d04e <_printf_float+0xc2>
 800d184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d188:	f240 80e0 	bls.w	800d34c <_printf_float+0x3c0>
 800d18c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d190:	2200      	movs	r2, #0
 800d192:	2300      	movs	r3, #0
 800d194:	f7f3 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d034      	beq.n	800d206 <_printf_float+0x27a>
 800d19c:	4a37      	ldr	r2, [pc, #220]	; (800d27c <_printf_float+0x2f0>)
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4631      	mov	r1, r6
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	47b8      	blx	r7
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	f43f af51 	beq.w	800d04e <_printf_float+0xc2>
 800d1ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	db02      	blt.n	800d1ba <_printf_float+0x22e>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	07d8      	lsls	r0, r3, #31
 800d1b8:	d510      	bpl.n	800d1dc <_printf_float+0x250>
 800d1ba:	ee18 3a10 	vmov	r3, s16
 800d1be:	4652      	mov	r2, sl
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	f43f af41 	beq.w	800d04e <_printf_float+0xc2>
 800d1cc:	f04f 0800 	mov.w	r8, #0
 800d1d0:	f104 091a 	add.w	r9, r4, #26
 800d1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	4543      	cmp	r3, r8
 800d1da:	dc09      	bgt.n	800d1f0 <_printf_float+0x264>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	079b      	lsls	r3, r3, #30
 800d1e0:	f100 8105 	bmi.w	800d3ee <_printf_float+0x462>
 800d1e4:	68e0      	ldr	r0, [r4, #12]
 800d1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1e8:	4298      	cmp	r0, r3
 800d1ea:	bfb8      	it	lt
 800d1ec:	4618      	movlt	r0, r3
 800d1ee:	e730      	b.n	800d052 <_printf_float+0xc6>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	464a      	mov	r2, r9
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	47b8      	blx	r7
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	f43f af27 	beq.w	800d04e <_printf_float+0xc2>
 800d200:	f108 0801 	add.w	r8, r8, #1
 800d204:	e7e6      	b.n	800d1d4 <_printf_float+0x248>
 800d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d208:	2b00      	cmp	r3, #0
 800d20a:	dc39      	bgt.n	800d280 <_printf_float+0x2f4>
 800d20c:	4a1b      	ldr	r2, [pc, #108]	; (800d27c <_printf_float+0x2f0>)
 800d20e:	2301      	movs	r3, #1
 800d210:	4631      	mov	r1, r6
 800d212:	4628      	mov	r0, r5
 800d214:	47b8      	blx	r7
 800d216:	3001      	adds	r0, #1
 800d218:	f43f af19 	beq.w	800d04e <_printf_float+0xc2>
 800d21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d220:	4313      	orrs	r3, r2
 800d222:	d102      	bne.n	800d22a <_printf_float+0x29e>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	07d9      	lsls	r1, r3, #31
 800d228:	d5d8      	bpl.n	800d1dc <_printf_float+0x250>
 800d22a:	ee18 3a10 	vmov	r3, s16
 800d22e:	4652      	mov	r2, sl
 800d230:	4631      	mov	r1, r6
 800d232:	4628      	mov	r0, r5
 800d234:	47b8      	blx	r7
 800d236:	3001      	adds	r0, #1
 800d238:	f43f af09 	beq.w	800d04e <_printf_float+0xc2>
 800d23c:	f04f 0900 	mov.w	r9, #0
 800d240:	f104 0a1a 	add.w	sl, r4, #26
 800d244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d246:	425b      	negs	r3, r3
 800d248:	454b      	cmp	r3, r9
 800d24a:	dc01      	bgt.n	800d250 <_printf_float+0x2c4>
 800d24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24e:	e792      	b.n	800d176 <_printf_float+0x1ea>
 800d250:	2301      	movs	r3, #1
 800d252:	4652      	mov	r2, sl
 800d254:	4631      	mov	r1, r6
 800d256:	4628      	mov	r0, r5
 800d258:	47b8      	blx	r7
 800d25a:	3001      	adds	r0, #1
 800d25c:	f43f aef7 	beq.w	800d04e <_printf_float+0xc2>
 800d260:	f109 0901 	add.w	r9, r9, #1
 800d264:	e7ee      	b.n	800d244 <_printf_float+0x2b8>
 800d266:	bf00      	nop
 800d268:	7fefffff 	.word	0x7fefffff
 800d26c:	080112b4 	.word	0x080112b4
 800d270:	080112b8 	.word	0x080112b8
 800d274:	080112c0 	.word	0x080112c0
 800d278:	080112bc 	.word	0x080112bc
 800d27c:	080112c4 	.word	0x080112c4
 800d280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d284:	429a      	cmp	r2, r3
 800d286:	bfa8      	it	ge
 800d288:	461a      	movge	r2, r3
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	4691      	mov	r9, r2
 800d28e:	dc37      	bgt.n	800d300 <_printf_float+0x374>
 800d290:	f04f 0b00 	mov.w	fp, #0
 800d294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d298:	f104 021a 	add.w	r2, r4, #26
 800d29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	eba3 0309 	sub.w	r3, r3, r9
 800d2a4:	455b      	cmp	r3, fp
 800d2a6:	dc33      	bgt.n	800d310 <_printf_float+0x384>
 800d2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	db3b      	blt.n	800d328 <_printf_float+0x39c>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	07da      	lsls	r2, r3, #31
 800d2b4:	d438      	bmi.n	800d328 <_printf_float+0x39c>
 800d2b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2b8:	9b05      	ldr	r3, [sp, #20]
 800d2ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2bc:	1ad3      	subs	r3, r2, r3
 800d2be:	eba2 0901 	sub.w	r9, r2, r1
 800d2c2:	4599      	cmp	r9, r3
 800d2c4:	bfa8      	it	ge
 800d2c6:	4699      	movge	r9, r3
 800d2c8:	f1b9 0f00 	cmp.w	r9, #0
 800d2cc:	dc35      	bgt.n	800d33a <_printf_float+0x3ae>
 800d2ce:	f04f 0800 	mov.w	r8, #0
 800d2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2d6:	f104 0a1a 	add.w	sl, r4, #26
 800d2da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	eba3 0309 	sub.w	r3, r3, r9
 800d2e4:	4543      	cmp	r3, r8
 800d2e6:	f77f af79 	ble.w	800d1dc <_printf_float+0x250>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	47b8      	blx	r7
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	f43f aeaa 	beq.w	800d04e <_printf_float+0xc2>
 800d2fa:	f108 0801 	add.w	r8, r8, #1
 800d2fe:	e7ec      	b.n	800d2da <_printf_float+0x34e>
 800d300:	4613      	mov	r3, r2
 800d302:	4631      	mov	r1, r6
 800d304:	4642      	mov	r2, r8
 800d306:	4628      	mov	r0, r5
 800d308:	47b8      	blx	r7
 800d30a:	3001      	adds	r0, #1
 800d30c:	d1c0      	bne.n	800d290 <_printf_float+0x304>
 800d30e:	e69e      	b.n	800d04e <_printf_float+0xc2>
 800d310:	2301      	movs	r3, #1
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	9205      	str	r2, [sp, #20]
 800d318:	47b8      	blx	r7
 800d31a:	3001      	adds	r0, #1
 800d31c:	f43f ae97 	beq.w	800d04e <_printf_float+0xc2>
 800d320:	9a05      	ldr	r2, [sp, #20]
 800d322:	f10b 0b01 	add.w	fp, fp, #1
 800d326:	e7b9      	b.n	800d29c <_printf_float+0x310>
 800d328:	ee18 3a10 	vmov	r3, s16
 800d32c:	4652      	mov	r2, sl
 800d32e:	4631      	mov	r1, r6
 800d330:	4628      	mov	r0, r5
 800d332:	47b8      	blx	r7
 800d334:	3001      	adds	r0, #1
 800d336:	d1be      	bne.n	800d2b6 <_printf_float+0x32a>
 800d338:	e689      	b.n	800d04e <_printf_float+0xc2>
 800d33a:	9a05      	ldr	r2, [sp, #20]
 800d33c:	464b      	mov	r3, r9
 800d33e:	4442      	add	r2, r8
 800d340:	4631      	mov	r1, r6
 800d342:	4628      	mov	r0, r5
 800d344:	47b8      	blx	r7
 800d346:	3001      	adds	r0, #1
 800d348:	d1c1      	bne.n	800d2ce <_printf_float+0x342>
 800d34a:	e680      	b.n	800d04e <_printf_float+0xc2>
 800d34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d34e:	2a01      	cmp	r2, #1
 800d350:	dc01      	bgt.n	800d356 <_printf_float+0x3ca>
 800d352:	07db      	lsls	r3, r3, #31
 800d354:	d538      	bpl.n	800d3c8 <_printf_float+0x43c>
 800d356:	2301      	movs	r3, #1
 800d358:	4642      	mov	r2, r8
 800d35a:	4631      	mov	r1, r6
 800d35c:	4628      	mov	r0, r5
 800d35e:	47b8      	blx	r7
 800d360:	3001      	adds	r0, #1
 800d362:	f43f ae74 	beq.w	800d04e <_printf_float+0xc2>
 800d366:	ee18 3a10 	vmov	r3, s16
 800d36a:	4652      	mov	r2, sl
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f ae6b 	beq.w	800d04e <_printf_float+0xc2>
 800d378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d37c:	2200      	movs	r2, #0
 800d37e:	2300      	movs	r3, #0
 800d380:	f7f3 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d384:	b9d8      	cbnz	r0, 800d3be <_printf_float+0x432>
 800d386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d388:	f108 0201 	add.w	r2, r8, #1
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4631      	mov	r1, r6
 800d390:	4628      	mov	r0, r5
 800d392:	47b8      	blx	r7
 800d394:	3001      	adds	r0, #1
 800d396:	d10e      	bne.n	800d3b6 <_printf_float+0x42a>
 800d398:	e659      	b.n	800d04e <_printf_float+0xc2>
 800d39a:	2301      	movs	r3, #1
 800d39c:	4652      	mov	r2, sl
 800d39e:	4631      	mov	r1, r6
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b8      	blx	r7
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	f43f ae52 	beq.w	800d04e <_printf_float+0xc2>
 800d3aa:	f108 0801 	add.w	r8, r8, #1
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	4543      	cmp	r3, r8
 800d3b4:	dcf1      	bgt.n	800d39a <_printf_float+0x40e>
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3bc:	e6dc      	b.n	800d178 <_printf_float+0x1ec>
 800d3be:	f04f 0800 	mov.w	r8, #0
 800d3c2:	f104 0a1a 	add.w	sl, r4, #26
 800d3c6:	e7f2      	b.n	800d3ae <_printf_float+0x422>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4642      	mov	r2, r8
 800d3cc:	e7df      	b.n	800d38e <_printf_float+0x402>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	464a      	mov	r2, r9
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f43f ae38 	beq.w	800d04e <_printf_float+0xc2>
 800d3de:	f108 0801 	add.w	r8, r8, #1
 800d3e2:	68e3      	ldr	r3, [r4, #12]
 800d3e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3e6:	1a5b      	subs	r3, r3, r1
 800d3e8:	4543      	cmp	r3, r8
 800d3ea:	dcf0      	bgt.n	800d3ce <_printf_float+0x442>
 800d3ec:	e6fa      	b.n	800d1e4 <_printf_float+0x258>
 800d3ee:	f04f 0800 	mov.w	r8, #0
 800d3f2:	f104 0919 	add.w	r9, r4, #25
 800d3f6:	e7f4      	b.n	800d3e2 <_printf_float+0x456>

0800d3f8 <_printf_common>:
 800d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	4699      	mov	r9, r3
 800d400:	688a      	ldr	r2, [r1, #8]
 800d402:	690b      	ldr	r3, [r1, #16]
 800d404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d408:	4293      	cmp	r3, r2
 800d40a:	bfb8      	it	lt
 800d40c:	4613      	movlt	r3, r2
 800d40e:	6033      	str	r3, [r6, #0]
 800d410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d414:	4607      	mov	r7, r0
 800d416:	460c      	mov	r4, r1
 800d418:	b10a      	cbz	r2, 800d41e <_printf_common+0x26>
 800d41a:	3301      	adds	r3, #1
 800d41c:	6033      	str	r3, [r6, #0]
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	0699      	lsls	r1, r3, #26
 800d422:	bf42      	ittt	mi
 800d424:	6833      	ldrmi	r3, [r6, #0]
 800d426:	3302      	addmi	r3, #2
 800d428:	6033      	strmi	r3, [r6, #0]
 800d42a:	6825      	ldr	r5, [r4, #0]
 800d42c:	f015 0506 	ands.w	r5, r5, #6
 800d430:	d106      	bne.n	800d440 <_printf_common+0x48>
 800d432:	f104 0a19 	add.w	sl, r4, #25
 800d436:	68e3      	ldr	r3, [r4, #12]
 800d438:	6832      	ldr	r2, [r6, #0]
 800d43a:	1a9b      	subs	r3, r3, r2
 800d43c:	42ab      	cmp	r3, r5
 800d43e:	dc26      	bgt.n	800d48e <_printf_common+0x96>
 800d440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d444:	1e13      	subs	r3, r2, #0
 800d446:	6822      	ldr	r2, [r4, #0]
 800d448:	bf18      	it	ne
 800d44a:	2301      	movne	r3, #1
 800d44c:	0692      	lsls	r2, r2, #26
 800d44e:	d42b      	bmi.n	800d4a8 <_printf_common+0xb0>
 800d450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d454:	4649      	mov	r1, r9
 800d456:	4638      	mov	r0, r7
 800d458:	47c0      	blx	r8
 800d45a:	3001      	adds	r0, #1
 800d45c:	d01e      	beq.n	800d49c <_printf_common+0xa4>
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	68e5      	ldr	r5, [r4, #12]
 800d462:	6832      	ldr	r2, [r6, #0]
 800d464:	f003 0306 	and.w	r3, r3, #6
 800d468:	2b04      	cmp	r3, #4
 800d46a:	bf08      	it	eq
 800d46c:	1aad      	subeq	r5, r5, r2
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	6922      	ldr	r2, [r4, #16]
 800d472:	bf0c      	ite	eq
 800d474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d478:	2500      	movne	r5, #0
 800d47a:	4293      	cmp	r3, r2
 800d47c:	bfc4      	itt	gt
 800d47e:	1a9b      	subgt	r3, r3, r2
 800d480:	18ed      	addgt	r5, r5, r3
 800d482:	2600      	movs	r6, #0
 800d484:	341a      	adds	r4, #26
 800d486:	42b5      	cmp	r5, r6
 800d488:	d11a      	bne.n	800d4c0 <_printf_common+0xc8>
 800d48a:	2000      	movs	r0, #0
 800d48c:	e008      	b.n	800d4a0 <_printf_common+0xa8>
 800d48e:	2301      	movs	r3, #1
 800d490:	4652      	mov	r2, sl
 800d492:	4649      	mov	r1, r9
 800d494:	4638      	mov	r0, r7
 800d496:	47c0      	blx	r8
 800d498:	3001      	adds	r0, #1
 800d49a:	d103      	bne.n	800d4a4 <_printf_common+0xac>
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a4:	3501      	adds	r5, #1
 800d4a6:	e7c6      	b.n	800d436 <_printf_common+0x3e>
 800d4a8:	18e1      	adds	r1, r4, r3
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	2030      	movs	r0, #48	; 0x30
 800d4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4b2:	4422      	add	r2, r4
 800d4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4bc:	3302      	adds	r3, #2
 800d4be:	e7c7      	b.n	800d450 <_printf_common+0x58>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	47c0      	blx	r8
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	d0e6      	beq.n	800d49c <_printf_common+0xa4>
 800d4ce:	3601      	adds	r6, #1
 800d4d0:	e7d9      	b.n	800d486 <_printf_common+0x8e>
	...

0800d4d4 <_printf_i>:
 800d4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	460c      	mov	r4, r1
 800d4da:	4691      	mov	r9, r2
 800d4dc:	7e27      	ldrb	r7, [r4, #24]
 800d4de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d4e0:	2f78      	cmp	r7, #120	; 0x78
 800d4e2:	4680      	mov	r8, r0
 800d4e4:	469a      	mov	sl, r3
 800d4e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4ea:	d807      	bhi.n	800d4fc <_printf_i+0x28>
 800d4ec:	2f62      	cmp	r7, #98	; 0x62
 800d4ee:	d80a      	bhi.n	800d506 <_printf_i+0x32>
 800d4f0:	2f00      	cmp	r7, #0
 800d4f2:	f000 80d8 	beq.w	800d6a6 <_printf_i+0x1d2>
 800d4f6:	2f58      	cmp	r7, #88	; 0x58
 800d4f8:	f000 80a3 	beq.w	800d642 <_printf_i+0x16e>
 800d4fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d504:	e03a      	b.n	800d57c <_printf_i+0xa8>
 800d506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d50a:	2b15      	cmp	r3, #21
 800d50c:	d8f6      	bhi.n	800d4fc <_printf_i+0x28>
 800d50e:	a001      	add	r0, pc, #4	; (adr r0, 800d514 <_printf_i+0x40>)
 800d510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d514:	0800d56d 	.word	0x0800d56d
 800d518:	0800d581 	.word	0x0800d581
 800d51c:	0800d4fd 	.word	0x0800d4fd
 800d520:	0800d4fd 	.word	0x0800d4fd
 800d524:	0800d4fd 	.word	0x0800d4fd
 800d528:	0800d4fd 	.word	0x0800d4fd
 800d52c:	0800d581 	.word	0x0800d581
 800d530:	0800d4fd 	.word	0x0800d4fd
 800d534:	0800d4fd 	.word	0x0800d4fd
 800d538:	0800d4fd 	.word	0x0800d4fd
 800d53c:	0800d4fd 	.word	0x0800d4fd
 800d540:	0800d68d 	.word	0x0800d68d
 800d544:	0800d5b1 	.word	0x0800d5b1
 800d548:	0800d66f 	.word	0x0800d66f
 800d54c:	0800d4fd 	.word	0x0800d4fd
 800d550:	0800d4fd 	.word	0x0800d4fd
 800d554:	0800d6af 	.word	0x0800d6af
 800d558:	0800d4fd 	.word	0x0800d4fd
 800d55c:	0800d5b1 	.word	0x0800d5b1
 800d560:	0800d4fd 	.word	0x0800d4fd
 800d564:	0800d4fd 	.word	0x0800d4fd
 800d568:	0800d677 	.word	0x0800d677
 800d56c:	680b      	ldr	r3, [r1, #0]
 800d56e:	1d1a      	adds	r2, r3, #4
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	600a      	str	r2, [r1, #0]
 800d574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d57c:	2301      	movs	r3, #1
 800d57e:	e0a3      	b.n	800d6c8 <_printf_i+0x1f4>
 800d580:	6825      	ldr	r5, [r4, #0]
 800d582:	6808      	ldr	r0, [r1, #0]
 800d584:	062e      	lsls	r6, r5, #24
 800d586:	f100 0304 	add.w	r3, r0, #4
 800d58a:	d50a      	bpl.n	800d5a2 <_printf_i+0xce>
 800d58c:	6805      	ldr	r5, [r0, #0]
 800d58e:	600b      	str	r3, [r1, #0]
 800d590:	2d00      	cmp	r5, #0
 800d592:	da03      	bge.n	800d59c <_printf_i+0xc8>
 800d594:	232d      	movs	r3, #45	; 0x2d
 800d596:	426d      	negs	r5, r5
 800d598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d59c:	485e      	ldr	r0, [pc, #376]	; (800d718 <_printf_i+0x244>)
 800d59e:	230a      	movs	r3, #10
 800d5a0:	e019      	b.n	800d5d6 <_printf_i+0x102>
 800d5a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d5a6:	6805      	ldr	r5, [r0, #0]
 800d5a8:	600b      	str	r3, [r1, #0]
 800d5aa:	bf18      	it	ne
 800d5ac:	b22d      	sxthne	r5, r5
 800d5ae:	e7ef      	b.n	800d590 <_printf_i+0xbc>
 800d5b0:	680b      	ldr	r3, [r1, #0]
 800d5b2:	6825      	ldr	r5, [r4, #0]
 800d5b4:	1d18      	adds	r0, r3, #4
 800d5b6:	6008      	str	r0, [r1, #0]
 800d5b8:	0628      	lsls	r0, r5, #24
 800d5ba:	d501      	bpl.n	800d5c0 <_printf_i+0xec>
 800d5bc:	681d      	ldr	r5, [r3, #0]
 800d5be:	e002      	b.n	800d5c6 <_printf_i+0xf2>
 800d5c0:	0669      	lsls	r1, r5, #25
 800d5c2:	d5fb      	bpl.n	800d5bc <_printf_i+0xe8>
 800d5c4:	881d      	ldrh	r5, [r3, #0]
 800d5c6:	4854      	ldr	r0, [pc, #336]	; (800d718 <_printf_i+0x244>)
 800d5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800d5ca:	bf0c      	ite	eq
 800d5cc:	2308      	moveq	r3, #8
 800d5ce:	230a      	movne	r3, #10
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5d6:	6866      	ldr	r6, [r4, #4]
 800d5d8:	60a6      	str	r6, [r4, #8]
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	bfa2      	ittt	ge
 800d5de:	6821      	ldrge	r1, [r4, #0]
 800d5e0:	f021 0104 	bicge.w	r1, r1, #4
 800d5e4:	6021      	strge	r1, [r4, #0]
 800d5e6:	b90d      	cbnz	r5, 800d5ec <_printf_i+0x118>
 800d5e8:	2e00      	cmp	r6, #0
 800d5ea:	d04d      	beq.n	800d688 <_printf_i+0x1b4>
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d5f6:	5dc7      	ldrb	r7, [r0, r7]
 800d5f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5fc:	462f      	mov	r7, r5
 800d5fe:	42bb      	cmp	r3, r7
 800d600:	460d      	mov	r5, r1
 800d602:	d9f4      	bls.n	800d5ee <_printf_i+0x11a>
 800d604:	2b08      	cmp	r3, #8
 800d606:	d10b      	bne.n	800d620 <_printf_i+0x14c>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	07df      	lsls	r7, r3, #31
 800d60c:	d508      	bpl.n	800d620 <_printf_i+0x14c>
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	6861      	ldr	r1, [r4, #4]
 800d612:	4299      	cmp	r1, r3
 800d614:	bfde      	ittt	le
 800d616:	2330      	movle	r3, #48	; 0x30
 800d618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d61c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d620:	1b92      	subs	r2, r2, r6
 800d622:	6122      	str	r2, [r4, #16]
 800d624:	f8cd a000 	str.w	sl, [sp]
 800d628:	464b      	mov	r3, r9
 800d62a:	aa03      	add	r2, sp, #12
 800d62c:	4621      	mov	r1, r4
 800d62e:	4640      	mov	r0, r8
 800d630:	f7ff fee2 	bl	800d3f8 <_printf_common>
 800d634:	3001      	adds	r0, #1
 800d636:	d14c      	bne.n	800d6d2 <_printf_i+0x1fe>
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	b004      	add	sp, #16
 800d63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d642:	4835      	ldr	r0, [pc, #212]	; (800d718 <_printf_i+0x244>)
 800d644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	680e      	ldr	r6, [r1, #0]
 800d64c:	061f      	lsls	r7, r3, #24
 800d64e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d652:	600e      	str	r6, [r1, #0]
 800d654:	d514      	bpl.n	800d680 <_printf_i+0x1ac>
 800d656:	07d9      	lsls	r1, r3, #31
 800d658:	bf44      	itt	mi
 800d65a:	f043 0320 	orrmi.w	r3, r3, #32
 800d65e:	6023      	strmi	r3, [r4, #0]
 800d660:	b91d      	cbnz	r5, 800d66a <_printf_i+0x196>
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	f023 0320 	bic.w	r3, r3, #32
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	2310      	movs	r3, #16
 800d66c:	e7b0      	b.n	800d5d0 <_printf_i+0xfc>
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	f043 0320 	orr.w	r3, r3, #32
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	2378      	movs	r3, #120	; 0x78
 800d678:	4828      	ldr	r0, [pc, #160]	; (800d71c <_printf_i+0x248>)
 800d67a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d67e:	e7e3      	b.n	800d648 <_printf_i+0x174>
 800d680:	065e      	lsls	r6, r3, #25
 800d682:	bf48      	it	mi
 800d684:	b2ad      	uxthmi	r5, r5
 800d686:	e7e6      	b.n	800d656 <_printf_i+0x182>
 800d688:	4616      	mov	r6, r2
 800d68a:	e7bb      	b.n	800d604 <_printf_i+0x130>
 800d68c:	680b      	ldr	r3, [r1, #0]
 800d68e:	6826      	ldr	r6, [r4, #0]
 800d690:	6960      	ldr	r0, [r4, #20]
 800d692:	1d1d      	adds	r5, r3, #4
 800d694:	600d      	str	r5, [r1, #0]
 800d696:	0635      	lsls	r5, r6, #24
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	d501      	bpl.n	800d6a0 <_printf_i+0x1cc>
 800d69c:	6018      	str	r0, [r3, #0]
 800d69e:	e002      	b.n	800d6a6 <_printf_i+0x1d2>
 800d6a0:	0671      	lsls	r1, r6, #25
 800d6a2:	d5fb      	bpl.n	800d69c <_printf_i+0x1c8>
 800d6a4:	8018      	strh	r0, [r3, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	6123      	str	r3, [r4, #16]
 800d6aa:	4616      	mov	r6, r2
 800d6ac:	e7ba      	b.n	800d624 <_printf_i+0x150>
 800d6ae:	680b      	ldr	r3, [r1, #0]
 800d6b0:	1d1a      	adds	r2, r3, #4
 800d6b2:	600a      	str	r2, [r1, #0]
 800d6b4:	681e      	ldr	r6, [r3, #0]
 800d6b6:	6862      	ldr	r2, [r4, #4]
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7f2 fd90 	bl	80001e0 <memchr>
 800d6c0:	b108      	cbz	r0, 800d6c6 <_printf_i+0x1f2>
 800d6c2:	1b80      	subs	r0, r0, r6
 800d6c4:	6060      	str	r0, [r4, #4]
 800d6c6:	6863      	ldr	r3, [r4, #4]
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6d0:	e7a8      	b.n	800d624 <_printf_i+0x150>
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	4640      	mov	r0, r8
 800d6da:	47d0      	blx	sl
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d0ab      	beq.n	800d638 <_printf_i+0x164>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	079b      	lsls	r3, r3, #30
 800d6e4:	d413      	bmi.n	800d70e <_printf_i+0x23a>
 800d6e6:	68e0      	ldr	r0, [r4, #12]
 800d6e8:	9b03      	ldr	r3, [sp, #12]
 800d6ea:	4298      	cmp	r0, r3
 800d6ec:	bfb8      	it	lt
 800d6ee:	4618      	movlt	r0, r3
 800d6f0:	e7a4      	b.n	800d63c <_printf_i+0x168>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	4640      	mov	r0, r8
 800d6fa:	47d0      	blx	sl
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d09b      	beq.n	800d638 <_printf_i+0x164>
 800d700:	3501      	adds	r5, #1
 800d702:	68e3      	ldr	r3, [r4, #12]
 800d704:	9903      	ldr	r1, [sp, #12]
 800d706:	1a5b      	subs	r3, r3, r1
 800d708:	42ab      	cmp	r3, r5
 800d70a:	dcf2      	bgt.n	800d6f2 <_printf_i+0x21e>
 800d70c:	e7eb      	b.n	800d6e6 <_printf_i+0x212>
 800d70e:	2500      	movs	r5, #0
 800d710:	f104 0619 	add.w	r6, r4, #25
 800d714:	e7f5      	b.n	800d702 <_printf_i+0x22e>
 800d716:	bf00      	nop
 800d718:	080112c6 	.word	0x080112c6
 800d71c:	080112d7 	.word	0x080112d7

0800d720 <_sbrk_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d06      	ldr	r5, [pc, #24]	; (800d73c <_sbrk_r+0x1c>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f6 f96a 	bl	8003a04 <_sbrk>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_sbrk_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_sbrk_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20002468 	.word	0x20002468

0800d740 <siprintf>:
 800d740:	b40e      	push	{r1, r2, r3}
 800d742:	b500      	push	{lr}
 800d744:	b09c      	sub	sp, #112	; 0x70
 800d746:	ab1d      	add	r3, sp, #116	; 0x74
 800d748:	9002      	str	r0, [sp, #8]
 800d74a:	9006      	str	r0, [sp, #24]
 800d74c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d750:	4809      	ldr	r0, [pc, #36]	; (800d778 <siprintf+0x38>)
 800d752:	9107      	str	r1, [sp, #28]
 800d754:	9104      	str	r1, [sp, #16]
 800d756:	4909      	ldr	r1, [pc, #36]	; (800d77c <siprintf+0x3c>)
 800d758:	f853 2b04 	ldr.w	r2, [r3], #4
 800d75c:	9105      	str	r1, [sp, #20]
 800d75e:	6800      	ldr	r0, [r0, #0]
 800d760:	9301      	str	r3, [sp, #4]
 800d762:	a902      	add	r1, sp, #8
 800d764:	f002 fd92 	bl	801028c <_svfiprintf_r>
 800d768:	9b02      	ldr	r3, [sp, #8]
 800d76a:	2200      	movs	r2, #0
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	b01c      	add	sp, #112	; 0x70
 800d770:	f85d eb04 	ldr.w	lr, [sp], #4
 800d774:	b003      	add	sp, #12
 800d776:	4770      	bx	lr
 800d778:	20000540 	.word	0x20000540
 800d77c:	ffff0208 	.word	0xffff0208

0800d780 <strncmp>:
 800d780:	b510      	push	{r4, lr}
 800d782:	b16a      	cbz	r2, 800d7a0 <strncmp+0x20>
 800d784:	3901      	subs	r1, #1
 800d786:	1884      	adds	r4, r0, r2
 800d788:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d78c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d790:	4293      	cmp	r3, r2
 800d792:	d103      	bne.n	800d79c <strncmp+0x1c>
 800d794:	42a0      	cmp	r0, r4
 800d796:	d001      	beq.n	800d79c <strncmp+0x1c>
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f5      	bne.n	800d788 <strncmp+0x8>
 800d79c:	1a98      	subs	r0, r3, r2
 800d79e:	bd10      	pop	{r4, pc}
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	e7fc      	b.n	800d79e <strncmp+0x1e>

0800d7a4 <sulp>:
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	460d      	mov	r5, r1
 800d7aa:	ec45 4b10 	vmov	d0, r4, r5
 800d7ae:	4616      	mov	r6, r2
 800d7b0:	f002 fbb2 	bl	800ff18 <__ulp>
 800d7b4:	ec51 0b10 	vmov	r0, r1, d0
 800d7b8:	b17e      	cbz	r6, 800d7da <sulp+0x36>
 800d7ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dd09      	ble.n	800d7da <sulp+0x36>
 800d7c6:	051b      	lsls	r3, r3, #20
 800d7c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d7cc:	2400      	movs	r4, #0
 800d7ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d7d2:	4622      	mov	r2, r4
 800d7d4:	462b      	mov	r3, r5
 800d7d6:	f7f2 ff0f 	bl	80005f8 <__aeabi_dmul>
 800d7da:	bd70      	pop	{r4, r5, r6, pc}
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <_strtod_l>:
 800d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e4:	b0a3      	sub	sp, #140	; 0x8c
 800d7e6:	461f      	mov	r7, r3
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	931e      	str	r3, [sp, #120]	; 0x78
 800d7ec:	4ba4      	ldr	r3, [pc, #656]	; (800da80 <_strtod_l+0x2a0>)
 800d7ee:	9219      	str	r2, [sp, #100]	; 0x64
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	9307      	str	r3, [sp, #28]
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	4688      	mov	r8, r1
 800d7fa:	f7f2 fce9 	bl	80001d0 <strlen>
 800d7fe:	f04f 0a00 	mov.w	sl, #0
 800d802:	4605      	mov	r5, r0
 800d804:	f04f 0b00 	mov.w	fp, #0
 800d808:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d80c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d80e:	781a      	ldrb	r2, [r3, #0]
 800d810:	2a2b      	cmp	r2, #43	; 0x2b
 800d812:	d04c      	beq.n	800d8ae <_strtod_l+0xce>
 800d814:	d839      	bhi.n	800d88a <_strtod_l+0xaa>
 800d816:	2a0d      	cmp	r2, #13
 800d818:	d832      	bhi.n	800d880 <_strtod_l+0xa0>
 800d81a:	2a08      	cmp	r2, #8
 800d81c:	d832      	bhi.n	800d884 <_strtod_l+0xa4>
 800d81e:	2a00      	cmp	r2, #0
 800d820:	d03c      	beq.n	800d89c <_strtod_l+0xbc>
 800d822:	2300      	movs	r3, #0
 800d824:	930e      	str	r3, [sp, #56]	; 0x38
 800d826:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d828:	7833      	ldrb	r3, [r6, #0]
 800d82a:	2b30      	cmp	r3, #48	; 0x30
 800d82c:	f040 80b4 	bne.w	800d998 <_strtod_l+0x1b8>
 800d830:	7873      	ldrb	r3, [r6, #1]
 800d832:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d836:	2b58      	cmp	r3, #88	; 0x58
 800d838:	d16c      	bne.n	800d914 <_strtod_l+0x134>
 800d83a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	ab1e      	add	r3, sp, #120	; 0x78
 800d840:	9702      	str	r7, [sp, #8]
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4a8f      	ldr	r2, [pc, #572]	; (800da84 <_strtod_l+0x2a4>)
 800d846:	ab1f      	add	r3, sp, #124	; 0x7c
 800d848:	a91d      	add	r1, sp, #116	; 0x74
 800d84a:	4620      	mov	r0, r4
 800d84c:	f001 fcc0 	bl	800f1d0 <__gethex>
 800d850:	f010 0707 	ands.w	r7, r0, #7
 800d854:	4605      	mov	r5, r0
 800d856:	d005      	beq.n	800d864 <_strtod_l+0x84>
 800d858:	2f06      	cmp	r7, #6
 800d85a:	d12a      	bne.n	800d8b2 <_strtod_l+0xd2>
 800d85c:	3601      	adds	r6, #1
 800d85e:	2300      	movs	r3, #0
 800d860:	961d      	str	r6, [sp, #116]	; 0x74
 800d862:	930e      	str	r3, [sp, #56]	; 0x38
 800d864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d866:	2b00      	cmp	r3, #0
 800d868:	f040 8596 	bne.w	800e398 <_strtod_l+0xbb8>
 800d86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d86e:	b1db      	cbz	r3, 800d8a8 <_strtod_l+0xc8>
 800d870:	4652      	mov	r2, sl
 800d872:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d876:	ec43 2b10 	vmov	d0, r2, r3
 800d87a:	b023      	add	sp, #140	; 0x8c
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	2a20      	cmp	r2, #32
 800d882:	d1ce      	bne.n	800d822 <_strtod_l+0x42>
 800d884:	3301      	adds	r3, #1
 800d886:	931d      	str	r3, [sp, #116]	; 0x74
 800d888:	e7c0      	b.n	800d80c <_strtod_l+0x2c>
 800d88a:	2a2d      	cmp	r2, #45	; 0x2d
 800d88c:	d1c9      	bne.n	800d822 <_strtod_l+0x42>
 800d88e:	2201      	movs	r2, #1
 800d890:	920e      	str	r2, [sp, #56]	; 0x38
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	921d      	str	r2, [sp, #116]	; 0x74
 800d896:	785b      	ldrb	r3, [r3, #1]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1c4      	bne.n	800d826 <_strtod_l+0x46>
 800d89c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d89e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f040 8576 	bne.w	800e394 <_strtod_l+0xbb4>
 800d8a8:	4652      	mov	r2, sl
 800d8aa:	465b      	mov	r3, fp
 800d8ac:	e7e3      	b.n	800d876 <_strtod_l+0x96>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	e7ee      	b.n	800d890 <_strtod_l+0xb0>
 800d8b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d8b4:	b13a      	cbz	r2, 800d8c6 <_strtod_l+0xe6>
 800d8b6:	2135      	movs	r1, #53	; 0x35
 800d8b8:	a820      	add	r0, sp, #128	; 0x80
 800d8ba:	f002 fc38 	bl	801012e <__copybits>
 800d8be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f001 fffd 	bl	800f8c0 <_Bfree>
 800d8c6:	3f01      	subs	r7, #1
 800d8c8:	2f05      	cmp	r7, #5
 800d8ca:	d807      	bhi.n	800d8dc <_strtod_l+0xfc>
 800d8cc:	e8df f007 	tbb	[pc, r7]
 800d8d0:	1d180b0e 	.word	0x1d180b0e
 800d8d4:	030e      	.short	0x030e
 800d8d6:	f04f 0b00 	mov.w	fp, #0
 800d8da:	46da      	mov	sl, fp
 800d8dc:	0728      	lsls	r0, r5, #28
 800d8de:	d5c1      	bpl.n	800d864 <_strtod_l+0x84>
 800d8e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d8e4:	e7be      	b.n	800d864 <_strtod_l+0x84>
 800d8e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d8ea:	e7f7      	b.n	800d8dc <_strtod_l+0xfc>
 800d8ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d8f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d8f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d8f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8fe:	e7ed      	b.n	800d8dc <_strtod_l+0xfc>
 800d900:	f8df b184 	ldr.w	fp, [pc, #388]	; 800da88 <_strtod_l+0x2a8>
 800d904:	f04f 0a00 	mov.w	sl, #0
 800d908:	e7e8      	b.n	800d8dc <_strtod_l+0xfc>
 800d90a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d90e:	f04f 3aff 	mov.w	sl, #4294967295
 800d912:	e7e3      	b.n	800d8dc <_strtod_l+0xfc>
 800d914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	921d      	str	r2, [sp, #116]	; 0x74
 800d91a:	785b      	ldrb	r3, [r3, #1]
 800d91c:	2b30      	cmp	r3, #48	; 0x30
 800d91e:	d0f9      	beq.n	800d914 <_strtod_l+0x134>
 800d920:	2b00      	cmp	r3, #0
 800d922:	d09f      	beq.n	800d864 <_strtod_l+0x84>
 800d924:	2301      	movs	r3, #1
 800d926:	f04f 0900 	mov.w	r9, #0
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d92e:	930a      	str	r3, [sp, #40]	; 0x28
 800d930:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d934:	464f      	mov	r7, r9
 800d936:	220a      	movs	r2, #10
 800d938:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d93a:	7806      	ldrb	r6, [r0, #0]
 800d93c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d940:	b2d9      	uxtb	r1, r3
 800d942:	2909      	cmp	r1, #9
 800d944:	d92a      	bls.n	800d99c <_strtod_l+0x1bc>
 800d946:	9907      	ldr	r1, [sp, #28]
 800d948:	462a      	mov	r2, r5
 800d94a:	f7ff ff19 	bl	800d780 <strncmp>
 800d94e:	b398      	cbz	r0, 800d9b8 <_strtod_l+0x1d8>
 800d950:	2000      	movs	r0, #0
 800d952:	4633      	mov	r3, r6
 800d954:	463d      	mov	r5, r7
 800d956:	9007      	str	r0, [sp, #28]
 800d958:	4602      	mov	r2, r0
 800d95a:	2b65      	cmp	r3, #101	; 0x65
 800d95c:	d001      	beq.n	800d962 <_strtod_l+0x182>
 800d95e:	2b45      	cmp	r3, #69	; 0x45
 800d960:	d118      	bne.n	800d994 <_strtod_l+0x1b4>
 800d962:	b91d      	cbnz	r5, 800d96c <_strtod_l+0x18c>
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	4303      	orrs	r3, r0
 800d968:	d098      	beq.n	800d89c <_strtod_l+0xbc>
 800d96a:	2500      	movs	r5, #0
 800d96c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d970:	f108 0301 	add.w	r3, r8, #1
 800d974:	931d      	str	r3, [sp, #116]	; 0x74
 800d976:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d97a:	2b2b      	cmp	r3, #43	; 0x2b
 800d97c:	d075      	beq.n	800da6a <_strtod_l+0x28a>
 800d97e:	2b2d      	cmp	r3, #45	; 0x2d
 800d980:	d07b      	beq.n	800da7a <_strtod_l+0x29a>
 800d982:	f04f 0c00 	mov.w	ip, #0
 800d986:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d98a:	2909      	cmp	r1, #9
 800d98c:	f240 8082 	bls.w	800da94 <_strtod_l+0x2b4>
 800d990:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d994:	2600      	movs	r6, #0
 800d996:	e09d      	b.n	800dad4 <_strtod_l+0x2f4>
 800d998:	2300      	movs	r3, #0
 800d99a:	e7c4      	b.n	800d926 <_strtod_l+0x146>
 800d99c:	2f08      	cmp	r7, #8
 800d99e:	bfd8      	it	le
 800d9a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d9a2:	f100 0001 	add.w	r0, r0, #1
 800d9a6:	bfda      	itte	le
 800d9a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800d9ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d9b2:	3701      	adds	r7, #1
 800d9b4:	901d      	str	r0, [sp, #116]	; 0x74
 800d9b6:	e7bf      	b.n	800d938 <_strtod_l+0x158>
 800d9b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9ba:	195a      	adds	r2, r3, r5
 800d9bc:	921d      	str	r2, [sp, #116]	; 0x74
 800d9be:	5d5b      	ldrb	r3, [r3, r5]
 800d9c0:	2f00      	cmp	r7, #0
 800d9c2:	d037      	beq.n	800da34 <_strtod_l+0x254>
 800d9c4:	9007      	str	r0, [sp, #28]
 800d9c6:	463d      	mov	r5, r7
 800d9c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d9cc:	2a09      	cmp	r2, #9
 800d9ce:	d912      	bls.n	800d9f6 <_strtod_l+0x216>
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	e7c2      	b.n	800d95a <_strtod_l+0x17a>
 800d9d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	921d      	str	r2, [sp, #116]	; 0x74
 800d9da:	785b      	ldrb	r3, [r3, #1]
 800d9dc:	3001      	adds	r0, #1
 800d9de:	2b30      	cmp	r3, #48	; 0x30
 800d9e0:	d0f8      	beq.n	800d9d4 <_strtod_l+0x1f4>
 800d9e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d9e6:	2a08      	cmp	r2, #8
 800d9e8:	f200 84db 	bhi.w	800e3a2 <_strtod_l+0xbc2>
 800d9ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d9ee:	9007      	str	r0, [sp, #28]
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	920a      	str	r2, [sp, #40]	; 0x28
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	3b30      	subs	r3, #48	; 0x30
 800d9f8:	f100 0201 	add.w	r2, r0, #1
 800d9fc:	d014      	beq.n	800da28 <_strtod_l+0x248>
 800d9fe:	9907      	ldr	r1, [sp, #28]
 800da00:	4411      	add	r1, r2
 800da02:	9107      	str	r1, [sp, #28]
 800da04:	462a      	mov	r2, r5
 800da06:	eb00 0e05 	add.w	lr, r0, r5
 800da0a:	210a      	movs	r1, #10
 800da0c:	4572      	cmp	r2, lr
 800da0e:	d113      	bne.n	800da38 <_strtod_l+0x258>
 800da10:	182a      	adds	r2, r5, r0
 800da12:	2a08      	cmp	r2, #8
 800da14:	f105 0501 	add.w	r5, r5, #1
 800da18:	4405      	add	r5, r0
 800da1a:	dc1c      	bgt.n	800da56 <_strtod_l+0x276>
 800da1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da1e:	220a      	movs	r2, #10
 800da20:	fb02 3301 	mla	r3, r2, r1, r3
 800da24:	9309      	str	r3, [sp, #36]	; 0x24
 800da26:	2200      	movs	r2, #0
 800da28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da2a:	1c59      	adds	r1, r3, #1
 800da2c:	911d      	str	r1, [sp, #116]	; 0x74
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	4610      	mov	r0, r2
 800da32:	e7c9      	b.n	800d9c8 <_strtod_l+0x1e8>
 800da34:	4638      	mov	r0, r7
 800da36:	e7d2      	b.n	800d9de <_strtod_l+0x1fe>
 800da38:	2a08      	cmp	r2, #8
 800da3a:	dc04      	bgt.n	800da46 <_strtod_l+0x266>
 800da3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da3e:	434e      	muls	r6, r1
 800da40:	9609      	str	r6, [sp, #36]	; 0x24
 800da42:	3201      	adds	r2, #1
 800da44:	e7e2      	b.n	800da0c <_strtod_l+0x22c>
 800da46:	f102 0c01 	add.w	ip, r2, #1
 800da4a:	f1bc 0f10 	cmp.w	ip, #16
 800da4e:	bfd8      	it	le
 800da50:	fb01 f909 	mulle.w	r9, r1, r9
 800da54:	e7f5      	b.n	800da42 <_strtod_l+0x262>
 800da56:	2d10      	cmp	r5, #16
 800da58:	bfdc      	itt	le
 800da5a:	220a      	movle	r2, #10
 800da5c:	fb02 3909 	mlale	r9, r2, r9, r3
 800da60:	e7e1      	b.n	800da26 <_strtod_l+0x246>
 800da62:	2300      	movs	r3, #0
 800da64:	9307      	str	r3, [sp, #28]
 800da66:	2201      	movs	r2, #1
 800da68:	e77c      	b.n	800d964 <_strtod_l+0x184>
 800da6a:	f04f 0c00 	mov.w	ip, #0
 800da6e:	f108 0302 	add.w	r3, r8, #2
 800da72:	931d      	str	r3, [sp, #116]	; 0x74
 800da74:	f898 3002 	ldrb.w	r3, [r8, #2]
 800da78:	e785      	b.n	800d986 <_strtod_l+0x1a6>
 800da7a:	f04f 0c01 	mov.w	ip, #1
 800da7e:	e7f6      	b.n	800da6e <_strtod_l+0x28e>
 800da80:	08011438 	.word	0x08011438
 800da84:	080112e8 	.word	0x080112e8
 800da88:	7ff00000 	.word	0x7ff00000
 800da8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da8e:	1c59      	adds	r1, r3, #1
 800da90:	911d      	str	r1, [sp, #116]	; 0x74
 800da92:	785b      	ldrb	r3, [r3, #1]
 800da94:	2b30      	cmp	r3, #48	; 0x30
 800da96:	d0f9      	beq.n	800da8c <_strtod_l+0x2ac>
 800da98:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800da9c:	2908      	cmp	r1, #8
 800da9e:	f63f af79 	bhi.w	800d994 <_strtod_l+0x1b4>
 800daa2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800daa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daa8:	9308      	str	r3, [sp, #32]
 800daaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daac:	1c59      	adds	r1, r3, #1
 800daae:	911d      	str	r1, [sp, #116]	; 0x74
 800dab0:	785b      	ldrb	r3, [r3, #1]
 800dab2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dab6:	2e09      	cmp	r6, #9
 800dab8:	d937      	bls.n	800db2a <_strtod_l+0x34a>
 800daba:	9e08      	ldr	r6, [sp, #32]
 800dabc:	1b89      	subs	r1, r1, r6
 800dabe:	2908      	cmp	r1, #8
 800dac0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dac4:	dc02      	bgt.n	800dacc <_strtod_l+0x2ec>
 800dac6:	4576      	cmp	r6, lr
 800dac8:	bfa8      	it	ge
 800daca:	4676      	movge	r6, lr
 800dacc:	f1bc 0f00 	cmp.w	ip, #0
 800dad0:	d000      	beq.n	800dad4 <_strtod_l+0x2f4>
 800dad2:	4276      	negs	r6, r6
 800dad4:	2d00      	cmp	r5, #0
 800dad6:	d14f      	bne.n	800db78 <_strtod_l+0x398>
 800dad8:	9904      	ldr	r1, [sp, #16]
 800dada:	4301      	orrs	r1, r0
 800dadc:	f47f aec2 	bne.w	800d864 <_strtod_l+0x84>
 800dae0:	2a00      	cmp	r2, #0
 800dae2:	f47f aedb 	bne.w	800d89c <_strtod_l+0xbc>
 800dae6:	2b69      	cmp	r3, #105	; 0x69
 800dae8:	d027      	beq.n	800db3a <_strtod_l+0x35a>
 800daea:	dc24      	bgt.n	800db36 <_strtod_l+0x356>
 800daec:	2b49      	cmp	r3, #73	; 0x49
 800daee:	d024      	beq.n	800db3a <_strtod_l+0x35a>
 800daf0:	2b4e      	cmp	r3, #78	; 0x4e
 800daf2:	f47f aed3 	bne.w	800d89c <_strtod_l+0xbc>
 800daf6:	499e      	ldr	r1, [pc, #632]	; (800dd70 <_strtod_l+0x590>)
 800daf8:	a81d      	add	r0, sp, #116	; 0x74
 800dafa:	f001 fdc1 	bl	800f680 <__match>
 800dafe:	2800      	cmp	r0, #0
 800db00:	f43f aecc 	beq.w	800d89c <_strtod_l+0xbc>
 800db04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b28      	cmp	r3, #40	; 0x28
 800db0a:	d12d      	bne.n	800db68 <_strtod_l+0x388>
 800db0c:	4999      	ldr	r1, [pc, #612]	; (800dd74 <_strtod_l+0x594>)
 800db0e:	aa20      	add	r2, sp, #128	; 0x80
 800db10:	a81d      	add	r0, sp, #116	; 0x74
 800db12:	f001 fdc9 	bl	800f6a8 <__hexnan>
 800db16:	2805      	cmp	r0, #5
 800db18:	d126      	bne.n	800db68 <_strtod_l+0x388>
 800db1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db1c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800db20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800db24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800db28:	e69c      	b.n	800d864 <_strtod_l+0x84>
 800db2a:	210a      	movs	r1, #10
 800db2c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800db30:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800db34:	e7b9      	b.n	800daaa <_strtod_l+0x2ca>
 800db36:	2b6e      	cmp	r3, #110	; 0x6e
 800db38:	e7db      	b.n	800daf2 <_strtod_l+0x312>
 800db3a:	498f      	ldr	r1, [pc, #572]	; (800dd78 <_strtod_l+0x598>)
 800db3c:	a81d      	add	r0, sp, #116	; 0x74
 800db3e:	f001 fd9f 	bl	800f680 <__match>
 800db42:	2800      	cmp	r0, #0
 800db44:	f43f aeaa 	beq.w	800d89c <_strtod_l+0xbc>
 800db48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db4a:	498c      	ldr	r1, [pc, #560]	; (800dd7c <_strtod_l+0x59c>)
 800db4c:	3b01      	subs	r3, #1
 800db4e:	a81d      	add	r0, sp, #116	; 0x74
 800db50:	931d      	str	r3, [sp, #116]	; 0x74
 800db52:	f001 fd95 	bl	800f680 <__match>
 800db56:	b910      	cbnz	r0, 800db5e <_strtod_l+0x37e>
 800db58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db5a:	3301      	adds	r3, #1
 800db5c:	931d      	str	r3, [sp, #116]	; 0x74
 800db5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800dd8c <_strtod_l+0x5ac>
 800db62:	f04f 0a00 	mov.w	sl, #0
 800db66:	e67d      	b.n	800d864 <_strtod_l+0x84>
 800db68:	4885      	ldr	r0, [pc, #532]	; (800dd80 <_strtod_l+0x5a0>)
 800db6a:	f002 fc91 	bl	8010490 <nan>
 800db6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800db72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800db76:	e675      	b.n	800d864 <_strtod_l+0x84>
 800db78:	9b07      	ldr	r3, [sp, #28]
 800db7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db7c:	1af3      	subs	r3, r6, r3
 800db7e:	2f00      	cmp	r7, #0
 800db80:	bf08      	it	eq
 800db82:	462f      	moveq	r7, r5
 800db84:	2d10      	cmp	r5, #16
 800db86:	9308      	str	r3, [sp, #32]
 800db88:	46a8      	mov	r8, r5
 800db8a:	bfa8      	it	ge
 800db8c:	f04f 0810 	movge.w	r8, #16
 800db90:	f7f2 fcb8 	bl	8000504 <__aeabi_ui2d>
 800db94:	2d09      	cmp	r5, #9
 800db96:	4682      	mov	sl, r0
 800db98:	468b      	mov	fp, r1
 800db9a:	dd13      	ble.n	800dbc4 <_strtod_l+0x3e4>
 800db9c:	4b79      	ldr	r3, [pc, #484]	; (800dd84 <_strtod_l+0x5a4>)
 800db9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dba2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dba6:	f7f2 fd27 	bl	80005f8 <__aeabi_dmul>
 800dbaa:	4682      	mov	sl, r0
 800dbac:	4648      	mov	r0, r9
 800dbae:	468b      	mov	fp, r1
 800dbb0:	f7f2 fca8 	bl	8000504 <__aeabi_ui2d>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4650      	mov	r0, sl
 800dbba:	4659      	mov	r1, fp
 800dbbc:	f7f2 fb66 	bl	800028c <__adddf3>
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	468b      	mov	fp, r1
 800dbc4:	2d0f      	cmp	r5, #15
 800dbc6:	dc38      	bgt.n	800dc3a <_strtod_l+0x45a>
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f43f ae4a 	beq.w	800d864 <_strtod_l+0x84>
 800dbd0:	dd24      	ble.n	800dc1c <_strtod_l+0x43c>
 800dbd2:	2b16      	cmp	r3, #22
 800dbd4:	dc0b      	bgt.n	800dbee <_strtod_l+0x40e>
 800dbd6:	4d6b      	ldr	r5, [pc, #428]	; (800dd84 <_strtod_l+0x5a4>)
 800dbd8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800dbdc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dbe0:	4652      	mov	r2, sl
 800dbe2:	465b      	mov	r3, fp
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	4682      	mov	sl, r0
 800dbea:	468b      	mov	fp, r1
 800dbec:	e63a      	b.n	800d864 <_strtod_l+0x84>
 800dbee:	9a08      	ldr	r2, [sp, #32]
 800dbf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	db20      	blt.n	800dc3a <_strtod_l+0x45a>
 800dbf8:	4c62      	ldr	r4, [pc, #392]	; (800dd84 <_strtod_l+0x5a4>)
 800dbfa:	f1c5 050f 	rsb	r5, r5, #15
 800dbfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc02:	4652      	mov	r2, sl
 800dc04:	465b      	mov	r3, fp
 800dc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0a:	f7f2 fcf5 	bl	80005f8 <__aeabi_dmul>
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	1b5d      	subs	r5, r3, r5
 800dc12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc1a:	e7e3      	b.n	800dbe4 <_strtod_l+0x404>
 800dc1c:	9b08      	ldr	r3, [sp, #32]
 800dc1e:	3316      	adds	r3, #22
 800dc20:	db0b      	blt.n	800dc3a <_strtod_l+0x45a>
 800dc22:	9b07      	ldr	r3, [sp, #28]
 800dc24:	4a57      	ldr	r2, [pc, #348]	; (800dd84 <_strtod_l+0x5a4>)
 800dc26:	1b9e      	subs	r6, r3, r6
 800dc28:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800dc2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc30:	4650      	mov	r0, sl
 800dc32:	4659      	mov	r1, fp
 800dc34:	f7f2 fe0a 	bl	800084c <__aeabi_ddiv>
 800dc38:	e7d6      	b.n	800dbe8 <_strtod_l+0x408>
 800dc3a:	9b08      	ldr	r3, [sp, #32]
 800dc3c:	eba5 0808 	sub.w	r8, r5, r8
 800dc40:	4498      	add	r8, r3
 800dc42:	f1b8 0f00 	cmp.w	r8, #0
 800dc46:	dd71      	ble.n	800dd2c <_strtod_l+0x54c>
 800dc48:	f018 030f 	ands.w	r3, r8, #15
 800dc4c:	d00a      	beq.n	800dc64 <_strtod_l+0x484>
 800dc4e:	494d      	ldr	r1, [pc, #308]	; (800dd84 <_strtod_l+0x5a4>)
 800dc50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc54:	4652      	mov	r2, sl
 800dc56:	465b      	mov	r3, fp
 800dc58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc5c:	f7f2 fccc 	bl	80005f8 <__aeabi_dmul>
 800dc60:	4682      	mov	sl, r0
 800dc62:	468b      	mov	fp, r1
 800dc64:	f038 080f 	bics.w	r8, r8, #15
 800dc68:	d04d      	beq.n	800dd06 <_strtod_l+0x526>
 800dc6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dc6e:	dd22      	ble.n	800dcb6 <_strtod_l+0x4d6>
 800dc70:	2500      	movs	r5, #0
 800dc72:	462e      	mov	r6, r5
 800dc74:	9509      	str	r5, [sp, #36]	; 0x24
 800dc76:	9507      	str	r5, [sp, #28]
 800dc78:	2322      	movs	r3, #34	; 0x22
 800dc7a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800dd8c <_strtod_l+0x5ac>
 800dc7e:	6023      	str	r3, [r4, #0]
 800dc80:	f04f 0a00 	mov.w	sl, #0
 800dc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f43f adec 	beq.w	800d864 <_strtod_l+0x84>
 800dc8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f001 fe16 	bl	800f8c0 <_Bfree>
 800dc94:	9907      	ldr	r1, [sp, #28]
 800dc96:	4620      	mov	r0, r4
 800dc98:	f001 fe12 	bl	800f8c0 <_Bfree>
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f001 fe0e 	bl	800f8c0 <_Bfree>
 800dca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dca6:	4620      	mov	r0, r4
 800dca8:	f001 fe0a 	bl	800f8c0 <_Bfree>
 800dcac:	4629      	mov	r1, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f001 fe06 	bl	800f8c0 <_Bfree>
 800dcb4:	e5d6      	b.n	800d864 <_strtod_l+0x84>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	4659      	mov	r1, fp
 800dcc0:	4699      	mov	r9, r3
 800dcc2:	f1b8 0f01 	cmp.w	r8, #1
 800dcc6:	dc21      	bgt.n	800dd0c <_strtod_l+0x52c>
 800dcc8:	b10b      	cbz	r3, 800dcce <_strtod_l+0x4ee>
 800dcca:	4682      	mov	sl, r0
 800dccc:	468b      	mov	fp, r1
 800dcce:	4b2e      	ldr	r3, [pc, #184]	; (800dd88 <_strtod_l+0x5a8>)
 800dcd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dcd4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dcd8:	4652      	mov	r2, sl
 800dcda:	465b      	mov	r3, fp
 800dcdc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dce0:	f7f2 fc8a 	bl	80005f8 <__aeabi_dmul>
 800dce4:	4b29      	ldr	r3, [pc, #164]	; (800dd8c <_strtod_l+0x5ac>)
 800dce6:	460a      	mov	r2, r1
 800dce8:	400b      	ands	r3, r1
 800dcea:	4929      	ldr	r1, [pc, #164]	; (800dd90 <_strtod_l+0x5b0>)
 800dcec:	428b      	cmp	r3, r1
 800dcee:	4682      	mov	sl, r0
 800dcf0:	d8be      	bhi.n	800dc70 <_strtod_l+0x490>
 800dcf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dcf6:	428b      	cmp	r3, r1
 800dcf8:	bf86      	itte	hi
 800dcfa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dd94 <_strtod_l+0x5b4>
 800dcfe:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dd06:	2300      	movs	r3, #0
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	e081      	b.n	800de10 <_strtod_l+0x630>
 800dd0c:	f018 0f01 	tst.w	r8, #1
 800dd10:	d007      	beq.n	800dd22 <_strtod_l+0x542>
 800dd12:	4b1d      	ldr	r3, [pc, #116]	; (800dd88 <_strtod_l+0x5a8>)
 800dd14:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f7f2 fc6c 	bl	80005f8 <__aeabi_dmul>
 800dd20:	2301      	movs	r3, #1
 800dd22:	f109 0901 	add.w	r9, r9, #1
 800dd26:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd2a:	e7ca      	b.n	800dcc2 <_strtod_l+0x4e2>
 800dd2c:	d0eb      	beq.n	800dd06 <_strtod_l+0x526>
 800dd2e:	f1c8 0800 	rsb	r8, r8, #0
 800dd32:	f018 020f 	ands.w	r2, r8, #15
 800dd36:	d00a      	beq.n	800dd4e <_strtod_l+0x56e>
 800dd38:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <_strtod_l+0x5a4>)
 800dd3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd3e:	4650      	mov	r0, sl
 800dd40:	4659      	mov	r1, fp
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	f7f2 fd81 	bl	800084c <__aeabi_ddiv>
 800dd4a:	4682      	mov	sl, r0
 800dd4c:	468b      	mov	fp, r1
 800dd4e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dd52:	d0d8      	beq.n	800dd06 <_strtod_l+0x526>
 800dd54:	f1b8 0f1f 	cmp.w	r8, #31
 800dd58:	dd1e      	ble.n	800dd98 <_strtod_l+0x5b8>
 800dd5a:	2500      	movs	r5, #0
 800dd5c:	462e      	mov	r6, r5
 800dd5e:	9509      	str	r5, [sp, #36]	; 0x24
 800dd60:	9507      	str	r5, [sp, #28]
 800dd62:	2322      	movs	r3, #34	; 0x22
 800dd64:	f04f 0a00 	mov.w	sl, #0
 800dd68:	f04f 0b00 	mov.w	fp, #0
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	e789      	b.n	800dc84 <_strtod_l+0x4a4>
 800dd70:	080112c1 	.word	0x080112c1
 800dd74:	080112fc 	.word	0x080112fc
 800dd78:	080112b9 	.word	0x080112b9
 800dd7c:	0801133b 	.word	0x0801133b
 800dd80:	080115f8 	.word	0x080115f8
 800dd84:	080114d8 	.word	0x080114d8
 800dd88:	080114b0 	.word	0x080114b0
 800dd8c:	7ff00000 	.word	0x7ff00000
 800dd90:	7ca00000 	.word	0x7ca00000
 800dd94:	7fefffff 	.word	0x7fefffff
 800dd98:	f018 0310 	ands.w	r3, r8, #16
 800dd9c:	bf18      	it	ne
 800dd9e:	236a      	movne	r3, #106	; 0x6a
 800dda0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e158 <_strtod_l+0x978>
 800dda4:	9304      	str	r3, [sp, #16]
 800dda6:	4650      	mov	r0, sl
 800dda8:	4659      	mov	r1, fp
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f018 0f01 	tst.w	r8, #1
 800ddb0:	d004      	beq.n	800ddbc <_strtod_l+0x5dc>
 800ddb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ddb6:	f7f2 fc1f 	bl	80005f8 <__aeabi_dmul>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ddc0:	f109 0908 	add.w	r9, r9, #8
 800ddc4:	d1f2      	bne.n	800ddac <_strtod_l+0x5cc>
 800ddc6:	b10b      	cbz	r3, 800ddcc <_strtod_l+0x5ec>
 800ddc8:	4682      	mov	sl, r0
 800ddca:	468b      	mov	fp, r1
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	b1bb      	cbz	r3, 800de00 <_strtod_l+0x620>
 800ddd0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ddd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	4659      	mov	r1, fp
 800dddc:	dd10      	ble.n	800de00 <_strtod_l+0x620>
 800ddde:	2b1f      	cmp	r3, #31
 800dde0:	f340 8128 	ble.w	800e034 <_strtod_l+0x854>
 800dde4:	2b34      	cmp	r3, #52	; 0x34
 800dde6:	bfde      	ittt	le
 800dde8:	3b20      	suble	r3, #32
 800ddea:	f04f 32ff 	movle.w	r2, #4294967295
 800ddee:	fa02 f303 	lslle.w	r3, r2, r3
 800ddf2:	f04f 0a00 	mov.w	sl, #0
 800ddf6:	bfcc      	ite	gt
 800ddf8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ddfc:	ea03 0b01 	andle.w	fp, r3, r1
 800de00:	2200      	movs	r2, #0
 800de02:	2300      	movs	r3, #0
 800de04:	4650      	mov	r0, sl
 800de06:	4659      	mov	r1, fp
 800de08:	f7f2 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d1a4      	bne.n	800dd5a <_strtod_l+0x57a>
 800de10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de16:	462b      	mov	r3, r5
 800de18:	463a      	mov	r2, r7
 800de1a:	4620      	mov	r0, r4
 800de1c:	f001 fdbc 	bl	800f998 <__s2b>
 800de20:	9009      	str	r0, [sp, #36]	; 0x24
 800de22:	2800      	cmp	r0, #0
 800de24:	f43f af24 	beq.w	800dc70 <_strtod_l+0x490>
 800de28:	9b07      	ldr	r3, [sp, #28]
 800de2a:	1b9e      	subs	r6, r3, r6
 800de2c:	9b08      	ldr	r3, [sp, #32]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb4      	ite	lt
 800de32:	4633      	movlt	r3, r6
 800de34:	2300      	movge	r3, #0
 800de36:	9310      	str	r3, [sp, #64]	; 0x40
 800de38:	9b08      	ldr	r3, [sp, #32]
 800de3a:	2500      	movs	r5, #0
 800de3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de40:	9318      	str	r3, [sp, #96]	; 0x60
 800de42:	462e      	mov	r6, r5
 800de44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de46:	4620      	mov	r0, r4
 800de48:	6859      	ldr	r1, [r3, #4]
 800de4a:	f001 fcf9 	bl	800f840 <_Balloc>
 800de4e:	9007      	str	r0, [sp, #28]
 800de50:	2800      	cmp	r0, #0
 800de52:	f43f af11 	beq.w	800dc78 <_strtod_l+0x498>
 800de56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de58:	691a      	ldr	r2, [r3, #16]
 800de5a:	3202      	adds	r2, #2
 800de5c:	f103 010c 	add.w	r1, r3, #12
 800de60:	0092      	lsls	r2, r2, #2
 800de62:	300c      	adds	r0, #12
 800de64:	f001 fcd2 	bl	800f80c <memcpy>
 800de68:	ec4b ab10 	vmov	d0, sl, fp
 800de6c:	aa20      	add	r2, sp, #128	; 0x80
 800de6e:	a91f      	add	r1, sp, #124	; 0x7c
 800de70:	4620      	mov	r0, r4
 800de72:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800de76:	f002 f8cb 	bl	8010010 <__d2b>
 800de7a:	901e      	str	r0, [sp, #120]	; 0x78
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f43f aefb 	beq.w	800dc78 <_strtod_l+0x498>
 800de82:	2101      	movs	r1, #1
 800de84:	4620      	mov	r0, r4
 800de86:	f001 fe21 	bl	800facc <__i2b>
 800de8a:	4606      	mov	r6, r0
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f43f aef3 	beq.w	800dc78 <_strtod_l+0x498>
 800de92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de94:	9904      	ldr	r1, [sp, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfab      	itete	ge
 800de9a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800de9c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800de9e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dea0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dea4:	bfac      	ite	ge
 800dea6:	eb03 0902 	addge.w	r9, r3, r2
 800deaa:	1ad7      	sublt	r7, r2, r3
 800deac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800deae:	eba3 0801 	sub.w	r8, r3, r1
 800deb2:	4490      	add	r8, r2
 800deb4:	4ba3      	ldr	r3, [pc, #652]	; (800e144 <_strtod_l+0x964>)
 800deb6:	f108 38ff 	add.w	r8, r8, #4294967295
 800deba:	4598      	cmp	r8, r3
 800debc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dec0:	f280 80cc 	bge.w	800e05c <_strtod_l+0x87c>
 800dec4:	eba3 0308 	sub.w	r3, r3, r8
 800dec8:	2b1f      	cmp	r3, #31
 800deca:	eba2 0203 	sub.w	r2, r2, r3
 800dece:	f04f 0101 	mov.w	r1, #1
 800ded2:	f300 80b6 	bgt.w	800e042 <_strtod_l+0x862>
 800ded6:	fa01 f303 	lsl.w	r3, r1, r3
 800deda:	9311      	str	r3, [sp, #68]	; 0x44
 800dedc:	2300      	movs	r3, #0
 800dede:	930c      	str	r3, [sp, #48]	; 0x30
 800dee0:	eb09 0802 	add.w	r8, r9, r2
 800dee4:	9b04      	ldr	r3, [sp, #16]
 800dee6:	45c1      	cmp	r9, r8
 800dee8:	4417      	add	r7, r2
 800deea:	441f      	add	r7, r3
 800deec:	464b      	mov	r3, r9
 800deee:	bfa8      	it	ge
 800def0:	4643      	movge	r3, r8
 800def2:	42bb      	cmp	r3, r7
 800def4:	bfa8      	it	ge
 800def6:	463b      	movge	r3, r7
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfc2      	ittt	gt
 800defc:	eba8 0803 	subgt.w	r8, r8, r3
 800df00:	1aff      	subgt	r7, r7, r3
 800df02:	eba9 0903 	subgt.w	r9, r9, r3
 800df06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dd17      	ble.n	800df3c <_strtod_l+0x75c>
 800df0c:	4631      	mov	r1, r6
 800df0e:	461a      	mov	r2, r3
 800df10:	4620      	mov	r0, r4
 800df12:	f001 fe97 	bl	800fc44 <__pow5mult>
 800df16:	4606      	mov	r6, r0
 800df18:	2800      	cmp	r0, #0
 800df1a:	f43f aead 	beq.w	800dc78 <_strtod_l+0x498>
 800df1e:	4601      	mov	r1, r0
 800df20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800df22:	4620      	mov	r0, r4
 800df24:	f001 fde8 	bl	800faf8 <__multiply>
 800df28:	900f      	str	r0, [sp, #60]	; 0x3c
 800df2a:	2800      	cmp	r0, #0
 800df2c:	f43f aea4 	beq.w	800dc78 <_strtod_l+0x498>
 800df30:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df32:	4620      	mov	r0, r4
 800df34:	f001 fcc4 	bl	800f8c0 <_Bfree>
 800df38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df3a:	931e      	str	r3, [sp, #120]	; 0x78
 800df3c:	f1b8 0f00 	cmp.w	r8, #0
 800df40:	f300 8091 	bgt.w	800e066 <_strtod_l+0x886>
 800df44:	9b08      	ldr	r3, [sp, #32]
 800df46:	2b00      	cmp	r3, #0
 800df48:	dd08      	ble.n	800df5c <_strtod_l+0x77c>
 800df4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df4c:	9907      	ldr	r1, [sp, #28]
 800df4e:	4620      	mov	r0, r4
 800df50:	f001 fe78 	bl	800fc44 <__pow5mult>
 800df54:	9007      	str	r0, [sp, #28]
 800df56:	2800      	cmp	r0, #0
 800df58:	f43f ae8e 	beq.w	800dc78 <_strtod_l+0x498>
 800df5c:	2f00      	cmp	r7, #0
 800df5e:	dd08      	ble.n	800df72 <_strtod_l+0x792>
 800df60:	9907      	ldr	r1, [sp, #28]
 800df62:	463a      	mov	r2, r7
 800df64:	4620      	mov	r0, r4
 800df66:	f001 fec7 	bl	800fcf8 <__lshift>
 800df6a:	9007      	str	r0, [sp, #28]
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f43f ae83 	beq.w	800dc78 <_strtod_l+0x498>
 800df72:	f1b9 0f00 	cmp.w	r9, #0
 800df76:	dd08      	ble.n	800df8a <_strtod_l+0x7aa>
 800df78:	4631      	mov	r1, r6
 800df7a:	464a      	mov	r2, r9
 800df7c:	4620      	mov	r0, r4
 800df7e:	f001 febb 	bl	800fcf8 <__lshift>
 800df82:	4606      	mov	r6, r0
 800df84:	2800      	cmp	r0, #0
 800df86:	f43f ae77 	beq.w	800dc78 <_strtod_l+0x498>
 800df8a:	9a07      	ldr	r2, [sp, #28]
 800df8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df8e:	4620      	mov	r0, r4
 800df90:	f001 ff3a 	bl	800fe08 <__mdiff>
 800df94:	4605      	mov	r5, r0
 800df96:	2800      	cmp	r0, #0
 800df98:	f43f ae6e 	beq.w	800dc78 <_strtod_l+0x498>
 800df9c:	68c3      	ldr	r3, [r0, #12]
 800df9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60c3      	str	r3, [r0, #12]
 800dfa4:	4631      	mov	r1, r6
 800dfa6:	f001 ff13 	bl	800fdd0 <__mcmp>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	da65      	bge.n	800e07a <_strtod_l+0x89a>
 800dfae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb0:	ea53 030a 	orrs.w	r3, r3, sl
 800dfb4:	f040 8087 	bne.w	800e0c6 <_strtod_l+0x8e6>
 800dfb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f040 8082 	bne.w	800e0c6 <_strtod_l+0x8e6>
 800dfc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfc6:	0d1b      	lsrs	r3, r3, #20
 800dfc8:	051b      	lsls	r3, r3, #20
 800dfca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dfce:	d97a      	bls.n	800e0c6 <_strtod_l+0x8e6>
 800dfd0:	696b      	ldr	r3, [r5, #20]
 800dfd2:	b913      	cbnz	r3, 800dfda <_strtod_l+0x7fa>
 800dfd4:	692b      	ldr	r3, [r5, #16]
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	dd75      	ble.n	800e0c6 <_strtod_l+0x8e6>
 800dfda:	4629      	mov	r1, r5
 800dfdc:	2201      	movs	r2, #1
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f001 fe8a 	bl	800fcf8 <__lshift>
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	f001 fef2 	bl	800fdd0 <__mcmp>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	dd6a      	ble.n	800e0c6 <_strtod_l+0x8e6>
 800dff0:	9904      	ldr	r1, [sp, #16]
 800dff2:	4a55      	ldr	r2, [pc, #340]	; (800e148 <_strtod_l+0x968>)
 800dff4:	465b      	mov	r3, fp
 800dff6:	2900      	cmp	r1, #0
 800dff8:	f000 8085 	beq.w	800e106 <_strtod_l+0x926>
 800dffc:	ea02 010b 	and.w	r1, r2, fp
 800e000:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e004:	dc7f      	bgt.n	800e106 <_strtod_l+0x926>
 800e006:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e00a:	f77f aeaa 	ble.w	800dd62 <_strtod_l+0x582>
 800e00e:	4a4f      	ldr	r2, [pc, #316]	; (800e14c <_strtod_l+0x96c>)
 800e010:	2300      	movs	r3, #0
 800e012:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e016:	4650      	mov	r0, sl
 800e018:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e01c:	4659      	mov	r1, fp
 800e01e:	f7f2 faeb 	bl	80005f8 <__aeabi_dmul>
 800e022:	460b      	mov	r3, r1
 800e024:	4303      	orrs	r3, r0
 800e026:	bf08      	it	eq
 800e028:	2322      	moveq	r3, #34	; 0x22
 800e02a:	4682      	mov	sl, r0
 800e02c:	468b      	mov	fp, r1
 800e02e:	bf08      	it	eq
 800e030:	6023      	streq	r3, [r4, #0]
 800e032:	e62b      	b.n	800dc8c <_strtod_l+0x4ac>
 800e034:	f04f 32ff 	mov.w	r2, #4294967295
 800e038:	fa02 f303 	lsl.w	r3, r2, r3
 800e03c:	ea03 0a0a 	and.w	sl, r3, sl
 800e040:	e6de      	b.n	800de00 <_strtod_l+0x620>
 800e042:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e046:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e04a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e04e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e052:	fa01 f308 	lsl.w	r3, r1, r8
 800e056:	930c      	str	r3, [sp, #48]	; 0x30
 800e058:	9111      	str	r1, [sp, #68]	; 0x44
 800e05a:	e741      	b.n	800dee0 <_strtod_l+0x700>
 800e05c:	2300      	movs	r3, #0
 800e05e:	930c      	str	r3, [sp, #48]	; 0x30
 800e060:	2301      	movs	r3, #1
 800e062:	9311      	str	r3, [sp, #68]	; 0x44
 800e064:	e73c      	b.n	800dee0 <_strtod_l+0x700>
 800e066:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e068:	4642      	mov	r2, r8
 800e06a:	4620      	mov	r0, r4
 800e06c:	f001 fe44 	bl	800fcf8 <__lshift>
 800e070:	901e      	str	r0, [sp, #120]	; 0x78
 800e072:	2800      	cmp	r0, #0
 800e074:	f47f af66 	bne.w	800df44 <_strtod_l+0x764>
 800e078:	e5fe      	b.n	800dc78 <_strtod_l+0x498>
 800e07a:	465f      	mov	r7, fp
 800e07c:	d16e      	bne.n	800e15c <_strtod_l+0x97c>
 800e07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e080:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e084:	b342      	cbz	r2, 800e0d8 <_strtod_l+0x8f8>
 800e086:	4a32      	ldr	r2, [pc, #200]	; (800e150 <_strtod_l+0x970>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d128      	bne.n	800e0de <_strtod_l+0x8fe>
 800e08c:	9b04      	ldr	r3, [sp, #16]
 800e08e:	4650      	mov	r0, sl
 800e090:	b1eb      	cbz	r3, 800e0ce <_strtod_l+0x8ee>
 800e092:	4a2d      	ldr	r2, [pc, #180]	; (800e148 <_strtod_l+0x968>)
 800e094:	403a      	ands	r2, r7
 800e096:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e09a:	f04f 31ff 	mov.w	r1, #4294967295
 800e09e:	d819      	bhi.n	800e0d4 <_strtod_l+0x8f4>
 800e0a0:	0d12      	lsrs	r2, r2, #20
 800e0a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0aa:	4298      	cmp	r0, r3
 800e0ac:	d117      	bne.n	800e0de <_strtod_l+0x8fe>
 800e0ae:	4b29      	ldr	r3, [pc, #164]	; (800e154 <_strtod_l+0x974>)
 800e0b0:	429f      	cmp	r7, r3
 800e0b2:	d102      	bne.n	800e0ba <_strtod_l+0x8da>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	f43f addf 	beq.w	800dc78 <_strtod_l+0x498>
 800e0ba:	4b23      	ldr	r3, [pc, #140]	; (800e148 <_strtod_l+0x968>)
 800e0bc:	403b      	ands	r3, r7
 800e0be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e0c2:	f04f 0a00 	mov.w	sl, #0
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1a0      	bne.n	800e00e <_strtod_l+0x82e>
 800e0cc:	e5de      	b.n	800dc8c <_strtod_l+0x4ac>
 800e0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d2:	e7ea      	b.n	800e0aa <_strtod_l+0x8ca>
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	e7e8      	b.n	800e0aa <_strtod_l+0x8ca>
 800e0d8:	ea53 030a 	orrs.w	r3, r3, sl
 800e0dc:	d088      	beq.n	800dff0 <_strtod_l+0x810>
 800e0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0e0:	b1db      	cbz	r3, 800e11a <_strtod_l+0x93a>
 800e0e2:	423b      	tst	r3, r7
 800e0e4:	d0ef      	beq.n	800e0c6 <_strtod_l+0x8e6>
 800e0e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0e8:	9a04      	ldr	r2, [sp, #16]
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	4659      	mov	r1, fp
 800e0ee:	b1c3      	cbz	r3, 800e122 <_strtod_l+0x942>
 800e0f0:	f7ff fb58 	bl	800d7a4 <sulp>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0fc:	f7f2 f8c6 	bl	800028c <__adddf3>
 800e100:	4682      	mov	sl, r0
 800e102:	468b      	mov	fp, r1
 800e104:	e7df      	b.n	800e0c6 <_strtod_l+0x8e6>
 800e106:	4013      	ands	r3, r2
 800e108:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e10c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e110:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e114:	f04f 3aff 	mov.w	sl, #4294967295
 800e118:	e7d5      	b.n	800e0c6 <_strtod_l+0x8e6>
 800e11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e11c:	ea13 0f0a 	tst.w	r3, sl
 800e120:	e7e0      	b.n	800e0e4 <_strtod_l+0x904>
 800e122:	f7ff fb3f 	bl	800d7a4 <sulp>
 800e126:	4602      	mov	r2, r0
 800e128:	460b      	mov	r3, r1
 800e12a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e12e:	f7f2 f8ab 	bl	8000288 <__aeabi_dsub>
 800e132:	2200      	movs	r2, #0
 800e134:	2300      	movs	r3, #0
 800e136:	4682      	mov	sl, r0
 800e138:	468b      	mov	fp, r1
 800e13a:	f7f2 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d0c1      	beq.n	800e0c6 <_strtod_l+0x8e6>
 800e142:	e60e      	b.n	800dd62 <_strtod_l+0x582>
 800e144:	fffffc02 	.word	0xfffffc02
 800e148:	7ff00000 	.word	0x7ff00000
 800e14c:	39500000 	.word	0x39500000
 800e150:	000fffff 	.word	0x000fffff
 800e154:	7fefffff 	.word	0x7fefffff
 800e158:	08011310 	.word	0x08011310
 800e15c:	4631      	mov	r1, r6
 800e15e:	4628      	mov	r0, r5
 800e160:	f001 ffb2 	bl	80100c8 <__ratio>
 800e164:	ec59 8b10 	vmov	r8, r9, d0
 800e168:	ee10 0a10 	vmov	r0, s0
 800e16c:	2200      	movs	r2, #0
 800e16e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e172:	4649      	mov	r1, r9
 800e174:	f7f2 fcbc 	bl	8000af0 <__aeabi_dcmple>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d07c      	beq.n	800e276 <_strtod_l+0xa96>
 800e17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d04c      	beq.n	800e21c <_strtod_l+0xa3c>
 800e182:	4b95      	ldr	r3, [pc, #596]	; (800e3d8 <_strtod_l+0xbf8>)
 800e184:	2200      	movs	r2, #0
 800e186:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e18a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e3d8 <_strtod_l+0xbf8>
 800e18e:	f04f 0800 	mov.w	r8, #0
 800e192:	4b92      	ldr	r3, [pc, #584]	; (800e3dc <_strtod_l+0xbfc>)
 800e194:	403b      	ands	r3, r7
 800e196:	9311      	str	r3, [sp, #68]	; 0x44
 800e198:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e19a:	4b91      	ldr	r3, [pc, #580]	; (800e3e0 <_strtod_l+0xc00>)
 800e19c:	429a      	cmp	r2, r3
 800e19e:	f040 80b2 	bne.w	800e306 <_strtod_l+0xb26>
 800e1a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e1ae:	ec4b ab10 	vmov	d0, sl, fp
 800e1b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e1b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1ba:	f001 fead 	bl	800ff18 <__ulp>
 800e1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1c2:	ec53 2b10 	vmov	r2, r3, d0
 800e1c6:	f7f2 fa17 	bl	80005f8 <__aeabi_dmul>
 800e1ca:	4652      	mov	r2, sl
 800e1cc:	465b      	mov	r3, fp
 800e1ce:	f7f2 f85d 	bl	800028c <__adddf3>
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4981      	ldr	r1, [pc, #516]	; (800e3dc <_strtod_l+0xbfc>)
 800e1d6:	4a83      	ldr	r2, [pc, #524]	; (800e3e4 <_strtod_l+0xc04>)
 800e1d8:	4019      	ands	r1, r3
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	4682      	mov	sl, r0
 800e1de:	d95e      	bls.n	800e29e <_strtod_l+0xabe>
 800e1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d103      	bne.n	800e1f2 <_strtod_l+0xa12>
 800e1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	f43f ad43 	beq.w	800dc78 <_strtod_l+0x498>
 800e1f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e3f0 <_strtod_l+0xc10>
 800e1f6:	f04f 3aff 	mov.w	sl, #4294967295
 800e1fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f001 fb5f 	bl	800f8c0 <_Bfree>
 800e202:	9907      	ldr	r1, [sp, #28]
 800e204:	4620      	mov	r0, r4
 800e206:	f001 fb5b 	bl	800f8c0 <_Bfree>
 800e20a:	4631      	mov	r1, r6
 800e20c:	4620      	mov	r0, r4
 800e20e:	f001 fb57 	bl	800f8c0 <_Bfree>
 800e212:	4629      	mov	r1, r5
 800e214:	4620      	mov	r0, r4
 800e216:	f001 fb53 	bl	800f8c0 <_Bfree>
 800e21a:	e613      	b.n	800de44 <_strtod_l+0x664>
 800e21c:	f1ba 0f00 	cmp.w	sl, #0
 800e220:	d11b      	bne.n	800e25a <_strtod_l+0xa7a>
 800e222:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e226:	b9f3      	cbnz	r3, 800e266 <_strtod_l+0xa86>
 800e228:	4b6b      	ldr	r3, [pc, #428]	; (800e3d8 <_strtod_l+0xbf8>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	4640      	mov	r0, r8
 800e22e:	4649      	mov	r1, r9
 800e230:	f7f2 fc54 	bl	8000adc <__aeabi_dcmplt>
 800e234:	b9d0      	cbnz	r0, 800e26c <_strtod_l+0xa8c>
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	4b6b      	ldr	r3, [pc, #428]	; (800e3e8 <_strtod_l+0xc08>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	f7f2 f9db 	bl	80005f8 <__aeabi_dmul>
 800e242:	4680      	mov	r8, r0
 800e244:	4689      	mov	r9, r1
 800e246:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e24a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e24e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e250:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e254:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e258:	e79b      	b.n	800e192 <_strtod_l+0x9b2>
 800e25a:	f1ba 0f01 	cmp.w	sl, #1
 800e25e:	d102      	bne.n	800e266 <_strtod_l+0xa86>
 800e260:	2f00      	cmp	r7, #0
 800e262:	f43f ad7e 	beq.w	800dd62 <_strtod_l+0x582>
 800e266:	4b61      	ldr	r3, [pc, #388]	; (800e3ec <_strtod_l+0xc0c>)
 800e268:	2200      	movs	r2, #0
 800e26a:	e78c      	b.n	800e186 <_strtod_l+0x9a6>
 800e26c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e3e8 <_strtod_l+0xc08>
 800e270:	f04f 0800 	mov.w	r8, #0
 800e274:	e7e7      	b.n	800e246 <_strtod_l+0xa66>
 800e276:	4b5c      	ldr	r3, [pc, #368]	; (800e3e8 <_strtod_l+0xc08>)
 800e278:	4640      	mov	r0, r8
 800e27a:	4649      	mov	r1, r9
 800e27c:	2200      	movs	r2, #0
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e284:	4680      	mov	r8, r0
 800e286:	4689      	mov	r9, r1
 800e288:	b933      	cbnz	r3, 800e298 <_strtod_l+0xab8>
 800e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e28e:	9012      	str	r0, [sp, #72]	; 0x48
 800e290:	9313      	str	r3, [sp, #76]	; 0x4c
 800e292:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e296:	e7dd      	b.n	800e254 <_strtod_l+0xa74>
 800e298:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e29c:	e7f9      	b.n	800e292 <_strtod_l+0xab2>
 800e29e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e2a2:	9b04      	ldr	r3, [sp, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1a8      	bne.n	800e1fa <_strtod_l+0xa1a>
 800e2a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2ae:	0d1b      	lsrs	r3, r3, #20
 800e2b0:	051b      	lsls	r3, r3, #20
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d1a1      	bne.n	800e1fa <_strtod_l+0xa1a>
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 fcfd 	bl	8000cb8 <__aeabi_d2lz>
 800e2be:	f7f2 f96d 	bl	800059c <__aeabi_l2d>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e2d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2d4:	ea43 030a 	orr.w	r3, r3, sl
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	4680      	mov	r8, r0
 800e2dc:	4689      	mov	r9, r1
 800e2de:	d053      	beq.n	800e388 <_strtod_l+0xba8>
 800e2e0:	a335      	add	r3, pc, #212	; (adr r3, 800e3b8 <_strtod_l+0xbd8>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f7f2 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f47f acce 	bne.w	800dc8c <_strtod_l+0x4ac>
 800e2f0:	a333      	add	r3, pc, #204	; (adr r3, 800e3c0 <_strtod_l+0xbe0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	f7f2 fc0d 	bl	8000b18 <__aeabi_dcmpgt>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	f43f af7b 	beq.w	800e1fa <_strtod_l+0xa1a>
 800e304:	e4c2      	b.n	800dc8c <_strtod_l+0x4ac>
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	b333      	cbz	r3, 800e358 <_strtod_l+0xb78>
 800e30a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e30c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e310:	d822      	bhi.n	800e358 <_strtod_l+0xb78>
 800e312:	a32d      	add	r3, pc, #180	; (adr r3, 800e3c8 <_strtod_l+0xbe8>)
 800e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e318:	4640      	mov	r0, r8
 800e31a:	4649      	mov	r1, r9
 800e31c:	f7f2 fbe8 	bl	8000af0 <__aeabi_dcmple>
 800e320:	b1a0      	cbz	r0, 800e34c <_strtod_l+0xb6c>
 800e322:	4649      	mov	r1, r9
 800e324:	4640      	mov	r0, r8
 800e326:	f7f2 fc3f 	bl	8000ba8 <__aeabi_d2uiz>
 800e32a:	2801      	cmp	r0, #1
 800e32c:	bf38      	it	cc
 800e32e:	2001      	movcc	r0, #1
 800e330:	f7f2 f8e8 	bl	8000504 <__aeabi_ui2d>
 800e334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e336:	4680      	mov	r8, r0
 800e338:	4689      	mov	r9, r1
 800e33a:	bb13      	cbnz	r3, 800e382 <_strtod_l+0xba2>
 800e33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e340:	9014      	str	r0, [sp, #80]	; 0x50
 800e342:	9315      	str	r3, [sp, #84]	; 0x54
 800e344:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e348:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e34e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e350:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	930d      	str	r3, [sp, #52]	; 0x34
 800e358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e35c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e364:	f001 fdd8 	bl	800ff18 <__ulp>
 800e368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e36c:	ec53 2b10 	vmov	r2, r3, d0
 800e370:	f7f2 f942 	bl	80005f8 <__aeabi_dmul>
 800e374:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e378:	f7f1 ff88 	bl	800028c <__adddf3>
 800e37c:	4682      	mov	sl, r0
 800e37e:	468b      	mov	fp, r1
 800e380:	e78f      	b.n	800e2a2 <_strtod_l+0xac2>
 800e382:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e386:	e7dd      	b.n	800e344 <_strtod_l+0xb64>
 800e388:	a311      	add	r3, pc, #68	; (adr r3, 800e3d0 <_strtod_l+0xbf0>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	f7f2 fba5 	bl	8000adc <__aeabi_dcmplt>
 800e392:	e7b4      	b.n	800e2fe <_strtod_l+0xb1e>
 800e394:	2300      	movs	r3, #0
 800e396:	930e      	str	r3, [sp, #56]	; 0x38
 800e398:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e39a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	f7ff ba65 	b.w	800d86c <_strtod_l+0x8c>
 800e3a2:	2b65      	cmp	r3, #101	; 0x65
 800e3a4:	f43f ab5d 	beq.w	800da62 <_strtod_l+0x282>
 800e3a8:	2b45      	cmp	r3, #69	; 0x45
 800e3aa:	f43f ab5a 	beq.w	800da62 <_strtod_l+0x282>
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f7ff bb92 	b.w	800dad8 <_strtod_l+0x2f8>
 800e3b4:	f3af 8000 	nop.w
 800e3b8:	94a03595 	.word	0x94a03595
 800e3bc:	3fdfffff 	.word	0x3fdfffff
 800e3c0:	35afe535 	.word	0x35afe535
 800e3c4:	3fe00000 	.word	0x3fe00000
 800e3c8:	ffc00000 	.word	0xffc00000
 800e3cc:	41dfffff 	.word	0x41dfffff
 800e3d0:	94a03595 	.word	0x94a03595
 800e3d4:	3fcfffff 	.word	0x3fcfffff
 800e3d8:	3ff00000 	.word	0x3ff00000
 800e3dc:	7ff00000 	.word	0x7ff00000
 800e3e0:	7fe00000 	.word	0x7fe00000
 800e3e4:	7c9fffff 	.word	0x7c9fffff
 800e3e8:	3fe00000 	.word	0x3fe00000
 800e3ec:	bff00000 	.word	0xbff00000
 800e3f0:	7fefffff 	.word	0x7fefffff

0800e3f4 <strtod>:
 800e3f4:	460a      	mov	r2, r1
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	4802      	ldr	r0, [pc, #8]	; (800e404 <strtod+0x10>)
 800e3fa:	4b03      	ldr	r3, [pc, #12]	; (800e408 <strtod+0x14>)
 800e3fc:	6800      	ldr	r0, [r0, #0]
 800e3fe:	f7ff b9ef 	b.w	800d7e0 <_strtod_l>
 800e402:	bf00      	nop
 800e404:	20000540 	.word	0x20000540
 800e408:	200005a8 	.word	0x200005a8

0800e40c <quorem>:
 800e40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	6903      	ldr	r3, [r0, #16]
 800e412:	690c      	ldr	r4, [r1, #16]
 800e414:	42a3      	cmp	r3, r4
 800e416:	4607      	mov	r7, r0
 800e418:	f2c0 8081 	blt.w	800e51e <quorem+0x112>
 800e41c:	3c01      	subs	r4, #1
 800e41e:	f101 0814 	add.w	r8, r1, #20
 800e422:	f100 0514 	add.w	r5, r0, #20
 800e426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e434:	3301      	adds	r3, #1
 800e436:	429a      	cmp	r2, r3
 800e438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e43c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e440:	fbb2 f6f3 	udiv	r6, r2, r3
 800e444:	d331      	bcc.n	800e4aa <quorem+0x9e>
 800e446:	f04f 0e00 	mov.w	lr, #0
 800e44a:	4640      	mov	r0, r8
 800e44c:	46ac      	mov	ip, r5
 800e44e:	46f2      	mov	sl, lr
 800e450:	f850 2b04 	ldr.w	r2, [r0], #4
 800e454:	b293      	uxth	r3, r2
 800e456:	fb06 e303 	mla	r3, r6, r3, lr
 800e45a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e45e:	b29b      	uxth	r3, r3
 800e460:	ebaa 0303 	sub.w	r3, sl, r3
 800e464:	0c12      	lsrs	r2, r2, #16
 800e466:	f8dc a000 	ldr.w	sl, [ip]
 800e46a:	fb06 e202 	mla	r2, r6, r2, lr
 800e46e:	fa13 f38a 	uxtah	r3, r3, sl
 800e472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e476:	fa1f fa82 	uxth.w	sl, r2
 800e47a:	f8dc 2000 	ldr.w	r2, [ip]
 800e47e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e482:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e486:	b29b      	uxth	r3, r3
 800e488:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e48c:	4581      	cmp	r9, r0
 800e48e:	f84c 3b04 	str.w	r3, [ip], #4
 800e492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e496:	d2db      	bcs.n	800e450 <quorem+0x44>
 800e498:	f855 300b 	ldr.w	r3, [r5, fp]
 800e49c:	b92b      	cbnz	r3, 800e4aa <quorem+0x9e>
 800e49e:	9b01      	ldr	r3, [sp, #4]
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	429d      	cmp	r5, r3
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	d32e      	bcc.n	800e506 <quorem+0xfa>
 800e4a8:	613c      	str	r4, [r7, #16]
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	f001 fc90 	bl	800fdd0 <__mcmp>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	db24      	blt.n	800e4fe <quorem+0xf2>
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f04f 0c00 	mov.w	ip, #0
 800e4bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4c0:	f8d0 e000 	ldr.w	lr, [r0]
 800e4c4:	b293      	uxth	r3, r2
 800e4c6:	ebac 0303 	sub.w	r3, ip, r3
 800e4ca:	0c12      	lsrs	r2, r2, #16
 800e4cc:	fa13 f38e 	uxtah	r3, r3, lr
 800e4d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e4d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4de:	45c1      	cmp	r9, r8
 800e4e0:	f840 3b04 	str.w	r3, [r0], #4
 800e4e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e4e8:	d2e8      	bcs.n	800e4bc <quorem+0xb0>
 800e4ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4f2:	b922      	cbnz	r2, 800e4fe <quorem+0xf2>
 800e4f4:	3b04      	subs	r3, #4
 800e4f6:	429d      	cmp	r5, r3
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	d30a      	bcc.n	800e512 <quorem+0x106>
 800e4fc:	613c      	str	r4, [r7, #16]
 800e4fe:	4630      	mov	r0, r6
 800e500:	b003      	add	sp, #12
 800e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e506:	6812      	ldr	r2, [r2, #0]
 800e508:	3b04      	subs	r3, #4
 800e50a:	2a00      	cmp	r2, #0
 800e50c:	d1cc      	bne.n	800e4a8 <quorem+0x9c>
 800e50e:	3c01      	subs	r4, #1
 800e510:	e7c7      	b.n	800e4a2 <quorem+0x96>
 800e512:	6812      	ldr	r2, [r2, #0]
 800e514:	3b04      	subs	r3, #4
 800e516:	2a00      	cmp	r2, #0
 800e518:	d1f0      	bne.n	800e4fc <quorem+0xf0>
 800e51a:	3c01      	subs	r4, #1
 800e51c:	e7eb      	b.n	800e4f6 <quorem+0xea>
 800e51e:	2000      	movs	r0, #0
 800e520:	e7ee      	b.n	800e500 <quorem+0xf4>
 800e522:	0000      	movs	r0, r0
 800e524:	0000      	movs	r0, r0
	...

0800e528 <_dtoa_r>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	ed2d 8b02 	vpush	{d8}
 800e530:	ec57 6b10 	vmov	r6, r7, d0
 800e534:	b095      	sub	sp, #84	; 0x54
 800e536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e53c:	9105      	str	r1, [sp, #20]
 800e53e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e542:	4604      	mov	r4, r0
 800e544:	9209      	str	r2, [sp, #36]	; 0x24
 800e546:	930f      	str	r3, [sp, #60]	; 0x3c
 800e548:	b975      	cbnz	r5, 800e568 <_dtoa_r+0x40>
 800e54a:	2010      	movs	r0, #16
 800e54c:	f7fe fbbc 	bl	800ccc8 <malloc>
 800e550:	4602      	mov	r2, r0
 800e552:	6260      	str	r0, [r4, #36]	; 0x24
 800e554:	b920      	cbnz	r0, 800e560 <_dtoa_r+0x38>
 800e556:	4bb2      	ldr	r3, [pc, #712]	; (800e820 <_dtoa_r+0x2f8>)
 800e558:	21ea      	movs	r1, #234	; 0xea
 800e55a:	48b2      	ldr	r0, [pc, #712]	; (800e824 <_dtoa_r+0x2fc>)
 800e55c:	f001 ffae 	bl	80104bc <__assert_func>
 800e560:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e564:	6005      	str	r5, [r0, #0]
 800e566:	60c5      	str	r5, [r0, #12]
 800e568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e56a:	6819      	ldr	r1, [r3, #0]
 800e56c:	b151      	cbz	r1, 800e584 <_dtoa_r+0x5c>
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	604a      	str	r2, [r1, #4]
 800e572:	2301      	movs	r3, #1
 800e574:	4093      	lsls	r3, r2
 800e576:	608b      	str	r3, [r1, #8]
 800e578:	4620      	mov	r0, r4
 800e57a:	f001 f9a1 	bl	800f8c0 <_Bfree>
 800e57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e580:	2200      	movs	r2, #0
 800e582:	601a      	str	r2, [r3, #0]
 800e584:	1e3b      	subs	r3, r7, #0
 800e586:	bfb9      	ittee	lt
 800e588:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e58c:	9303      	strlt	r3, [sp, #12]
 800e58e:	2300      	movge	r3, #0
 800e590:	f8c8 3000 	strge.w	r3, [r8]
 800e594:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e598:	4ba3      	ldr	r3, [pc, #652]	; (800e828 <_dtoa_r+0x300>)
 800e59a:	bfbc      	itt	lt
 800e59c:	2201      	movlt	r2, #1
 800e59e:	f8c8 2000 	strlt.w	r2, [r8]
 800e5a2:	ea33 0309 	bics.w	r3, r3, r9
 800e5a6:	d11b      	bne.n	800e5e0 <_dtoa_r+0xb8>
 800e5a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5b4:	4333      	orrs	r3, r6
 800e5b6:	f000 857a 	beq.w	800f0ae <_dtoa_r+0xb86>
 800e5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5bc:	b963      	cbnz	r3, 800e5d8 <_dtoa_r+0xb0>
 800e5be:	4b9b      	ldr	r3, [pc, #620]	; (800e82c <_dtoa_r+0x304>)
 800e5c0:	e024      	b.n	800e60c <_dtoa_r+0xe4>
 800e5c2:	4b9b      	ldr	r3, [pc, #620]	; (800e830 <_dtoa_r+0x308>)
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	9800      	ldr	r0, [sp, #0]
 800e5ce:	b015      	add	sp, #84	; 0x54
 800e5d0:	ecbd 8b02 	vpop	{d8}
 800e5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d8:	4b94      	ldr	r3, [pc, #592]	; (800e82c <_dtoa_r+0x304>)
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	3303      	adds	r3, #3
 800e5de:	e7f3      	b.n	800e5c8 <_dtoa_r+0xa0>
 800e5e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	ec51 0b17 	vmov	r0, r1, d7
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e5f0:	f7f2 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	b158      	cbz	r0, 800e610 <_dtoa_r+0xe8>
 800e5f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	6013      	str	r3, [r2, #0]
 800e5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 8551 	beq.w	800f0a8 <_dtoa_r+0xb80>
 800e606:	488b      	ldr	r0, [pc, #556]	; (800e834 <_dtoa_r+0x30c>)
 800e608:	6018      	str	r0, [r3, #0]
 800e60a:	1e43      	subs	r3, r0, #1
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	e7dd      	b.n	800e5cc <_dtoa_r+0xa4>
 800e610:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e614:	aa12      	add	r2, sp, #72	; 0x48
 800e616:	a913      	add	r1, sp, #76	; 0x4c
 800e618:	4620      	mov	r0, r4
 800e61a:	f001 fcf9 	bl	8010010 <__d2b>
 800e61e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e622:	4683      	mov	fp, r0
 800e624:	2d00      	cmp	r5, #0
 800e626:	d07c      	beq.n	800e722 <_dtoa_r+0x1fa>
 800e628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e62a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e632:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e636:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e63a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e63e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e642:	4b7d      	ldr	r3, [pc, #500]	; (800e838 <_dtoa_r+0x310>)
 800e644:	2200      	movs	r2, #0
 800e646:	4630      	mov	r0, r6
 800e648:	4639      	mov	r1, r7
 800e64a:	f7f1 fe1d 	bl	8000288 <__aeabi_dsub>
 800e64e:	a36e      	add	r3, pc, #440	; (adr r3, 800e808 <_dtoa_r+0x2e0>)
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f7f1 ffd0 	bl	80005f8 <__aeabi_dmul>
 800e658:	a36d      	add	r3, pc, #436	; (adr r3, 800e810 <_dtoa_r+0x2e8>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	f7f1 fe15 	bl	800028c <__adddf3>
 800e662:	4606      	mov	r6, r0
 800e664:	4628      	mov	r0, r5
 800e666:	460f      	mov	r7, r1
 800e668:	f7f1 ff5c 	bl	8000524 <__aeabi_i2d>
 800e66c:	a36a      	add	r3, pc, #424	; (adr r3, 800e818 <_dtoa_r+0x2f0>)
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	f7f1 ffc1 	bl	80005f8 <__aeabi_dmul>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f1 fe05 	bl	800028c <__adddf3>
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	f7f2 fa67 	bl	8000b58 <__aeabi_d2iz>
 800e68a:	2200      	movs	r2, #0
 800e68c:	4682      	mov	sl, r0
 800e68e:	2300      	movs	r3, #0
 800e690:	4630      	mov	r0, r6
 800e692:	4639      	mov	r1, r7
 800e694:	f7f2 fa22 	bl	8000adc <__aeabi_dcmplt>
 800e698:	b148      	cbz	r0, 800e6ae <_dtoa_r+0x186>
 800e69a:	4650      	mov	r0, sl
 800e69c:	f7f1 ff42 	bl	8000524 <__aeabi_i2d>
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	f7f2 fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6a8:	b908      	cbnz	r0, 800e6ae <_dtoa_r+0x186>
 800e6aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ae:	f1ba 0f16 	cmp.w	sl, #22
 800e6b2:	d854      	bhi.n	800e75e <_dtoa_r+0x236>
 800e6b4:	4b61      	ldr	r3, [pc, #388]	; (800e83c <_dtoa_r+0x314>)
 800e6b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6c2:	f7f2 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d04b      	beq.n	800e762 <_dtoa_r+0x23a>
 800e6ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	930e      	str	r3, [sp, #56]	; 0x38
 800e6d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e6d4:	1b5d      	subs	r5, r3, r5
 800e6d6:	1e6b      	subs	r3, r5, #1
 800e6d8:	9304      	str	r3, [sp, #16]
 800e6da:	bf43      	ittte	mi
 800e6dc:	2300      	movmi	r3, #0
 800e6de:	f1c5 0801 	rsbmi	r8, r5, #1
 800e6e2:	9304      	strmi	r3, [sp, #16]
 800e6e4:	f04f 0800 	movpl.w	r8, #0
 800e6e8:	f1ba 0f00 	cmp.w	sl, #0
 800e6ec:	db3b      	blt.n	800e766 <_dtoa_r+0x23e>
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e6f4:	4453      	add	r3, sl
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	9306      	str	r3, [sp, #24]
 800e6fc:	9b05      	ldr	r3, [sp, #20]
 800e6fe:	2b09      	cmp	r3, #9
 800e700:	d869      	bhi.n	800e7d6 <_dtoa_r+0x2ae>
 800e702:	2b05      	cmp	r3, #5
 800e704:	bfc4      	itt	gt
 800e706:	3b04      	subgt	r3, #4
 800e708:	9305      	strgt	r3, [sp, #20]
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	f1a3 0302 	sub.w	r3, r3, #2
 800e710:	bfcc      	ite	gt
 800e712:	2500      	movgt	r5, #0
 800e714:	2501      	movle	r5, #1
 800e716:	2b03      	cmp	r3, #3
 800e718:	d869      	bhi.n	800e7ee <_dtoa_r+0x2c6>
 800e71a:	e8df f003 	tbb	[pc, r3]
 800e71e:	4e2c      	.short	0x4e2c
 800e720:	5a4c      	.short	0x5a4c
 800e722:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e726:	441d      	add	r5, r3
 800e728:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e72c:	2b20      	cmp	r3, #32
 800e72e:	bfc1      	itttt	gt
 800e730:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e734:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e738:	fa09 f303 	lslgt.w	r3, r9, r3
 800e73c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e740:	bfda      	itte	le
 800e742:	f1c3 0320 	rsble	r3, r3, #32
 800e746:	fa06 f003 	lslle.w	r0, r6, r3
 800e74a:	4318      	orrgt	r0, r3
 800e74c:	f7f1 feda 	bl	8000504 <__aeabi_ui2d>
 800e750:	2301      	movs	r3, #1
 800e752:	4606      	mov	r6, r0
 800e754:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e758:	3d01      	subs	r5, #1
 800e75a:	9310      	str	r3, [sp, #64]	; 0x40
 800e75c:	e771      	b.n	800e642 <_dtoa_r+0x11a>
 800e75e:	2301      	movs	r3, #1
 800e760:	e7b6      	b.n	800e6d0 <_dtoa_r+0x1a8>
 800e762:	900e      	str	r0, [sp, #56]	; 0x38
 800e764:	e7b5      	b.n	800e6d2 <_dtoa_r+0x1aa>
 800e766:	f1ca 0300 	rsb	r3, sl, #0
 800e76a:	9306      	str	r3, [sp, #24]
 800e76c:	2300      	movs	r3, #0
 800e76e:	eba8 080a 	sub.w	r8, r8, sl
 800e772:	930d      	str	r3, [sp, #52]	; 0x34
 800e774:	e7c2      	b.n	800e6fc <_dtoa_r+0x1d4>
 800e776:	2300      	movs	r3, #0
 800e778:	9308      	str	r3, [sp, #32]
 800e77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dc39      	bgt.n	800e7f4 <_dtoa_r+0x2cc>
 800e780:	f04f 0901 	mov.w	r9, #1
 800e784:	f8cd 9004 	str.w	r9, [sp, #4]
 800e788:	464b      	mov	r3, r9
 800e78a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e78e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e790:	2200      	movs	r2, #0
 800e792:	6042      	str	r2, [r0, #4]
 800e794:	2204      	movs	r2, #4
 800e796:	f102 0614 	add.w	r6, r2, #20
 800e79a:	429e      	cmp	r6, r3
 800e79c:	6841      	ldr	r1, [r0, #4]
 800e79e:	d92f      	bls.n	800e800 <_dtoa_r+0x2d8>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f001 f84d 	bl	800f840 <_Balloc>
 800e7a6:	9000      	str	r0, [sp, #0]
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d14b      	bne.n	800e844 <_dtoa_r+0x31c>
 800e7ac:	4b24      	ldr	r3, [pc, #144]	; (800e840 <_dtoa_r+0x318>)
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7b4:	e6d1      	b.n	800e55a <_dtoa_r+0x32>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7de      	b.n	800e778 <_dtoa_r+0x250>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c0:	eb0a 0903 	add.w	r9, sl, r3
 800e7c4:	f109 0301 	add.w	r3, r9, #1
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	bfb8      	it	lt
 800e7ce:	2301      	movlt	r3, #1
 800e7d0:	e7dd      	b.n	800e78e <_dtoa_r+0x266>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e7f2      	b.n	800e7bc <_dtoa_r+0x294>
 800e7d6:	2501      	movs	r5, #1
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	9508      	str	r5, [sp, #32]
 800e7de:	f04f 39ff 	mov.w	r9, #4294967295
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7e8:	2312      	movs	r3, #18
 800e7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ec:	e7cf      	b.n	800e78e <_dtoa_r+0x266>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	9308      	str	r3, [sp, #32]
 800e7f2:	e7f4      	b.n	800e7de <_dtoa_r+0x2b6>
 800e7f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e7f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7fc:	464b      	mov	r3, r9
 800e7fe:	e7c6      	b.n	800e78e <_dtoa_r+0x266>
 800e800:	3101      	adds	r1, #1
 800e802:	6041      	str	r1, [r0, #4]
 800e804:	0052      	lsls	r2, r2, #1
 800e806:	e7c6      	b.n	800e796 <_dtoa_r+0x26e>
 800e808:	636f4361 	.word	0x636f4361
 800e80c:	3fd287a7 	.word	0x3fd287a7
 800e810:	8b60c8b3 	.word	0x8b60c8b3
 800e814:	3fc68a28 	.word	0x3fc68a28
 800e818:	509f79fb 	.word	0x509f79fb
 800e81c:	3fd34413 	.word	0x3fd34413
 800e820:	08011345 	.word	0x08011345
 800e824:	0801135c 	.word	0x0801135c
 800e828:	7ff00000 	.word	0x7ff00000
 800e82c:	08011341 	.word	0x08011341
 800e830:	08011338 	.word	0x08011338
 800e834:	080112c5 	.word	0x080112c5
 800e838:	3ff80000 	.word	0x3ff80000
 800e83c:	080114d8 	.word	0x080114d8
 800e840:	080113bb 	.word	0x080113bb
 800e844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e846:	9a00      	ldr	r2, [sp, #0]
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	9b01      	ldr	r3, [sp, #4]
 800e84c:	2b0e      	cmp	r3, #14
 800e84e:	f200 80ad 	bhi.w	800e9ac <_dtoa_r+0x484>
 800e852:	2d00      	cmp	r5, #0
 800e854:	f000 80aa 	beq.w	800e9ac <_dtoa_r+0x484>
 800e858:	f1ba 0f00 	cmp.w	sl, #0
 800e85c:	dd36      	ble.n	800e8cc <_dtoa_r+0x3a4>
 800e85e:	4ac3      	ldr	r2, [pc, #780]	; (800eb6c <_dtoa_r+0x644>)
 800e860:	f00a 030f 	and.w	r3, sl, #15
 800e864:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e868:	ed93 7b00 	vldr	d7, [r3]
 800e86c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e870:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e874:	eeb0 8a47 	vmov.f32	s16, s14
 800e878:	eef0 8a67 	vmov.f32	s17, s15
 800e87c:	d016      	beq.n	800e8ac <_dtoa_r+0x384>
 800e87e:	4bbc      	ldr	r3, [pc, #752]	; (800eb70 <_dtoa_r+0x648>)
 800e880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e888:	f7f1 ffe0 	bl	800084c <__aeabi_ddiv>
 800e88c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e890:	f007 070f 	and.w	r7, r7, #15
 800e894:	2503      	movs	r5, #3
 800e896:	4eb6      	ldr	r6, [pc, #728]	; (800eb70 <_dtoa_r+0x648>)
 800e898:	b957      	cbnz	r7, 800e8b0 <_dtoa_r+0x388>
 800e89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e89e:	ec53 2b18 	vmov	r2, r3, d8
 800e8a2:	f7f1 ffd3 	bl	800084c <__aeabi_ddiv>
 800e8a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8aa:	e029      	b.n	800e900 <_dtoa_r+0x3d8>
 800e8ac:	2502      	movs	r5, #2
 800e8ae:	e7f2      	b.n	800e896 <_dtoa_r+0x36e>
 800e8b0:	07f9      	lsls	r1, r7, #31
 800e8b2:	d508      	bpl.n	800e8c6 <_dtoa_r+0x39e>
 800e8b4:	ec51 0b18 	vmov	r0, r1, d8
 800e8b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8bc:	f7f1 fe9c 	bl	80005f8 <__aeabi_dmul>
 800e8c0:	ec41 0b18 	vmov	d8, r0, r1
 800e8c4:	3501      	adds	r5, #1
 800e8c6:	107f      	asrs	r7, r7, #1
 800e8c8:	3608      	adds	r6, #8
 800e8ca:	e7e5      	b.n	800e898 <_dtoa_r+0x370>
 800e8cc:	f000 80a6 	beq.w	800ea1c <_dtoa_r+0x4f4>
 800e8d0:	f1ca 0600 	rsb	r6, sl, #0
 800e8d4:	4ba5      	ldr	r3, [pc, #660]	; (800eb6c <_dtoa_r+0x644>)
 800e8d6:	4fa6      	ldr	r7, [pc, #664]	; (800eb70 <_dtoa_r+0x648>)
 800e8d8:	f006 020f 	and.w	r2, r6, #15
 800e8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8e8:	f7f1 fe86 	bl	80005f8 <__aeabi_dmul>
 800e8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8f0:	1136      	asrs	r6, r6, #4
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2502      	movs	r5, #2
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	f040 8085 	bne.w	800ea06 <_dtoa_r+0x4de>
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1d2      	bne.n	800e8a6 <_dtoa_r+0x37e>
 800e900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 808c 	beq.w	800ea20 <_dtoa_r+0x4f8>
 800e908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e90c:	4b99      	ldr	r3, [pc, #612]	; (800eb74 <_dtoa_r+0x64c>)
 800e90e:	2200      	movs	r2, #0
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f2 f8e2 	bl	8000adc <__aeabi_dcmplt>
 800e918:	2800      	cmp	r0, #0
 800e91a:	f000 8081 	beq.w	800ea20 <_dtoa_r+0x4f8>
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d07d      	beq.n	800ea20 <_dtoa_r+0x4f8>
 800e924:	f1b9 0f00 	cmp.w	r9, #0
 800e928:	dd3c      	ble.n	800e9a4 <_dtoa_r+0x47c>
 800e92a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e92e:	9307      	str	r3, [sp, #28]
 800e930:	2200      	movs	r2, #0
 800e932:	4b91      	ldr	r3, [pc, #580]	; (800eb78 <_dtoa_r+0x650>)
 800e934:	4630      	mov	r0, r6
 800e936:	4639      	mov	r1, r7
 800e938:	f7f1 fe5e 	bl	80005f8 <__aeabi_dmul>
 800e93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e940:	3501      	adds	r5, #1
 800e942:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e946:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7f1 fdea 	bl	8000524 <__aeabi_i2d>
 800e950:	4632      	mov	r2, r6
 800e952:	463b      	mov	r3, r7
 800e954:	f7f1 fe50 	bl	80005f8 <__aeabi_dmul>
 800e958:	4b88      	ldr	r3, [pc, #544]	; (800eb7c <_dtoa_r+0x654>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	f7f1 fc96 	bl	800028c <__adddf3>
 800e960:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e968:	9303      	str	r3, [sp, #12]
 800e96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d15c      	bne.n	800ea2a <_dtoa_r+0x502>
 800e970:	4b83      	ldr	r3, [pc, #524]	; (800eb80 <_dtoa_r+0x658>)
 800e972:	2200      	movs	r2, #0
 800e974:	4630      	mov	r0, r6
 800e976:	4639      	mov	r1, r7
 800e978:	f7f1 fc86 	bl	8000288 <__aeabi_dsub>
 800e97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	f7f2 f8c8 	bl	8000b18 <__aeabi_dcmpgt>
 800e988:	2800      	cmp	r0, #0
 800e98a:	f040 8296 	bne.w	800eeba <_dtoa_r+0x992>
 800e98e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e992:	4630      	mov	r0, r6
 800e994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e998:	4639      	mov	r1, r7
 800e99a:	f7f2 f89f 	bl	8000adc <__aeabi_dcmplt>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f040 8288 	bne.w	800eeb4 <_dtoa_r+0x98c>
 800e9a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f2c0 8158 	blt.w	800ec64 <_dtoa_r+0x73c>
 800e9b4:	f1ba 0f0e 	cmp.w	sl, #14
 800e9b8:	f300 8154 	bgt.w	800ec64 <_dtoa_r+0x73c>
 800e9bc:	4b6b      	ldr	r3, [pc, #428]	; (800eb6c <_dtoa_r+0x644>)
 800e9be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f280 80e3 	bge.w	800eb94 <_dtoa_r+0x66c>
 800e9ce:	9b01      	ldr	r3, [sp, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f300 80df 	bgt.w	800eb94 <_dtoa_r+0x66c>
 800e9d6:	f040 826d 	bne.w	800eeb4 <_dtoa_r+0x98c>
 800e9da:	4b69      	ldr	r3, [pc, #420]	; (800eb80 <_dtoa_r+0x658>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	4640      	mov	r0, r8
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	f7f1 fe09 	bl	80005f8 <__aeabi_dmul>
 800e9e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9ea:	f7f2 f88b 	bl	8000b04 <__aeabi_dcmpge>
 800e9ee:	9e01      	ldr	r6, [sp, #4]
 800e9f0:	4637      	mov	r7, r6
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f040 8243 	bne.w	800ee7e <_dtoa_r+0x956>
 800e9f8:	9d00      	ldr	r5, [sp, #0]
 800e9fa:	2331      	movs	r3, #49	; 0x31
 800e9fc:	f805 3b01 	strb.w	r3, [r5], #1
 800ea00:	f10a 0a01 	add.w	sl, sl, #1
 800ea04:	e23f      	b.n	800ee86 <_dtoa_r+0x95e>
 800ea06:	07f2      	lsls	r2, r6, #31
 800ea08:	d505      	bpl.n	800ea16 <_dtoa_r+0x4ee>
 800ea0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	3501      	adds	r5, #1
 800ea14:	2301      	movs	r3, #1
 800ea16:	1076      	asrs	r6, r6, #1
 800ea18:	3708      	adds	r7, #8
 800ea1a:	e76c      	b.n	800e8f6 <_dtoa_r+0x3ce>
 800ea1c:	2502      	movs	r5, #2
 800ea1e:	e76f      	b.n	800e900 <_dtoa_r+0x3d8>
 800ea20:	9b01      	ldr	r3, [sp, #4]
 800ea22:	f8cd a01c 	str.w	sl, [sp, #28]
 800ea26:	930c      	str	r3, [sp, #48]	; 0x30
 800ea28:	e78d      	b.n	800e946 <_dtoa_r+0x41e>
 800ea2a:	9900      	ldr	r1, [sp, #0]
 800ea2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea30:	4b4e      	ldr	r3, [pc, #312]	; (800eb6c <_dtoa_r+0x644>)
 800ea32:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea36:	4401      	add	r1, r0
 800ea38:	9102      	str	r1, [sp, #8]
 800ea3a:	9908      	ldr	r1, [sp, #32]
 800ea3c:	eeb0 8a47 	vmov.f32	s16, s14
 800ea40:	eef0 8a67 	vmov.f32	s17, s15
 800ea44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	d045      	beq.n	800eadc <_dtoa_r+0x5b4>
 800ea50:	494c      	ldr	r1, [pc, #304]	; (800eb84 <_dtoa_r+0x65c>)
 800ea52:	2000      	movs	r0, #0
 800ea54:	f7f1 fefa 	bl	800084c <__aeabi_ddiv>
 800ea58:	ec53 2b18 	vmov	r2, r3, d8
 800ea5c:	f7f1 fc14 	bl	8000288 <__aeabi_dsub>
 800ea60:	9d00      	ldr	r5, [sp, #0]
 800ea62:	ec41 0b18 	vmov	d8, r0, r1
 800ea66:	4639      	mov	r1, r7
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f7f2 f875 	bl	8000b58 <__aeabi_d2iz>
 800ea6e:	900c      	str	r0, [sp, #48]	; 0x30
 800ea70:	f7f1 fd58 	bl	8000524 <__aeabi_i2d>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f1 fc04 	bl	8000288 <__aeabi_dsub>
 800ea80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea82:	3330      	adds	r3, #48	; 0x30
 800ea84:	f805 3b01 	strb.w	r3, [r5], #1
 800ea88:	ec53 2b18 	vmov	r2, r3, d8
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	f7f2 f824 	bl	8000adc <__aeabi_dcmplt>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d165      	bne.n	800eb64 <_dtoa_r+0x63c>
 800ea98:	4632      	mov	r2, r6
 800ea9a:	463b      	mov	r3, r7
 800ea9c:	4935      	ldr	r1, [pc, #212]	; (800eb74 <_dtoa_r+0x64c>)
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	f7f1 fbf2 	bl	8000288 <__aeabi_dsub>
 800eaa4:	ec53 2b18 	vmov	r2, r3, d8
 800eaa8:	f7f2 f818 	bl	8000adc <__aeabi_dcmplt>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f040 80b9 	bne.w	800ec24 <_dtoa_r+0x6fc>
 800eab2:	9b02      	ldr	r3, [sp, #8]
 800eab4:	429d      	cmp	r5, r3
 800eab6:	f43f af75 	beq.w	800e9a4 <_dtoa_r+0x47c>
 800eaba:	4b2f      	ldr	r3, [pc, #188]	; (800eb78 <_dtoa_r+0x650>)
 800eabc:	ec51 0b18 	vmov	r0, r1, d8
 800eac0:	2200      	movs	r2, #0
 800eac2:	f7f1 fd99 	bl	80005f8 <__aeabi_dmul>
 800eac6:	4b2c      	ldr	r3, [pc, #176]	; (800eb78 <_dtoa_r+0x650>)
 800eac8:	ec41 0b18 	vmov	d8, r0, r1
 800eacc:	2200      	movs	r2, #0
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fd91 	bl	80005f8 <__aeabi_dmul>
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	e7c4      	b.n	800ea66 <_dtoa_r+0x53e>
 800eadc:	ec51 0b17 	vmov	r0, r1, d7
 800eae0:	f7f1 fd8a 	bl	80005f8 <__aeabi_dmul>
 800eae4:	9b02      	ldr	r3, [sp, #8]
 800eae6:	9d00      	ldr	r5, [sp, #0]
 800eae8:	930c      	str	r3, [sp, #48]	; 0x30
 800eaea:	ec41 0b18 	vmov	d8, r0, r1
 800eaee:	4639      	mov	r1, r7
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7f2 f831 	bl	8000b58 <__aeabi_d2iz>
 800eaf6:	9011      	str	r0, [sp, #68]	; 0x44
 800eaf8:	f7f1 fd14 	bl	8000524 <__aeabi_i2d>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f1 fbc0 	bl	8000288 <__aeabi_dsub>
 800eb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb0a:	3330      	adds	r3, #48	; 0x30
 800eb0c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb10:	9b02      	ldr	r3, [sp, #8]
 800eb12:	429d      	cmp	r5, r3
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	f04f 0200 	mov.w	r2, #0
 800eb1c:	d134      	bne.n	800eb88 <_dtoa_r+0x660>
 800eb1e:	4b19      	ldr	r3, [pc, #100]	; (800eb84 <_dtoa_r+0x65c>)
 800eb20:	ec51 0b18 	vmov	r0, r1, d8
 800eb24:	f7f1 fbb2 	bl	800028c <__adddf3>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	f7f1 fff2 	bl	8000b18 <__aeabi_dcmpgt>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d175      	bne.n	800ec24 <_dtoa_r+0x6fc>
 800eb38:	ec53 2b18 	vmov	r2, r3, d8
 800eb3c:	4911      	ldr	r1, [pc, #68]	; (800eb84 <_dtoa_r+0x65c>)
 800eb3e:	2000      	movs	r0, #0
 800eb40:	f7f1 fba2 	bl	8000288 <__aeabi_dsub>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4630      	mov	r0, r6
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	f7f1 ffc6 	bl	8000adc <__aeabi_dcmplt>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	f43f af27 	beq.w	800e9a4 <_dtoa_r+0x47c>
 800eb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb58:	1e6b      	subs	r3, r5, #1
 800eb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb60:	2b30      	cmp	r3, #48	; 0x30
 800eb62:	d0f8      	beq.n	800eb56 <_dtoa_r+0x62e>
 800eb64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eb68:	e04a      	b.n	800ec00 <_dtoa_r+0x6d8>
 800eb6a:	bf00      	nop
 800eb6c:	080114d8 	.word	0x080114d8
 800eb70:	080114b0 	.word	0x080114b0
 800eb74:	3ff00000 	.word	0x3ff00000
 800eb78:	40240000 	.word	0x40240000
 800eb7c:	401c0000 	.word	0x401c0000
 800eb80:	40140000 	.word	0x40140000
 800eb84:	3fe00000 	.word	0x3fe00000
 800eb88:	4baf      	ldr	r3, [pc, #700]	; (800ee48 <_dtoa_r+0x920>)
 800eb8a:	f7f1 fd35 	bl	80005f8 <__aeabi_dmul>
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	e7ac      	b.n	800eaee <_dtoa_r+0x5c6>
 800eb94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb98:	9d00      	ldr	r5, [sp, #0]
 800eb9a:	4642      	mov	r2, r8
 800eb9c:	464b      	mov	r3, r9
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fe53 	bl	800084c <__aeabi_ddiv>
 800eba6:	f7f1 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800ebaa:	9002      	str	r0, [sp, #8]
 800ebac:	f7f1 fcba 	bl	8000524 <__aeabi_i2d>
 800ebb0:	4642      	mov	r2, r8
 800ebb2:	464b      	mov	r3, r9
 800ebb4:	f7f1 fd20 	bl	80005f8 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 fb62 	bl	8000288 <__aeabi_dsub>
 800ebc4:	9e02      	ldr	r6, [sp, #8]
 800ebc6:	9f01      	ldr	r7, [sp, #4]
 800ebc8:	3630      	adds	r6, #48	; 0x30
 800ebca:	f805 6b01 	strb.w	r6, [r5], #1
 800ebce:	9e00      	ldr	r6, [sp, #0]
 800ebd0:	1bae      	subs	r6, r5, r6
 800ebd2:	42b7      	cmp	r7, r6
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	d137      	bne.n	800ec4a <_dtoa_r+0x722>
 800ebda:	f7f1 fb57 	bl	800028c <__adddf3>
 800ebde:	4642      	mov	r2, r8
 800ebe0:	464b      	mov	r3, r9
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	f7f1 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800ebea:	b9c8      	cbnz	r0, 800ec20 <_dtoa_r+0x6f8>
 800ebec:	4642      	mov	r2, r8
 800ebee:	464b      	mov	r3, r9
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebf8:	b110      	cbz	r0, 800ec00 <_dtoa_r+0x6d8>
 800ebfa:	9b02      	ldr	r3, [sp, #8]
 800ebfc:	07d9      	lsls	r1, r3, #31
 800ebfe:	d40f      	bmi.n	800ec20 <_dtoa_r+0x6f8>
 800ec00:	4620      	mov	r0, r4
 800ec02:	4659      	mov	r1, fp
 800ec04:	f000 fe5c 	bl	800f8c0 <_Bfree>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	702b      	strb	r3, [r5, #0]
 800ec0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec0e:	f10a 0001 	add.w	r0, sl, #1
 800ec12:	6018      	str	r0, [r3, #0]
 800ec14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f43f acd8 	beq.w	800e5cc <_dtoa_r+0xa4>
 800ec1c:	601d      	str	r5, [r3, #0]
 800ec1e:	e4d5      	b.n	800e5cc <_dtoa_r+0xa4>
 800ec20:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec24:	462b      	mov	r3, r5
 800ec26:	461d      	mov	r5, r3
 800ec28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec2c:	2a39      	cmp	r2, #57	; 0x39
 800ec2e:	d108      	bne.n	800ec42 <_dtoa_r+0x71a>
 800ec30:	9a00      	ldr	r2, [sp, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d1f7      	bne.n	800ec26 <_dtoa_r+0x6fe>
 800ec36:	9a07      	ldr	r2, [sp, #28]
 800ec38:	9900      	ldr	r1, [sp, #0]
 800ec3a:	3201      	adds	r2, #1
 800ec3c:	9207      	str	r2, [sp, #28]
 800ec3e:	2230      	movs	r2, #48	; 0x30
 800ec40:	700a      	strb	r2, [r1, #0]
 800ec42:	781a      	ldrb	r2, [r3, #0]
 800ec44:	3201      	adds	r2, #1
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	e78c      	b.n	800eb64 <_dtoa_r+0x63c>
 800ec4a:	4b7f      	ldr	r3, [pc, #508]	; (800ee48 <_dtoa_r+0x920>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f7f1 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ec52:	2200      	movs	r2, #0
 800ec54:	2300      	movs	r3, #0
 800ec56:	4606      	mov	r6, r0
 800ec58:	460f      	mov	r7, r1
 800ec5a:	f7f1 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d09b      	beq.n	800eb9a <_dtoa_r+0x672>
 800ec62:	e7cd      	b.n	800ec00 <_dtoa_r+0x6d8>
 800ec64:	9a08      	ldr	r2, [sp, #32]
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	f000 80c4 	beq.w	800edf4 <_dtoa_r+0x8cc>
 800ec6c:	9a05      	ldr	r2, [sp, #20]
 800ec6e:	2a01      	cmp	r2, #1
 800ec70:	f300 80a8 	bgt.w	800edc4 <_dtoa_r+0x89c>
 800ec74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec76:	2a00      	cmp	r2, #0
 800ec78:	f000 80a0 	beq.w	800edbc <_dtoa_r+0x894>
 800ec7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec80:	9e06      	ldr	r6, [sp, #24]
 800ec82:	4645      	mov	r5, r8
 800ec84:	9a04      	ldr	r2, [sp, #16]
 800ec86:	2101      	movs	r1, #1
 800ec88:	441a      	add	r2, r3
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	4498      	add	r8, r3
 800ec8e:	9204      	str	r2, [sp, #16]
 800ec90:	f000 ff1c 	bl	800facc <__i2b>
 800ec94:	4607      	mov	r7, r0
 800ec96:	2d00      	cmp	r5, #0
 800ec98:	dd0b      	ble.n	800ecb2 <_dtoa_r+0x78a>
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dd08      	ble.n	800ecb2 <_dtoa_r+0x78a>
 800eca0:	42ab      	cmp	r3, r5
 800eca2:	9a04      	ldr	r2, [sp, #16]
 800eca4:	bfa8      	it	ge
 800eca6:	462b      	movge	r3, r5
 800eca8:	eba8 0803 	sub.w	r8, r8, r3
 800ecac:	1aed      	subs	r5, r5, r3
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	9304      	str	r3, [sp, #16]
 800ecb2:	9b06      	ldr	r3, [sp, #24]
 800ecb4:	b1fb      	cbz	r3, 800ecf6 <_dtoa_r+0x7ce>
 800ecb6:	9b08      	ldr	r3, [sp, #32]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 809f 	beq.w	800edfc <_dtoa_r+0x8d4>
 800ecbe:	2e00      	cmp	r6, #0
 800ecc0:	dd11      	ble.n	800ece6 <_dtoa_r+0x7be>
 800ecc2:	4639      	mov	r1, r7
 800ecc4:	4632      	mov	r2, r6
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 ffbc 	bl	800fc44 <__pow5mult>
 800eccc:	465a      	mov	r2, fp
 800ecce:	4601      	mov	r1, r0
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 ff10 	bl	800faf8 <__multiply>
 800ecd8:	4659      	mov	r1, fp
 800ecda:	9007      	str	r0, [sp, #28]
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 fdef 	bl	800f8c0 <_Bfree>
 800ece2:	9b07      	ldr	r3, [sp, #28]
 800ece4:	469b      	mov	fp, r3
 800ece6:	9b06      	ldr	r3, [sp, #24]
 800ece8:	1b9a      	subs	r2, r3, r6
 800ecea:	d004      	beq.n	800ecf6 <_dtoa_r+0x7ce>
 800ecec:	4659      	mov	r1, fp
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 ffa8 	bl	800fc44 <__pow5mult>
 800ecf4:	4683      	mov	fp, r0
 800ecf6:	2101      	movs	r1, #1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fee7 	bl	800facc <__i2b>
 800ecfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	4606      	mov	r6, r0
 800ed04:	dd7c      	ble.n	800ee00 <_dtoa_r+0x8d8>
 800ed06:	461a      	mov	r2, r3
 800ed08:	4601      	mov	r1, r0
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 ff9a 	bl	800fc44 <__pow5mult>
 800ed10:	9b05      	ldr	r3, [sp, #20]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	4606      	mov	r6, r0
 800ed16:	dd76      	ble.n	800ee06 <_dtoa_r+0x8de>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	9306      	str	r3, [sp, #24]
 800ed1c:	6933      	ldr	r3, [r6, #16]
 800ed1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed22:	6918      	ldr	r0, [r3, #16]
 800ed24:	f000 fe82 	bl	800fa2c <__hi0bits>
 800ed28:	f1c0 0020 	rsb	r0, r0, #32
 800ed2c:	9b04      	ldr	r3, [sp, #16]
 800ed2e:	4418      	add	r0, r3
 800ed30:	f010 001f 	ands.w	r0, r0, #31
 800ed34:	f000 8086 	beq.w	800ee44 <_dtoa_r+0x91c>
 800ed38:	f1c0 0320 	rsb	r3, r0, #32
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	dd7f      	ble.n	800ee40 <_dtoa_r+0x918>
 800ed40:	f1c0 001c 	rsb	r0, r0, #28
 800ed44:	9b04      	ldr	r3, [sp, #16]
 800ed46:	4403      	add	r3, r0
 800ed48:	4480      	add	r8, r0
 800ed4a:	4405      	add	r5, r0
 800ed4c:	9304      	str	r3, [sp, #16]
 800ed4e:	f1b8 0f00 	cmp.w	r8, #0
 800ed52:	dd05      	ble.n	800ed60 <_dtoa_r+0x838>
 800ed54:	4659      	mov	r1, fp
 800ed56:	4642      	mov	r2, r8
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 ffcd 	bl	800fcf8 <__lshift>
 800ed5e:	4683      	mov	fp, r0
 800ed60:	9b04      	ldr	r3, [sp, #16]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dd05      	ble.n	800ed72 <_dtoa_r+0x84a>
 800ed66:	4631      	mov	r1, r6
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 ffc4 	bl	800fcf8 <__lshift>
 800ed70:	4606      	mov	r6, r0
 800ed72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d069      	beq.n	800ee4c <_dtoa_r+0x924>
 800ed78:	4631      	mov	r1, r6
 800ed7a:	4658      	mov	r0, fp
 800ed7c:	f001 f828 	bl	800fdd0 <__mcmp>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	da63      	bge.n	800ee4c <_dtoa_r+0x924>
 800ed84:	2300      	movs	r3, #0
 800ed86:	4659      	mov	r1, fp
 800ed88:	220a      	movs	r2, #10
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 fdba 	bl	800f904 <__multadd>
 800ed90:	9b08      	ldr	r3, [sp, #32]
 800ed92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed96:	4683      	mov	fp, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 818f 	beq.w	800f0bc <_dtoa_r+0xb94>
 800ed9e:	4639      	mov	r1, r7
 800eda0:	2300      	movs	r3, #0
 800eda2:	220a      	movs	r2, #10
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fdad 	bl	800f904 <__multadd>
 800edaa:	f1b9 0f00 	cmp.w	r9, #0
 800edae:	4607      	mov	r7, r0
 800edb0:	f300 808e 	bgt.w	800eed0 <_dtoa_r+0x9a8>
 800edb4:	9b05      	ldr	r3, [sp, #20]
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	dc50      	bgt.n	800ee5c <_dtoa_r+0x934>
 800edba:	e089      	b.n	800eed0 <_dtoa_r+0x9a8>
 800edbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800edc2:	e75d      	b.n	800ec80 <_dtoa_r+0x758>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	1e5e      	subs	r6, r3, #1
 800edc8:	9b06      	ldr	r3, [sp, #24]
 800edca:	42b3      	cmp	r3, r6
 800edcc:	bfbf      	itttt	lt
 800edce:	9b06      	ldrlt	r3, [sp, #24]
 800edd0:	9606      	strlt	r6, [sp, #24]
 800edd2:	1af2      	sublt	r2, r6, r3
 800edd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800edd6:	bfb6      	itet	lt
 800edd8:	189b      	addlt	r3, r3, r2
 800edda:	1b9e      	subge	r6, r3, r6
 800eddc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800edde:	9b01      	ldr	r3, [sp, #4]
 800ede0:	bfb8      	it	lt
 800ede2:	2600      	movlt	r6, #0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bfb5      	itete	lt
 800ede8:	eba8 0503 	sublt.w	r5, r8, r3
 800edec:	9b01      	ldrge	r3, [sp, #4]
 800edee:	2300      	movlt	r3, #0
 800edf0:	4645      	movge	r5, r8
 800edf2:	e747      	b.n	800ec84 <_dtoa_r+0x75c>
 800edf4:	9e06      	ldr	r6, [sp, #24]
 800edf6:	9f08      	ldr	r7, [sp, #32]
 800edf8:	4645      	mov	r5, r8
 800edfa:	e74c      	b.n	800ec96 <_dtoa_r+0x76e>
 800edfc:	9a06      	ldr	r2, [sp, #24]
 800edfe:	e775      	b.n	800ecec <_dtoa_r+0x7c4>
 800ee00:	9b05      	ldr	r3, [sp, #20]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	dc18      	bgt.n	800ee38 <_dtoa_r+0x910>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	b9b3      	cbnz	r3, 800ee38 <_dtoa_r+0x910>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee10:	b9a3      	cbnz	r3, 800ee3c <_dtoa_r+0x914>
 800ee12:	9b03      	ldr	r3, [sp, #12]
 800ee14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee18:	0d1b      	lsrs	r3, r3, #20
 800ee1a:	051b      	lsls	r3, r3, #20
 800ee1c:	b12b      	cbz	r3, 800ee2a <_dtoa_r+0x902>
 800ee1e:	9b04      	ldr	r3, [sp, #16]
 800ee20:	3301      	adds	r3, #1
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	f108 0801 	add.w	r8, r8, #1
 800ee28:	2301      	movs	r3, #1
 800ee2a:	9306      	str	r3, [sp, #24]
 800ee2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f47f af74 	bne.w	800ed1c <_dtoa_r+0x7f4>
 800ee34:	2001      	movs	r0, #1
 800ee36:	e779      	b.n	800ed2c <_dtoa_r+0x804>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e7f6      	b.n	800ee2a <_dtoa_r+0x902>
 800ee3c:	9b02      	ldr	r3, [sp, #8]
 800ee3e:	e7f4      	b.n	800ee2a <_dtoa_r+0x902>
 800ee40:	d085      	beq.n	800ed4e <_dtoa_r+0x826>
 800ee42:	4618      	mov	r0, r3
 800ee44:	301c      	adds	r0, #28
 800ee46:	e77d      	b.n	800ed44 <_dtoa_r+0x81c>
 800ee48:	40240000 	.word	0x40240000
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	dc38      	bgt.n	800eec4 <_dtoa_r+0x99c>
 800ee52:	9b05      	ldr	r3, [sp, #20]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	dd35      	ble.n	800eec4 <_dtoa_r+0x99c>
 800ee58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee5c:	f1b9 0f00 	cmp.w	r9, #0
 800ee60:	d10d      	bne.n	800ee7e <_dtoa_r+0x956>
 800ee62:	4631      	mov	r1, r6
 800ee64:	464b      	mov	r3, r9
 800ee66:	2205      	movs	r2, #5
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f000 fd4b 	bl	800f904 <__multadd>
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4606      	mov	r6, r0
 800ee72:	4658      	mov	r0, fp
 800ee74:	f000 ffac 	bl	800fdd0 <__mcmp>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f73f adbd 	bgt.w	800e9f8 <_dtoa_r+0x4d0>
 800ee7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee80:	9d00      	ldr	r5, [sp, #0]
 800ee82:	ea6f 0a03 	mvn.w	sl, r3
 800ee86:	f04f 0800 	mov.w	r8, #0
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fd17 	bl	800f8c0 <_Bfree>
 800ee92:	2f00      	cmp	r7, #0
 800ee94:	f43f aeb4 	beq.w	800ec00 <_dtoa_r+0x6d8>
 800ee98:	f1b8 0f00 	cmp.w	r8, #0
 800ee9c:	d005      	beq.n	800eeaa <_dtoa_r+0x982>
 800ee9e:	45b8      	cmp	r8, r7
 800eea0:	d003      	beq.n	800eeaa <_dtoa_r+0x982>
 800eea2:	4641      	mov	r1, r8
 800eea4:	4620      	mov	r0, r4
 800eea6:	f000 fd0b 	bl	800f8c0 <_Bfree>
 800eeaa:	4639      	mov	r1, r7
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fd07 	bl	800f8c0 <_Bfree>
 800eeb2:	e6a5      	b.n	800ec00 <_dtoa_r+0x6d8>
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	4637      	mov	r7, r6
 800eeb8:	e7e1      	b.n	800ee7e <_dtoa_r+0x956>
 800eeba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eebc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eec0:	4637      	mov	r7, r6
 800eec2:	e599      	b.n	800e9f8 <_dtoa_r+0x4d0>
 800eec4:	9b08      	ldr	r3, [sp, #32]
 800eec6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 80fd 	beq.w	800f0ca <_dtoa_r+0xba2>
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	dd05      	ble.n	800eee0 <_dtoa_r+0x9b8>
 800eed4:	4639      	mov	r1, r7
 800eed6:	462a      	mov	r2, r5
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 ff0d 	bl	800fcf8 <__lshift>
 800eede:	4607      	mov	r7, r0
 800eee0:	9b06      	ldr	r3, [sp, #24]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d05c      	beq.n	800efa0 <_dtoa_r+0xa78>
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fca9 	bl	800f840 <_Balloc>
 800eeee:	4605      	mov	r5, r0
 800eef0:	b928      	cbnz	r0, 800eefe <_dtoa_r+0x9d6>
 800eef2:	4b80      	ldr	r3, [pc, #512]	; (800f0f4 <_dtoa_r+0xbcc>)
 800eef4:	4602      	mov	r2, r0
 800eef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eefa:	f7ff bb2e 	b.w	800e55a <_dtoa_r+0x32>
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	3202      	adds	r2, #2
 800ef02:	0092      	lsls	r2, r2, #2
 800ef04:	f107 010c 	add.w	r1, r7, #12
 800ef08:	300c      	adds	r0, #12
 800ef0a:	f000 fc7f 	bl	800f80c <memcpy>
 800ef0e:	2201      	movs	r2, #1
 800ef10:	4629      	mov	r1, r5
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 fef0 	bl	800fcf8 <__lshift>
 800ef18:	9b00      	ldr	r3, [sp, #0]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	9301      	str	r3, [sp, #4]
 800ef1e:	9b00      	ldr	r3, [sp, #0]
 800ef20:	444b      	add	r3, r9
 800ef22:	9307      	str	r3, [sp, #28]
 800ef24:	9b02      	ldr	r3, [sp, #8]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	46b8      	mov	r8, r7
 800ef2c:	9306      	str	r3, [sp, #24]
 800ef2e:	4607      	mov	r7, r0
 800ef30:	9b01      	ldr	r3, [sp, #4]
 800ef32:	4631      	mov	r1, r6
 800ef34:	3b01      	subs	r3, #1
 800ef36:	4658      	mov	r0, fp
 800ef38:	9302      	str	r3, [sp, #8]
 800ef3a:	f7ff fa67 	bl	800e40c <quorem>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	3330      	adds	r3, #48	; 0x30
 800ef42:	9004      	str	r0, [sp, #16]
 800ef44:	4641      	mov	r1, r8
 800ef46:	4658      	mov	r0, fp
 800ef48:	9308      	str	r3, [sp, #32]
 800ef4a:	f000 ff41 	bl	800fdd0 <__mcmp>
 800ef4e:	463a      	mov	r2, r7
 800ef50:	4681      	mov	r9, r0
 800ef52:	4631      	mov	r1, r6
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 ff57 	bl	800fe08 <__mdiff>
 800ef5a:	68c2      	ldr	r2, [r0, #12]
 800ef5c:	9b08      	ldr	r3, [sp, #32]
 800ef5e:	4605      	mov	r5, r0
 800ef60:	bb02      	cbnz	r2, 800efa4 <_dtoa_r+0xa7c>
 800ef62:	4601      	mov	r1, r0
 800ef64:	4658      	mov	r0, fp
 800ef66:	f000 ff33 	bl	800fdd0 <__mcmp>
 800ef6a:	9b08      	ldr	r3, [sp, #32]
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4620      	mov	r0, r4
 800ef72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ef76:	f000 fca3 	bl	800f8c0 <_Bfree>
 800ef7a:	9b05      	ldr	r3, [sp, #20]
 800ef7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef7e:	9d01      	ldr	r5, [sp, #4]
 800ef80:	ea43 0102 	orr.w	r1, r3, r2
 800ef84:	9b06      	ldr	r3, [sp, #24]
 800ef86:	430b      	orrs	r3, r1
 800ef88:	9b08      	ldr	r3, [sp, #32]
 800ef8a:	d10d      	bne.n	800efa8 <_dtoa_r+0xa80>
 800ef8c:	2b39      	cmp	r3, #57	; 0x39
 800ef8e:	d029      	beq.n	800efe4 <_dtoa_r+0xabc>
 800ef90:	f1b9 0f00 	cmp.w	r9, #0
 800ef94:	dd01      	ble.n	800ef9a <_dtoa_r+0xa72>
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	3331      	adds	r3, #49	; 0x31
 800ef9a:	9a02      	ldr	r2, [sp, #8]
 800ef9c:	7013      	strb	r3, [r2, #0]
 800ef9e:	e774      	b.n	800ee8a <_dtoa_r+0x962>
 800efa0:	4638      	mov	r0, r7
 800efa2:	e7b9      	b.n	800ef18 <_dtoa_r+0x9f0>
 800efa4:	2201      	movs	r2, #1
 800efa6:	e7e2      	b.n	800ef6e <_dtoa_r+0xa46>
 800efa8:	f1b9 0f00 	cmp.w	r9, #0
 800efac:	db06      	blt.n	800efbc <_dtoa_r+0xa94>
 800efae:	9905      	ldr	r1, [sp, #20]
 800efb0:	ea41 0909 	orr.w	r9, r1, r9
 800efb4:	9906      	ldr	r1, [sp, #24]
 800efb6:	ea59 0101 	orrs.w	r1, r9, r1
 800efba:	d120      	bne.n	800effe <_dtoa_r+0xad6>
 800efbc:	2a00      	cmp	r2, #0
 800efbe:	ddec      	ble.n	800ef9a <_dtoa_r+0xa72>
 800efc0:	4659      	mov	r1, fp
 800efc2:	2201      	movs	r2, #1
 800efc4:	4620      	mov	r0, r4
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	f000 fe96 	bl	800fcf8 <__lshift>
 800efcc:	4631      	mov	r1, r6
 800efce:	4683      	mov	fp, r0
 800efd0:	f000 fefe 	bl	800fdd0 <__mcmp>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	9b01      	ldr	r3, [sp, #4]
 800efd8:	dc02      	bgt.n	800efe0 <_dtoa_r+0xab8>
 800efda:	d1de      	bne.n	800ef9a <_dtoa_r+0xa72>
 800efdc:	07da      	lsls	r2, r3, #31
 800efde:	d5dc      	bpl.n	800ef9a <_dtoa_r+0xa72>
 800efe0:	2b39      	cmp	r3, #57	; 0x39
 800efe2:	d1d8      	bne.n	800ef96 <_dtoa_r+0xa6e>
 800efe4:	9a02      	ldr	r2, [sp, #8]
 800efe6:	2339      	movs	r3, #57	; 0x39
 800efe8:	7013      	strb	r3, [r2, #0]
 800efea:	462b      	mov	r3, r5
 800efec:	461d      	mov	r5, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eff4:	2a39      	cmp	r2, #57	; 0x39
 800eff6:	d050      	beq.n	800f09a <_dtoa_r+0xb72>
 800eff8:	3201      	adds	r2, #1
 800effa:	701a      	strb	r2, [r3, #0]
 800effc:	e745      	b.n	800ee8a <_dtoa_r+0x962>
 800effe:	2a00      	cmp	r2, #0
 800f000:	dd03      	ble.n	800f00a <_dtoa_r+0xae2>
 800f002:	2b39      	cmp	r3, #57	; 0x39
 800f004:	d0ee      	beq.n	800efe4 <_dtoa_r+0xabc>
 800f006:	3301      	adds	r3, #1
 800f008:	e7c7      	b.n	800ef9a <_dtoa_r+0xa72>
 800f00a:	9a01      	ldr	r2, [sp, #4]
 800f00c:	9907      	ldr	r1, [sp, #28]
 800f00e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f012:	428a      	cmp	r2, r1
 800f014:	d02a      	beq.n	800f06c <_dtoa_r+0xb44>
 800f016:	4659      	mov	r1, fp
 800f018:	2300      	movs	r3, #0
 800f01a:	220a      	movs	r2, #10
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 fc71 	bl	800f904 <__multadd>
 800f022:	45b8      	cmp	r8, r7
 800f024:	4683      	mov	fp, r0
 800f026:	f04f 0300 	mov.w	r3, #0
 800f02a:	f04f 020a 	mov.w	r2, #10
 800f02e:	4641      	mov	r1, r8
 800f030:	4620      	mov	r0, r4
 800f032:	d107      	bne.n	800f044 <_dtoa_r+0xb1c>
 800f034:	f000 fc66 	bl	800f904 <__multadd>
 800f038:	4680      	mov	r8, r0
 800f03a:	4607      	mov	r7, r0
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	3301      	adds	r3, #1
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	e775      	b.n	800ef30 <_dtoa_r+0xa08>
 800f044:	f000 fc5e 	bl	800f904 <__multadd>
 800f048:	4639      	mov	r1, r7
 800f04a:	4680      	mov	r8, r0
 800f04c:	2300      	movs	r3, #0
 800f04e:	220a      	movs	r2, #10
 800f050:	4620      	mov	r0, r4
 800f052:	f000 fc57 	bl	800f904 <__multadd>
 800f056:	4607      	mov	r7, r0
 800f058:	e7f0      	b.n	800f03c <_dtoa_r+0xb14>
 800f05a:	f1b9 0f00 	cmp.w	r9, #0
 800f05e:	9a00      	ldr	r2, [sp, #0]
 800f060:	bfcc      	ite	gt
 800f062:	464d      	movgt	r5, r9
 800f064:	2501      	movle	r5, #1
 800f066:	4415      	add	r5, r2
 800f068:	f04f 0800 	mov.w	r8, #0
 800f06c:	4659      	mov	r1, fp
 800f06e:	2201      	movs	r2, #1
 800f070:	4620      	mov	r0, r4
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	f000 fe40 	bl	800fcf8 <__lshift>
 800f078:	4631      	mov	r1, r6
 800f07a:	4683      	mov	fp, r0
 800f07c:	f000 fea8 	bl	800fdd0 <__mcmp>
 800f080:	2800      	cmp	r0, #0
 800f082:	dcb2      	bgt.n	800efea <_dtoa_r+0xac2>
 800f084:	d102      	bne.n	800f08c <_dtoa_r+0xb64>
 800f086:	9b01      	ldr	r3, [sp, #4]
 800f088:	07db      	lsls	r3, r3, #31
 800f08a:	d4ae      	bmi.n	800efea <_dtoa_r+0xac2>
 800f08c:	462b      	mov	r3, r5
 800f08e:	461d      	mov	r5, r3
 800f090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f094:	2a30      	cmp	r2, #48	; 0x30
 800f096:	d0fa      	beq.n	800f08e <_dtoa_r+0xb66>
 800f098:	e6f7      	b.n	800ee8a <_dtoa_r+0x962>
 800f09a:	9a00      	ldr	r2, [sp, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d1a5      	bne.n	800efec <_dtoa_r+0xac4>
 800f0a0:	f10a 0a01 	add.w	sl, sl, #1
 800f0a4:	2331      	movs	r3, #49	; 0x31
 800f0a6:	e779      	b.n	800ef9c <_dtoa_r+0xa74>
 800f0a8:	4b13      	ldr	r3, [pc, #76]	; (800f0f8 <_dtoa_r+0xbd0>)
 800f0aa:	f7ff baaf 	b.w	800e60c <_dtoa_r+0xe4>
 800f0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f47f aa86 	bne.w	800e5c2 <_dtoa_r+0x9a>
 800f0b6:	4b11      	ldr	r3, [pc, #68]	; (800f0fc <_dtoa_r+0xbd4>)
 800f0b8:	f7ff baa8 	b.w	800e60c <_dtoa_r+0xe4>
 800f0bc:	f1b9 0f00 	cmp.w	r9, #0
 800f0c0:	dc03      	bgt.n	800f0ca <_dtoa_r+0xba2>
 800f0c2:	9b05      	ldr	r3, [sp, #20]
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	f73f aec9 	bgt.w	800ee5c <_dtoa_r+0x934>
 800f0ca:	9d00      	ldr	r5, [sp, #0]
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4658      	mov	r0, fp
 800f0d0:	f7ff f99c 	bl	800e40c <quorem>
 800f0d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f0d8:	f805 3b01 	strb.w	r3, [r5], #1
 800f0dc:	9a00      	ldr	r2, [sp, #0]
 800f0de:	1aaa      	subs	r2, r5, r2
 800f0e0:	4591      	cmp	r9, r2
 800f0e2:	ddba      	ble.n	800f05a <_dtoa_r+0xb32>
 800f0e4:	4659      	mov	r1, fp
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	220a      	movs	r2, #10
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f000 fc0a 	bl	800f904 <__multadd>
 800f0f0:	4683      	mov	fp, r0
 800f0f2:	e7eb      	b.n	800f0cc <_dtoa_r+0xba4>
 800f0f4:	080113bb 	.word	0x080113bb
 800f0f8:	080112c4 	.word	0x080112c4
 800f0fc:	08011338 	.word	0x08011338

0800f100 <rshift>:
 800f100:	6903      	ldr	r3, [r0, #16]
 800f102:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f10a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f10e:	f100 0414 	add.w	r4, r0, #20
 800f112:	dd45      	ble.n	800f1a0 <rshift+0xa0>
 800f114:	f011 011f 	ands.w	r1, r1, #31
 800f118:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f11c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f120:	d10c      	bne.n	800f13c <rshift+0x3c>
 800f122:	f100 0710 	add.w	r7, r0, #16
 800f126:	4629      	mov	r1, r5
 800f128:	42b1      	cmp	r1, r6
 800f12a:	d334      	bcc.n	800f196 <rshift+0x96>
 800f12c:	1a9b      	subs	r3, r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	1eea      	subs	r2, r5, #3
 800f132:	4296      	cmp	r6, r2
 800f134:	bf38      	it	cc
 800f136:	2300      	movcc	r3, #0
 800f138:	4423      	add	r3, r4
 800f13a:	e015      	b.n	800f168 <rshift+0x68>
 800f13c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f140:	f1c1 0820 	rsb	r8, r1, #32
 800f144:	40cf      	lsrs	r7, r1
 800f146:	f105 0e04 	add.w	lr, r5, #4
 800f14a:	46a1      	mov	r9, r4
 800f14c:	4576      	cmp	r6, lr
 800f14e:	46f4      	mov	ip, lr
 800f150:	d815      	bhi.n	800f17e <rshift+0x7e>
 800f152:	1a9b      	subs	r3, r3, r2
 800f154:	009a      	lsls	r2, r3, #2
 800f156:	3a04      	subs	r2, #4
 800f158:	3501      	adds	r5, #1
 800f15a:	42ae      	cmp	r6, r5
 800f15c:	bf38      	it	cc
 800f15e:	2200      	movcc	r2, #0
 800f160:	18a3      	adds	r3, r4, r2
 800f162:	50a7      	str	r7, [r4, r2]
 800f164:	b107      	cbz	r7, 800f168 <rshift+0x68>
 800f166:	3304      	adds	r3, #4
 800f168:	1b1a      	subs	r2, r3, r4
 800f16a:	42a3      	cmp	r3, r4
 800f16c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f170:	bf08      	it	eq
 800f172:	2300      	moveq	r3, #0
 800f174:	6102      	str	r2, [r0, #16]
 800f176:	bf08      	it	eq
 800f178:	6143      	streq	r3, [r0, #20]
 800f17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f17e:	f8dc c000 	ldr.w	ip, [ip]
 800f182:	fa0c fc08 	lsl.w	ip, ip, r8
 800f186:	ea4c 0707 	orr.w	r7, ip, r7
 800f18a:	f849 7b04 	str.w	r7, [r9], #4
 800f18e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f192:	40cf      	lsrs	r7, r1
 800f194:	e7da      	b.n	800f14c <rshift+0x4c>
 800f196:	f851 cb04 	ldr.w	ip, [r1], #4
 800f19a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f19e:	e7c3      	b.n	800f128 <rshift+0x28>
 800f1a0:	4623      	mov	r3, r4
 800f1a2:	e7e1      	b.n	800f168 <rshift+0x68>

0800f1a4 <__hexdig_fun>:
 800f1a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	d802      	bhi.n	800f1b2 <__hexdig_fun+0xe>
 800f1ac:	3820      	subs	r0, #32
 800f1ae:	b2c0      	uxtb	r0, r0
 800f1b0:	4770      	bx	lr
 800f1b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f1b6:	2b05      	cmp	r3, #5
 800f1b8:	d801      	bhi.n	800f1be <__hexdig_fun+0x1a>
 800f1ba:	3847      	subs	r0, #71	; 0x47
 800f1bc:	e7f7      	b.n	800f1ae <__hexdig_fun+0xa>
 800f1be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f1c2:	2b05      	cmp	r3, #5
 800f1c4:	d801      	bhi.n	800f1ca <__hexdig_fun+0x26>
 800f1c6:	3827      	subs	r0, #39	; 0x27
 800f1c8:	e7f1      	b.n	800f1ae <__hexdig_fun+0xa>
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	4770      	bx	lr
	...

0800f1d0 <__gethex>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	ed2d 8b02 	vpush	{d8}
 800f1d8:	b089      	sub	sp, #36	; 0x24
 800f1da:	ee08 0a10 	vmov	s16, r0
 800f1de:	9304      	str	r3, [sp, #16]
 800f1e0:	4bbc      	ldr	r3, [pc, #752]	; (800f4d4 <__gethex+0x304>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	468b      	mov	fp, r1
 800f1ea:	4690      	mov	r8, r2
 800f1ec:	f7f0 fff0 	bl	80001d0 <strlen>
 800f1f0:	9b01      	ldr	r3, [sp, #4]
 800f1f2:	f8db 2000 	ldr.w	r2, [fp]
 800f1f6:	4403      	add	r3, r0
 800f1f8:	4682      	mov	sl, r0
 800f1fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f1fe:	9305      	str	r3, [sp, #20]
 800f200:	1c93      	adds	r3, r2, #2
 800f202:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f206:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f20a:	32fe      	adds	r2, #254	; 0xfe
 800f20c:	18d1      	adds	r1, r2, r3
 800f20e:	461f      	mov	r7, r3
 800f210:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f214:	9100      	str	r1, [sp, #0]
 800f216:	2830      	cmp	r0, #48	; 0x30
 800f218:	d0f8      	beq.n	800f20c <__gethex+0x3c>
 800f21a:	f7ff ffc3 	bl	800f1a4 <__hexdig_fun>
 800f21e:	4604      	mov	r4, r0
 800f220:	2800      	cmp	r0, #0
 800f222:	d13a      	bne.n	800f29a <__gethex+0xca>
 800f224:	9901      	ldr	r1, [sp, #4]
 800f226:	4652      	mov	r2, sl
 800f228:	4638      	mov	r0, r7
 800f22a:	f7fe faa9 	bl	800d780 <strncmp>
 800f22e:	4605      	mov	r5, r0
 800f230:	2800      	cmp	r0, #0
 800f232:	d168      	bne.n	800f306 <__gethex+0x136>
 800f234:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f238:	eb07 060a 	add.w	r6, r7, sl
 800f23c:	f7ff ffb2 	bl	800f1a4 <__hexdig_fun>
 800f240:	2800      	cmp	r0, #0
 800f242:	d062      	beq.n	800f30a <__gethex+0x13a>
 800f244:	4633      	mov	r3, r6
 800f246:	7818      	ldrb	r0, [r3, #0]
 800f248:	2830      	cmp	r0, #48	; 0x30
 800f24a:	461f      	mov	r7, r3
 800f24c:	f103 0301 	add.w	r3, r3, #1
 800f250:	d0f9      	beq.n	800f246 <__gethex+0x76>
 800f252:	f7ff ffa7 	bl	800f1a4 <__hexdig_fun>
 800f256:	2301      	movs	r3, #1
 800f258:	fab0 f480 	clz	r4, r0
 800f25c:	0964      	lsrs	r4, r4, #5
 800f25e:	4635      	mov	r5, r6
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	463a      	mov	r2, r7
 800f264:	4616      	mov	r6, r2
 800f266:	3201      	adds	r2, #1
 800f268:	7830      	ldrb	r0, [r6, #0]
 800f26a:	f7ff ff9b 	bl	800f1a4 <__hexdig_fun>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d1f8      	bne.n	800f264 <__gethex+0x94>
 800f272:	9901      	ldr	r1, [sp, #4]
 800f274:	4652      	mov	r2, sl
 800f276:	4630      	mov	r0, r6
 800f278:	f7fe fa82 	bl	800d780 <strncmp>
 800f27c:	b980      	cbnz	r0, 800f2a0 <__gethex+0xd0>
 800f27e:	b94d      	cbnz	r5, 800f294 <__gethex+0xc4>
 800f280:	eb06 050a 	add.w	r5, r6, sl
 800f284:	462a      	mov	r2, r5
 800f286:	4616      	mov	r6, r2
 800f288:	3201      	adds	r2, #1
 800f28a:	7830      	ldrb	r0, [r6, #0]
 800f28c:	f7ff ff8a 	bl	800f1a4 <__hexdig_fun>
 800f290:	2800      	cmp	r0, #0
 800f292:	d1f8      	bne.n	800f286 <__gethex+0xb6>
 800f294:	1bad      	subs	r5, r5, r6
 800f296:	00ad      	lsls	r5, r5, #2
 800f298:	e004      	b.n	800f2a4 <__gethex+0xd4>
 800f29a:	2400      	movs	r4, #0
 800f29c:	4625      	mov	r5, r4
 800f29e:	e7e0      	b.n	800f262 <__gethex+0x92>
 800f2a0:	2d00      	cmp	r5, #0
 800f2a2:	d1f7      	bne.n	800f294 <__gethex+0xc4>
 800f2a4:	7833      	ldrb	r3, [r6, #0]
 800f2a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2aa:	2b50      	cmp	r3, #80	; 0x50
 800f2ac:	d13b      	bne.n	800f326 <__gethex+0x156>
 800f2ae:	7873      	ldrb	r3, [r6, #1]
 800f2b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f2b2:	d02c      	beq.n	800f30e <__gethex+0x13e>
 800f2b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f2b6:	d02e      	beq.n	800f316 <__gethex+0x146>
 800f2b8:	1c71      	adds	r1, r6, #1
 800f2ba:	f04f 0900 	mov.w	r9, #0
 800f2be:	7808      	ldrb	r0, [r1, #0]
 800f2c0:	f7ff ff70 	bl	800f1a4 <__hexdig_fun>
 800f2c4:	1e43      	subs	r3, r0, #1
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	2b18      	cmp	r3, #24
 800f2ca:	d82c      	bhi.n	800f326 <__gethex+0x156>
 800f2cc:	f1a0 0210 	sub.w	r2, r0, #16
 800f2d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f2d4:	f7ff ff66 	bl	800f1a4 <__hexdig_fun>
 800f2d8:	1e43      	subs	r3, r0, #1
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	2b18      	cmp	r3, #24
 800f2de:	d91d      	bls.n	800f31c <__gethex+0x14c>
 800f2e0:	f1b9 0f00 	cmp.w	r9, #0
 800f2e4:	d000      	beq.n	800f2e8 <__gethex+0x118>
 800f2e6:	4252      	negs	r2, r2
 800f2e8:	4415      	add	r5, r2
 800f2ea:	f8cb 1000 	str.w	r1, [fp]
 800f2ee:	b1e4      	cbz	r4, 800f32a <__gethex+0x15a>
 800f2f0:	9b00      	ldr	r3, [sp, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	bf14      	ite	ne
 800f2f6:	2700      	movne	r7, #0
 800f2f8:	2706      	moveq	r7, #6
 800f2fa:	4638      	mov	r0, r7
 800f2fc:	b009      	add	sp, #36	; 0x24
 800f2fe:	ecbd 8b02 	vpop	{d8}
 800f302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f306:	463e      	mov	r6, r7
 800f308:	4625      	mov	r5, r4
 800f30a:	2401      	movs	r4, #1
 800f30c:	e7ca      	b.n	800f2a4 <__gethex+0xd4>
 800f30e:	f04f 0900 	mov.w	r9, #0
 800f312:	1cb1      	adds	r1, r6, #2
 800f314:	e7d3      	b.n	800f2be <__gethex+0xee>
 800f316:	f04f 0901 	mov.w	r9, #1
 800f31a:	e7fa      	b.n	800f312 <__gethex+0x142>
 800f31c:	230a      	movs	r3, #10
 800f31e:	fb03 0202 	mla	r2, r3, r2, r0
 800f322:	3a10      	subs	r2, #16
 800f324:	e7d4      	b.n	800f2d0 <__gethex+0x100>
 800f326:	4631      	mov	r1, r6
 800f328:	e7df      	b.n	800f2ea <__gethex+0x11a>
 800f32a:	1bf3      	subs	r3, r6, r7
 800f32c:	3b01      	subs	r3, #1
 800f32e:	4621      	mov	r1, r4
 800f330:	2b07      	cmp	r3, #7
 800f332:	dc0b      	bgt.n	800f34c <__gethex+0x17c>
 800f334:	ee18 0a10 	vmov	r0, s16
 800f338:	f000 fa82 	bl	800f840 <_Balloc>
 800f33c:	4604      	mov	r4, r0
 800f33e:	b940      	cbnz	r0, 800f352 <__gethex+0x182>
 800f340:	4b65      	ldr	r3, [pc, #404]	; (800f4d8 <__gethex+0x308>)
 800f342:	4602      	mov	r2, r0
 800f344:	21de      	movs	r1, #222	; 0xde
 800f346:	4865      	ldr	r0, [pc, #404]	; (800f4dc <__gethex+0x30c>)
 800f348:	f001 f8b8 	bl	80104bc <__assert_func>
 800f34c:	3101      	adds	r1, #1
 800f34e:	105b      	asrs	r3, r3, #1
 800f350:	e7ee      	b.n	800f330 <__gethex+0x160>
 800f352:	f100 0914 	add.w	r9, r0, #20
 800f356:	f04f 0b00 	mov.w	fp, #0
 800f35a:	f1ca 0301 	rsb	r3, sl, #1
 800f35e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f362:	f8cd b000 	str.w	fp, [sp]
 800f366:	9306      	str	r3, [sp, #24]
 800f368:	42b7      	cmp	r7, r6
 800f36a:	d340      	bcc.n	800f3ee <__gethex+0x21e>
 800f36c:	9802      	ldr	r0, [sp, #8]
 800f36e:	9b00      	ldr	r3, [sp, #0]
 800f370:	f840 3b04 	str.w	r3, [r0], #4
 800f374:	eba0 0009 	sub.w	r0, r0, r9
 800f378:	1080      	asrs	r0, r0, #2
 800f37a:	0146      	lsls	r6, r0, #5
 800f37c:	6120      	str	r0, [r4, #16]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fb54 	bl	800fa2c <__hi0bits>
 800f384:	1a30      	subs	r0, r6, r0
 800f386:	f8d8 6000 	ldr.w	r6, [r8]
 800f38a:	42b0      	cmp	r0, r6
 800f38c:	dd63      	ble.n	800f456 <__gethex+0x286>
 800f38e:	1b87      	subs	r7, r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	4620      	mov	r0, r4
 800f394:	f000 feee 	bl	8010174 <__any_on>
 800f398:	4682      	mov	sl, r0
 800f39a:	b1a8      	cbz	r0, 800f3c8 <__gethex+0x1f8>
 800f39c:	1e7b      	subs	r3, r7, #1
 800f39e:	1159      	asrs	r1, r3, #5
 800f3a0:	f003 021f 	and.w	r2, r3, #31
 800f3a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f3a8:	f04f 0a01 	mov.w	sl, #1
 800f3ac:	fa0a f202 	lsl.w	r2, sl, r2
 800f3b0:	420a      	tst	r2, r1
 800f3b2:	d009      	beq.n	800f3c8 <__gethex+0x1f8>
 800f3b4:	4553      	cmp	r3, sl
 800f3b6:	dd05      	ble.n	800f3c4 <__gethex+0x1f4>
 800f3b8:	1eb9      	subs	r1, r7, #2
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 feda 	bl	8010174 <__any_on>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d145      	bne.n	800f450 <__gethex+0x280>
 800f3c4:	f04f 0a02 	mov.w	sl, #2
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f7ff fe98 	bl	800f100 <rshift>
 800f3d0:	443d      	add	r5, r7
 800f3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f3d6:	42ab      	cmp	r3, r5
 800f3d8:	da4c      	bge.n	800f474 <__gethex+0x2a4>
 800f3da:	ee18 0a10 	vmov	r0, s16
 800f3de:	4621      	mov	r1, r4
 800f3e0:	f000 fa6e 	bl	800f8c0 <_Bfree>
 800f3e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	27a3      	movs	r7, #163	; 0xa3
 800f3ec:	e785      	b.n	800f2fa <__gethex+0x12a>
 800f3ee:	1e73      	subs	r3, r6, #1
 800f3f0:	9a05      	ldr	r2, [sp, #20]
 800f3f2:	9303      	str	r3, [sp, #12]
 800f3f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d019      	beq.n	800f430 <__gethex+0x260>
 800f3fc:	f1bb 0f20 	cmp.w	fp, #32
 800f400:	d107      	bne.n	800f412 <__gethex+0x242>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	9a00      	ldr	r2, [sp, #0]
 800f406:	f843 2b04 	str.w	r2, [r3], #4
 800f40a:	9302      	str	r3, [sp, #8]
 800f40c:	2300      	movs	r3, #0
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	469b      	mov	fp, r3
 800f412:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f416:	f7ff fec5 	bl	800f1a4 <__hexdig_fun>
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	f000 000f 	and.w	r0, r0, #15
 800f420:	fa00 f00b 	lsl.w	r0, r0, fp
 800f424:	4303      	orrs	r3, r0
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	f10b 0b04 	add.w	fp, fp, #4
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	e00d      	b.n	800f44c <__gethex+0x27c>
 800f430:	9b03      	ldr	r3, [sp, #12]
 800f432:	9a06      	ldr	r2, [sp, #24]
 800f434:	4413      	add	r3, r2
 800f436:	42bb      	cmp	r3, r7
 800f438:	d3e0      	bcc.n	800f3fc <__gethex+0x22c>
 800f43a:	4618      	mov	r0, r3
 800f43c:	9901      	ldr	r1, [sp, #4]
 800f43e:	9307      	str	r3, [sp, #28]
 800f440:	4652      	mov	r2, sl
 800f442:	f7fe f99d 	bl	800d780 <strncmp>
 800f446:	9b07      	ldr	r3, [sp, #28]
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1d7      	bne.n	800f3fc <__gethex+0x22c>
 800f44c:	461e      	mov	r6, r3
 800f44e:	e78b      	b.n	800f368 <__gethex+0x198>
 800f450:	f04f 0a03 	mov.w	sl, #3
 800f454:	e7b8      	b.n	800f3c8 <__gethex+0x1f8>
 800f456:	da0a      	bge.n	800f46e <__gethex+0x29e>
 800f458:	1a37      	subs	r7, r6, r0
 800f45a:	4621      	mov	r1, r4
 800f45c:	ee18 0a10 	vmov	r0, s16
 800f460:	463a      	mov	r2, r7
 800f462:	f000 fc49 	bl	800fcf8 <__lshift>
 800f466:	1bed      	subs	r5, r5, r7
 800f468:	4604      	mov	r4, r0
 800f46a:	f100 0914 	add.w	r9, r0, #20
 800f46e:	f04f 0a00 	mov.w	sl, #0
 800f472:	e7ae      	b.n	800f3d2 <__gethex+0x202>
 800f474:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f478:	42a8      	cmp	r0, r5
 800f47a:	dd72      	ble.n	800f562 <__gethex+0x392>
 800f47c:	1b45      	subs	r5, r0, r5
 800f47e:	42ae      	cmp	r6, r5
 800f480:	dc36      	bgt.n	800f4f0 <__gethex+0x320>
 800f482:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f486:	2b02      	cmp	r3, #2
 800f488:	d02a      	beq.n	800f4e0 <__gethex+0x310>
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d02c      	beq.n	800f4e8 <__gethex+0x318>
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d115      	bne.n	800f4be <__gethex+0x2ee>
 800f492:	42ae      	cmp	r6, r5
 800f494:	d113      	bne.n	800f4be <__gethex+0x2ee>
 800f496:	2e01      	cmp	r6, #1
 800f498:	d10b      	bne.n	800f4b2 <__gethex+0x2e2>
 800f49a:	9a04      	ldr	r2, [sp, #16]
 800f49c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4a0:	6013      	str	r3, [r2, #0]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	6123      	str	r3, [r4, #16]
 800f4a6:	f8c9 3000 	str.w	r3, [r9]
 800f4aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4ac:	2762      	movs	r7, #98	; 0x62
 800f4ae:	601c      	str	r4, [r3, #0]
 800f4b0:	e723      	b.n	800f2fa <__gethex+0x12a>
 800f4b2:	1e71      	subs	r1, r6, #1
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 fe5d 	bl	8010174 <__any_on>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d1ed      	bne.n	800f49a <__gethex+0x2ca>
 800f4be:	ee18 0a10 	vmov	r0, s16
 800f4c2:	4621      	mov	r1, r4
 800f4c4:	f000 f9fc 	bl	800f8c0 <_Bfree>
 800f4c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	2750      	movs	r7, #80	; 0x50
 800f4d0:	e713      	b.n	800f2fa <__gethex+0x12a>
 800f4d2:	bf00      	nop
 800f4d4:	08011438 	.word	0x08011438
 800f4d8:	080113bb 	.word	0x080113bb
 800f4dc:	080113cc 	.word	0x080113cc
 800f4e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1eb      	bne.n	800f4be <__gethex+0x2ee>
 800f4e6:	e7d8      	b.n	800f49a <__gethex+0x2ca>
 800f4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1d5      	bne.n	800f49a <__gethex+0x2ca>
 800f4ee:	e7e6      	b.n	800f4be <__gethex+0x2ee>
 800f4f0:	1e6f      	subs	r7, r5, #1
 800f4f2:	f1ba 0f00 	cmp.w	sl, #0
 800f4f6:	d131      	bne.n	800f55c <__gethex+0x38c>
 800f4f8:	b127      	cbz	r7, 800f504 <__gethex+0x334>
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 fe39 	bl	8010174 <__any_on>
 800f502:	4682      	mov	sl, r0
 800f504:	117b      	asrs	r3, r7, #5
 800f506:	2101      	movs	r1, #1
 800f508:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f50c:	f007 071f 	and.w	r7, r7, #31
 800f510:	fa01 f707 	lsl.w	r7, r1, r7
 800f514:	421f      	tst	r7, r3
 800f516:	4629      	mov	r1, r5
 800f518:	4620      	mov	r0, r4
 800f51a:	bf18      	it	ne
 800f51c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f520:	1b76      	subs	r6, r6, r5
 800f522:	f7ff fded 	bl	800f100 <rshift>
 800f526:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f52a:	2702      	movs	r7, #2
 800f52c:	f1ba 0f00 	cmp.w	sl, #0
 800f530:	d048      	beq.n	800f5c4 <__gethex+0x3f4>
 800f532:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f536:	2b02      	cmp	r3, #2
 800f538:	d015      	beq.n	800f566 <__gethex+0x396>
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	d017      	beq.n	800f56e <__gethex+0x39e>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d109      	bne.n	800f556 <__gethex+0x386>
 800f542:	f01a 0f02 	tst.w	sl, #2
 800f546:	d006      	beq.n	800f556 <__gethex+0x386>
 800f548:	f8d9 0000 	ldr.w	r0, [r9]
 800f54c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f550:	f01a 0f01 	tst.w	sl, #1
 800f554:	d10e      	bne.n	800f574 <__gethex+0x3a4>
 800f556:	f047 0710 	orr.w	r7, r7, #16
 800f55a:	e033      	b.n	800f5c4 <__gethex+0x3f4>
 800f55c:	f04f 0a01 	mov.w	sl, #1
 800f560:	e7d0      	b.n	800f504 <__gethex+0x334>
 800f562:	2701      	movs	r7, #1
 800f564:	e7e2      	b.n	800f52c <__gethex+0x35c>
 800f566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f568:	f1c3 0301 	rsb	r3, r3, #1
 800f56c:	9315      	str	r3, [sp, #84]	; 0x54
 800f56e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f570:	2b00      	cmp	r3, #0
 800f572:	d0f0      	beq.n	800f556 <__gethex+0x386>
 800f574:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f578:	f104 0314 	add.w	r3, r4, #20
 800f57c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f580:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f584:	f04f 0c00 	mov.w	ip, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f58e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f592:	d01c      	beq.n	800f5ce <__gethex+0x3fe>
 800f594:	3201      	adds	r2, #1
 800f596:	6002      	str	r2, [r0, #0]
 800f598:	2f02      	cmp	r7, #2
 800f59a:	f104 0314 	add.w	r3, r4, #20
 800f59e:	d13f      	bne.n	800f620 <__gethex+0x450>
 800f5a0:	f8d8 2000 	ldr.w	r2, [r8]
 800f5a4:	3a01      	subs	r2, #1
 800f5a6:	42b2      	cmp	r2, r6
 800f5a8:	d10a      	bne.n	800f5c0 <__gethex+0x3f0>
 800f5aa:	1171      	asrs	r1, r6, #5
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5b2:	f006 061f 	and.w	r6, r6, #31
 800f5b6:	fa02 f606 	lsl.w	r6, r2, r6
 800f5ba:	421e      	tst	r6, r3
 800f5bc:	bf18      	it	ne
 800f5be:	4617      	movne	r7, r2
 800f5c0:	f047 0720 	orr.w	r7, r7, #32
 800f5c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5c6:	601c      	str	r4, [r3, #0]
 800f5c8:	9b04      	ldr	r3, [sp, #16]
 800f5ca:	601d      	str	r5, [r3, #0]
 800f5cc:	e695      	b.n	800f2fa <__gethex+0x12a>
 800f5ce:	4299      	cmp	r1, r3
 800f5d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800f5d4:	d8d8      	bhi.n	800f588 <__gethex+0x3b8>
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	459b      	cmp	fp, r3
 800f5da:	db19      	blt.n	800f610 <__gethex+0x440>
 800f5dc:	6861      	ldr	r1, [r4, #4]
 800f5de:	ee18 0a10 	vmov	r0, s16
 800f5e2:	3101      	adds	r1, #1
 800f5e4:	f000 f92c 	bl	800f840 <_Balloc>
 800f5e8:	4681      	mov	r9, r0
 800f5ea:	b918      	cbnz	r0, 800f5f4 <__gethex+0x424>
 800f5ec:	4b1a      	ldr	r3, [pc, #104]	; (800f658 <__gethex+0x488>)
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	2184      	movs	r1, #132	; 0x84
 800f5f2:	e6a8      	b.n	800f346 <__gethex+0x176>
 800f5f4:	6922      	ldr	r2, [r4, #16]
 800f5f6:	3202      	adds	r2, #2
 800f5f8:	f104 010c 	add.w	r1, r4, #12
 800f5fc:	0092      	lsls	r2, r2, #2
 800f5fe:	300c      	adds	r0, #12
 800f600:	f000 f904 	bl	800f80c <memcpy>
 800f604:	4621      	mov	r1, r4
 800f606:	ee18 0a10 	vmov	r0, s16
 800f60a:	f000 f959 	bl	800f8c0 <_Bfree>
 800f60e:	464c      	mov	r4, r9
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f618:	6122      	str	r2, [r4, #16]
 800f61a:	2201      	movs	r2, #1
 800f61c:	615a      	str	r2, [r3, #20]
 800f61e:	e7bb      	b.n	800f598 <__gethex+0x3c8>
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	455a      	cmp	r2, fp
 800f624:	dd0b      	ble.n	800f63e <__gethex+0x46e>
 800f626:	2101      	movs	r1, #1
 800f628:	4620      	mov	r0, r4
 800f62a:	f7ff fd69 	bl	800f100 <rshift>
 800f62e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f632:	3501      	adds	r5, #1
 800f634:	42ab      	cmp	r3, r5
 800f636:	f6ff aed0 	blt.w	800f3da <__gethex+0x20a>
 800f63a:	2701      	movs	r7, #1
 800f63c:	e7c0      	b.n	800f5c0 <__gethex+0x3f0>
 800f63e:	f016 061f 	ands.w	r6, r6, #31
 800f642:	d0fa      	beq.n	800f63a <__gethex+0x46a>
 800f644:	449a      	add	sl, r3
 800f646:	f1c6 0620 	rsb	r6, r6, #32
 800f64a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f64e:	f000 f9ed 	bl	800fa2c <__hi0bits>
 800f652:	42b0      	cmp	r0, r6
 800f654:	dbe7      	blt.n	800f626 <__gethex+0x456>
 800f656:	e7f0      	b.n	800f63a <__gethex+0x46a>
 800f658:	080113bb 	.word	0x080113bb

0800f65c <L_shift>:
 800f65c:	f1c2 0208 	rsb	r2, r2, #8
 800f660:	0092      	lsls	r2, r2, #2
 800f662:	b570      	push	{r4, r5, r6, lr}
 800f664:	f1c2 0620 	rsb	r6, r2, #32
 800f668:	6843      	ldr	r3, [r0, #4]
 800f66a:	6804      	ldr	r4, [r0, #0]
 800f66c:	fa03 f506 	lsl.w	r5, r3, r6
 800f670:	432c      	orrs	r4, r5
 800f672:	40d3      	lsrs	r3, r2
 800f674:	6004      	str	r4, [r0, #0]
 800f676:	f840 3f04 	str.w	r3, [r0, #4]!
 800f67a:	4288      	cmp	r0, r1
 800f67c:	d3f4      	bcc.n	800f668 <L_shift+0xc>
 800f67e:	bd70      	pop	{r4, r5, r6, pc}

0800f680 <__match>:
 800f680:	b530      	push	{r4, r5, lr}
 800f682:	6803      	ldr	r3, [r0, #0]
 800f684:	3301      	adds	r3, #1
 800f686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f68a:	b914      	cbnz	r4, 800f692 <__match+0x12>
 800f68c:	6003      	str	r3, [r0, #0]
 800f68e:	2001      	movs	r0, #1
 800f690:	bd30      	pop	{r4, r5, pc}
 800f692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f696:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f69a:	2d19      	cmp	r5, #25
 800f69c:	bf98      	it	ls
 800f69e:	3220      	addls	r2, #32
 800f6a0:	42a2      	cmp	r2, r4
 800f6a2:	d0f0      	beq.n	800f686 <__match+0x6>
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e7f3      	b.n	800f690 <__match+0x10>

0800f6a8 <__hexnan>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	680b      	ldr	r3, [r1, #0]
 800f6ae:	6801      	ldr	r1, [r0, #0]
 800f6b0:	115e      	asrs	r6, r3, #5
 800f6b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6b6:	f013 031f 	ands.w	r3, r3, #31
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	bf18      	it	ne
 800f6be:	3604      	addne	r6, #4
 800f6c0:	2500      	movs	r5, #0
 800f6c2:	1f37      	subs	r7, r6, #4
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	4690      	mov	r8, r2
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6ce:	46b9      	mov	r9, r7
 800f6d0:	463c      	mov	r4, r7
 800f6d2:	9502      	str	r5, [sp, #8]
 800f6d4:	46ab      	mov	fp, r5
 800f6d6:	784a      	ldrb	r2, [r1, #1]
 800f6d8:	1c4b      	adds	r3, r1, #1
 800f6da:	9303      	str	r3, [sp, #12]
 800f6dc:	b342      	cbz	r2, 800f730 <__hexnan+0x88>
 800f6de:	4610      	mov	r0, r2
 800f6e0:	9105      	str	r1, [sp, #20]
 800f6e2:	9204      	str	r2, [sp, #16]
 800f6e4:	f7ff fd5e 	bl	800f1a4 <__hexdig_fun>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d14f      	bne.n	800f78c <__hexnan+0xe4>
 800f6ec:	9a04      	ldr	r2, [sp, #16]
 800f6ee:	9905      	ldr	r1, [sp, #20]
 800f6f0:	2a20      	cmp	r2, #32
 800f6f2:	d818      	bhi.n	800f726 <__hexnan+0x7e>
 800f6f4:	9b02      	ldr	r3, [sp, #8]
 800f6f6:	459b      	cmp	fp, r3
 800f6f8:	dd13      	ble.n	800f722 <__hexnan+0x7a>
 800f6fa:	454c      	cmp	r4, r9
 800f6fc:	d206      	bcs.n	800f70c <__hexnan+0x64>
 800f6fe:	2d07      	cmp	r5, #7
 800f700:	dc04      	bgt.n	800f70c <__hexnan+0x64>
 800f702:	462a      	mov	r2, r5
 800f704:	4649      	mov	r1, r9
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff ffa8 	bl	800f65c <L_shift>
 800f70c:	4544      	cmp	r4, r8
 800f70e:	d950      	bls.n	800f7b2 <__hexnan+0x10a>
 800f710:	2300      	movs	r3, #0
 800f712:	f1a4 0904 	sub.w	r9, r4, #4
 800f716:	f844 3c04 	str.w	r3, [r4, #-4]
 800f71a:	f8cd b008 	str.w	fp, [sp, #8]
 800f71e:	464c      	mov	r4, r9
 800f720:	461d      	mov	r5, r3
 800f722:	9903      	ldr	r1, [sp, #12]
 800f724:	e7d7      	b.n	800f6d6 <__hexnan+0x2e>
 800f726:	2a29      	cmp	r2, #41	; 0x29
 800f728:	d156      	bne.n	800f7d8 <__hexnan+0x130>
 800f72a:	3102      	adds	r1, #2
 800f72c:	f8ca 1000 	str.w	r1, [sl]
 800f730:	f1bb 0f00 	cmp.w	fp, #0
 800f734:	d050      	beq.n	800f7d8 <__hexnan+0x130>
 800f736:	454c      	cmp	r4, r9
 800f738:	d206      	bcs.n	800f748 <__hexnan+0xa0>
 800f73a:	2d07      	cmp	r5, #7
 800f73c:	dc04      	bgt.n	800f748 <__hexnan+0xa0>
 800f73e:	462a      	mov	r2, r5
 800f740:	4649      	mov	r1, r9
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff ff8a 	bl	800f65c <L_shift>
 800f748:	4544      	cmp	r4, r8
 800f74a:	d934      	bls.n	800f7b6 <__hexnan+0x10e>
 800f74c:	f1a8 0204 	sub.w	r2, r8, #4
 800f750:	4623      	mov	r3, r4
 800f752:	f853 1b04 	ldr.w	r1, [r3], #4
 800f756:	f842 1f04 	str.w	r1, [r2, #4]!
 800f75a:	429f      	cmp	r7, r3
 800f75c:	d2f9      	bcs.n	800f752 <__hexnan+0xaa>
 800f75e:	1b3b      	subs	r3, r7, r4
 800f760:	f023 0303 	bic.w	r3, r3, #3
 800f764:	3304      	adds	r3, #4
 800f766:	3401      	adds	r4, #1
 800f768:	3e03      	subs	r6, #3
 800f76a:	42b4      	cmp	r4, r6
 800f76c:	bf88      	it	hi
 800f76e:	2304      	movhi	r3, #4
 800f770:	4443      	add	r3, r8
 800f772:	2200      	movs	r2, #0
 800f774:	f843 2b04 	str.w	r2, [r3], #4
 800f778:	429f      	cmp	r7, r3
 800f77a:	d2fb      	bcs.n	800f774 <__hexnan+0xcc>
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	b91b      	cbnz	r3, 800f788 <__hexnan+0xe0>
 800f780:	4547      	cmp	r7, r8
 800f782:	d127      	bne.n	800f7d4 <__hexnan+0x12c>
 800f784:	2301      	movs	r3, #1
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	2005      	movs	r0, #5
 800f78a:	e026      	b.n	800f7da <__hexnan+0x132>
 800f78c:	3501      	adds	r5, #1
 800f78e:	2d08      	cmp	r5, #8
 800f790:	f10b 0b01 	add.w	fp, fp, #1
 800f794:	dd06      	ble.n	800f7a4 <__hexnan+0xfc>
 800f796:	4544      	cmp	r4, r8
 800f798:	d9c3      	bls.n	800f722 <__hexnan+0x7a>
 800f79a:	2300      	movs	r3, #0
 800f79c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7a0:	2501      	movs	r5, #1
 800f7a2:	3c04      	subs	r4, #4
 800f7a4:	6822      	ldr	r2, [r4, #0]
 800f7a6:	f000 000f 	and.w	r0, r0, #15
 800f7aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f7ae:	6022      	str	r2, [r4, #0]
 800f7b0:	e7b7      	b.n	800f722 <__hexnan+0x7a>
 800f7b2:	2508      	movs	r5, #8
 800f7b4:	e7b5      	b.n	800f722 <__hexnan+0x7a>
 800f7b6:	9b01      	ldr	r3, [sp, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0df      	beq.n	800f77c <__hexnan+0xd4>
 800f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c0:	f1c3 0320 	rsb	r3, r3, #32
 800f7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f7cc:	401a      	ands	r2, r3
 800f7ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800f7d2:	e7d3      	b.n	800f77c <__hexnan+0xd4>
 800f7d4:	3f04      	subs	r7, #4
 800f7d6:	e7d1      	b.n	800f77c <__hexnan+0xd4>
 800f7d8:	2004      	movs	r0, #4
 800f7da:	b007      	add	sp, #28
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f7e0 <_localeconv_r>:
 800f7e0:	4800      	ldr	r0, [pc, #0]	; (800f7e4 <_localeconv_r+0x4>)
 800f7e2:	4770      	bx	lr
 800f7e4:	20000698 	.word	0x20000698

0800f7e8 <__ascii_mbtowc>:
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	b901      	cbnz	r1, 800f7ee <__ascii_mbtowc+0x6>
 800f7ec:	a901      	add	r1, sp, #4
 800f7ee:	b142      	cbz	r2, 800f802 <__ascii_mbtowc+0x1a>
 800f7f0:	b14b      	cbz	r3, 800f806 <__ascii_mbtowc+0x1e>
 800f7f2:	7813      	ldrb	r3, [r2, #0]
 800f7f4:	600b      	str	r3, [r1, #0]
 800f7f6:	7812      	ldrb	r2, [r2, #0]
 800f7f8:	1e10      	subs	r0, r2, #0
 800f7fa:	bf18      	it	ne
 800f7fc:	2001      	movne	r0, #1
 800f7fe:	b002      	add	sp, #8
 800f800:	4770      	bx	lr
 800f802:	4610      	mov	r0, r2
 800f804:	e7fb      	b.n	800f7fe <__ascii_mbtowc+0x16>
 800f806:	f06f 0001 	mvn.w	r0, #1
 800f80a:	e7f8      	b.n	800f7fe <__ascii_mbtowc+0x16>

0800f80c <memcpy>:
 800f80c:	440a      	add	r2, r1
 800f80e:	4291      	cmp	r1, r2
 800f810:	f100 33ff 	add.w	r3, r0, #4294967295
 800f814:	d100      	bne.n	800f818 <memcpy+0xc>
 800f816:	4770      	bx	lr
 800f818:	b510      	push	{r4, lr}
 800f81a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f81e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f822:	4291      	cmp	r1, r2
 800f824:	d1f9      	bne.n	800f81a <memcpy+0xe>
 800f826:	bd10      	pop	{r4, pc}

0800f828 <__malloc_lock>:
 800f828:	4801      	ldr	r0, [pc, #4]	; (800f830 <__malloc_lock+0x8>)
 800f82a:	f000 be78 	b.w	801051e <__retarget_lock_acquire_recursive>
 800f82e:	bf00      	nop
 800f830:	20002470 	.word	0x20002470

0800f834 <__malloc_unlock>:
 800f834:	4801      	ldr	r0, [pc, #4]	; (800f83c <__malloc_unlock+0x8>)
 800f836:	f000 be73 	b.w	8010520 <__retarget_lock_release_recursive>
 800f83a:	bf00      	nop
 800f83c:	20002470 	.word	0x20002470

0800f840 <_Balloc>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f844:	4604      	mov	r4, r0
 800f846:	460d      	mov	r5, r1
 800f848:	b976      	cbnz	r6, 800f868 <_Balloc+0x28>
 800f84a:	2010      	movs	r0, #16
 800f84c:	f7fd fa3c 	bl	800ccc8 <malloc>
 800f850:	4602      	mov	r2, r0
 800f852:	6260      	str	r0, [r4, #36]	; 0x24
 800f854:	b920      	cbnz	r0, 800f860 <_Balloc+0x20>
 800f856:	4b18      	ldr	r3, [pc, #96]	; (800f8b8 <_Balloc+0x78>)
 800f858:	4818      	ldr	r0, [pc, #96]	; (800f8bc <_Balloc+0x7c>)
 800f85a:	2166      	movs	r1, #102	; 0x66
 800f85c:	f000 fe2e 	bl	80104bc <__assert_func>
 800f860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f864:	6006      	str	r6, [r0, #0]
 800f866:	60c6      	str	r6, [r0, #12]
 800f868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f86a:	68f3      	ldr	r3, [r6, #12]
 800f86c:	b183      	cbz	r3, 800f890 <_Balloc+0x50>
 800f86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f876:	b9b8      	cbnz	r0, 800f8a8 <_Balloc+0x68>
 800f878:	2101      	movs	r1, #1
 800f87a:	fa01 f605 	lsl.w	r6, r1, r5
 800f87e:	1d72      	adds	r2, r6, #5
 800f880:	0092      	lsls	r2, r2, #2
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fc97 	bl	80101b6 <_calloc_r>
 800f888:	b160      	cbz	r0, 800f8a4 <_Balloc+0x64>
 800f88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f88e:	e00e      	b.n	800f8ae <_Balloc+0x6e>
 800f890:	2221      	movs	r2, #33	; 0x21
 800f892:	2104      	movs	r1, #4
 800f894:	4620      	mov	r0, r4
 800f896:	f000 fc8e 	bl	80101b6 <_calloc_r>
 800f89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f89c:	60f0      	str	r0, [r6, #12]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e4      	bne.n	800f86e <_Balloc+0x2e>
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	6802      	ldr	r2, [r0, #0]
 800f8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8b4:	e7f7      	b.n	800f8a6 <_Balloc+0x66>
 800f8b6:	bf00      	nop
 800f8b8:	08011345 	.word	0x08011345
 800f8bc:	0801144c 	.word	0x0801144c

0800f8c0 <_Bfree>:
 800f8c0:	b570      	push	{r4, r5, r6, lr}
 800f8c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	b976      	cbnz	r6, 800f8e8 <_Bfree+0x28>
 800f8ca:	2010      	movs	r0, #16
 800f8cc:	f7fd f9fc 	bl	800ccc8 <malloc>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	6268      	str	r0, [r5, #36]	; 0x24
 800f8d4:	b920      	cbnz	r0, 800f8e0 <_Bfree+0x20>
 800f8d6:	4b09      	ldr	r3, [pc, #36]	; (800f8fc <_Bfree+0x3c>)
 800f8d8:	4809      	ldr	r0, [pc, #36]	; (800f900 <_Bfree+0x40>)
 800f8da:	218a      	movs	r1, #138	; 0x8a
 800f8dc:	f000 fdee 	bl	80104bc <__assert_func>
 800f8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8e4:	6006      	str	r6, [r0, #0]
 800f8e6:	60c6      	str	r6, [r0, #12]
 800f8e8:	b13c      	cbz	r4, 800f8fa <_Bfree+0x3a>
 800f8ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f8ec:	6862      	ldr	r2, [r4, #4]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8f4:	6021      	str	r1, [r4, #0]
 800f8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}
 800f8fc:	08011345 	.word	0x08011345
 800f900:	0801144c 	.word	0x0801144c

0800f904 <__multadd>:
 800f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f908:	690e      	ldr	r6, [r1, #16]
 800f90a:	4607      	mov	r7, r0
 800f90c:	4698      	mov	r8, r3
 800f90e:	460c      	mov	r4, r1
 800f910:	f101 0014 	add.w	r0, r1, #20
 800f914:	2300      	movs	r3, #0
 800f916:	6805      	ldr	r5, [r0, #0]
 800f918:	b2a9      	uxth	r1, r5
 800f91a:	fb02 8101 	mla	r1, r2, r1, r8
 800f91e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f922:	0c2d      	lsrs	r5, r5, #16
 800f924:	fb02 c505 	mla	r5, r2, r5, ip
 800f928:	b289      	uxth	r1, r1
 800f92a:	3301      	adds	r3, #1
 800f92c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f930:	429e      	cmp	r6, r3
 800f932:	f840 1b04 	str.w	r1, [r0], #4
 800f936:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f93a:	dcec      	bgt.n	800f916 <__multadd+0x12>
 800f93c:	f1b8 0f00 	cmp.w	r8, #0
 800f940:	d022      	beq.n	800f988 <__multadd+0x84>
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	42b3      	cmp	r3, r6
 800f946:	dc19      	bgt.n	800f97c <__multadd+0x78>
 800f948:	6861      	ldr	r1, [r4, #4]
 800f94a:	4638      	mov	r0, r7
 800f94c:	3101      	adds	r1, #1
 800f94e:	f7ff ff77 	bl	800f840 <_Balloc>
 800f952:	4605      	mov	r5, r0
 800f954:	b928      	cbnz	r0, 800f962 <__multadd+0x5e>
 800f956:	4602      	mov	r2, r0
 800f958:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <__multadd+0x8c>)
 800f95a:	480e      	ldr	r0, [pc, #56]	; (800f994 <__multadd+0x90>)
 800f95c:	21b5      	movs	r1, #181	; 0xb5
 800f95e:	f000 fdad 	bl	80104bc <__assert_func>
 800f962:	6922      	ldr	r2, [r4, #16]
 800f964:	3202      	adds	r2, #2
 800f966:	f104 010c 	add.w	r1, r4, #12
 800f96a:	0092      	lsls	r2, r2, #2
 800f96c:	300c      	adds	r0, #12
 800f96e:	f7ff ff4d 	bl	800f80c <memcpy>
 800f972:	4621      	mov	r1, r4
 800f974:	4638      	mov	r0, r7
 800f976:	f7ff ffa3 	bl	800f8c0 <_Bfree>
 800f97a:	462c      	mov	r4, r5
 800f97c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f980:	3601      	adds	r6, #1
 800f982:	f8c3 8014 	str.w	r8, [r3, #20]
 800f986:	6126      	str	r6, [r4, #16]
 800f988:	4620      	mov	r0, r4
 800f98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f98e:	bf00      	nop
 800f990:	080113bb 	.word	0x080113bb
 800f994:	0801144c 	.word	0x0801144c

0800f998 <__s2b>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	4615      	mov	r5, r2
 800f9a0:	461f      	mov	r7, r3
 800f9a2:	2209      	movs	r2, #9
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	db09      	blt.n	800f9c8 <__s2b+0x30>
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7ff ff43 	bl	800f840 <_Balloc>
 800f9ba:	b940      	cbnz	r0, 800f9ce <__s2b+0x36>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	4b19      	ldr	r3, [pc, #100]	; (800fa24 <__s2b+0x8c>)
 800f9c0:	4819      	ldr	r0, [pc, #100]	; (800fa28 <__s2b+0x90>)
 800f9c2:	21ce      	movs	r1, #206	; 0xce
 800f9c4:	f000 fd7a 	bl	80104bc <__assert_func>
 800f9c8:	0052      	lsls	r2, r2, #1
 800f9ca:	3101      	adds	r1, #1
 800f9cc:	e7f0      	b.n	800f9b0 <__s2b+0x18>
 800f9ce:	9b08      	ldr	r3, [sp, #32]
 800f9d0:	6143      	str	r3, [r0, #20]
 800f9d2:	2d09      	cmp	r5, #9
 800f9d4:	f04f 0301 	mov.w	r3, #1
 800f9d8:	6103      	str	r3, [r0, #16]
 800f9da:	dd16      	ble.n	800fa0a <__s2b+0x72>
 800f9dc:	f104 0909 	add.w	r9, r4, #9
 800f9e0:	46c8      	mov	r8, r9
 800f9e2:	442c      	add	r4, r5
 800f9e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	3b30      	subs	r3, #48	; 0x30
 800f9ec:	220a      	movs	r2, #10
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff ff88 	bl	800f904 <__multadd>
 800f9f4:	45a0      	cmp	r8, r4
 800f9f6:	d1f5      	bne.n	800f9e4 <__s2b+0x4c>
 800f9f8:	f1a5 0408 	sub.w	r4, r5, #8
 800f9fc:	444c      	add	r4, r9
 800f9fe:	1b2d      	subs	r5, r5, r4
 800fa00:	1963      	adds	r3, r4, r5
 800fa02:	42bb      	cmp	r3, r7
 800fa04:	db04      	blt.n	800fa10 <__s2b+0x78>
 800fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0a:	340a      	adds	r4, #10
 800fa0c:	2509      	movs	r5, #9
 800fa0e:	e7f6      	b.n	800f9fe <__s2b+0x66>
 800fa10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa14:	4601      	mov	r1, r0
 800fa16:	3b30      	subs	r3, #48	; 0x30
 800fa18:	220a      	movs	r2, #10
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7ff ff72 	bl	800f904 <__multadd>
 800fa20:	e7ee      	b.n	800fa00 <__s2b+0x68>
 800fa22:	bf00      	nop
 800fa24:	080113bb 	.word	0x080113bb
 800fa28:	0801144c 	.word	0x0801144c

0800fa2c <__hi0bits>:
 800fa2c:	0c03      	lsrs	r3, r0, #16
 800fa2e:	041b      	lsls	r3, r3, #16
 800fa30:	b9d3      	cbnz	r3, 800fa68 <__hi0bits+0x3c>
 800fa32:	0400      	lsls	r0, r0, #16
 800fa34:	2310      	movs	r3, #16
 800fa36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa3a:	bf04      	itt	eq
 800fa3c:	0200      	lsleq	r0, r0, #8
 800fa3e:	3308      	addeq	r3, #8
 800fa40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa44:	bf04      	itt	eq
 800fa46:	0100      	lsleq	r0, r0, #4
 800fa48:	3304      	addeq	r3, #4
 800fa4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa4e:	bf04      	itt	eq
 800fa50:	0080      	lsleq	r0, r0, #2
 800fa52:	3302      	addeq	r3, #2
 800fa54:	2800      	cmp	r0, #0
 800fa56:	db05      	blt.n	800fa64 <__hi0bits+0x38>
 800fa58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa5c:	f103 0301 	add.w	r3, r3, #1
 800fa60:	bf08      	it	eq
 800fa62:	2320      	moveq	r3, #32
 800fa64:	4618      	mov	r0, r3
 800fa66:	4770      	bx	lr
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e7e4      	b.n	800fa36 <__hi0bits+0xa>

0800fa6c <__lo0bits>:
 800fa6c:	6803      	ldr	r3, [r0, #0]
 800fa6e:	f013 0207 	ands.w	r2, r3, #7
 800fa72:	4601      	mov	r1, r0
 800fa74:	d00b      	beq.n	800fa8e <__lo0bits+0x22>
 800fa76:	07da      	lsls	r2, r3, #31
 800fa78:	d424      	bmi.n	800fac4 <__lo0bits+0x58>
 800fa7a:	0798      	lsls	r0, r3, #30
 800fa7c:	bf49      	itett	mi
 800fa7e:	085b      	lsrmi	r3, r3, #1
 800fa80:	089b      	lsrpl	r3, r3, #2
 800fa82:	2001      	movmi	r0, #1
 800fa84:	600b      	strmi	r3, [r1, #0]
 800fa86:	bf5c      	itt	pl
 800fa88:	600b      	strpl	r3, [r1, #0]
 800fa8a:	2002      	movpl	r0, #2
 800fa8c:	4770      	bx	lr
 800fa8e:	b298      	uxth	r0, r3
 800fa90:	b9b0      	cbnz	r0, 800fac0 <__lo0bits+0x54>
 800fa92:	0c1b      	lsrs	r3, r3, #16
 800fa94:	2010      	movs	r0, #16
 800fa96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fa9a:	bf04      	itt	eq
 800fa9c:	0a1b      	lsreq	r3, r3, #8
 800fa9e:	3008      	addeq	r0, #8
 800faa0:	071a      	lsls	r2, r3, #28
 800faa2:	bf04      	itt	eq
 800faa4:	091b      	lsreq	r3, r3, #4
 800faa6:	3004      	addeq	r0, #4
 800faa8:	079a      	lsls	r2, r3, #30
 800faaa:	bf04      	itt	eq
 800faac:	089b      	lsreq	r3, r3, #2
 800faae:	3002      	addeq	r0, #2
 800fab0:	07da      	lsls	r2, r3, #31
 800fab2:	d403      	bmi.n	800fabc <__lo0bits+0x50>
 800fab4:	085b      	lsrs	r3, r3, #1
 800fab6:	f100 0001 	add.w	r0, r0, #1
 800faba:	d005      	beq.n	800fac8 <__lo0bits+0x5c>
 800fabc:	600b      	str	r3, [r1, #0]
 800fabe:	4770      	bx	lr
 800fac0:	4610      	mov	r0, r2
 800fac2:	e7e8      	b.n	800fa96 <__lo0bits+0x2a>
 800fac4:	2000      	movs	r0, #0
 800fac6:	4770      	bx	lr
 800fac8:	2020      	movs	r0, #32
 800faca:	4770      	bx	lr

0800facc <__i2b>:
 800facc:	b510      	push	{r4, lr}
 800face:	460c      	mov	r4, r1
 800fad0:	2101      	movs	r1, #1
 800fad2:	f7ff feb5 	bl	800f840 <_Balloc>
 800fad6:	4602      	mov	r2, r0
 800fad8:	b928      	cbnz	r0, 800fae6 <__i2b+0x1a>
 800fada:	4b05      	ldr	r3, [pc, #20]	; (800faf0 <__i2b+0x24>)
 800fadc:	4805      	ldr	r0, [pc, #20]	; (800faf4 <__i2b+0x28>)
 800fade:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fae2:	f000 fceb 	bl	80104bc <__assert_func>
 800fae6:	2301      	movs	r3, #1
 800fae8:	6144      	str	r4, [r0, #20]
 800faea:	6103      	str	r3, [r0, #16]
 800faec:	bd10      	pop	{r4, pc}
 800faee:	bf00      	nop
 800faf0:	080113bb 	.word	0x080113bb
 800faf4:	0801144c 	.word	0x0801144c

0800faf8 <__multiply>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	4614      	mov	r4, r2
 800fafe:	690a      	ldr	r2, [r1, #16]
 800fb00:	6923      	ldr	r3, [r4, #16]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	bfb8      	it	lt
 800fb06:	460b      	movlt	r3, r1
 800fb08:	460d      	mov	r5, r1
 800fb0a:	bfbc      	itt	lt
 800fb0c:	4625      	movlt	r5, r4
 800fb0e:	461c      	movlt	r4, r3
 800fb10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb18:	68ab      	ldr	r3, [r5, #8]
 800fb1a:	6869      	ldr	r1, [r5, #4]
 800fb1c:	eb0a 0709 	add.w	r7, sl, r9
 800fb20:	42bb      	cmp	r3, r7
 800fb22:	b085      	sub	sp, #20
 800fb24:	bfb8      	it	lt
 800fb26:	3101      	addlt	r1, #1
 800fb28:	f7ff fe8a 	bl	800f840 <_Balloc>
 800fb2c:	b930      	cbnz	r0, 800fb3c <__multiply+0x44>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	4b42      	ldr	r3, [pc, #264]	; (800fc3c <__multiply+0x144>)
 800fb32:	4843      	ldr	r0, [pc, #268]	; (800fc40 <__multiply+0x148>)
 800fb34:	f240 115d 	movw	r1, #349	; 0x15d
 800fb38:	f000 fcc0 	bl	80104bc <__assert_func>
 800fb3c:	f100 0614 	add.w	r6, r0, #20
 800fb40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fb44:	4633      	mov	r3, r6
 800fb46:	2200      	movs	r2, #0
 800fb48:	4543      	cmp	r3, r8
 800fb4a:	d31e      	bcc.n	800fb8a <__multiply+0x92>
 800fb4c:	f105 0c14 	add.w	ip, r5, #20
 800fb50:	f104 0314 	add.w	r3, r4, #20
 800fb54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fb58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fb5c:	9202      	str	r2, [sp, #8]
 800fb5e:	ebac 0205 	sub.w	r2, ip, r5
 800fb62:	3a15      	subs	r2, #21
 800fb64:	f022 0203 	bic.w	r2, r2, #3
 800fb68:	3204      	adds	r2, #4
 800fb6a:	f105 0115 	add.w	r1, r5, #21
 800fb6e:	458c      	cmp	ip, r1
 800fb70:	bf38      	it	cc
 800fb72:	2204      	movcc	r2, #4
 800fb74:	9201      	str	r2, [sp, #4]
 800fb76:	9a02      	ldr	r2, [sp, #8]
 800fb78:	9303      	str	r3, [sp, #12]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d808      	bhi.n	800fb90 <__multiply+0x98>
 800fb7e:	2f00      	cmp	r7, #0
 800fb80:	dc55      	bgt.n	800fc2e <__multiply+0x136>
 800fb82:	6107      	str	r7, [r0, #16]
 800fb84:	b005      	add	sp, #20
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	f843 2b04 	str.w	r2, [r3], #4
 800fb8e:	e7db      	b.n	800fb48 <__multiply+0x50>
 800fb90:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb94:	f1ba 0f00 	cmp.w	sl, #0
 800fb98:	d020      	beq.n	800fbdc <__multiply+0xe4>
 800fb9a:	f105 0e14 	add.w	lr, r5, #20
 800fb9e:	46b1      	mov	r9, r6
 800fba0:	2200      	movs	r2, #0
 800fba2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fba6:	f8d9 b000 	ldr.w	fp, [r9]
 800fbaa:	b2a1      	uxth	r1, r4
 800fbac:	fa1f fb8b 	uxth.w	fp, fp
 800fbb0:	fb0a b101 	mla	r1, sl, r1, fp
 800fbb4:	4411      	add	r1, r2
 800fbb6:	f8d9 2000 	ldr.w	r2, [r9]
 800fbba:	0c24      	lsrs	r4, r4, #16
 800fbbc:	0c12      	lsrs	r2, r2, #16
 800fbbe:	fb0a 2404 	mla	r4, sl, r4, r2
 800fbc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fbc6:	b289      	uxth	r1, r1
 800fbc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fbcc:	45f4      	cmp	ip, lr
 800fbce:	f849 1b04 	str.w	r1, [r9], #4
 800fbd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fbd6:	d8e4      	bhi.n	800fba2 <__multiply+0xaa>
 800fbd8:	9901      	ldr	r1, [sp, #4]
 800fbda:	5072      	str	r2, [r6, r1]
 800fbdc:	9a03      	ldr	r2, [sp, #12]
 800fbde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	f1b9 0f00 	cmp.w	r9, #0
 800fbe8:	d01f      	beq.n	800fc2a <__multiply+0x132>
 800fbea:	6834      	ldr	r4, [r6, #0]
 800fbec:	f105 0114 	add.w	r1, r5, #20
 800fbf0:	46b6      	mov	lr, r6
 800fbf2:	f04f 0a00 	mov.w	sl, #0
 800fbf6:	880a      	ldrh	r2, [r1, #0]
 800fbf8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fbfc:	fb09 b202 	mla	r2, r9, r2, fp
 800fc00:	4492      	add	sl, r2
 800fc02:	b2a4      	uxth	r4, r4
 800fc04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc08:	f84e 4b04 	str.w	r4, [lr], #4
 800fc0c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc10:	f8be 2000 	ldrh.w	r2, [lr]
 800fc14:	0c24      	lsrs	r4, r4, #16
 800fc16:	fb09 2404 	mla	r4, r9, r4, r2
 800fc1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc1e:	458c      	cmp	ip, r1
 800fc20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc24:	d8e7      	bhi.n	800fbf6 <__multiply+0xfe>
 800fc26:	9a01      	ldr	r2, [sp, #4]
 800fc28:	50b4      	str	r4, [r6, r2]
 800fc2a:	3604      	adds	r6, #4
 800fc2c:	e7a3      	b.n	800fb76 <__multiply+0x7e>
 800fc2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1a5      	bne.n	800fb82 <__multiply+0x8a>
 800fc36:	3f01      	subs	r7, #1
 800fc38:	e7a1      	b.n	800fb7e <__multiply+0x86>
 800fc3a:	bf00      	nop
 800fc3c:	080113bb 	.word	0x080113bb
 800fc40:	0801144c 	.word	0x0801144c

0800fc44 <__pow5mult>:
 800fc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc48:	4615      	mov	r5, r2
 800fc4a:	f012 0203 	ands.w	r2, r2, #3
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460f      	mov	r7, r1
 800fc52:	d007      	beq.n	800fc64 <__pow5mult+0x20>
 800fc54:	4c25      	ldr	r4, [pc, #148]	; (800fcec <__pow5mult+0xa8>)
 800fc56:	3a01      	subs	r2, #1
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc5e:	f7ff fe51 	bl	800f904 <__multadd>
 800fc62:	4607      	mov	r7, r0
 800fc64:	10ad      	asrs	r5, r5, #2
 800fc66:	d03d      	beq.n	800fce4 <__pow5mult+0xa0>
 800fc68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc6a:	b97c      	cbnz	r4, 800fc8c <__pow5mult+0x48>
 800fc6c:	2010      	movs	r0, #16
 800fc6e:	f7fd f82b 	bl	800ccc8 <malloc>
 800fc72:	4602      	mov	r2, r0
 800fc74:	6270      	str	r0, [r6, #36]	; 0x24
 800fc76:	b928      	cbnz	r0, 800fc84 <__pow5mult+0x40>
 800fc78:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <__pow5mult+0xac>)
 800fc7a:	481e      	ldr	r0, [pc, #120]	; (800fcf4 <__pow5mult+0xb0>)
 800fc7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc80:	f000 fc1c 	bl	80104bc <__assert_func>
 800fc84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc88:	6004      	str	r4, [r0, #0]
 800fc8a:	60c4      	str	r4, [r0, #12]
 800fc8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc94:	b94c      	cbnz	r4, 800fcaa <__pow5mult+0x66>
 800fc96:	f240 2171 	movw	r1, #625	; 0x271
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7ff ff16 	bl	800facc <__i2b>
 800fca0:	2300      	movs	r3, #0
 800fca2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fca6:	4604      	mov	r4, r0
 800fca8:	6003      	str	r3, [r0, #0]
 800fcaa:	f04f 0900 	mov.w	r9, #0
 800fcae:	07eb      	lsls	r3, r5, #31
 800fcb0:	d50a      	bpl.n	800fcc8 <__pow5mult+0x84>
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	4622      	mov	r2, r4
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f7ff ff1e 	bl	800faf8 <__multiply>
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	4680      	mov	r8, r0
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f7ff fdfd 	bl	800f8c0 <_Bfree>
 800fcc6:	4647      	mov	r7, r8
 800fcc8:	106d      	asrs	r5, r5, #1
 800fcca:	d00b      	beq.n	800fce4 <__pow5mult+0xa0>
 800fccc:	6820      	ldr	r0, [r4, #0]
 800fcce:	b938      	cbnz	r0, 800fce0 <__pow5mult+0x9c>
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f7ff ff0f 	bl	800faf8 <__multiply>
 800fcda:	6020      	str	r0, [r4, #0]
 800fcdc:	f8c0 9000 	str.w	r9, [r0]
 800fce0:	4604      	mov	r4, r0
 800fce2:	e7e4      	b.n	800fcae <__pow5mult+0x6a>
 800fce4:	4638      	mov	r0, r7
 800fce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcea:	bf00      	nop
 800fcec:	080115a0 	.word	0x080115a0
 800fcf0:	08011345 	.word	0x08011345
 800fcf4:	0801144c 	.word	0x0801144c

0800fcf8 <__lshift>:
 800fcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	6849      	ldr	r1, [r1, #4]
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	4607      	mov	r7, r0
 800fd0a:	4691      	mov	r9, r2
 800fd0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd10:	f108 0601 	add.w	r6, r8, #1
 800fd14:	42b3      	cmp	r3, r6
 800fd16:	db0b      	blt.n	800fd30 <__lshift+0x38>
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f7ff fd91 	bl	800f840 <_Balloc>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	b948      	cbnz	r0, 800fd36 <__lshift+0x3e>
 800fd22:	4602      	mov	r2, r0
 800fd24:	4b28      	ldr	r3, [pc, #160]	; (800fdc8 <__lshift+0xd0>)
 800fd26:	4829      	ldr	r0, [pc, #164]	; (800fdcc <__lshift+0xd4>)
 800fd28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd2c:	f000 fbc6 	bl	80104bc <__assert_func>
 800fd30:	3101      	adds	r1, #1
 800fd32:	005b      	lsls	r3, r3, #1
 800fd34:	e7ee      	b.n	800fd14 <__lshift+0x1c>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f100 0114 	add.w	r1, r0, #20
 800fd3c:	f100 0210 	add.w	r2, r0, #16
 800fd40:	4618      	mov	r0, r3
 800fd42:	4553      	cmp	r3, sl
 800fd44:	db33      	blt.n	800fdae <__lshift+0xb6>
 800fd46:	6920      	ldr	r0, [r4, #16]
 800fd48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd4c:	f104 0314 	add.w	r3, r4, #20
 800fd50:	f019 091f 	ands.w	r9, r9, #31
 800fd54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd5c:	d02b      	beq.n	800fdb6 <__lshift+0xbe>
 800fd5e:	f1c9 0e20 	rsb	lr, r9, #32
 800fd62:	468a      	mov	sl, r1
 800fd64:	2200      	movs	r2, #0
 800fd66:	6818      	ldr	r0, [r3, #0]
 800fd68:	fa00 f009 	lsl.w	r0, r0, r9
 800fd6c:	4302      	orrs	r2, r0
 800fd6e:	f84a 2b04 	str.w	r2, [sl], #4
 800fd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd76:	459c      	cmp	ip, r3
 800fd78:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd7c:	d8f3      	bhi.n	800fd66 <__lshift+0x6e>
 800fd7e:	ebac 0304 	sub.w	r3, ip, r4
 800fd82:	3b15      	subs	r3, #21
 800fd84:	f023 0303 	bic.w	r3, r3, #3
 800fd88:	3304      	adds	r3, #4
 800fd8a:	f104 0015 	add.w	r0, r4, #21
 800fd8e:	4584      	cmp	ip, r0
 800fd90:	bf38      	it	cc
 800fd92:	2304      	movcc	r3, #4
 800fd94:	50ca      	str	r2, [r1, r3]
 800fd96:	b10a      	cbz	r2, 800fd9c <__lshift+0xa4>
 800fd98:	f108 0602 	add.w	r6, r8, #2
 800fd9c:	3e01      	subs	r6, #1
 800fd9e:	4638      	mov	r0, r7
 800fda0:	612e      	str	r6, [r5, #16]
 800fda2:	4621      	mov	r1, r4
 800fda4:	f7ff fd8c 	bl	800f8c0 <_Bfree>
 800fda8:	4628      	mov	r0, r5
 800fdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdae:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	e7c5      	b.n	800fd42 <__lshift+0x4a>
 800fdb6:	3904      	subs	r1, #4
 800fdb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdc0:	459c      	cmp	ip, r3
 800fdc2:	d8f9      	bhi.n	800fdb8 <__lshift+0xc0>
 800fdc4:	e7ea      	b.n	800fd9c <__lshift+0xa4>
 800fdc6:	bf00      	nop
 800fdc8:	080113bb 	.word	0x080113bb
 800fdcc:	0801144c 	.word	0x0801144c

0800fdd0 <__mcmp>:
 800fdd0:	b530      	push	{r4, r5, lr}
 800fdd2:	6902      	ldr	r2, [r0, #16]
 800fdd4:	690c      	ldr	r4, [r1, #16]
 800fdd6:	1b12      	subs	r2, r2, r4
 800fdd8:	d10e      	bne.n	800fdf8 <__mcmp+0x28>
 800fdda:	f100 0314 	add.w	r3, r0, #20
 800fdde:	3114      	adds	r1, #20
 800fde0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fde4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fde8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fdec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fdf0:	42a5      	cmp	r5, r4
 800fdf2:	d003      	beq.n	800fdfc <__mcmp+0x2c>
 800fdf4:	d305      	bcc.n	800fe02 <__mcmp+0x32>
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	bd30      	pop	{r4, r5, pc}
 800fdfc:	4283      	cmp	r3, r0
 800fdfe:	d3f3      	bcc.n	800fde8 <__mcmp+0x18>
 800fe00:	e7fa      	b.n	800fdf8 <__mcmp+0x28>
 800fe02:	f04f 32ff 	mov.w	r2, #4294967295
 800fe06:	e7f7      	b.n	800fdf8 <__mcmp+0x28>

0800fe08 <__mdiff>:
 800fe08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	4606      	mov	r6, r0
 800fe10:	4611      	mov	r1, r2
 800fe12:	4620      	mov	r0, r4
 800fe14:	4617      	mov	r7, r2
 800fe16:	f7ff ffdb 	bl	800fdd0 <__mcmp>
 800fe1a:	1e05      	subs	r5, r0, #0
 800fe1c:	d110      	bne.n	800fe40 <__mdiff+0x38>
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4630      	mov	r0, r6
 800fe22:	f7ff fd0d 	bl	800f840 <_Balloc>
 800fe26:	b930      	cbnz	r0, 800fe36 <__mdiff+0x2e>
 800fe28:	4b39      	ldr	r3, [pc, #228]	; (800ff10 <__mdiff+0x108>)
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	f240 2132 	movw	r1, #562	; 0x232
 800fe30:	4838      	ldr	r0, [pc, #224]	; (800ff14 <__mdiff+0x10c>)
 800fe32:	f000 fb43 	bl	80104bc <__assert_func>
 800fe36:	2301      	movs	r3, #1
 800fe38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe40:	bfa4      	itt	ge
 800fe42:	463b      	movge	r3, r7
 800fe44:	4627      	movge	r7, r4
 800fe46:	4630      	mov	r0, r6
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	bfa6      	itte	ge
 800fe4c:	461c      	movge	r4, r3
 800fe4e:	2500      	movge	r5, #0
 800fe50:	2501      	movlt	r5, #1
 800fe52:	f7ff fcf5 	bl	800f840 <_Balloc>
 800fe56:	b920      	cbnz	r0, 800fe62 <__mdiff+0x5a>
 800fe58:	4b2d      	ldr	r3, [pc, #180]	; (800ff10 <__mdiff+0x108>)
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe60:	e7e6      	b.n	800fe30 <__mdiff+0x28>
 800fe62:	693e      	ldr	r6, [r7, #16]
 800fe64:	60c5      	str	r5, [r0, #12]
 800fe66:	6925      	ldr	r5, [r4, #16]
 800fe68:	f107 0114 	add.w	r1, r7, #20
 800fe6c:	f104 0914 	add.w	r9, r4, #20
 800fe70:	f100 0e14 	add.w	lr, r0, #20
 800fe74:	f107 0210 	add.w	r2, r7, #16
 800fe78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fe7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fe80:	46f2      	mov	sl, lr
 800fe82:	2700      	movs	r7, #0
 800fe84:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe8c:	fa1f f883 	uxth.w	r8, r3
 800fe90:	fa17 f78b 	uxtah	r7, r7, fp
 800fe94:	0c1b      	lsrs	r3, r3, #16
 800fe96:	eba7 0808 	sub.w	r8, r7, r8
 800fe9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fea2:	fa1f f888 	uxth.w	r8, r8
 800fea6:	141f      	asrs	r7, r3, #16
 800fea8:	454d      	cmp	r5, r9
 800feaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800feae:	f84a 3b04 	str.w	r3, [sl], #4
 800feb2:	d8e7      	bhi.n	800fe84 <__mdiff+0x7c>
 800feb4:	1b2b      	subs	r3, r5, r4
 800feb6:	3b15      	subs	r3, #21
 800feb8:	f023 0303 	bic.w	r3, r3, #3
 800febc:	3304      	adds	r3, #4
 800febe:	3415      	adds	r4, #21
 800fec0:	42a5      	cmp	r5, r4
 800fec2:	bf38      	it	cc
 800fec4:	2304      	movcc	r3, #4
 800fec6:	4419      	add	r1, r3
 800fec8:	4473      	add	r3, lr
 800feca:	469e      	mov	lr, r3
 800fecc:	460d      	mov	r5, r1
 800fece:	4565      	cmp	r5, ip
 800fed0:	d30e      	bcc.n	800fef0 <__mdiff+0xe8>
 800fed2:	f10c 0203 	add.w	r2, ip, #3
 800fed6:	1a52      	subs	r2, r2, r1
 800fed8:	f022 0203 	bic.w	r2, r2, #3
 800fedc:	3903      	subs	r1, #3
 800fede:	458c      	cmp	ip, r1
 800fee0:	bf38      	it	cc
 800fee2:	2200      	movcc	r2, #0
 800fee4:	441a      	add	r2, r3
 800fee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800feea:	b17b      	cbz	r3, 800ff0c <__mdiff+0x104>
 800feec:	6106      	str	r6, [r0, #16]
 800feee:	e7a5      	b.n	800fe3c <__mdiff+0x34>
 800fef0:	f855 8b04 	ldr.w	r8, [r5], #4
 800fef4:	fa17 f488 	uxtah	r4, r7, r8
 800fef8:	1422      	asrs	r2, r4, #16
 800fefa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fefe:	b2a4      	uxth	r4, r4
 800ff00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ff04:	f84e 4b04 	str.w	r4, [lr], #4
 800ff08:	1417      	asrs	r7, r2, #16
 800ff0a:	e7e0      	b.n	800fece <__mdiff+0xc6>
 800ff0c:	3e01      	subs	r6, #1
 800ff0e:	e7ea      	b.n	800fee6 <__mdiff+0xde>
 800ff10:	080113bb 	.word	0x080113bb
 800ff14:	0801144c 	.word	0x0801144c

0800ff18 <__ulp>:
 800ff18:	b082      	sub	sp, #8
 800ff1a:	ed8d 0b00 	vstr	d0, [sp]
 800ff1e:	9b01      	ldr	r3, [sp, #4]
 800ff20:	4912      	ldr	r1, [pc, #72]	; (800ff6c <__ulp+0x54>)
 800ff22:	4019      	ands	r1, r3
 800ff24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	dd05      	ble.n	800ff38 <__ulp+0x20>
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	ec43 2b10 	vmov	d0, r2, r3
 800ff34:	b002      	add	sp, #8
 800ff36:	4770      	bx	lr
 800ff38:	4249      	negs	r1, r1
 800ff3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff42:	f04f 0200 	mov.w	r2, #0
 800ff46:	f04f 0300 	mov.w	r3, #0
 800ff4a:	da04      	bge.n	800ff56 <__ulp+0x3e>
 800ff4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff50:	fa41 f300 	asr.w	r3, r1, r0
 800ff54:	e7ec      	b.n	800ff30 <__ulp+0x18>
 800ff56:	f1a0 0114 	sub.w	r1, r0, #20
 800ff5a:	291e      	cmp	r1, #30
 800ff5c:	bfda      	itte	le
 800ff5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ff62:	fa20 f101 	lsrle.w	r1, r0, r1
 800ff66:	2101      	movgt	r1, #1
 800ff68:	460a      	mov	r2, r1
 800ff6a:	e7e1      	b.n	800ff30 <__ulp+0x18>
 800ff6c:	7ff00000 	.word	0x7ff00000

0800ff70 <__b2d>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	6905      	ldr	r5, [r0, #16]
 800ff74:	f100 0714 	add.w	r7, r0, #20
 800ff78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ff7c:	1f2e      	subs	r6, r5, #4
 800ff7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff fd52 	bl	800fa2c <__hi0bits>
 800ff88:	f1c0 0320 	rsb	r3, r0, #32
 800ff8c:	280a      	cmp	r0, #10
 800ff8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801000c <__b2d+0x9c>
 800ff92:	600b      	str	r3, [r1, #0]
 800ff94:	dc14      	bgt.n	800ffc0 <__b2d+0x50>
 800ff96:	f1c0 0e0b 	rsb	lr, r0, #11
 800ff9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ff9e:	42b7      	cmp	r7, r6
 800ffa0:	ea41 030c 	orr.w	r3, r1, ip
 800ffa4:	bf34      	ite	cc
 800ffa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffaa:	2100      	movcs	r1, #0
 800ffac:	3015      	adds	r0, #21
 800ffae:	fa04 f000 	lsl.w	r0, r4, r0
 800ffb2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ffb6:	ea40 0201 	orr.w	r2, r0, r1
 800ffba:	ec43 2b10 	vmov	d0, r2, r3
 800ffbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc0:	42b7      	cmp	r7, r6
 800ffc2:	bf3a      	itte	cc
 800ffc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffc8:	f1a5 0608 	subcc.w	r6, r5, #8
 800ffcc:	2100      	movcs	r1, #0
 800ffce:	380b      	subs	r0, #11
 800ffd0:	d017      	beq.n	8010002 <__b2d+0x92>
 800ffd2:	f1c0 0c20 	rsb	ip, r0, #32
 800ffd6:	fa04 f500 	lsl.w	r5, r4, r0
 800ffda:	42be      	cmp	r6, r7
 800ffdc:	fa21 f40c 	lsr.w	r4, r1, ip
 800ffe0:	ea45 0504 	orr.w	r5, r5, r4
 800ffe4:	bf8c      	ite	hi
 800ffe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ffea:	2400      	movls	r4, #0
 800ffec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fff0:	fa01 f000 	lsl.w	r0, r1, r0
 800fff4:	fa24 f40c 	lsr.w	r4, r4, ip
 800fff8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fffc:	ea40 0204 	orr.w	r2, r0, r4
 8010000:	e7db      	b.n	800ffba <__b2d+0x4a>
 8010002:	ea44 030c 	orr.w	r3, r4, ip
 8010006:	460a      	mov	r2, r1
 8010008:	e7d7      	b.n	800ffba <__b2d+0x4a>
 801000a:	bf00      	nop
 801000c:	3ff00000 	.word	0x3ff00000

08010010 <__d2b>:
 8010010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010014:	4689      	mov	r9, r1
 8010016:	2101      	movs	r1, #1
 8010018:	ec57 6b10 	vmov	r6, r7, d0
 801001c:	4690      	mov	r8, r2
 801001e:	f7ff fc0f 	bl	800f840 <_Balloc>
 8010022:	4604      	mov	r4, r0
 8010024:	b930      	cbnz	r0, 8010034 <__d2b+0x24>
 8010026:	4602      	mov	r2, r0
 8010028:	4b25      	ldr	r3, [pc, #148]	; (80100c0 <__d2b+0xb0>)
 801002a:	4826      	ldr	r0, [pc, #152]	; (80100c4 <__d2b+0xb4>)
 801002c:	f240 310a 	movw	r1, #778	; 0x30a
 8010030:	f000 fa44 	bl	80104bc <__assert_func>
 8010034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801003c:	bb35      	cbnz	r5, 801008c <__d2b+0x7c>
 801003e:	2e00      	cmp	r6, #0
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	d028      	beq.n	8010096 <__d2b+0x86>
 8010044:	4668      	mov	r0, sp
 8010046:	9600      	str	r6, [sp, #0]
 8010048:	f7ff fd10 	bl	800fa6c <__lo0bits>
 801004c:	9900      	ldr	r1, [sp, #0]
 801004e:	b300      	cbz	r0, 8010092 <__d2b+0x82>
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	f1c0 0320 	rsb	r3, r0, #32
 8010056:	fa02 f303 	lsl.w	r3, r2, r3
 801005a:	430b      	orrs	r3, r1
 801005c:	40c2      	lsrs	r2, r0
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	9201      	str	r2, [sp, #4]
 8010062:	9b01      	ldr	r3, [sp, #4]
 8010064:	61a3      	str	r3, [r4, #24]
 8010066:	2b00      	cmp	r3, #0
 8010068:	bf14      	ite	ne
 801006a:	2202      	movne	r2, #2
 801006c:	2201      	moveq	r2, #1
 801006e:	6122      	str	r2, [r4, #16]
 8010070:	b1d5      	cbz	r5, 80100a8 <__d2b+0x98>
 8010072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010076:	4405      	add	r5, r0
 8010078:	f8c9 5000 	str.w	r5, [r9]
 801007c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010080:	f8c8 0000 	str.w	r0, [r8]
 8010084:	4620      	mov	r0, r4
 8010086:	b003      	add	sp, #12
 8010088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801008c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010090:	e7d5      	b.n	801003e <__d2b+0x2e>
 8010092:	6161      	str	r1, [r4, #20]
 8010094:	e7e5      	b.n	8010062 <__d2b+0x52>
 8010096:	a801      	add	r0, sp, #4
 8010098:	f7ff fce8 	bl	800fa6c <__lo0bits>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	6163      	str	r3, [r4, #20]
 80100a0:	2201      	movs	r2, #1
 80100a2:	6122      	str	r2, [r4, #16]
 80100a4:	3020      	adds	r0, #32
 80100a6:	e7e3      	b.n	8010070 <__d2b+0x60>
 80100a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100b0:	f8c9 0000 	str.w	r0, [r9]
 80100b4:	6918      	ldr	r0, [r3, #16]
 80100b6:	f7ff fcb9 	bl	800fa2c <__hi0bits>
 80100ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100be:	e7df      	b.n	8010080 <__d2b+0x70>
 80100c0:	080113bb 	.word	0x080113bb
 80100c4:	0801144c 	.word	0x0801144c

080100c8 <__ratio>:
 80100c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	4688      	mov	r8, r1
 80100ce:	4669      	mov	r1, sp
 80100d0:	4681      	mov	r9, r0
 80100d2:	f7ff ff4d 	bl	800ff70 <__b2d>
 80100d6:	a901      	add	r1, sp, #4
 80100d8:	4640      	mov	r0, r8
 80100da:	ec55 4b10 	vmov	r4, r5, d0
 80100de:	f7ff ff47 	bl	800ff70 <__b2d>
 80100e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80100ea:	eba3 0c02 	sub.w	ip, r3, r2
 80100ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80100f8:	ec51 0b10 	vmov	r0, r1, d0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfd6      	itet	le
 8010100:	460a      	movle	r2, r1
 8010102:	462a      	movgt	r2, r5
 8010104:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010108:	468b      	mov	fp, r1
 801010a:	462f      	mov	r7, r5
 801010c:	bfd4      	ite	le
 801010e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010112:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010116:	4620      	mov	r0, r4
 8010118:	ee10 2a10 	vmov	r2, s0
 801011c:	465b      	mov	r3, fp
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 fb94 	bl	800084c <__aeabi_ddiv>
 8010124:	ec41 0b10 	vmov	d0, r0, r1
 8010128:	b003      	add	sp, #12
 801012a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801012e <__copybits>:
 801012e:	3901      	subs	r1, #1
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	1149      	asrs	r1, r1, #5
 8010134:	6914      	ldr	r4, [r2, #16]
 8010136:	3101      	adds	r1, #1
 8010138:	f102 0314 	add.w	r3, r2, #20
 801013c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010140:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010144:	1f05      	subs	r5, r0, #4
 8010146:	42a3      	cmp	r3, r4
 8010148:	d30c      	bcc.n	8010164 <__copybits+0x36>
 801014a:	1aa3      	subs	r3, r4, r2
 801014c:	3b11      	subs	r3, #17
 801014e:	f023 0303 	bic.w	r3, r3, #3
 8010152:	3211      	adds	r2, #17
 8010154:	42a2      	cmp	r2, r4
 8010156:	bf88      	it	hi
 8010158:	2300      	movhi	r3, #0
 801015a:	4418      	add	r0, r3
 801015c:	2300      	movs	r3, #0
 801015e:	4288      	cmp	r0, r1
 8010160:	d305      	bcc.n	801016e <__copybits+0x40>
 8010162:	bd70      	pop	{r4, r5, r6, pc}
 8010164:	f853 6b04 	ldr.w	r6, [r3], #4
 8010168:	f845 6f04 	str.w	r6, [r5, #4]!
 801016c:	e7eb      	b.n	8010146 <__copybits+0x18>
 801016e:	f840 3b04 	str.w	r3, [r0], #4
 8010172:	e7f4      	b.n	801015e <__copybits+0x30>

08010174 <__any_on>:
 8010174:	f100 0214 	add.w	r2, r0, #20
 8010178:	6900      	ldr	r0, [r0, #16]
 801017a:	114b      	asrs	r3, r1, #5
 801017c:	4298      	cmp	r0, r3
 801017e:	b510      	push	{r4, lr}
 8010180:	db11      	blt.n	80101a6 <__any_on+0x32>
 8010182:	dd0a      	ble.n	801019a <__any_on+0x26>
 8010184:	f011 011f 	ands.w	r1, r1, #31
 8010188:	d007      	beq.n	801019a <__any_on+0x26>
 801018a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801018e:	fa24 f001 	lsr.w	r0, r4, r1
 8010192:	fa00 f101 	lsl.w	r1, r0, r1
 8010196:	428c      	cmp	r4, r1
 8010198:	d10b      	bne.n	80101b2 <__any_on+0x3e>
 801019a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801019e:	4293      	cmp	r3, r2
 80101a0:	d803      	bhi.n	80101aa <__any_on+0x36>
 80101a2:	2000      	movs	r0, #0
 80101a4:	bd10      	pop	{r4, pc}
 80101a6:	4603      	mov	r3, r0
 80101a8:	e7f7      	b.n	801019a <__any_on+0x26>
 80101aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ae:	2900      	cmp	r1, #0
 80101b0:	d0f5      	beq.n	801019e <__any_on+0x2a>
 80101b2:	2001      	movs	r0, #1
 80101b4:	e7f6      	b.n	80101a4 <__any_on+0x30>

080101b6 <_calloc_r>:
 80101b6:	b513      	push	{r0, r1, r4, lr}
 80101b8:	434a      	muls	r2, r1
 80101ba:	4611      	mov	r1, r2
 80101bc:	9201      	str	r2, [sp, #4]
 80101be:	f7fc fdeb 	bl	800cd98 <_malloc_r>
 80101c2:	4604      	mov	r4, r0
 80101c4:	b118      	cbz	r0, 80101ce <_calloc_r+0x18>
 80101c6:	9a01      	ldr	r2, [sp, #4]
 80101c8:	2100      	movs	r1, #0
 80101ca:	f7fc fd8d 	bl	800cce8 <memset>
 80101ce:	4620      	mov	r0, r4
 80101d0:	b002      	add	sp, #8
 80101d2:	bd10      	pop	{r4, pc}

080101d4 <__ssputs_r>:
 80101d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d8:	688e      	ldr	r6, [r1, #8]
 80101da:	429e      	cmp	r6, r3
 80101dc:	4682      	mov	sl, r0
 80101de:	460c      	mov	r4, r1
 80101e0:	4690      	mov	r8, r2
 80101e2:	461f      	mov	r7, r3
 80101e4:	d838      	bhi.n	8010258 <__ssputs_r+0x84>
 80101e6:	898a      	ldrh	r2, [r1, #12]
 80101e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101ec:	d032      	beq.n	8010254 <__ssputs_r+0x80>
 80101ee:	6825      	ldr	r5, [r4, #0]
 80101f0:	6909      	ldr	r1, [r1, #16]
 80101f2:	eba5 0901 	sub.w	r9, r5, r1
 80101f6:	6965      	ldr	r5, [r4, #20]
 80101f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010200:	3301      	adds	r3, #1
 8010202:	444b      	add	r3, r9
 8010204:	106d      	asrs	r5, r5, #1
 8010206:	429d      	cmp	r5, r3
 8010208:	bf38      	it	cc
 801020a:	461d      	movcc	r5, r3
 801020c:	0553      	lsls	r3, r2, #21
 801020e:	d531      	bpl.n	8010274 <__ssputs_r+0xa0>
 8010210:	4629      	mov	r1, r5
 8010212:	f7fc fdc1 	bl	800cd98 <_malloc_r>
 8010216:	4606      	mov	r6, r0
 8010218:	b950      	cbnz	r0, 8010230 <__ssputs_r+0x5c>
 801021a:	230c      	movs	r3, #12
 801021c:	f8ca 3000 	str.w	r3, [sl]
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010226:	81a3      	strh	r3, [r4, #12]
 8010228:	f04f 30ff 	mov.w	r0, #4294967295
 801022c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010230:	6921      	ldr	r1, [r4, #16]
 8010232:	464a      	mov	r2, r9
 8010234:	f7ff faea 	bl	800f80c <memcpy>
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010242:	81a3      	strh	r3, [r4, #12]
 8010244:	6126      	str	r6, [r4, #16]
 8010246:	6165      	str	r5, [r4, #20]
 8010248:	444e      	add	r6, r9
 801024a:	eba5 0509 	sub.w	r5, r5, r9
 801024e:	6026      	str	r6, [r4, #0]
 8010250:	60a5      	str	r5, [r4, #8]
 8010252:	463e      	mov	r6, r7
 8010254:	42be      	cmp	r6, r7
 8010256:	d900      	bls.n	801025a <__ssputs_r+0x86>
 8010258:	463e      	mov	r6, r7
 801025a:	4632      	mov	r2, r6
 801025c:	6820      	ldr	r0, [r4, #0]
 801025e:	4641      	mov	r1, r8
 8010260:	f000 f95f 	bl	8010522 <memmove>
 8010264:	68a3      	ldr	r3, [r4, #8]
 8010266:	6822      	ldr	r2, [r4, #0]
 8010268:	1b9b      	subs	r3, r3, r6
 801026a:	4432      	add	r2, r6
 801026c:	60a3      	str	r3, [r4, #8]
 801026e:	6022      	str	r2, [r4, #0]
 8010270:	2000      	movs	r0, #0
 8010272:	e7db      	b.n	801022c <__ssputs_r+0x58>
 8010274:	462a      	mov	r2, r5
 8010276:	f000 f96e 	bl	8010556 <_realloc_r>
 801027a:	4606      	mov	r6, r0
 801027c:	2800      	cmp	r0, #0
 801027e:	d1e1      	bne.n	8010244 <__ssputs_r+0x70>
 8010280:	6921      	ldr	r1, [r4, #16]
 8010282:	4650      	mov	r0, sl
 8010284:	f7fc fd38 	bl	800ccf8 <_free_r>
 8010288:	e7c7      	b.n	801021a <__ssputs_r+0x46>
	...

0801028c <_svfiprintf_r>:
 801028c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010290:	4698      	mov	r8, r3
 8010292:	898b      	ldrh	r3, [r1, #12]
 8010294:	061b      	lsls	r3, r3, #24
 8010296:	b09d      	sub	sp, #116	; 0x74
 8010298:	4607      	mov	r7, r0
 801029a:	460d      	mov	r5, r1
 801029c:	4614      	mov	r4, r2
 801029e:	d50e      	bpl.n	80102be <_svfiprintf_r+0x32>
 80102a0:	690b      	ldr	r3, [r1, #16]
 80102a2:	b963      	cbnz	r3, 80102be <_svfiprintf_r+0x32>
 80102a4:	2140      	movs	r1, #64	; 0x40
 80102a6:	f7fc fd77 	bl	800cd98 <_malloc_r>
 80102aa:	6028      	str	r0, [r5, #0]
 80102ac:	6128      	str	r0, [r5, #16]
 80102ae:	b920      	cbnz	r0, 80102ba <_svfiprintf_r+0x2e>
 80102b0:	230c      	movs	r3, #12
 80102b2:	603b      	str	r3, [r7, #0]
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	e0d1      	b.n	801045e <_svfiprintf_r+0x1d2>
 80102ba:	2340      	movs	r3, #64	; 0x40
 80102bc:	616b      	str	r3, [r5, #20]
 80102be:	2300      	movs	r3, #0
 80102c0:	9309      	str	r3, [sp, #36]	; 0x24
 80102c2:	2320      	movs	r3, #32
 80102c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80102cc:	2330      	movs	r3, #48	; 0x30
 80102ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010478 <_svfiprintf_r+0x1ec>
 80102d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102d6:	f04f 0901 	mov.w	r9, #1
 80102da:	4623      	mov	r3, r4
 80102dc:	469a      	mov	sl, r3
 80102de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102e2:	b10a      	cbz	r2, 80102e8 <_svfiprintf_r+0x5c>
 80102e4:	2a25      	cmp	r2, #37	; 0x25
 80102e6:	d1f9      	bne.n	80102dc <_svfiprintf_r+0x50>
 80102e8:	ebba 0b04 	subs.w	fp, sl, r4
 80102ec:	d00b      	beq.n	8010306 <_svfiprintf_r+0x7a>
 80102ee:	465b      	mov	r3, fp
 80102f0:	4622      	mov	r2, r4
 80102f2:	4629      	mov	r1, r5
 80102f4:	4638      	mov	r0, r7
 80102f6:	f7ff ff6d 	bl	80101d4 <__ssputs_r>
 80102fa:	3001      	adds	r0, #1
 80102fc:	f000 80aa 	beq.w	8010454 <_svfiprintf_r+0x1c8>
 8010300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010302:	445a      	add	r2, fp
 8010304:	9209      	str	r2, [sp, #36]	; 0x24
 8010306:	f89a 3000 	ldrb.w	r3, [sl]
 801030a:	2b00      	cmp	r3, #0
 801030c:	f000 80a2 	beq.w	8010454 <_svfiprintf_r+0x1c8>
 8010310:	2300      	movs	r3, #0
 8010312:	f04f 32ff 	mov.w	r2, #4294967295
 8010316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801031a:	f10a 0a01 	add.w	sl, sl, #1
 801031e:	9304      	str	r3, [sp, #16]
 8010320:	9307      	str	r3, [sp, #28]
 8010322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010326:	931a      	str	r3, [sp, #104]	; 0x68
 8010328:	4654      	mov	r4, sl
 801032a:	2205      	movs	r2, #5
 801032c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010330:	4851      	ldr	r0, [pc, #324]	; (8010478 <_svfiprintf_r+0x1ec>)
 8010332:	f7ef ff55 	bl	80001e0 <memchr>
 8010336:	9a04      	ldr	r2, [sp, #16]
 8010338:	b9d8      	cbnz	r0, 8010372 <_svfiprintf_r+0xe6>
 801033a:	06d0      	lsls	r0, r2, #27
 801033c:	bf44      	itt	mi
 801033e:	2320      	movmi	r3, #32
 8010340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010344:	0711      	lsls	r1, r2, #28
 8010346:	bf44      	itt	mi
 8010348:	232b      	movmi	r3, #43	; 0x2b
 801034a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801034e:	f89a 3000 	ldrb.w	r3, [sl]
 8010352:	2b2a      	cmp	r3, #42	; 0x2a
 8010354:	d015      	beq.n	8010382 <_svfiprintf_r+0xf6>
 8010356:	9a07      	ldr	r2, [sp, #28]
 8010358:	4654      	mov	r4, sl
 801035a:	2000      	movs	r0, #0
 801035c:	f04f 0c0a 	mov.w	ip, #10
 8010360:	4621      	mov	r1, r4
 8010362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010366:	3b30      	subs	r3, #48	; 0x30
 8010368:	2b09      	cmp	r3, #9
 801036a:	d94e      	bls.n	801040a <_svfiprintf_r+0x17e>
 801036c:	b1b0      	cbz	r0, 801039c <_svfiprintf_r+0x110>
 801036e:	9207      	str	r2, [sp, #28]
 8010370:	e014      	b.n	801039c <_svfiprintf_r+0x110>
 8010372:	eba0 0308 	sub.w	r3, r0, r8
 8010376:	fa09 f303 	lsl.w	r3, r9, r3
 801037a:	4313      	orrs	r3, r2
 801037c:	9304      	str	r3, [sp, #16]
 801037e:	46a2      	mov	sl, r4
 8010380:	e7d2      	b.n	8010328 <_svfiprintf_r+0x9c>
 8010382:	9b03      	ldr	r3, [sp, #12]
 8010384:	1d19      	adds	r1, r3, #4
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	9103      	str	r1, [sp, #12]
 801038a:	2b00      	cmp	r3, #0
 801038c:	bfbb      	ittet	lt
 801038e:	425b      	neglt	r3, r3
 8010390:	f042 0202 	orrlt.w	r2, r2, #2
 8010394:	9307      	strge	r3, [sp, #28]
 8010396:	9307      	strlt	r3, [sp, #28]
 8010398:	bfb8      	it	lt
 801039a:	9204      	strlt	r2, [sp, #16]
 801039c:	7823      	ldrb	r3, [r4, #0]
 801039e:	2b2e      	cmp	r3, #46	; 0x2e
 80103a0:	d10c      	bne.n	80103bc <_svfiprintf_r+0x130>
 80103a2:	7863      	ldrb	r3, [r4, #1]
 80103a4:	2b2a      	cmp	r3, #42	; 0x2a
 80103a6:	d135      	bne.n	8010414 <_svfiprintf_r+0x188>
 80103a8:	9b03      	ldr	r3, [sp, #12]
 80103aa:	1d1a      	adds	r2, r3, #4
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	9203      	str	r2, [sp, #12]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	bfb8      	it	lt
 80103b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80103b8:	3402      	adds	r4, #2
 80103ba:	9305      	str	r3, [sp, #20]
 80103bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010488 <_svfiprintf_r+0x1fc>
 80103c0:	7821      	ldrb	r1, [r4, #0]
 80103c2:	2203      	movs	r2, #3
 80103c4:	4650      	mov	r0, sl
 80103c6:	f7ef ff0b 	bl	80001e0 <memchr>
 80103ca:	b140      	cbz	r0, 80103de <_svfiprintf_r+0x152>
 80103cc:	2340      	movs	r3, #64	; 0x40
 80103ce:	eba0 000a 	sub.w	r0, r0, sl
 80103d2:	fa03 f000 	lsl.w	r0, r3, r0
 80103d6:	9b04      	ldr	r3, [sp, #16]
 80103d8:	4303      	orrs	r3, r0
 80103da:	3401      	adds	r4, #1
 80103dc:	9304      	str	r3, [sp, #16]
 80103de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e2:	4826      	ldr	r0, [pc, #152]	; (801047c <_svfiprintf_r+0x1f0>)
 80103e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103e8:	2206      	movs	r2, #6
 80103ea:	f7ef fef9 	bl	80001e0 <memchr>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d038      	beq.n	8010464 <_svfiprintf_r+0x1d8>
 80103f2:	4b23      	ldr	r3, [pc, #140]	; (8010480 <_svfiprintf_r+0x1f4>)
 80103f4:	bb1b      	cbnz	r3, 801043e <_svfiprintf_r+0x1b2>
 80103f6:	9b03      	ldr	r3, [sp, #12]
 80103f8:	3307      	adds	r3, #7
 80103fa:	f023 0307 	bic.w	r3, r3, #7
 80103fe:	3308      	adds	r3, #8
 8010400:	9303      	str	r3, [sp, #12]
 8010402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010404:	4433      	add	r3, r6
 8010406:	9309      	str	r3, [sp, #36]	; 0x24
 8010408:	e767      	b.n	80102da <_svfiprintf_r+0x4e>
 801040a:	fb0c 3202 	mla	r2, ip, r2, r3
 801040e:	460c      	mov	r4, r1
 8010410:	2001      	movs	r0, #1
 8010412:	e7a5      	b.n	8010360 <_svfiprintf_r+0xd4>
 8010414:	2300      	movs	r3, #0
 8010416:	3401      	adds	r4, #1
 8010418:	9305      	str	r3, [sp, #20]
 801041a:	4619      	mov	r1, r3
 801041c:	f04f 0c0a 	mov.w	ip, #10
 8010420:	4620      	mov	r0, r4
 8010422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010426:	3a30      	subs	r2, #48	; 0x30
 8010428:	2a09      	cmp	r2, #9
 801042a:	d903      	bls.n	8010434 <_svfiprintf_r+0x1a8>
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0c5      	beq.n	80103bc <_svfiprintf_r+0x130>
 8010430:	9105      	str	r1, [sp, #20]
 8010432:	e7c3      	b.n	80103bc <_svfiprintf_r+0x130>
 8010434:	fb0c 2101 	mla	r1, ip, r1, r2
 8010438:	4604      	mov	r4, r0
 801043a:	2301      	movs	r3, #1
 801043c:	e7f0      	b.n	8010420 <_svfiprintf_r+0x194>
 801043e:	ab03      	add	r3, sp, #12
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	462a      	mov	r2, r5
 8010444:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <_svfiprintf_r+0x1f8>)
 8010446:	a904      	add	r1, sp, #16
 8010448:	4638      	mov	r0, r7
 801044a:	f7fc fd9f 	bl	800cf8c <_printf_float>
 801044e:	1c42      	adds	r2, r0, #1
 8010450:	4606      	mov	r6, r0
 8010452:	d1d6      	bne.n	8010402 <_svfiprintf_r+0x176>
 8010454:	89ab      	ldrh	r3, [r5, #12]
 8010456:	065b      	lsls	r3, r3, #25
 8010458:	f53f af2c 	bmi.w	80102b4 <_svfiprintf_r+0x28>
 801045c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801045e:	b01d      	add	sp, #116	; 0x74
 8010460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010464:	ab03      	add	r3, sp, #12
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	462a      	mov	r2, r5
 801046a:	4b06      	ldr	r3, [pc, #24]	; (8010484 <_svfiprintf_r+0x1f8>)
 801046c:	a904      	add	r1, sp, #16
 801046e:	4638      	mov	r0, r7
 8010470:	f7fd f830 	bl	800d4d4 <_printf_i>
 8010474:	e7eb      	b.n	801044e <_svfiprintf_r+0x1c2>
 8010476:	bf00      	nop
 8010478:	080115ac 	.word	0x080115ac
 801047c:	080115b6 	.word	0x080115b6
 8010480:	0800cf8d 	.word	0x0800cf8d
 8010484:	080101d5 	.word	0x080101d5
 8010488:	080115b2 	.word	0x080115b2
 801048c:	00000000 	.word	0x00000000

08010490 <nan>:
 8010490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010498 <nan+0x8>
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	00000000 	.word	0x00000000
 801049c:	7ff80000 	.word	0x7ff80000

080104a0 <__ascii_wctomb>:
 80104a0:	b149      	cbz	r1, 80104b6 <__ascii_wctomb+0x16>
 80104a2:	2aff      	cmp	r2, #255	; 0xff
 80104a4:	bf85      	ittet	hi
 80104a6:	238a      	movhi	r3, #138	; 0x8a
 80104a8:	6003      	strhi	r3, [r0, #0]
 80104aa:	700a      	strbls	r2, [r1, #0]
 80104ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80104b0:	bf98      	it	ls
 80104b2:	2001      	movls	r0, #1
 80104b4:	4770      	bx	lr
 80104b6:	4608      	mov	r0, r1
 80104b8:	4770      	bx	lr
	...

080104bc <__assert_func>:
 80104bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104be:	4614      	mov	r4, r2
 80104c0:	461a      	mov	r2, r3
 80104c2:	4b09      	ldr	r3, [pc, #36]	; (80104e8 <__assert_func+0x2c>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4605      	mov	r5, r0
 80104c8:	68d8      	ldr	r0, [r3, #12]
 80104ca:	b14c      	cbz	r4, 80104e0 <__assert_func+0x24>
 80104cc:	4b07      	ldr	r3, [pc, #28]	; (80104ec <__assert_func+0x30>)
 80104ce:	9100      	str	r1, [sp, #0]
 80104d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104d4:	4906      	ldr	r1, [pc, #24]	; (80104f0 <__assert_func+0x34>)
 80104d6:	462b      	mov	r3, r5
 80104d8:	f000 f80e 	bl	80104f8 <fiprintf>
 80104dc:	f000 fa7a 	bl	80109d4 <abort>
 80104e0:	4b04      	ldr	r3, [pc, #16]	; (80104f4 <__assert_func+0x38>)
 80104e2:	461c      	mov	r4, r3
 80104e4:	e7f3      	b.n	80104ce <__assert_func+0x12>
 80104e6:	bf00      	nop
 80104e8:	20000540 	.word	0x20000540
 80104ec:	080115bd 	.word	0x080115bd
 80104f0:	080115ca 	.word	0x080115ca
 80104f4:	080115f8 	.word	0x080115f8

080104f8 <fiprintf>:
 80104f8:	b40e      	push	{r1, r2, r3}
 80104fa:	b503      	push	{r0, r1, lr}
 80104fc:	4601      	mov	r1, r0
 80104fe:	ab03      	add	r3, sp, #12
 8010500:	4805      	ldr	r0, [pc, #20]	; (8010518 <fiprintf+0x20>)
 8010502:	f853 2b04 	ldr.w	r2, [r3], #4
 8010506:	6800      	ldr	r0, [r0, #0]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	f000 f873 	bl	80105f4 <_vfiprintf_r>
 801050e:	b002      	add	sp, #8
 8010510:	f85d eb04 	ldr.w	lr, [sp], #4
 8010514:	b003      	add	sp, #12
 8010516:	4770      	bx	lr
 8010518:	20000540 	.word	0x20000540

0801051c <__retarget_lock_init_recursive>:
 801051c:	4770      	bx	lr

0801051e <__retarget_lock_acquire_recursive>:
 801051e:	4770      	bx	lr

08010520 <__retarget_lock_release_recursive>:
 8010520:	4770      	bx	lr

08010522 <memmove>:
 8010522:	4288      	cmp	r0, r1
 8010524:	b510      	push	{r4, lr}
 8010526:	eb01 0402 	add.w	r4, r1, r2
 801052a:	d902      	bls.n	8010532 <memmove+0x10>
 801052c:	4284      	cmp	r4, r0
 801052e:	4623      	mov	r3, r4
 8010530:	d807      	bhi.n	8010542 <memmove+0x20>
 8010532:	1e43      	subs	r3, r0, #1
 8010534:	42a1      	cmp	r1, r4
 8010536:	d008      	beq.n	801054a <memmove+0x28>
 8010538:	f811 2b01 	ldrb.w	r2, [r1], #1
 801053c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010540:	e7f8      	b.n	8010534 <memmove+0x12>
 8010542:	4402      	add	r2, r0
 8010544:	4601      	mov	r1, r0
 8010546:	428a      	cmp	r2, r1
 8010548:	d100      	bne.n	801054c <memmove+0x2a>
 801054a:	bd10      	pop	{r4, pc}
 801054c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010550:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010554:	e7f7      	b.n	8010546 <memmove+0x24>

08010556 <_realloc_r>:
 8010556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010558:	4607      	mov	r7, r0
 801055a:	4614      	mov	r4, r2
 801055c:	460e      	mov	r6, r1
 801055e:	b921      	cbnz	r1, 801056a <_realloc_r+0x14>
 8010560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010564:	4611      	mov	r1, r2
 8010566:	f7fc bc17 	b.w	800cd98 <_malloc_r>
 801056a:	b922      	cbnz	r2, 8010576 <_realloc_r+0x20>
 801056c:	f7fc fbc4 	bl	800ccf8 <_free_r>
 8010570:	4625      	mov	r5, r4
 8010572:	4628      	mov	r0, r5
 8010574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010576:	f000 fc51 	bl	8010e1c <_malloc_usable_size_r>
 801057a:	42a0      	cmp	r0, r4
 801057c:	d20f      	bcs.n	801059e <_realloc_r+0x48>
 801057e:	4621      	mov	r1, r4
 8010580:	4638      	mov	r0, r7
 8010582:	f7fc fc09 	bl	800cd98 <_malloc_r>
 8010586:	4605      	mov	r5, r0
 8010588:	2800      	cmp	r0, #0
 801058a:	d0f2      	beq.n	8010572 <_realloc_r+0x1c>
 801058c:	4631      	mov	r1, r6
 801058e:	4622      	mov	r2, r4
 8010590:	f7ff f93c 	bl	800f80c <memcpy>
 8010594:	4631      	mov	r1, r6
 8010596:	4638      	mov	r0, r7
 8010598:	f7fc fbae 	bl	800ccf8 <_free_r>
 801059c:	e7e9      	b.n	8010572 <_realloc_r+0x1c>
 801059e:	4635      	mov	r5, r6
 80105a0:	e7e7      	b.n	8010572 <_realloc_r+0x1c>

080105a2 <__sfputc_r>:
 80105a2:	6893      	ldr	r3, [r2, #8]
 80105a4:	3b01      	subs	r3, #1
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	b410      	push	{r4}
 80105aa:	6093      	str	r3, [r2, #8]
 80105ac:	da08      	bge.n	80105c0 <__sfputc_r+0x1e>
 80105ae:	6994      	ldr	r4, [r2, #24]
 80105b0:	42a3      	cmp	r3, r4
 80105b2:	db01      	blt.n	80105b8 <__sfputc_r+0x16>
 80105b4:	290a      	cmp	r1, #10
 80105b6:	d103      	bne.n	80105c0 <__sfputc_r+0x1e>
 80105b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105bc:	f000 b94a 	b.w	8010854 <__swbuf_r>
 80105c0:	6813      	ldr	r3, [r2, #0]
 80105c2:	1c58      	adds	r0, r3, #1
 80105c4:	6010      	str	r0, [r2, #0]
 80105c6:	7019      	strb	r1, [r3, #0]
 80105c8:	4608      	mov	r0, r1
 80105ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <__sfputs_r>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	4606      	mov	r6, r0
 80105d4:	460f      	mov	r7, r1
 80105d6:	4614      	mov	r4, r2
 80105d8:	18d5      	adds	r5, r2, r3
 80105da:	42ac      	cmp	r4, r5
 80105dc:	d101      	bne.n	80105e2 <__sfputs_r+0x12>
 80105de:	2000      	movs	r0, #0
 80105e0:	e007      	b.n	80105f2 <__sfputs_r+0x22>
 80105e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e6:	463a      	mov	r2, r7
 80105e8:	4630      	mov	r0, r6
 80105ea:	f7ff ffda 	bl	80105a2 <__sfputc_r>
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d1f3      	bne.n	80105da <__sfputs_r+0xa>
 80105f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080105f4 <_vfiprintf_r>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	460d      	mov	r5, r1
 80105fa:	b09d      	sub	sp, #116	; 0x74
 80105fc:	4614      	mov	r4, r2
 80105fe:	4698      	mov	r8, r3
 8010600:	4606      	mov	r6, r0
 8010602:	b118      	cbz	r0, 801060c <_vfiprintf_r+0x18>
 8010604:	6983      	ldr	r3, [r0, #24]
 8010606:	b90b      	cbnz	r3, 801060c <_vfiprintf_r+0x18>
 8010608:	f000 fb06 	bl	8010c18 <__sinit>
 801060c:	4b89      	ldr	r3, [pc, #548]	; (8010834 <_vfiprintf_r+0x240>)
 801060e:	429d      	cmp	r5, r3
 8010610:	d11b      	bne.n	801064a <_vfiprintf_r+0x56>
 8010612:	6875      	ldr	r5, [r6, #4]
 8010614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010616:	07d9      	lsls	r1, r3, #31
 8010618:	d405      	bmi.n	8010626 <_vfiprintf_r+0x32>
 801061a:	89ab      	ldrh	r3, [r5, #12]
 801061c:	059a      	lsls	r2, r3, #22
 801061e:	d402      	bmi.n	8010626 <_vfiprintf_r+0x32>
 8010620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010622:	f7ff ff7c 	bl	801051e <__retarget_lock_acquire_recursive>
 8010626:	89ab      	ldrh	r3, [r5, #12]
 8010628:	071b      	lsls	r3, r3, #28
 801062a:	d501      	bpl.n	8010630 <_vfiprintf_r+0x3c>
 801062c:	692b      	ldr	r3, [r5, #16]
 801062e:	b9eb      	cbnz	r3, 801066c <_vfiprintf_r+0x78>
 8010630:	4629      	mov	r1, r5
 8010632:	4630      	mov	r0, r6
 8010634:	f000 f960 	bl	80108f8 <__swsetup_r>
 8010638:	b1c0      	cbz	r0, 801066c <_vfiprintf_r+0x78>
 801063a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801063c:	07dc      	lsls	r4, r3, #31
 801063e:	d50e      	bpl.n	801065e <_vfiprintf_r+0x6a>
 8010640:	f04f 30ff 	mov.w	r0, #4294967295
 8010644:	b01d      	add	sp, #116	; 0x74
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	4b7b      	ldr	r3, [pc, #492]	; (8010838 <_vfiprintf_r+0x244>)
 801064c:	429d      	cmp	r5, r3
 801064e:	d101      	bne.n	8010654 <_vfiprintf_r+0x60>
 8010650:	68b5      	ldr	r5, [r6, #8]
 8010652:	e7df      	b.n	8010614 <_vfiprintf_r+0x20>
 8010654:	4b79      	ldr	r3, [pc, #484]	; (801083c <_vfiprintf_r+0x248>)
 8010656:	429d      	cmp	r5, r3
 8010658:	bf08      	it	eq
 801065a:	68f5      	ldreq	r5, [r6, #12]
 801065c:	e7da      	b.n	8010614 <_vfiprintf_r+0x20>
 801065e:	89ab      	ldrh	r3, [r5, #12]
 8010660:	0598      	lsls	r0, r3, #22
 8010662:	d4ed      	bmi.n	8010640 <_vfiprintf_r+0x4c>
 8010664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010666:	f7ff ff5b 	bl	8010520 <__retarget_lock_release_recursive>
 801066a:	e7e9      	b.n	8010640 <_vfiprintf_r+0x4c>
 801066c:	2300      	movs	r3, #0
 801066e:	9309      	str	r3, [sp, #36]	; 0x24
 8010670:	2320      	movs	r3, #32
 8010672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010676:	f8cd 800c 	str.w	r8, [sp, #12]
 801067a:	2330      	movs	r3, #48	; 0x30
 801067c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010840 <_vfiprintf_r+0x24c>
 8010680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010684:	f04f 0901 	mov.w	r9, #1
 8010688:	4623      	mov	r3, r4
 801068a:	469a      	mov	sl, r3
 801068c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010690:	b10a      	cbz	r2, 8010696 <_vfiprintf_r+0xa2>
 8010692:	2a25      	cmp	r2, #37	; 0x25
 8010694:	d1f9      	bne.n	801068a <_vfiprintf_r+0x96>
 8010696:	ebba 0b04 	subs.w	fp, sl, r4
 801069a:	d00b      	beq.n	80106b4 <_vfiprintf_r+0xc0>
 801069c:	465b      	mov	r3, fp
 801069e:	4622      	mov	r2, r4
 80106a0:	4629      	mov	r1, r5
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff ff94 	bl	80105d0 <__sfputs_r>
 80106a8:	3001      	adds	r0, #1
 80106aa:	f000 80aa 	beq.w	8010802 <_vfiprintf_r+0x20e>
 80106ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106b0:	445a      	add	r2, fp
 80106b2:	9209      	str	r2, [sp, #36]	; 0x24
 80106b4:	f89a 3000 	ldrb.w	r3, [sl]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 80a2 	beq.w	8010802 <_vfiprintf_r+0x20e>
 80106be:	2300      	movs	r3, #0
 80106c0:	f04f 32ff 	mov.w	r2, #4294967295
 80106c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106c8:	f10a 0a01 	add.w	sl, sl, #1
 80106cc:	9304      	str	r3, [sp, #16]
 80106ce:	9307      	str	r3, [sp, #28]
 80106d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106d4:	931a      	str	r3, [sp, #104]	; 0x68
 80106d6:	4654      	mov	r4, sl
 80106d8:	2205      	movs	r2, #5
 80106da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106de:	4858      	ldr	r0, [pc, #352]	; (8010840 <_vfiprintf_r+0x24c>)
 80106e0:	f7ef fd7e 	bl	80001e0 <memchr>
 80106e4:	9a04      	ldr	r2, [sp, #16]
 80106e6:	b9d8      	cbnz	r0, 8010720 <_vfiprintf_r+0x12c>
 80106e8:	06d1      	lsls	r1, r2, #27
 80106ea:	bf44      	itt	mi
 80106ec:	2320      	movmi	r3, #32
 80106ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106f2:	0713      	lsls	r3, r2, #28
 80106f4:	bf44      	itt	mi
 80106f6:	232b      	movmi	r3, #43	; 0x2b
 80106f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010700:	2b2a      	cmp	r3, #42	; 0x2a
 8010702:	d015      	beq.n	8010730 <_vfiprintf_r+0x13c>
 8010704:	9a07      	ldr	r2, [sp, #28]
 8010706:	4654      	mov	r4, sl
 8010708:	2000      	movs	r0, #0
 801070a:	f04f 0c0a 	mov.w	ip, #10
 801070e:	4621      	mov	r1, r4
 8010710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010714:	3b30      	subs	r3, #48	; 0x30
 8010716:	2b09      	cmp	r3, #9
 8010718:	d94e      	bls.n	80107b8 <_vfiprintf_r+0x1c4>
 801071a:	b1b0      	cbz	r0, 801074a <_vfiprintf_r+0x156>
 801071c:	9207      	str	r2, [sp, #28]
 801071e:	e014      	b.n	801074a <_vfiprintf_r+0x156>
 8010720:	eba0 0308 	sub.w	r3, r0, r8
 8010724:	fa09 f303 	lsl.w	r3, r9, r3
 8010728:	4313      	orrs	r3, r2
 801072a:	9304      	str	r3, [sp, #16]
 801072c:	46a2      	mov	sl, r4
 801072e:	e7d2      	b.n	80106d6 <_vfiprintf_r+0xe2>
 8010730:	9b03      	ldr	r3, [sp, #12]
 8010732:	1d19      	adds	r1, r3, #4
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	9103      	str	r1, [sp, #12]
 8010738:	2b00      	cmp	r3, #0
 801073a:	bfbb      	ittet	lt
 801073c:	425b      	neglt	r3, r3
 801073e:	f042 0202 	orrlt.w	r2, r2, #2
 8010742:	9307      	strge	r3, [sp, #28]
 8010744:	9307      	strlt	r3, [sp, #28]
 8010746:	bfb8      	it	lt
 8010748:	9204      	strlt	r2, [sp, #16]
 801074a:	7823      	ldrb	r3, [r4, #0]
 801074c:	2b2e      	cmp	r3, #46	; 0x2e
 801074e:	d10c      	bne.n	801076a <_vfiprintf_r+0x176>
 8010750:	7863      	ldrb	r3, [r4, #1]
 8010752:	2b2a      	cmp	r3, #42	; 0x2a
 8010754:	d135      	bne.n	80107c2 <_vfiprintf_r+0x1ce>
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	1d1a      	adds	r2, r3, #4
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	9203      	str	r2, [sp, #12]
 801075e:	2b00      	cmp	r3, #0
 8010760:	bfb8      	it	lt
 8010762:	f04f 33ff 	movlt.w	r3, #4294967295
 8010766:	3402      	adds	r4, #2
 8010768:	9305      	str	r3, [sp, #20]
 801076a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010850 <_vfiprintf_r+0x25c>
 801076e:	7821      	ldrb	r1, [r4, #0]
 8010770:	2203      	movs	r2, #3
 8010772:	4650      	mov	r0, sl
 8010774:	f7ef fd34 	bl	80001e0 <memchr>
 8010778:	b140      	cbz	r0, 801078c <_vfiprintf_r+0x198>
 801077a:	2340      	movs	r3, #64	; 0x40
 801077c:	eba0 000a 	sub.w	r0, r0, sl
 8010780:	fa03 f000 	lsl.w	r0, r3, r0
 8010784:	9b04      	ldr	r3, [sp, #16]
 8010786:	4303      	orrs	r3, r0
 8010788:	3401      	adds	r4, #1
 801078a:	9304      	str	r3, [sp, #16]
 801078c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010790:	482c      	ldr	r0, [pc, #176]	; (8010844 <_vfiprintf_r+0x250>)
 8010792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010796:	2206      	movs	r2, #6
 8010798:	f7ef fd22 	bl	80001e0 <memchr>
 801079c:	2800      	cmp	r0, #0
 801079e:	d03f      	beq.n	8010820 <_vfiprintf_r+0x22c>
 80107a0:	4b29      	ldr	r3, [pc, #164]	; (8010848 <_vfiprintf_r+0x254>)
 80107a2:	bb1b      	cbnz	r3, 80107ec <_vfiprintf_r+0x1f8>
 80107a4:	9b03      	ldr	r3, [sp, #12]
 80107a6:	3307      	adds	r3, #7
 80107a8:	f023 0307 	bic.w	r3, r3, #7
 80107ac:	3308      	adds	r3, #8
 80107ae:	9303      	str	r3, [sp, #12]
 80107b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b2:	443b      	add	r3, r7
 80107b4:	9309      	str	r3, [sp, #36]	; 0x24
 80107b6:	e767      	b.n	8010688 <_vfiprintf_r+0x94>
 80107b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80107bc:	460c      	mov	r4, r1
 80107be:	2001      	movs	r0, #1
 80107c0:	e7a5      	b.n	801070e <_vfiprintf_r+0x11a>
 80107c2:	2300      	movs	r3, #0
 80107c4:	3401      	adds	r4, #1
 80107c6:	9305      	str	r3, [sp, #20]
 80107c8:	4619      	mov	r1, r3
 80107ca:	f04f 0c0a 	mov.w	ip, #10
 80107ce:	4620      	mov	r0, r4
 80107d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107d4:	3a30      	subs	r2, #48	; 0x30
 80107d6:	2a09      	cmp	r2, #9
 80107d8:	d903      	bls.n	80107e2 <_vfiprintf_r+0x1ee>
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0c5      	beq.n	801076a <_vfiprintf_r+0x176>
 80107de:	9105      	str	r1, [sp, #20]
 80107e0:	e7c3      	b.n	801076a <_vfiprintf_r+0x176>
 80107e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80107e6:	4604      	mov	r4, r0
 80107e8:	2301      	movs	r3, #1
 80107ea:	e7f0      	b.n	80107ce <_vfiprintf_r+0x1da>
 80107ec:	ab03      	add	r3, sp, #12
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	462a      	mov	r2, r5
 80107f2:	4b16      	ldr	r3, [pc, #88]	; (801084c <_vfiprintf_r+0x258>)
 80107f4:	a904      	add	r1, sp, #16
 80107f6:	4630      	mov	r0, r6
 80107f8:	f7fc fbc8 	bl	800cf8c <_printf_float>
 80107fc:	4607      	mov	r7, r0
 80107fe:	1c78      	adds	r0, r7, #1
 8010800:	d1d6      	bne.n	80107b0 <_vfiprintf_r+0x1bc>
 8010802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010804:	07d9      	lsls	r1, r3, #31
 8010806:	d405      	bmi.n	8010814 <_vfiprintf_r+0x220>
 8010808:	89ab      	ldrh	r3, [r5, #12]
 801080a:	059a      	lsls	r2, r3, #22
 801080c:	d402      	bmi.n	8010814 <_vfiprintf_r+0x220>
 801080e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010810:	f7ff fe86 	bl	8010520 <__retarget_lock_release_recursive>
 8010814:	89ab      	ldrh	r3, [r5, #12]
 8010816:	065b      	lsls	r3, r3, #25
 8010818:	f53f af12 	bmi.w	8010640 <_vfiprintf_r+0x4c>
 801081c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801081e:	e711      	b.n	8010644 <_vfiprintf_r+0x50>
 8010820:	ab03      	add	r3, sp, #12
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	462a      	mov	r2, r5
 8010826:	4b09      	ldr	r3, [pc, #36]	; (801084c <_vfiprintf_r+0x258>)
 8010828:	a904      	add	r1, sp, #16
 801082a:	4630      	mov	r0, r6
 801082c:	f7fc fe52 	bl	800d4d4 <_printf_i>
 8010830:	e7e4      	b.n	80107fc <_vfiprintf_r+0x208>
 8010832:	bf00      	nop
 8010834:	0801171c 	.word	0x0801171c
 8010838:	0801173c 	.word	0x0801173c
 801083c:	080116fc 	.word	0x080116fc
 8010840:	080115ac 	.word	0x080115ac
 8010844:	080115b6 	.word	0x080115b6
 8010848:	0800cf8d 	.word	0x0800cf8d
 801084c:	080105d1 	.word	0x080105d1
 8010850:	080115b2 	.word	0x080115b2

08010854 <__swbuf_r>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	460e      	mov	r6, r1
 8010858:	4614      	mov	r4, r2
 801085a:	4605      	mov	r5, r0
 801085c:	b118      	cbz	r0, 8010866 <__swbuf_r+0x12>
 801085e:	6983      	ldr	r3, [r0, #24]
 8010860:	b90b      	cbnz	r3, 8010866 <__swbuf_r+0x12>
 8010862:	f000 f9d9 	bl	8010c18 <__sinit>
 8010866:	4b21      	ldr	r3, [pc, #132]	; (80108ec <__swbuf_r+0x98>)
 8010868:	429c      	cmp	r4, r3
 801086a:	d12b      	bne.n	80108c4 <__swbuf_r+0x70>
 801086c:	686c      	ldr	r4, [r5, #4]
 801086e:	69a3      	ldr	r3, [r4, #24]
 8010870:	60a3      	str	r3, [r4, #8]
 8010872:	89a3      	ldrh	r3, [r4, #12]
 8010874:	071a      	lsls	r2, r3, #28
 8010876:	d52f      	bpl.n	80108d8 <__swbuf_r+0x84>
 8010878:	6923      	ldr	r3, [r4, #16]
 801087a:	b36b      	cbz	r3, 80108d8 <__swbuf_r+0x84>
 801087c:	6923      	ldr	r3, [r4, #16]
 801087e:	6820      	ldr	r0, [r4, #0]
 8010880:	1ac0      	subs	r0, r0, r3
 8010882:	6963      	ldr	r3, [r4, #20]
 8010884:	b2f6      	uxtb	r6, r6
 8010886:	4283      	cmp	r3, r0
 8010888:	4637      	mov	r7, r6
 801088a:	dc04      	bgt.n	8010896 <__swbuf_r+0x42>
 801088c:	4621      	mov	r1, r4
 801088e:	4628      	mov	r0, r5
 8010890:	f000 f92e 	bl	8010af0 <_fflush_r>
 8010894:	bb30      	cbnz	r0, 80108e4 <__swbuf_r+0x90>
 8010896:	68a3      	ldr	r3, [r4, #8]
 8010898:	3b01      	subs	r3, #1
 801089a:	60a3      	str	r3, [r4, #8]
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	6022      	str	r2, [r4, #0]
 80108a2:	701e      	strb	r6, [r3, #0]
 80108a4:	6963      	ldr	r3, [r4, #20]
 80108a6:	3001      	adds	r0, #1
 80108a8:	4283      	cmp	r3, r0
 80108aa:	d004      	beq.n	80108b6 <__swbuf_r+0x62>
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	07db      	lsls	r3, r3, #31
 80108b0:	d506      	bpl.n	80108c0 <__swbuf_r+0x6c>
 80108b2:	2e0a      	cmp	r6, #10
 80108b4:	d104      	bne.n	80108c0 <__swbuf_r+0x6c>
 80108b6:	4621      	mov	r1, r4
 80108b8:	4628      	mov	r0, r5
 80108ba:	f000 f919 	bl	8010af0 <_fflush_r>
 80108be:	b988      	cbnz	r0, 80108e4 <__swbuf_r+0x90>
 80108c0:	4638      	mov	r0, r7
 80108c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108c4:	4b0a      	ldr	r3, [pc, #40]	; (80108f0 <__swbuf_r+0x9c>)
 80108c6:	429c      	cmp	r4, r3
 80108c8:	d101      	bne.n	80108ce <__swbuf_r+0x7a>
 80108ca:	68ac      	ldr	r4, [r5, #8]
 80108cc:	e7cf      	b.n	801086e <__swbuf_r+0x1a>
 80108ce:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <__swbuf_r+0xa0>)
 80108d0:	429c      	cmp	r4, r3
 80108d2:	bf08      	it	eq
 80108d4:	68ec      	ldreq	r4, [r5, #12]
 80108d6:	e7ca      	b.n	801086e <__swbuf_r+0x1a>
 80108d8:	4621      	mov	r1, r4
 80108da:	4628      	mov	r0, r5
 80108dc:	f000 f80c 	bl	80108f8 <__swsetup_r>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d0cb      	beq.n	801087c <__swbuf_r+0x28>
 80108e4:	f04f 37ff 	mov.w	r7, #4294967295
 80108e8:	e7ea      	b.n	80108c0 <__swbuf_r+0x6c>
 80108ea:	bf00      	nop
 80108ec:	0801171c 	.word	0x0801171c
 80108f0:	0801173c 	.word	0x0801173c
 80108f4:	080116fc 	.word	0x080116fc

080108f8 <__swsetup_r>:
 80108f8:	4b32      	ldr	r3, [pc, #200]	; (80109c4 <__swsetup_r+0xcc>)
 80108fa:	b570      	push	{r4, r5, r6, lr}
 80108fc:	681d      	ldr	r5, [r3, #0]
 80108fe:	4606      	mov	r6, r0
 8010900:	460c      	mov	r4, r1
 8010902:	b125      	cbz	r5, 801090e <__swsetup_r+0x16>
 8010904:	69ab      	ldr	r3, [r5, #24]
 8010906:	b913      	cbnz	r3, 801090e <__swsetup_r+0x16>
 8010908:	4628      	mov	r0, r5
 801090a:	f000 f985 	bl	8010c18 <__sinit>
 801090e:	4b2e      	ldr	r3, [pc, #184]	; (80109c8 <__swsetup_r+0xd0>)
 8010910:	429c      	cmp	r4, r3
 8010912:	d10f      	bne.n	8010934 <__swsetup_r+0x3c>
 8010914:	686c      	ldr	r4, [r5, #4]
 8010916:	89a3      	ldrh	r3, [r4, #12]
 8010918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801091c:	0719      	lsls	r1, r3, #28
 801091e:	d42c      	bmi.n	801097a <__swsetup_r+0x82>
 8010920:	06dd      	lsls	r5, r3, #27
 8010922:	d411      	bmi.n	8010948 <__swsetup_r+0x50>
 8010924:	2309      	movs	r3, #9
 8010926:	6033      	str	r3, [r6, #0]
 8010928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801092c:	81a3      	strh	r3, [r4, #12]
 801092e:	f04f 30ff 	mov.w	r0, #4294967295
 8010932:	e03e      	b.n	80109b2 <__swsetup_r+0xba>
 8010934:	4b25      	ldr	r3, [pc, #148]	; (80109cc <__swsetup_r+0xd4>)
 8010936:	429c      	cmp	r4, r3
 8010938:	d101      	bne.n	801093e <__swsetup_r+0x46>
 801093a:	68ac      	ldr	r4, [r5, #8]
 801093c:	e7eb      	b.n	8010916 <__swsetup_r+0x1e>
 801093e:	4b24      	ldr	r3, [pc, #144]	; (80109d0 <__swsetup_r+0xd8>)
 8010940:	429c      	cmp	r4, r3
 8010942:	bf08      	it	eq
 8010944:	68ec      	ldreq	r4, [r5, #12]
 8010946:	e7e6      	b.n	8010916 <__swsetup_r+0x1e>
 8010948:	0758      	lsls	r0, r3, #29
 801094a:	d512      	bpl.n	8010972 <__swsetup_r+0x7a>
 801094c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801094e:	b141      	cbz	r1, 8010962 <__swsetup_r+0x6a>
 8010950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010954:	4299      	cmp	r1, r3
 8010956:	d002      	beq.n	801095e <__swsetup_r+0x66>
 8010958:	4630      	mov	r0, r6
 801095a:	f7fc f9cd 	bl	800ccf8 <_free_r>
 801095e:	2300      	movs	r3, #0
 8010960:	6363      	str	r3, [r4, #52]	; 0x34
 8010962:	89a3      	ldrh	r3, [r4, #12]
 8010964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	2300      	movs	r3, #0
 801096c:	6063      	str	r3, [r4, #4]
 801096e:	6923      	ldr	r3, [r4, #16]
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	89a3      	ldrh	r3, [r4, #12]
 8010974:	f043 0308 	orr.w	r3, r3, #8
 8010978:	81a3      	strh	r3, [r4, #12]
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	b94b      	cbnz	r3, 8010992 <__swsetup_r+0x9a>
 801097e:	89a3      	ldrh	r3, [r4, #12]
 8010980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010988:	d003      	beq.n	8010992 <__swsetup_r+0x9a>
 801098a:	4621      	mov	r1, r4
 801098c:	4630      	mov	r0, r6
 801098e:	f000 fa05 	bl	8010d9c <__smakebuf_r>
 8010992:	89a0      	ldrh	r0, [r4, #12]
 8010994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010998:	f010 0301 	ands.w	r3, r0, #1
 801099c:	d00a      	beq.n	80109b4 <__swsetup_r+0xbc>
 801099e:	2300      	movs	r3, #0
 80109a0:	60a3      	str	r3, [r4, #8]
 80109a2:	6963      	ldr	r3, [r4, #20]
 80109a4:	425b      	negs	r3, r3
 80109a6:	61a3      	str	r3, [r4, #24]
 80109a8:	6923      	ldr	r3, [r4, #16]
 80109aa:	b943      	cbnz	r3, 80109be <__swsetup_r+0xc6>
 80109ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109b0:	d1ba      	bne.n	8010928 <__swsetup_r+0x30>
 80109b2:	bd70      	pop	{r4, r5, r6, pc}
 80109b4:	0781      	lsls	r1, r0, #30
 80109b6:	bf58      	it	pl
 80109b8:	6963      	ldrpl	r3, [r4, #20]
 80109ba:	60a3      	str	r3, [r4, #8]
 80109bc:	e7f4      	b.n	80109a8 <__swsetup_r+0xb0>
 80109be:	2000      	movs	r0, #0
 80109c0:	e7f7      	b.n	80109b2 <__swsetup_r+0xba>
 80109c2:	bf00      	nop
 80109c4:	20000540 	.word	0x20000540
 80109c8:	0801171c 	.word	0x0801171c
 80109cc:	0801173c 	.word	0x0801173c
 80109d0:	080116fc 	.word	0x080116fc

080109d4 <abort>:
 80109d4:	b508      	push	{r3, lr}
 80109d6:	2006      	movs	r0, #6
 80109d8:	f000 fa50 	bl	8010e7c <raise>
 80109dc:	2001      	movs	r0, #1
 80109de:	f7f2 ff99 	bl	8003914 <_exit>
	...

080109e4 <__sflush_r>:
 80109e4:	898a      	ldrh	r2, [r1, #12]
 80109e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ea:	4605      	mov	r5, r0
 80109ec:	0710      	lsls	r0, r2, #28
 80109ee:	460c      	mov	r4, r1
 80109f0:	d458      	bmi.n	8010aa4 <__sflush_r+0xc0>
 80109f2:	684b      	ldr	r3, [r1, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dc05      	bgt.n	8010a04 <__sflush_r+0x20>
 80109f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	dc02      	bgt.n	8010a04 <__sflush_r+0x20>
 80109fe:	2000      	movs	r0, #0
 8010a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a06:	2e00      	cmp	r6, #0
 8010a08:	d0f9      	beq.n	80109fe <__sflush_r+0x1a>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a10:	682f      	ldr	r7, [r5, #0]
 8010a12:	602b      	str	r3, [r5, #0]
 8010a14:	d032      	beq.n	8010a7c <__sflush_r+0x98>
 8010a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	075a      	lsls	r2, r3, #29
 8010a1c:	d505      	bpl.n	8010a2a <__sflush_r+0x46>
 8010a1e:	6863      	ldr	r3, [r4, #4]
 8010a20:	1ac0      	subs	r0, r0, r3
 8010a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a24:	b10b      	cbz	r3, 8010a2a <__sflush_r+0x46>
 8010a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a28:	1ac0      	subs	r0, r0, r3
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a30:	6a21      	ldr	r1, [r4, #32]
 8010a32:	4628      	mov	r0, r5
 8010a34:	47b0      	blx	r6
 8010a36:	1c43      	adds	r3, r0, #1
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	d106      	bne.n	8010a4a <__sflush_r+0x66>
 8010a3c:	6829      	ldr	r1, [r5, #0]
 8010a3e:	291d      	cmp	r1, #29
 8010a40:	d82c      	bhi.n	8010a9c <__sflush_r+0xb8>
 8010a42:	4a2a      	ldr	r2, [pc, #168]	; (8010aec <__sflush_r+0x108>)
 8010a44:	40ca      	lsrs	r2, r1
 8010a46:	07d6      	lsls	r6, r2, #31
 8010a48:	d528      	bpl.n	8010a9c <__sflush_r+0xb8>
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	6062      	str	r2, [r4, #4]
 8010a4e:	04d9      	lsls	r1, r3, #19
 8010a50:	6922      	ldr	r2, [r4, #16]
 8010a52:	6022      	str	r2, [r4, #0]
 8010a54:	d504      	bpl.n	8010a60 <__sflush_r+0x7c>
 8010a56:	1c42      	adds	r2, r0, #1
 8010a58:	d101      	bne.n	8010a5e <__sflush_r+0x7a>
 8010a5a:	682b      	ldr	r3, [r5, #0]
 8010a5c:	b903      	cbnz	r3, 8010a60 <__sflush_r+0x7c>
 8010a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8010a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a62:	602f      	str	r7, [r5, #0]
 8010a64:	2900      	cmp	r1, #0
 8010a66:	d0ca      	beq.n	80109fe <__sflush_r+0x1a>
 8010a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a6c:	4299      	cmp	r1, r3
 8010a6e:	d002      	beq.n	8010a76 <__sflush_r+0x92>
 8010a70:	4628      	mov	r0, r5
 8010a72:	f7fc f941 	bl	800ccf8 <_free_r>
 8010a76:	2000      	movs	r0, #0
 8010a78:	6360      	str	r0, [r4, #52]	; 0x34
 8010a7a:	e7c1      	b.n	8010a00 <__sflush_r+0x1c>
 8010a7c:	6a21      	ldr	r1, [r4, #32]
 8010a7e:	2301      	movs	r3, #1
 8010a80:	4628      	mov	r0, r5
 8010a82:	47b0      	blx	r6
 8010a84:	1c41      	adds	r1, r0, #1
 8010a86:	d1c7      	bne.n	8010a18 <__sflush_r+0x34>
 8010a88:	682b      	ldr	r3, [r5, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d0c4      	beq.n	8010a18 <__sflush_r+0x34>
 8010a8e:	2b1d      	cmp	r3, #29
 8010a90:	d001      	beq.n	8010a96 <__sflush_r+0xb2>
 8010a92:	2b16      	cmp	r3, #22
 8010a94:	d101      	bne.n	8010a9a <__sflush_r+0xb6>
 8010a96:	602f      	str	r7, [r5, #0]
 8010a98:	e7b1      	b.n	80109fe <__sflush_r+0x1a>
 8010a9a:	89a3      	ldrh	r3, [r4, #12]
 8010a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aa0:	81a3      	strh	r3, [r4, #12]
 8010aa2:	e7ad      	b.n	8010a00 <__sflush_r+0x1c>
 8010aa4:	690f      	ldr	r7, [r1, #16]
 8010aa6:	2f00      	cmp	r7, #0
 8010aa8:	d0a9      	beq.n	80109fe <__sflush_r+0x1a>
 8010aaa:	0793      	lsls	r3, r2, #30
 8010aac:	680e      	ldr	r6, [r1, #0]
 8010aae:	bf08      	it	eq
 8010ab0:	694b      	ldreq	r3, [r1, #20]
 8010ab2:	600f      	str	r7, [r1, #0]
 8010ab4:	bf18      	it	ne
 8010ab6:	2300      	movne	r3, #0
 8010ab8:	eba6 0807 	sub.w	r8, r6, r7
 8010abc:	608b      	str	r3, [r1, #8]
 8010abe:	f1b8 0f00 	cmp.w	r8, #0
 8010ac2:	dd9c      	ble.n	80109fe <__sflush_r+0x1a>
 8010ac4:	6a21      	ldr	r1, [r4, #32]
 8010ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ac8:	4643      	mov	r3, r8
 8010aca:	463a      	mov	r2, r7
 8010acc:	4628      	mov	r0, r5
 8010ace:	47b0      	blx	r6
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	dc06      	bgt.n	8010ae2 <__sflush_r+0xfe>
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae0:	e78e      	b.n	8010a00 <__sflush_r+0x1c>
 8010ae2:	4407      	add	r7, r0
 8010ae4:	eba8 0800 	sub.w	r8, r8, r0
 8010ae8:	e7e9      	b.n	8010abe <__sflush_r+0xda>
 8010aea:	bf00      	nop
 8010aec:	20400001 	.word	0x20400001

08010af0 <_fflush_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	690b      	ldr	r3, [r1, #16]
 8010af4:	4605      	mov	r5, r0
 8010af6:	460c      	mov	r4, r1
 8010af8:	b913      	cbnz	r3, 8010b00 <_fflush_r+0x10>
 8010afa:	2500      	movs	r5, #0
 8010afc:	4628      	mov	r0, r5
 8010afe:	bd38      	pop	{r3, r4, r5, pc}
 8010b00:	b118      	cbz	r0, 8010b0a <_fflush_r+0x1a>
 8010b02:	6983      	ldr	r3, [r0, #24]
 8010b04:	b90b      	cbnz	r3, 8010b0a <_fflush_r+0x1a>
 8010b06:	f000 f887 	bl	8010c18 <__sinit>
 8010b0a:	4b14      	ldr	r3, [pc, #80]	; (8010b5c <_fflush_r+0x6c>)
 8010b0c:	429c      	cmp	r4, r3
 8010b0e:	d11b      	bne.n	8010b48 <_fflush_r+0x58>
 8010b10:	686c      	ldr	r4, [r5, #4]
 8010b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d0ef      	beq.n	8010afa <_fflush_r+0xa>
 8010b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b1c:	07d0      	lsls	r0, r2, #31
 8010b1e:	d404      	bmi.n	8010b2a <_fflush_r+0x3a>
 8010b20:	0599      	lsls	r1, r3, #22
 8010b22:	d402      	bmi.n	8010b2a <_fflush_r+0x3a>
 8010b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b26:	f7ff fcfa 	bl	801051e <__retarget_lock_acquire_recursive>
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	f7ff ff59 	bl	80109e4 <__sflush_r>
 8010b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b34:	07da      	lsls	r2, r3, #31
 8010b36:	4605      	mov	r5, r0
 8010b38:	d4e0      	bmi.n	8010afc <_fflush_r+0xc>
 8010b3a:	89a3      	ldrh	r3, [r4, #12]
 8010b3c:	059b      	lsls	r3, r3, #22
 8010b3e:	d4dd      	bmi.n	8010afc <_fflush_r+0xc>
 8010b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b42:	f7ff fced 	bl	8010520 <__retarget_lock_release_recursive>
 8010b46:	e7d9      	b.n	8010afc <_fflush_r+0xc>
 8010b48:	4b05      	ldr	r3, [pc, #20]	; (8010b60 <_fflush_r+0x70>)
 8010b4a:	429c      	cmp	r4, r3
 8010b4c:	d101      	bne.n	8010b52 <_fflush_r+0x62>
 8010b4e:	68ac      	ldr	r4, [r5, #8]
 8010b50:	e7df      	b.n	8010b12 <_fflush_r+0x22>
 8010b52:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <_fflush_r+0x74>)
 8010b54:	429c      	cmp	r4, r3
 8010b56:	bf08      	it	eq
 8010b58:	68ec      	ldreq	r4, [r5, #12]
 8010b5a:	e7da      	b.n	8010b12 <_fflush_r+0x22>
 8010b5c:	0801171c 	.word	0x0801171c
 8010b60:	0801173c 	.word	0x0801173c
 8010b64:	080116fc 	.word	0x080116fc

08010b68 <std>:
 8010b68:	2300      	movs	r3, #0
 8010b6a:	b510      	push	{r4, lr}
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b76:	6083      	str	r3, [r0, #8]
 8010b78:	8181      	strh	r1, [r0, #12]
 8010b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8010b7c:	81c2      	strh	r2, [r0, #14]
 8010b7e:	6183      	str	r3, [r0, #24]
 8010b80:	4619      	mov	r1, r3
 8010b82:	2208      	movs	r2, #8
 8010b84:	305c      	adds	r0, #92	; 0x5c
 8010b86:	f7fc f8af 	bl	800cce8 <memset>
 8010b8a:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <std+0x38>)
 8010b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8010b8e:	4b05      	ldr	r3, [pc, #20]	; (8010ba4 <std+0x3c>)
 8010b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b92:	4b05      	ldr	r3, [pc, #20]	; (8010ba8 <std+0x40>)
 8010b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b96:	4b05      	ldr	r3, [pc, #20]	; (8010bac <std+0x44>)
 8010b98:	6224      	str	r4, [r4, #32]
 8010b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	bf00      	nop
 8010ba0:	08010eb5 	.word	0x08010eb5
 8010ba4:	08010ed7 	.word	0x08010ed7
 8010ba8:	08010f0f 	.word	0x08010f0f
 8010bac:	08010f33 	.word	0x08010f33

08010bb0 <_cleanup_r>:
 8010bb0:	4901      	ldr	r1, [pc, #4]	; (8010bb8 <_cleanup_r+0x8>)
 8010bb2:	f000 b8af 	b.w	8010d14 <_fwalk_reent>
 8010bb6:	bf00      	nop
 8010bb8:	08010af1 	.word	0x08010af1

08010bbc <__sfmoreglue>:
 8010bbc:	b570      	push	{r4, r5, r6, lr}
 8010bbe:	1e4a      	subs	r2, r1, #1
 8010bc0:	2568      	movs	r5, #104	; 0x68
 8010bc2:	4355      	muls	r5, r2
 8010bc4:	460e      	mov	r6, r1
 8010bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010bca:	f7fc f8e5 	bl	800cd98 <_malloc_r>
 8010bce:	4604      	mov	r4, r0
 8010bd0:	b140      	cbz	r0, 8010be4 <__sfmoreglue+0x28>
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8010bd8:	300c      	adds	r0, #12
 8010bda:	60a0      	str	r0, [r4, #8]
 8010bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010be0:	f7fc f882 	bl	800cce8 <memset>
 8010be4:	4620      	mov	r0, r4
 8010be6:	bd70      	pop	{r4, r5, r6, pc}

08010be8 <__sfp_lock_acquire>:
 8010be8:	4801      	ldr	r0, [pc, #4]	; (8010bf0 <__sfp_lock_acquire+0x8>)
 8010bea:	f7ff bc98 	b.w	801051e <__retarget_lock_acquire_recursive>
 8010bee:	bf00      	nop
 8010bf0:	20002474 	.word	0x20002474

08010bf4 <__sfp_lock_release>:
 8010bf4:	4801      	ldr	r0, [pc, #4]	; (8010bfc <__sfp_lock_release+0x8>)
 8010bf6:	f7ff bc93 	b.w	8010520 <__retarget_lock_release_recursive>
 8010bfa:	bf00      	nop
 8010bfc:	20002474 	.word	0x20002474

08010c00 <__sinit_lock_acquire>:
 8010c00:	4801      	ldr	r0, [pc, #4]	; (8010c08 <__sinit_lock_acquire+0x8>)
 8010c02:	f7ff bc8c 	b.w	801051e <__retarget_lock_acquire_recursive>
 8010c06:	bf00      	nop
 8010c08:	2000246f 	.word	0x2000246f

08010c0c <__sinit_lock_release>:
 8010c0c:	4801      	ldr	r0, [pc, #4]	; (8010c14 <__sinit_lock_release+0x8>)
 8010c0e:	f7ff bc87 	b.w	8010520 <__retarget_lock_release_recursive>
 8010c12:	bf00      	nop
 8010c14:	2000246f 	.word	0x2000246f

08010c18 <__sinit>:
 8010c18:	b510      	push	{r4, lr}
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	f7ff fff0 	bl	8010c00 <__sinit_lock_acquire>
 8010c20:	69a3      	ldr	r3, [r4, #24]
 8010c22:	b11b      	cbz	r3, 8010c2c <__sinit+0x14>
 8010c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c28:	f7ff bff0 	b.w	8010c0c <__sinit_lock_release>
 8010c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c30:	6523      	str	r3, [r4, #80]	; 0x50
 8010c32:	4b13      	ldr	r3, [pc, #76]	; (8010c80 <__sinit+0x68>)
 8010c34:	4a13      	ldr	r2, [pc, #76]	; (8010c84 <__sinit+0x6c>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c3a:	42a3      	cmp	r3, r4
 8010c3c:	bf04      	itt	eq
 8010c3e:	2301      	moveq	r3, #1
 8010c40:	61a3      	streq	r3, [r4, #24]
 8010c42:	4620      	mov	r0, r4
 8010c44:	f000 f820 	bl	8010c88 <__sfp>
 8010c48:	6060      	str	r0, [r4, #4]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 f81c 	bl	8010c88 <__sfp>
 8010c50:	60a0      	str	r0, [r4, #8]
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 f818 	bl	8010c88 <__sfp>
 8010c58:	2200      	movs	r2, #0
 8010c5a:	60e0      	str	r0, [r4, #12]
 8010c5c:	2104      	movs	r1, #4
 8010c5e:	6860      	ldr	r0, [r4, #4]
 8010c60:	f7ff ff82 	bl	8010b68 <std>
 8010c64:	68a0      	ldr	r0, [r4, #8]
 8010c66:	2201      	movs	r2, #1
 8010c68:	2109      	movs	r1, #9
 8010c6a:	f7ff ff7d 	bl	8010b68 <std>
 8010c6e:	68e0      	ldr	r0, [r4, #12]
 8010c70:	2202      	movs	r2, #2
 8010c72:	2112      	movs	r1, #18
 8010c74:	f7ff ff78 	bl	8010b68 <std>
 8010c78:	2301      	movs	r3, #1
 8010c7a:	61a3      	str	r3, [r4, #24]
 8010c7c:	e7d2      	b.n	8010c24 <__sinit+0xc>
 8010c7e:	bf00      	nop
 8010c80:	080112b0 	.word	0x080112b0
 8010c84:	08010bb1 	.word	0x08010bb1

08010c88 <__sfp>:
 8010c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c8a:	4607      	mov	r7, r0
 8010c8c:	f7ff ffac 	bl	8010be8 <__sfp_lock_acquire>
 8010c90:	4b1e      	ldr	r3, [pc, #120]	; (8010d0c <__sfp+0x84>)
 8010c92:	681e      	ldr	r6, [r3, #0]
 8010c94:	69b3      	ldr	r3, [r6, #24]
 8010c96:	b913      	cbnz	r3, 8010c9e <__sfp+0x16>
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f7ff ffbd 	bl	8010c18 <__sinit>
 8010c9e:	3648      	adds	r6, #72	; 0x48
 8010ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ca4:	3b01      	subs	r3, #1
 8010ca6:	d503      	bpl.n	8010cb0 <__sfp+0x28>
 8010ca8:	6833      	ldr	r3, [r6, #0]
 8010caa:	b30b      	cbz	r3, 8010cf0 <__sfp+0x68>
 8010cac:	6836      	ldr	r6, [r6, #0]
 8010cae:	e7f7      	b.n	8010ca0 <__sfp+0x18>
 8010cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010cb4:	b9d5      	cbnz	r5, 8010cec <__sfp+0x64>
 8010cb6:	4b16      	ldr	r3, [pc, #88]	; (8010d10 <__sfp+0x88>)
 8010cb8:	60e3      	str	r3, [r4, #12]
 8010cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8010cc0:	f7ff fc2c 	bl	801051c <__retarget_lock_init_recursive>
 8010cc4:	f7ff ff96 	bl	8010bf4 <__sfp_lock_release>
 8010cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cd0:	6025      	str	r5, [r4, #0]
 8010cd2:	61a5      	str	r5, [r4, #24]
 8010cd4:	2208      	movs	r2, #8
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010cdc:	f7fc f804 	bl	800cce8 <memset>
 8010ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ce8:	4620      	mov	r0, r4
 8010cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cec:	3468      	adds	r4, #104	; 0x68
 8010cee:	e7d9      	b.n	8010ca4 <__sfp+0x1c>
 8010cf0:	2104      	movs	r1, #4
 8010cf2:	4638      	mov	r0, r7
 8010cf4:	f7ff ff62 	bl	8010bbc <__sfmoreglue>
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	6030      	str	r0, [r6, #0]
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d1d5      	bne.n	8010cac <__sfp+0x24>
 8010d00:	f7ff ff78 	bl	8010bf4 <__sfp_lock_release>
 8010d04:	230c      	movs	r3, #12
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	e7ee      	b.n	8010ce8 <__sfp+0x60>
 8010d0a:	bf00      	nop
 8010d0c:	080112b0 	.word	0x080112b0
 8010d10:	ffff0001 	.word	0xffff0001

08010d14 <_fwalk_reent>:
 8010d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d18:	4606      	mov	r6, r0
 8010d1a:	4688      	mov	r8, r1
 8010d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d20:	2700      	movs	r7, #0
 8010d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d26:	f1b9 0901 	subs.w	r9, r9, #1
 8010d2a:	d505      	bpl.n	8010d38 <_fwalk_reent+0x24>
 8010d2c:	6824      	ldr	r4, [r4, #0]
 8010d2e:	2c00      	cmp	r4, #0
 8010d30:	d1f7      	bne.n	8010d22 <_fwalk_reent+0xe>
 8010d32:	4638      	mov	r0, r7
 8010d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d38:	89ab      	ldrh	r3, [r5, #12]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d907      	bls.n	8010d4e <_fwalk_reent+0x3a>
 8010d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d42:	3301      	adds	r3, #1
 8010d44:	d003      	beq.n	8010d4e <_fwalk_reent+0x3a>
 8010d46:	4629      	mov	r1, r5
 8010d48:	4630      	mov	r0, r6
 8010d4a:	47c0      	blx	r8
 8010d4c:	4307      	orrs	r7, r0
 8010d4e:	3568      	adds	r5, #104	; 0x68
 8010d50:	e7e9      	b.n	8010d26 <_fwalk_reent+0x12>

08010d52 <__swhatbuf_r>:
 8010d52:	b570      	push	{r4, r5, r6, lr}
 8010d54:	460e      	mov	r6, r1
 8010d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d5a:	2900      	cmp	r1, #0
 8010d5c:	b096      	sub	sp, #88	; 0x58
 8010d5e:	4614      	mov	r4, r2
 8010d60:	461d      	mov	r5, r3
 8010d62:	da07      	bge.n	8010d74 <__swhatbuf_r+0x22>
 8010d64:	2300      	movs	r3, #0
 8010d66:	602b      	str	r3, [r5, #0]
 8010d68:	89b3      	ldrh	r3, [r6, #12]
 8010d6a:	061a      	lsls	r2, r3, #24
 8010d6c:	d410      	bmi.n	8010d90 <__swhatbuf_r+0x3e>
 8010d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d72:	e00e      	b.n	8010d92 <__swhatbuf_r+0x40>
 8010d74:	466a      	mov	r2, sp
 8010d76:	f000 f903 	bl	8010f80 <_fstat_r>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	dbf2      	blt.n	8010d64 <__swhatbuf_r+0x12>
 8010d7e:	9a01      	ldr	r2, [sp, #4]
 8010d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d88:	425a      	negs	r2, r3
 8010d8a:	415a      	adcs	r2, r3
 8010d8c:	602a      	str	r2, [r5, #0]
 8010d8e:	e7ee      	b.n	8010d6e <__swhatbuf_r+0x1c>
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	2000      	movs	r0, #0
 8010d94:	6023      	str	r3, [r4, #0]
 8010d96:	b016      	add	sp, #88	; 0x58
 8010d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d9c <__smakebuf_r>:
 8010d9c:	898b      	ldrh	r3, [r1, #12]
 8010d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010da0:	079d      	lsls	r5, r3, #30
 8010da2:	4606      	mov	r6, r0
 8010da4:	460c      	mov	r4, r1
 8010da6:	d507      	bpl.n	8010db8 <__smakebuf_r+0x1c>
 8010da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	6123      	str	r3, [r4, #16]
 8010db0:	2301      	movs	r3, #1
 8010db2:	6163      	str	r3, [r4, #20]
 8010db4:	b002      	add	sp, #8
 8010db6:	bd70      	pop	{r4, r5, r6, pc}
 8010db8:	ab01      	add	r3, sp, #4
 8010dba:	466a      	mov	r2, sp
 8010dbc:	f7ff ffc9 	bl	8010d52 <__swhatbuf_r>
 8010dc0:	9900      	ldr	r1, [sp, #0]
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f7fb ffe7 	bl	800cd98 <_malloc_r>
 8010dca:	b948      	cbnz	r0, 8010de0 <__smakebuf_r+0x44>
 8010dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dd0:	059a      	lsls	r2, r3, #22
 8010dd2:	d4ef      	bmi.n	8010db4 <__smakebuf_r+0x18>
 8010dd4:	f023 0303 	bic.w	r3, r3, #3
 8010dd8:	f043 0302 	orr.w	r3, r3, #2
 8010ddc:	81a3      	strh	r3, [r4, #12]
 8010dde:	e7e3      	b.n	8010da8 <__smakebuf_r+0xc>
 8010de0:	4b0d      	ldr	r3, [pc, #52]	; (8010e18 <__smakebuf_r+0x7c>)
 8010de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	6020      	str	r0, [r4, #0]
 8010de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dec:	81a3      	strh	r3, [r4, #12]
 8010dee:	9b00      	ldr	r3, [sp, #0]
 8010df0:	6163      	str	r3, [r4, #20]
 8010df2:	9b01      	ldr	r3, [sp, #4]
 8010df4:	6120      	str	r0, [r4, #16]
 8010df6:	b15b      	cbz	r3, 8010e10 <__smakebuf_r+0x74>
 8010df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f000 f8d1 	bl	8010fa4 <_isatty_r>
 8010e02:	b128      	cbz	r0, 8010e10 <__smakebuf_r+0x74>
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	f023 0303 	bic.w	r3, r3, #3
 8010e0a:	f043 0301 	orr.w	r3, r3, #1
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	89a0      	ldrh	r0, [r4, #12]
 8010e12:	4305      	orrs	r5, r0
 8010e14:	81a5      	strh	r5, [r4, #12]
 8010e16:	e7cd      	b.n	8010db4 <__smakebuf_r+0x18>
 8010e18:	08010bb1 	.word	0x08010bb1

08010e1c <_malloc_usable_size_r>:
 8010e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e20:	1f18      	subs	r0, r3, #4
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bfbc      	itt	lt
 8010e26:	580b      	ldrlt	r3, [r1, r0]
 8010e28:	18c0      	addlt	r0, r0, r3
 8010e2a:	4770      	bx	lr

08010e2c <_raise_r>:
 8010e2c:	291f      	cmp	r1, #31
 8010e2e:	b538      	push	{r3, r4, r5, lr}
 8010e30:	4604      	mov	r4, r0
 8010e32:	460d      	mov	r5, r1
 8010e34:	d904      	bls.n	8010e40 <_raise_r+0x14>
 8010e36:	2316      	movs	r3, #22
 8010e38:	6003      	str	r3, [r0, #0]
 8010e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e42:	b112      	cbz	r2, 8010e4a <_raise_r+0x1e>
 8010e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e48:	b94b      	cbnz	r3, 8010e5e <_raise_r+0x32>
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f000 f830 	bl	8010eb0 <_getpid_r>
 8010e50:	462a      	mov	r2, r5
 8010e52:	4601      	mov	r1, r0
 8010e54:	4620      	mov	r0, r4
 8010e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e5a:	f000 b817 	b.w	8010e8c <_kill_r>
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d00a      	beq.n	8010e78 <_raise_r+0x4c>
 8010e62:	1c59      	adds	r1, r3, #1
 8010e64:	d103      	bne.n	8010e6e <_raise_r+0x42>
 8010e66:	2316      	movs	r3, #22
 8010e68:	6003      	str	r3, [r0, #0]
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	e7e7      	b.n	8010e3e <_raise_r+0x12>
 8010e6e:	2400      	movs	r4, #0
 8010e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e74:	4628      	mov	r0, r5
 8010e76:	4798      	blx	r3
 8010e78:	2000      	movs	r0, #0
 8010e7a:	e7e0      	b.n	8010e3e <_raise_r+0x12>

08010e7c <raise>:
 8010e7c:	4b02      	ldr	r3, [pc, #8]	; (8010e88 <raise+0xc>)
 8010e7e:	4601      	mov	r1, r0
 8010e80:	6818      	ldr	r0, [r3, #0]
 8010e82:	f7ff bfd3 	b.w	8010e2c <_raise_r>
 8010e86:	bf00      	nop
 8010e88:	20000540 	.word	0x20000540

08010e8c <_kill_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d07      	ldr	r5, [pc, #28]	; (8010eac <_kill_r+0x20>)
 8010e90:	2300      	movs	r3, #0
 8010e92:	4604      	mov	r4, r0
 8010e94:	4608      	mov	r0, r1
 8010e96:	4611      	mov	r1, r2
 8010e98:	602b      	str	r3, [r5, #0]
 8010e9a:	f7f2 fd2b 	bl	80038f4 <_kill>
 8010e9e:	1c43      	adds	r3, r0, #1
 8010ea0:	d102      	bne.n	8010ea8 <_kill_r+0x1c>
 8010ea2:	682b      	ldr	r3, [r5, #0]
 8010ea4:	b103      	cbz	r3, 8010ea8 <_kill_r+0x1c>
 8010ea6:	6023      	str	r3, [r4, #0]
 8010ea8:	bd38      	pop	{r3, r4, r5, pc}
 8010eaa:	bf00      	nop
 8010eac:	20002468 	.word	0x20002468

08010eb0 <_getpid_r>:
 8010eb0:	f7f2 bd18 	b.w	80038e4 <_getpid>

08010eb4 <__sread>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ebc:	f000 f894 	bl	8010fe8 <_read_r>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	bfab      	itete	ge
 8010ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ec8:	181b      	addge	r3, r3, r0
 8010eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ece:	bfac      	ite	ge
 8010ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ed2:	81a3      	strhlt	r3, [r4, #12]
 8010ed4:	bd10      	pop	{r4, pc}

08010ed6 <__swrite>:
 8010ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eda:	461f      	mov	r7, r3
 8010edc:	898b      	ldrh	r3, [r1, #12]
 8010ede:	05db      	lsls	r3, r3, #23
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	4616      	mov	r6, r2
 8010ee6:	d505      	bpl.n	8010ef4 <__swrite+0x1e>
 8010ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eec:	2302      	movs	r3, #2
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f000 f868 	bl	8010fc4 <_lseek_r>
 8010ef4:	89a3      	ldrh	r3, [r4, #12]
 8010ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010efe:	81a3      	strh	r3, [r4, #12]
 8010f00:	4632      	mov	r2, r6
 8010f02:	463b      	mov	r3, r7
 8010f04:	4628      	mov	r0, r5
 8010f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f0a:	f000 b817 	b.w	8010f3c <_write_r>

08010f0e <__sseek>:
 8010f0e:	b510      	push	{r4, lr}
 8010f10:	460c      	mov	r4, r1
 8010f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f16:	f000 f855 	bl	8010fc4 <_lseek_r>
 8010f1a:	1c43      	adds	r3, r0, #1
 8010f1c:	89a3      	ldrh	r3, [r4, #12]
 8010f1e:	bf15      	itete	ne
 8010f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f2a:	81a3      	strheq	r3, [r4, #12]
 8010f2c:	bf18      	it	ne
 8010f2e:	81a3      	strhne	r3, [r4, #12]
 8010f30:	bd10      	pop	{r4, pc}

08010f32 <__sclose>:
 8010f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f36:	f000 b813 	b.w	8010f60 <_close_r>
	...

08010f3c <_write_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	4d07      	ldr	r5, [pc, #28]	; (8010f5c <_write_r+0x20>)
 8010f40:	4604      	mov	r4, r0
 8010f42:	4608      	mov	r0, r1
 8010f44:	4611      	mov	r1, r2
 8010f46:	2200      	movs	r2, #0
 8010f48:	602a      	str	r2, [r5, #0]
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	f7f2 fd09 	bl	8003962 <_write>
 8010f50:	1c43      	adds	r3, r0, #1
 8010f52:	d102      	bne.n	8010f5a <_write_r+0x1e>
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	b103      	cbz	r3, 8010f5a <_write_r+0x1e>
 8010f58:	6023      	str	r3, [r4, #0]
 8010f5a:	bd38      	pop	{r3, r4, r5, pc}
 8010f5c:	20002468 	.word	0x20002468

08010f60 <_close_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	4d06      	ldr	r5, [pc, #24]	; (8010f7c <_close_r+0x1c>)
 8010f64:	2300      	movs	r3, #0
 8010f66:	4604      	mov	r4, r0
 8010f68:	4608      	mov	r0, r1
 8010f6a:	602b      	str	r3, [r5, #0]
 8010f6c:	f7f2 fd15 	bl	800399a <_close>
 8010f70:	1c43      	adds	r3, r0, #1
 8010f72:	d102      	bne.n	8010f7a <_close_r+0x1a>
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	b103      	cbz	r3, 8010f7a <_close_r+0x1a>
 8010f78:	6023      	str	r3, [r4, #0]
 8010f7a:	bd38      	pop	{r3, r4, r5, pc}
 8010f7c:	20002468 	.word	0x20002468

08010f80 <_fstat_r>:
 8010f80:	b538      	push	{r3, r4, r5, lr}
 8010f82:	4d07      	ldr	r5, [pc, #28]	; (8010fa0 <_fstat_r+0x20>)
 8010f84:	2300      	movs	r3, #0
 8010f86:	4604      	mov	r4, r0
 8010f88:	4608      	mov	r0, r1
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	602b      	str	r3, [r5, #0]
 8010f8e:	f7f2 fd10 	bl	80039b2 <_fstat>
 8010f92:	1c43      	adds	r3, r0, #1
 8010f94:	d102      	bne.n	8010f9c <_fstat_r+0x1c>
 8010f96:	682b      	ldr	r3, [r5, #0]
 8010f98:	b103      	cbz	r3, 8010f9c <_fstat_r+0x1c>
 8010f9a:	6023      	str	r3, [r4, #0]
 8010f9c:	bd38      	pop	{r3, r4, r5, pc}
 8010f9e:	bf00      	nop
 8010fa0:	20002468 	.word	0x20002468

08010fa4 <_isatty_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	4d06      	ldr	r5, [pc, #24]	; (8010fc0 <_isatty_r+0x1c>)
 8010fa8:	2300      	movs	r3, #0
 8010faa:	4604      	mov	r4, r0
 8010fac:	4608      	mov	r0, r1
 8010fae:	602b      	str	r3, [r5, #0]
 8010fb0:	f7f2 fd0f 	bl	80039d2 <_isatty>
 8010fb4:	1c43      	adds	r3, r0, #1
 8010fb6:	d102      	bne.n	8010fbe <_isatty_r+0x1a>
 8010fb8:	682b      	ldr	r3, [r5, #0]
 8010fba:	b103      	cbz	r3, 8010fbe <_isatty_r+0x1a>
 8010fbc:	6023      	str	r3, [r4, #0]
 8010fbe:	bd38      	pop	{r3, r4, r5, pc}
 8010fc0:	20002468 	.word	0x20002468

08010fc4 <_lseek_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4d07      	ldr	r5, [pc, #28]	; (8010fe4 <_lseek_r+0x20>)
 8010fc8:	4604      	mov	r4, r0
 8010fca:	4608      	mov	r0, r1
 8010fcc:	4611      	mov	r1, r2
 8010fce:	2200      	movs	r2, #0
 8010fd0:	602a      	str	r2, [r5, #0]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	f7f2 fd08 	bl	80039e8 <_lseek>
 8010fd8:	1c43      	adds	r3, r0, #1
 8010fda:	d102      	bne.n	8010fe2 <_lseek_r+0x1e>
 8010fdc:	682b      	ldr	r3, [r5, #0]
 8010fde:	b103      	cbz	r3, 8010fe2 <_lseek_r+0x1e>
 8010fe0:	6023      	str	r3, [r4, #0]
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}
 8010fe4:	20002468 	.word	0x20002468

08010fe8 <_read_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	4d07      	ldr	r5, [pc, #28]	; (8011008 <_read_r+0x20>)
 8010fec:	4604      	mov	r4, r0
 8010fee:	4608      	mov	r0, r1
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	602a      	str	r2, [r5, #0]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f7f2 fc96 	bl	8003928 <_read>
 8010ffc:	1c43      	adds	r3, r0, #1
 8010ffe:	d102      	bne.n	8011006 <_read_r+0x1e>
 8011000:	682b      	ldr	r3, [r5, #0]
 8011002:	b103      	cbz	r3, 8011006 <_read_r+0x1e>
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	20002468 	.word	0x20002468

0801100c <_init>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	bf00      	nop
 8011010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011012:	bc08      	pop	{r3}
 8011014:	469e      	mov	lr, r3
 8011016:	4770      	bx	lr

08011018 <_fini>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	bf00      	nop
 801101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101e:	bc08      	pop	{r3}
 8011020:	469e      	mov	lr, r3
 8011022:	4770      	bx	lr
