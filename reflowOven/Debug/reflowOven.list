
reflowOven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08011068  08011068  00021068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801179c  0801179c  00030714  2**0
                  CONTENTS
  4 .ARM          00000008  0801179c  0801179c  0002179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117a4  080117a4  00030714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117a4  080117a4  000217a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117a8  080117a8  000217a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000714  20000000  080117ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d64  20000714  08011ec0  00030714  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002478  08011ec0  00032478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030714  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1ac  00000000  00000000  00030744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553c  00000000  00000000  0005c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00061e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00063820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015726  00000000  00000000  00065000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000077be  00000000  00000000  0007a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00081ee4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008044  00000000  00000000  00081f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000004e  00000000  00000000  00089f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000714 	.word	0x20000714
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801104c 	.word	0x0801104c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000718 	.word	0x20000718
 80001cc:	0801104c 	.word	0x0801104c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <buzz>:
   18, 18, 18, 18, 18, 18,
   10, 10, 10,
   10, 10, 10,
   3, 3, 3
 };
void buzz(long frequency, long length) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

  long delayValue = 1000000 / frequency / 2; // calculate the delay value between transitions
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <buzz+0x74>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffe:	0fda      	lsrs	r2, r3, #31
 8001000:	4413      	add	r3, r2
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	613b      	str	r3, [r7, #16]
  //// 1 second's worth of microseconds, divided by the frequency, then split in half since
  //// there are two phases to each cycle
  long numCycles = frequency * length / 1000; // calculate the number of cycles for proper timing
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <buzz+0x78>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1192      	asrs	r2, r2, #6
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]
  //// multiply frequency, which is really cycles per second, by the number of seconds to
  //// get the total number of cycles to produce
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e014      	b.n	800104c <buzz+0x60>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_RESET);//(targetPin, HIGH); // write the buzzer pin high to push out the diaphram
 8001022:	2200      	movs	r2, #0
 8001024:	2120      	movs	r1, #32
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <buzz+0x7c>)
 8001028:	f003 fe60 	bl	8004cec <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait for the calculated delay value
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fb24 	bl	800267c <delay_us>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);//(targetPin, LOW); // write the buzzer pin low to pull back the diaphram
 8001034:	2201      	movs	r2, #1
 8001036:	2120      	movs	r1, #32
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <buzz+0x7c>)
 800103a:	f003 fe57 	bl	8004cec <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait again or the calculated delay value
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fb1b 	bl	800267c <delay_us>
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbe6      	blt.n	8001022 <buzz+0x36>
  }
  //digitalWrite(9, LOW);

}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	000f4240 	.word	0x000f4240
 8001064:	10624dd3 	.word	0x10624dd3
 8001068:	40020400 	.word	0x40020400
 800106c:	00000000 	.word	0x00000000

08001070 <sing>:
void sing(int s) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	// iterate over the notes of the melody:
	static uint8_t song;
	static uint16_t size;
	static uint32_t noteDuration;
	song=s;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b42      	ldr	r3, [pc, #264]	; (8001188 <sing+0x118>)
 800107e:	701a      	strb	r2, [r3, #0]
	if (song == 2)
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <sing+0x118>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d140      	bne.n	800110a <sing+0x9a>
	{
		//Serial.println(" 'Underworld Theme'");
		 size = sizeof(underworld_melody) / sizeof(int);
 8001088:	4b40      	ldr	r3, [pc, #256]	; (800118c <sing+0x11c>)
 800108a:	223a      	movs	r2, #58	; 0x3a
 800108c:	801a      	strh	r2, [r3, #0]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e033      	b.n	80010fc <sing+0x8c>

			// to calculate the note duration, take one second
			// divided by the note type.
			//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
			noteDuration = 1000 / underworld_tempo[thisNote];
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <sing+0x120>)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <sing+0x124>)
 80010a6:	6013      	str	r3, [r2, #0]

			buzz(underworld_melody[thisNote], noteDuration);
 80010a8:	4a3b      	ldr	r2, [pc, #236]	; (8001198 <sing+0x128>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <sing+0x124>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4610      	mov	r0, r2
 80010ba:	f7ff ff97 	bl	8000fec <buzz>

			// to distinguish the notes, set a minimum time between them.
			// the note's duration + 30% seems to work well:
			int pauseBetweenNotes = noteDuration * 1.30;
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <sing+0x124>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa1e 	bl	8000504 <__aeabi_ui2d>
 80010c8:	a32d      	add	r3, pc, #180	; (adr r3, 8001180 <sing+0x110>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa93 	bl	80005f8 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd3d 	bl	8000b58 <__aeabi_d2iz>
 80010de:	4603      	mov	r3, r0
 80010e0:	60bb      	str	r3, [r7, #8]
			HAL_Delay(pauseBetweenNotes);
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fd95 	bl	8003c14 <HAL_Delay>

			// stop the tone playing:
			buzz(0, noteDuration);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <sing+0x124>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff7b 	bl	8000fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <sing+0x11c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	4293      	cmp	r3, r2
 8001106:	dbc5      	blt.n	8001094 <sing+0x24>
			// stop the tone playing:
			buzz(0, noteDuration);

		}
	}
}
 8001108:	e034      	b.n	8001174 <sing+0x104>
		int size = sizeof(melody) / sizeof(int);
 800110a:	2350      	movs	r3, #80	; 0x50
 800110c:	617b      	str	r3, [r7, #20]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	e02b      	b.n	800116c <sing+0xfc>
			int noteDuration = 1000 / tempo[thisNote];
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <sing+0x12c>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	613b      	str	r3, [r7, #16]
			buzz(melody[thisNote], noteDuration);
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <sing+0x130>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	6939      	ldr	r1, [r7, #16]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5b 	bl	8000fec <buzz>
			int pauseBetweenNotes = noteDuration * 1.30;
 8001136:	6938      	ldr	r0, [r7, #16]
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_i2d>
 800113c:	a310      	add	r3, pc, #64	; (adr r3, 8001180 <sing+0x110>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd03 	bl	8000b58 <__aeabi_d2iz>
 8001152:	4603      	mov	r3, r0
 8001154:	60fb      	str	r3, [r7, #12]
			HAL_Delay(pauseBetweenNotes);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fd5b 	bl	8003c14 <HAL_Delay>
			buzz(0, noteDuration);
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff43 	bl	8000fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	3301      	adds	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbcf      	blt.n	8001114 <sing+0xa4>
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	3ff4cccc 	.word	0x3ff4cccc
 8001188:	20000730 	.word	0x20000730
 800118c:	20000732 	.word	0x20000732
 8001190:	20000368 	.word	0x20000368
 8001194:	20000734 	.word	0x20000734
 8001198:	20000280 	.word	0x20000280
 800119c:	20000140 	.word	0x20000140
 80011a0:	20000000 	.word	0x20000000

080011a4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
uint32_t GetSector(uint32_t Address)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <GetSector+0x120>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d806      	bhi.n	80011c6 <GetSector+0x22>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011be:	d302      	bcc.n	80011c6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e077      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <GetSector+0x124>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d806      	bhi.n	80011dc <GetSector+0x38>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <GetSector+0x128>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d302      	bcc.n	80011dc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e06c      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3c      	ldr	r2, [pc, #240]	; (80012d0 <GetSector+0x12c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d806      	bhi.n	80011f2 <GetSector+0x4e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	; (80012d4 <GetSector+0x130>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d302      	bcc.n	80011f2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e061      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <GetSector+0x134>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d206      	bcs.n	8001208 <GetSector+0x64>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a37      	ldr	r2, [pc, #220]	; (80012dc <GetSector+0x138>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d302      	bcc.n	8001208 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001202:	2303      	movs	r3, #3
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e056      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <GetSector+0x13c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d206      	bcs.n	800121e <GetSector+0x7a>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <GetSector+0x134>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d902      	bls.n	800121e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001218:	2304      	movs	r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e04b      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <GetSector+0x140>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d206      	bcs.n	8001234 <GetSector+0x90>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <GetSector+0x13c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d902      	bls.n	8001234 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800122e:	2305      	movs	r3, #5
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e040      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <GetSector+0x144>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d206      	bcs.n	800124a <GetSector+0xa6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a29      	ldr	r2, [pc, #164]	; (80012e4 <GetSector+0x140>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d902      	bls.n	800124a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001244:	2306      	movs	r3, #6
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e035      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <GetSector+0x148>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d206      	bcs.n	8001260 <GetSector+0xbc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <GetSector+0x144>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d902      	bls.n	8001260 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800125a:	2307      	movs	r3, #7
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e02a      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <GetSector+0x14c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d206      	bcs.n	8001276 <GetSector+0xd2>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a20      	ldr	r2, [pc, #128]	; (80012ec <GetSector+0x148>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d902      	bls.n	8001276 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001270:	2308      	movs	r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e01f      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <GetSector+0x150>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d206      	bcs.n	800128c <GetSector+0xe8>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <GetSector+0x14c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d902      	bls.n	800128c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001286:	2309      	movs	r3, #9
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e014      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <GetSector+0x154>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d806      	bhi.n	80012a2 <GetSector+0xfe>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <GetSector+0x150>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d902      	bls.n	80012a2 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800129c:	230a      	movs	r3, #10
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e009      	b.n	80012b6 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <GetSector+0x158>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d805      	bhi.n	80012b6 <GetSector+0x112>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <GetSector+0x15c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80012b2:	230b      	movs	r3, #11
 80012b4:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	08003ffe 	.word	0x08003ffe
 80012c8:	08007ffe 	.word	0x08007ffe
 80012cc:	08004000 	.word	0x08004000
 80012d0:	0800bffe 	.word	0x0800bffe
 80012d4:	08008000 	.word	0x08008000
 80012d8:	0800ffff 	.word	0x0800ffff
 80012dc:	0800c000 	.word	0x0800c000
 80012e0:	0801ffff 	.word	0x0801ffff
 80012e4:	0803ffff 	.word	0x0803ffff
 80012e8:	0805ffff 	.word	0x0805ffff
 80012ec:	0807ffff 	.word	0x0807ffff
 80012f0:	0809ffff 	.word	0x0809ffff
 80012f4:	080bffff 	.word	0x080bffff
 80012f8:	080dfffe 	.word	0x080dfffe
 80012fc:	080ffffe 	.word	0x080ffffe
 8001300:	080dffff 	.word	0x080dffff

08001304 <Flash_Write_Data>:
  return sectorsize;
}*/


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, ReflowTemplate *DATA_32)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	uint32_t *p_Record=(uint32_t* ) DATA_32;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	61fb      	str	r3, [r7, #28]
	/* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001312:	f003 f8bf 	bl	8004494 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff44 	bl	80011a4 <GetSector>
 800131c:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + sizeof(ReflowTemplate);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3324      	adds	r3, #36	; 0x24
 8001322:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f7ff ff3d 	bl	80011a4 <GetSector>
 800132a:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <Flash_Write_Data+0xac>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <Flash_Write_Data+0xac>)
 8001334:	2202      	movs	r2, #2
 8001336:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <Flash_Write_Data+0xac>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	3301      	adds	r3, #1
 8001346:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <Flash_Write_Data+0xac>)
 8001348:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <Flash_Write_Data+0xac>)
 8001352:	f003 fa0d 	bl	8004770 <HAL_FLASHEx_Erase>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <Flash_Write_Data+0x60>
	  {
		  return HAL_FLASH_GetError ();
 800135c:	f003 f8cc 	bl	80044f8 <HAL_FLASH_GetError>
 8001360:	4603      	mov	r3, r0
 8001362:	e021      	b.n	80013a8 <Flash_Write_Data+0xa4>
	  }


	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e018      	b.n	800139c <Flash_Write_Data+0x98>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, *p_Record) == HAL_OK)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2002      	movs	r0, #2
 8001378:	f003 f838 	bl	80043ec <HAL_FLASH_Program>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <Flash_Write_Data+0x86>
	    	 //Do nothing
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001382:	f003 f8b9 	bl	80044f8 <HAL_FLASH_GetError>
 8001386:	4603      	mov	r3, r0
 8001388:	e00e      	b.n	80013a8 <Flash_Write_Data+0xa4>
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3304      	adds	r3, #4
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3304      	adds	r3, #4
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b23      	cmp	r3, #35	; 0x23
 80013a0:	d9e3      	bls.n	800136a <Flash_Write_Data+0x66>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80013a2:	f003 f899 	bl	80044d8 <HAL_FLASH_Lock>

	   return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000738 	.word	0x20000738

080013b4 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartSectorAddress, __IO ReflowTemplate *DATA_32)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	uint32_t *p_Data=(uint32_t* ) DATA_32;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e00c      	b.n	80013e2 <Flash_Read_Data+0x2e>
	{

		*p_Data = *(__IO uint32_t*)StartSectorAddress;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	601a      	str	r2, [r3, #0]
	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3304      	adds	r3, #4
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3304      	adds	r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3304      	adds	r3, #4
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b23      	cmp	r3, #35	; 0x23
 80013e6:	d9ef      	bls.n	80013c8 <Flash_Read_Data+0x14>

	}
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SaveParameters>:
FLAGS Flags;
uint8_t PIDFlag;



void SaveParameters(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x080A0000, &ReflowParameters);
 80013fc:	4902      	ldr	r1, [pc, #8]	; (8001408 <SaveParameters+0x10>)
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <SaveParameters+0x14>)
 8001400:	f7ff ff80 	bl	8001304 <Flash_Write_Data>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000aac 	.word	0x20000aac
 800140c:	080a0000 	.word	0x080a0000

08001410 <LoadParameters>:
void LoadParameters(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x080A0000, &ReflowParameters);
 8001414:	4902      	ldr	r1, [pc, #8]	; (8001420 <LoadParameters+0x10>)
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <LoadParameters+0x14>)
 8001418:	f7ff ffcc 	bl	80013b4 <Flash_Read_Data>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000aac 	.word	0x20000aac
 8001424:	080a0000 	.word	0x080a0000

08001428 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8001430:	2205      	movs	r2, #5
 8001432:	4905      	ldr	r1, [pc, #20]	; (8001448 <HAL_UART_RxCpltCallback+0x20>)
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_UART_RxCpltCallback+0x24>)
 8001436:	f006 ff83 	bl	8008340 <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_UART_RxCpltCallback+0x28>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000454 	.word	0x20000454
 800144c:	20000a6c 	.word	0x20000a6c
 8001450:	20000754 	.word	0x20000754

08001454 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string){
 8001454:	b580      	push	{r7, lr}
 8001456:	b090      	sub	sp, #64	; 0x40
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 800145e:	f107 0008 	add.w	r0, r7, #8
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	490b      	ldr	r1, [pc, #44]	; (8001494 <NEXTION_SendString+0x40>)
 8001468:	f00c f98a 	bl	800d780 <siprintf>
 800146c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800146e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0108 	add.w	r1, r7, #8
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <NEXTION_SendString+0x44>)
 800147c:	f006 fec7 	bl	800820e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	2203      	movs	r2, #3
 8001484:	4905      	ldr	r1, [pc, #20]	; (800149c <NEXTION_SendString+0x48>)
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <NEXTION_SendString+0x44>)
 8001488:	f006 fec1 	bl	800820e <HAL_UART_Transmit>

}
 800148c:	bf00      	nop
 800148e:	3740      	adds	r7, #64	; 0x40
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	08011068 	.word	0x08011068
 8001498:	20000a6c 	.word	0x20000a6c
 800149c:	20000450 	.word	0x20000450

080014a0 <NEXTION_SendFloat>:

void NEXTION_SendFloat (char *ID, float32_t number){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b092      	sub	sp, #72	; 0x48
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	ed87 0a00 	vstr	s0, [r7]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f7ff f84b 	bl	8000548 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	f107 0008 	add.w	r0, r7, #8
 80014ba:	e9cd 2300 	strd	r2, r3, [sp]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	490b      	ldr	r1, [pc, #44]	; (80014f0 <NEXTION_SendFloat+0x50>)
 80014c2:	f00c f95d 	bl	800d780 <siprintf>
 80014c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <NEXTION_SendFloat+0x54>)
 80014d6:	f006 fe9a 	bl	800820e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014da:	2364      	movs	r3, #100	; 0x64
 80014dc:	2203      	movs	r2, #3
 80014de:	4906      	ldr	r1, [pc, #24]	; (80014f8 <NEXTION_SendFloat+0x58>)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <NEXTION_SendFloat+0x54>)
 80014e2:	f006 fe94 	bl	800820e <HAL_UART_Transmit>
}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	08011074 	.word	0x08011074
 80014f4:	20000a6c 	.word	0x20000a6c
 80014f8:	20000450 	.word	0x20000450

080014fc <NEXTION_SenduInt>:

void NEXTION_SenduInt (char *ID, uint32_t number){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	; 0x40
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 8001506:	f107 0008 	add.w	r0, r7, #8
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	490b      	ldr	r1, [pc, #44]	; (800153c <NEXTION_SenduInt+0x40>)
 8001510:	f00c f936 	bl	800d780 <siprintf>
 8001514:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001518:	b29a      	uxth	r2, r3
 800151a:	f107 0108 	add.w	r1, r7, #8
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <NEXTION_SenduInt+0x44>)
 8001524:	f006 fe73 	bl	800820e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	2203      	movs	r2, #3
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <NEXTION_SenduInt+0x48>)
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <NEXTION_SenduInt+0x44>)
 8001530:	f006 fe6d 	bl	800820e <HAL_UART_Transmit>
}
 8001534:	bf00      	nop
 8001536:	3740      	adds	r7, #64	; 0x40
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08011084 	.word	0x08011084
 8001540:	20000a6c 	.word	0x20000a6c
 8001544:	20000450 	.word	0x20000450

08001548 <NEXTION_CMD>:

void NEXTION_CMD (const char *string){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
//TODO MM modified strlen parameter to fit
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe3d 	bl	80001d0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <NEXTION_CMD+0x34>)
 8001562:	f006 fe54 	bl	800820e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	2203      	movs	r2, #3
 800156a:	4905      	ldr	r1, [pc, #20]	; (8001580 <NEXTION_CMD+0x38>)
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <NEXTION_CMD+0x34>)
 800156e:	f006 fe4e 	bl	800820e <HAL_UART_Transmit>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000a6c 	.word	0x20000a6c
 8001580:	20000450 	.word	0x20000450

08001584 <NextionDrawDot>:
	NEXTION_SendFloat("t4",ReflowParameters.secondHeatUpRate);
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}

void NextionDrawDot(uint32_t x, uint32_t y){
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,BLUE", x, y);
 800158e:	f107 0008 	add.w	r0, r7, #8
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	490b      	ldr	r1, [pc, #44]	; (80015c4 <NextionDrawDot+0x40>)
 8001598:	f00c f8f2 	bl	800d780 <siprintf>
 800159c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f107 0108 	add.w	r1, r7, #8
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <NextionDrawDot+0x44>)
 80015ac:	f006 fe2f 	bl	800820e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	2203      	movs	r2, #3
 80015b4:	4905      	ldr	r1, [pc, #20]	; (80015cc <NextionDrawDot+0x48>)
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <NextionDrawDot+0x44>)
 80015b8:	f006 fe29 	bl	800820e <HAL_UART_Transmit>
}
 80015bc:	bf00      	nop
 80015be:	3740      	adds	r7, #64	; 0x40
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	080110ac 	.word	0x080110ac
 80015c8:	20000a6c 	.word	0x20000a6c
 80015cc:	20000450 	.word	0x20000450

080015d0 <NextionDrawTemp>:

void NextionDrawTemp(uint32_t x, uint32_t y){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	uint8_t miki1;
	uint8_t miki2;
	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80015da:	f107 0008 	add.w	r0, r7, #8
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <NextionDrawTemp+0x4c>)
 80015e4:	f00c f8cc 	bl	800d780 <siprintf>
 80015e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	miki1=HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <NextionDrawTemp+0x50>)
 80015f8:	f006 fe09 	bl	800820e <HAL_UART_Transmit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	miki2=HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	2203      	movs	r2, #3
 8001606:	4907      	ldr	r1, [pc, #28]	; (8001624 <NextionDrawTemp+0x54>)
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <NextionDrawTemp+0x50>)
 800160a:	f006 fe00 	bl	800820e <HAL_UART_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
}
 8001614:	bf00      	nop
 8001616:	3740      	adds	r7, #64	; 0x40
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080110c0 	.word	0x080110c0
 8001620:	20000a6c 	.word	0x20000a6c
 8001624:	20000450 	.word	0x20000450

08001628 <HandleKeyPad>:



float32_t HandleKeyPad(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e007      	b.n	8001644 <HandleKeyPad+0x1c>
		input[i] = 0;
 8001634:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HandleKeyPad+0xb8>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b13      	cmp	r3, #19
 8001648:	ddf4      	ble.n	8001634 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <HandleKeyPad+0xbc>)
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <HandleKeyPad+0xc0>)
 8001652:	f7ff feff 	bl	8001454 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HandleKeyPad+0xc4>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 800165c:	e026      	b.n	80016ac <HandleKeyPad+0x84>
	{

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 800165e:	2205      	movs	r2, #5
 8001660:	4923      	ldr	r1, [pc, #140]	; (80016f0 <HandleKeyPad+0xc8>)
 8001662:	4824      	ldr	r0, [pc, #144]	; (80016f4 <HandleKeyPad+0xcc>)
 8001664:	f00c f8ac 	bl	800d7c0 <strncmp>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HandleKeyPad+0x4a>
		{
			return 9999;
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HandleKeyPad+0xd0>)
 8001670:	e02e      	b.n	80016d0 <HandleKeyPad+0xa8>
		}
		else
		{
			//do nothing.
		}
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8001672:	2205      	movs	r2, #5
 8001674:	4921      	ldr	r1, [pc, #132]	; (80016fc <HandleKeyPad+0xd4>)
 8001676:	481f      	ldr	r0, [pc, #124]	; (80016f4 <HandleKeyPad+0xcc>)
 8001678:	f00c f8a2 	bl	800d7c0 <strncmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HandleKeyPad+0x5e>
				return 8888;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HandleKeyPad+0xd8>)
 8001684:	e024      	b.n	80016d0 <HandleKeyPad+0xa8>
		{
			//do nothing
		}


		if (UART_Recieved_Flag == 1) {
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HandleKeyPad+0xc4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10e      	bne.n	80016ac <HandleKeyPad+0x84>
			input[index] = UART_Recieved_Data[4];
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HandleKeyPad+0xcc>)
 8001692:	7911      	ldrb	r1, [r2, #4]
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HandleKeyPad+0xb8>)
 8001696:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HandleKeyPad+0xc4>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			index++;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	3301      	adds	r3, #1
 80016a2:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HandleKeyPad+0xb8>)
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HandleKeyPad+0xc0>)
 80016a8:	f7ff fed4 	bl	8001454 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 80016ac:	2205      	movs	r2, #5
 80016ae:	4915      	ldr	r1, [pc, #84]	; (8001704 <HandleKeyPad+0xdc>)
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <HandleKeyPad+0xcc>)
 80016b2:	f00c f885 	bl	800d7c0 <strncmp>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1d0      	bne.n	800165e <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <HandleKeyPad+0xb8>)
 80016be:	f00b faf5 	bl	800ccac <atof>
 80016c2:	ec53 2b10 	vmov	r2, r3, d0
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa8d 	bl	8000be8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000a54 	.word	0x20000a54
 80016e4:	080110d4 	.word	0x080110d4
 80016e8:	080110d8 	.word	0x080110d8
 80016ec:	20000754 	.word	0x20000754
 80016f0:	080110dc 	.word	0x080110dc
 80016f4:	20000454 	.word	0x20000454
 80016f8:	461c3c00 	.word	0x461c3c00
 80016fc:	080110e4 	.word	0x080110e4
 8001700:	460ae000 	.word	0x460ae000
 8001704:	080110ec 	.word	0x080110ec

08001708 <Update_Page_3>:


void Update_Page_3() {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
	flagMiki=true;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <Update_Page_3+0x98>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <Update_Page_3+0x9c>)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171c:	6018      	str	r0, [r3, #0]
 800171e:	3304      	adds	r3, #4
 8001720:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00b      	b.n	8001740 <Update_Page_3+0x38>
		UART_Recieved_Data[i]=defaultUart[i];
 8001728:	1d3a      	adds	r2, r7, #4
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	7819      	ldrb	r1, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <Update_Page_3+0xa0>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	460a      	mov	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b04      	cmp	r3, #4
 8001744:	ddf0      	ble.n	8001728 <Update_Page_3+0x20>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Update_Page_3+0xa4>)
 8001748:	edd3 7a03 	vldr	s15, [r3, #12]
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <Update_Page_3+0xa8>)
 8001752:	f7ff fea5 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <Update_Page_3+0xa4>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4619      	mov	r1, r3
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <Update_Page_3+0xac>)
 800175e:	f7ff fecd 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <Update_Page_3+0xa4>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4619      	mov	r1, r3
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <Update_Page_3+0xb0>)
 800176a:	f7ff fec7 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <Update_Page_3+0xa4>)
 8001770:	edd3 7a06 	vldr	s15, [r3, #24]
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <Update_Page_3+0xb4>)
 800177a:	f7ff fe91 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <Update_Page_3+0xa4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4619      	mov	r1, r3
 8001784:	480e      	ldr	r0, [pc, #56]	; (80017c0 <Update_Page_3+0xb8>)
 8001786:	f7ff feb9 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <Update_Page_3+0xa4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <Update_Page_3+0xbc>)
 8001792:	f7ff feb3 	bl	80014fc <NEXTION_SenduInt>

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000ad0 	.word	0x20000ad0
 80017a4:	080110f4 	.word	0x080110f4
 80017a8:	20000454 	.word	0x20000454
 80017ac:	20000aac 	.word	0x20000aac
 80017b0:	080110d8 	.word	0x080110d8
 80017b4:	08011094 	.word	0x08011094
 80017b8:	08011098 	.word	0x08011098
 80017bc:	0801109c 	.word	0x0801109c
 80017c0:	080110a0 	.word	0x080110a0
 80017c4:	080110a4 	.word	0x080110a4

080017c8 <Update_Page_0>:

void Update_Page_0() {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <Update_Page_0+0x104>)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017d6:	6018      	str	r0, [r3, #0]
 80017d8:	3304      	adds	r3, #4
 80017da:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	e00b      	b.n	80017fa <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80017e2:	1d3a      	adds	r2, r7, #4
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <Update_Page_0+0x108>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	ddf0      	ble.n	80017e2 <Update_Page_0+0x1a>
	}

	float32_t dx =0.23; //275px / 400s //92px 400s
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <Update_Page_0+0x10c>)
 8001802:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <Update_Page_0+0x110>)
 8001806:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 28;
 8001808:	231c      	movs	r3, #28
 800180a:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 153; //151
 800180c:	2399      	movs	r3, #153	; 0x99
 800180e:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <Update_Page_0+0x114>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d120      	bne.n	800185a <Update_Page_0+0x92>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temperature)*dy));
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <Update_Page_0+0x118>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001824:	edd7 7a06 	vldr	s15, [r7, #24]
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	441a      	add	r2, r3
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <Update_Page_0+0x11c>)
 800183a:	ed93 7a00 	vldr	s14, [r3]
 800183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184a:	ee17 1a90 	vmov	r1, s15
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1a5b      	subs	r3, r3, r1
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff febb 	bl	80015d0 <NextionDrawTemp>



	NEXTION_SendFloat("t0", temperature);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <Update_Page_0+0x11c>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <Update_Page_0+0x120>)
 8001866:	f7ff fe1b 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <Update_Page_0+0x124>)
 800186c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <Update_Page_0+0x128>)
 8001876:	f7ff fe13 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <Update_Page_0+0x124>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4619      	mov	r1, r3
 8001880:	481c      	ldr	r0, [pc, #112]	; (80018f4 <Update_Page_0+0x12c>)
 8001882:	f7ff fe3b 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <Update_Page_0+0x124>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	4619      	mov	r1, r3
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <Update_Page_0+0x130>)
 800188e:	f7ff fe35 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <Update_Page_0+0x124>)
 8001894:	edd3 7a06 	vldr	s15, [r3, #24]
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	4817      	ldr	r0, [pc, #92]	; (80018fc <Update_Page_0+0x134>)
 800189e:	f7ff fdff 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <Update_Page_0+0x124>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <Update_Page_0+0x138>)
 80018aa:	f7ff fe27 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <Update_Page_0+0x124>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <Update_Page_0+0x13c>)
 80018b6:	f7ff fe21 	bl	80014fc <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 80018ba:	4913      	ldr	r1, [pc, #76]	; (8001908 <Update_Page_0+0x140>)
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <Update_Page_0+0x144>)
 80018be:	f7ff fdc9 	bl	8001454 <NEXTION_SendString>

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08011100 	.word	0x08011100
 80018d0:	20000454 	.word	0x20000454
 80018d4:	3e6b851f 	.word	0x3e6b851f
 80018d8:	3f0bb98c 	.word	0x3f0bb98c
 80018dc:	2000074c 	.word	0x2000074c
 80018e0:	200007a4 	.word	0x200007a4
 80018e4:	20000764 	.word	0x20000764
 80018e8:	080110d8 	.word	0x080110d8
 80018ec:	20000aac 	.word	0x20000aac
 80018f0:	08011094 	.word	0x08011094
 80018f4:	0801109c 	.word	0x0801109c
 80018f8:	08011098 	.word	0x08011098
 80018fc:	080110a0 	.word	0x080110a0
 8001900:	080110a8 	.word	0x080110a8
 8001904:	080110a4 	.word	0x080110a4
 8001908:	20000b00 	.word	0x20000b00
 800190c:	080110fc 	.word	0x080110fc

08001910 <Update_Page_2>:

void Update_Page_2() {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <Update_Page_2+0x70>)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191e:	6018      	str	r0, [r3, #0]
 8001920:	3304      	adds	r3, #4
 8001922:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e00b      	b.n	8001942 <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 800192a:	1d3a      	adds	r2, r7, #4
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <Update_Page_2+0x74>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	460a      	mov	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b04      	cmp	r3, #4
 8001946:	ddf0      	ble.n	800192a <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <Update_Page_2+0x78>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <Update_Page_2+0x7c>)
 8001954:	f7ff fda4 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <Update_Page_2+0x78>)
 800195a:	edd3 7a01 	vldr	s15, [r3, #4]
 800195e:	eeb0 0a67 	vmov.f32	s0, s15
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <Update_Page_2+0x80>)
 8001964:	f7ff fd9c 	bl	80014a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <Update_Page_2+0x78>)
 800196a:	edd3 7a02 	vldr	s15, [r3, #8]
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	4808      	ldr	r0, [pc, #32]	; (8001994 <Update_Page_2+0x84>)
 8001974:	f7ff fd94 	bl	80014a0 <NEXTION_SendFloat>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08011108 	.word	0x08011108
 8001984:	20000454 	.word	0x20000454
 8001988:	20000aac 	.word	0x20000aac
 800198c:	080110d8 	.word	0x080110d8
 8001990:	08011094 	.word	0x08011094
 8001994:	08011098 	.word	0x08011098

08001998 <HandleGui>:



void HandleGui(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b0a4      	sub	sp, #144	; 0x90
 800199c:	af00      	add	r7, sp, #0
	//###################ErrorCheck##########################
	if (-1==temperature)
 800199e:	4bc5      	ldr	r3, [pc, #788]	; (8001cb4 <HandleGui+0x31c>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019a8:	eef4 7a47 	vcmp.f32	s15, s14
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d102      	bne.n	80019b8 <HandleGui+0x20>
	{
		State=Error;
 80019b2:	4bc1      	ldr	r3, [pc, #772]	; (8001cb8 <HandleGui+0x320>)
 80019b4:	2206      	movs	r2, #6
 80019b6:	701a      	strb	r2, [r3, #0]
	}

	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 80019b8:	2205      	movs	r2, #5
 80019ba:	49c0      	ldr	r1, [pc, #768]	; (8001cbc <HandleGui+0x324>)
 80019bc:	48c0      	ldr	r0, [pc, #768]	; (8001cc0 <HandleGui+0x328>)
 80019be:	f00b feff 	bl	800d7c0 <strncmp>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HandleGui+0x34>
			Update_Page_0();
 80019c8:	f7ff fefe 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80019cc:	2205      	movs	r2, #5
 80019ce:	49bd      	ldr	r1, [pc, #756]	; (8001cc4 <HandleGui+0x32c>)
 80019d0:	48bb      	ldr	r0, [pc, #748]	; (8001cc0 <HandleGui+0x328>)
 80019d2:	f00b fef5 	bl	800d7c0 <strncmp>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HandleGui+0x48>
			Update_Page_3();
 80019dc:	f7ff fe94 	bl	8001708 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 80019e0:	2205      	movs	r2, #5
 80019e2:	49b9      	ldr	r1, [pc, #740]	; (8001cc8 <HandleGui+0x330>)
 80019e4:	48b6      	ldr	r0, [pc, #728]	; (8001cc0 <HandleGui+0x328>)
 80019e6:	f00b feeb 	bl	800d7c0 <strncmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d103      	bne.n	80019f8 <HandleGui+0x60>
			startReflow();
 80019f0:	f000 fbca 	bl	8002188 <startReflow>
			Update_Page_0();
 80019f4:	f7ff fee8 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80019f8:	2205      	movs	r2, #5
 80019fa:	49b4      	ldr	r1, [pc, #720]	; (8001ccc <HandleGui+0x334>)
 80019fc:	48b0      	ldr	r0, [pc, #704]	; (8001cc0 <HandleGui+0x328>)
 80019fe:	f00b fedf 	bl	800d7c0 <strncmp>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <HandleGui+0x78>
			stopReflow();
 8001a08:	f000 fbec 	bl	80021e4 <stopReflow>
			Update_Page_0();
 8001a0c:	f7ff fedc 	bl	80017c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 8001a10:	2205      	movs	r2, #5
 8001a12:	49ac      	ldr	r1, [pc, #688]	; (8001cc4 <HandleGui+0x32c>)
 8001a14:	48aa      	ldr	r0, [pc, #680]	; (8001cc0 <HandleGui+0x328>)
 8001a16:	f00b fed3 	bl	800d7c0 <strncmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HandleGui+0x8c>
			Update_Page_3();
 8001a20:	f7ff fe72 	bl	8001708 <Update_Page_3>
	}


	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 8001a24:	2205      	movs	r2, #5
 8001a26:	49aa      	ldr	r1, [pc, #680]	; (8001cd0 <HandleGui+0x338>)
 8001a28:	48a5      	ldr	r0, [pc, #660]	; (8001cc0 <HandleGui+0x328>)
 8001a2a:	f00b fec9 	bl	800d7c0 <strncmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HandleGui+0xa0>
		Update_Page_2();
 8001a34:	f7ff ff6c 	bl	8001910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 8001a38:	2205      	movs	r2, #5
 8001a3a:	49a6      	ldr	r1, [pc, #664]	; (8001cd4 <HandleGui+0x33c>)
 8001a3c:	48a0      	ldr	r0, [pc, #640]	; (8001cc0 <HandleGui+0x328>)
 8001a3e:	f00b febf 	bl	800d7c0 <strncmp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d154      	bne.n	8001af2 <HandleGui+0x15a>
			  float32_t Output =0;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8001a50:	f7ff fdea 	bl	8001628 <HandleKeyPad>
 8001a54:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a58:	e024      	b.n	8001aa4 <HandleGui+0x10c>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a5a:	4a9f      	ldr	r2, [pc, #636]	; (8001cd8 <HandleGui+0x340>)
 8001a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a64:	6018      	str	r0, [r3, #0]
 8001a66:	3304      	adds	r3, #4
 8001a68:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a70:	e010      	b.n	8001a94 <HandleGui+0xfc>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a7a:	4413      	add	r3, r2
 8001a7c:	7819      	ldrb	r1, [r3, #0]
 8001a7e:	4a90      	ldr	r2, [pc, #576]	; (8001cc0 <HandleGui+0x328>)
 8001a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a84:	4413      	add	r3, r2
 8001a86:	460a      	mov	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	ddea      	ble.n	8001a72 <HandleGui+0xda>
					}
				  Output = HandleKeyPad();
 8001a9c:	f7ff fdc4 	bl	8001628 <HandleKeyPad>
 8001aa0:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001aa4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001aa8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001cdc <HandleGui+0x344>
 8001aac:	eef4 7a47 	vcmp.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d0d1      	beq.n	8001a5a <HandleGui+0xc2>
			  }
			  if(Output == 8888){
 8001ab6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001aba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001ce0 <HandleGui+0x348>
 8001abe:	eef4 7a47 	vcmp.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	d103      	bne.n	8001ad0 <HandleGui+0x138>
				 Output = ReflowParameters.KP;
 8001ac8:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <HandleGui+0x34c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }
	    ReflowParameters.KP = Output;
 8001ad0:	4a84      	ldr	r2, [pc, #528]	; (8001ce4 <HandleGui+0x34c>)
 8001ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ad6:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8001ad8:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HandleGui+0x34c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a82      	ldr	r2, [pc, #520]	; (8001ce8 <HandleGui+0x350>)
 8001ade:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <HandleGui+0x350>)
 8001ae4:	f000 fd94 	bl	8002610 <arm_pid_init_f32>
		Update_Page_2();
 8001ae8:	f7ff ff12 	bl	8001910 <Update_Page_2>
		NEXTION_CMD("page 2");
 8001aec:	487f      	ldr	r0, [pc, #508]	; (8001cec <HandleGui+0x354>)
 8001aee:	f7ff fd2b 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 8001af2:	2205      	movs	r2, #5
 8001af4:	497e      	ldr	r1, [pc, #504]	; (8001cf0 <HandleGui+0x358>)
 8001af6:	4872      	ldr	r0, [pc, #456]	; (8001cc0 <HandleGui+0x328>)
 8001af8:	f00b fe62 	bl	800d7c0 <strncmp>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d154      	bne.n	8001bac <HandleGui+0x214>
			  float32_t Output =0;
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8001b0a:	f7ff fd8d 	bl	8001628 <HandleKeyPad>
 8001b0e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b12:	e024      	b.n	8001b5e <HandleGui+0x1c6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b14:	4a70      	ldr	r2, [pc, #448]	; (8001cd8 <HandleGui+0x340>)
 8001b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1e:	6018      	str	r0, [r3, #0]
 8001b20:	3304      	adds	r3, #4
 8001b22:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b2a:	e010      	b.n	8001b4e <HandleGui+0x1b6>
						UART_Recieved_Data[i]=defaultUart[i];
 8001b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b34:	4413      	add	r3, r2
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HandleGui+0x328>)
 8001b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3e:	4413      	add	r3, r2
 8001b40:	460a      	mov	r2, r1
 8001b42:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	ddea      	ble.n	8001b2c <HandleGui+0x194>
					}
				  Output = HandleKeyPad();
 8001b56:	f7ff fd67 	bl	8001628 <HandleKeyPad>
 8001b5a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b62:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001cdc <HandleGui+0x344>
 8001b66:	eef4 7a47 	vcmp.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d0d1      	beq.n	8001b14 <HandleGui+0x17c>
			  }
			  if(Output == 8888){
 8001b70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b74:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001ce0 <HandleGui+0x348>
 8001b78:	eef4 7a47 	vcmp.f32	s15, s14
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d103      	bne.n	8001b8a <HandleGui+0x1f2>
				 Output = ReflowParameters.Ki;
 8001b82:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HandleGui+0x34c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8001b8a:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <HandleGui+0x34c>)
 8001b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b90:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001b92:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <HandleGui+0x34c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HandleGui+0x350>)
 8001b98:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4852      	ldr	r0, [pc, #328]	; (8001ce8 <HandleGui+0x350>)
 8001b9e:	f000 fd37 	bl	8002610 <arm_pid_init_f32>
			Update_Page_2();
 8001ba2:	f7ff feb5 	bl	8001910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001ba6:	4851      	ldr	r0, [pc, #324]	; (8001cec <HandleGui+0x354>)
 8001ba8:	f7ff fcce 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001bac:	2205      	movs	r2, #5
 8001bae:	4951      	ldr	r1, [pc, #324]	; (8001cf4 <HandleGui+0x35c>)
 8001bb0:	4843      	ldr	r0, [pc, #268]	; (8001cc0 <HandleGui+0x328>)
 8001bb2:	f00b fe05 	bl	800d7c0 <strncmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d14b      	bne.n	8001c54 <HandleGui+0x2bc>
			  float32_t Output =0;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001bc2:	f7ff fd31 	bl	8001628 <HandleKeyPad>
 8001bc6:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001bca:	e01e      	b.n	8001c0a <HandleGui+0x272>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HandleGui+0x340>)
 8001bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd6:	6018      	str	r0, [r3, #0]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8001be0:	e00c      	b.n	8001bfc <HandleGui+0x264>
						UART_Recieved_Data[i]=defaultUart[i];
 8001be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be8:	4413      	add	r3, r2
 8001bea:	7819      	ldrb	r1, [r3, #0]
 8001bec:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HandleGui+0x328>)
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf0:	4413      	add	r3, r2
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	ddef      	ble.n	8001be2 <HandleGui+0x24a>
					}
				  Output = HandleKeyPad();
 8001c02:	f7ff fd11 	bl	8001628 <HandleKeyPad>
 8001c06:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001c0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c0e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001cdc <HandleGui+0x344>
 8001c12:	eef4 7a47 	vcmp.f32	s15, s14
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d0d7      	beq.n	8001bcc <HandleGui+0x234>
			  }
			  if(Output == 8888){
 8001c1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ce0 <HandleGui+0x348>
 8001c24:	eef4 7a47 	vcmp.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d102      	bne.n	8001c34 <HandleGui+0x29c>
				 Output = ReflowParameters.KD;
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HandleGui+0x34c>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001c34:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <HandleGui+0x34c>)
 8001c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c38:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HandleGui+0x34c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HandleGui+0x350>)
 8001c40:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001c42:	2101      	movs	r1, #1
 8001c44:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <HandleGui+0x350>)
 8001c46:	f000 fce3 	bl	8002610 <arm_pid_init_f32>
			Update_Page_2();
 8001c4a:	f7ff fe61 	bl	8001910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001c4e:	4827      	ldr	r0, [pc, #156]	; (8001cec <HandleGui+0x354>)
 8001c50:	f7ff fc7a 	bl	8001548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001c54:	2205      	movs	r2, #5
 8001c56:	4928      	ldr	r1, [pc, #160]	; (8001cf8 <HandleGui+0x360>)
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <HandleGui+0x328>)
 8001c5a:	f00b fdb1 	bl	800d7c0 <strncmp>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HandleGui+0x2d0>
			Update_Page_3();
 8001c64:	f7ff fd50 	bl	8001708 <Update_Page_3>



	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001c68:	2205      	movs	r2, #5
 8001c6a:	4924      	ldr	r1, [pc, #144]	; (8001cfc <HandleGui+0x364>)
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <HandleGui+0x328>)
 8001c6e:	f00b fda7 	bl	800d7c0 <strncmp>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HandleGui+0x2e4>
		Update_Page_3();
 8001c78:	f7ff fd46 	bl	8001708 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	4920      	ldr	r1, [pc, #128]	; (8001d00 <HandleGui+0x368>)
 8001c80:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <HandleGui+0x328>)
 8001c82:	f00b fd9d 	bl	800d7c0 <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d17b      	bne.n	8001d84 <HandleGui+0x3ec>
			  float32_t Output =0;
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001c92:	f7ff fcc9 	bl	8001628 <HandleKeyPad>
 8001c96:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001c9a:	e047      	b.n	8001d2c <HandleGui+0x394>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HandleGui+0x340>)
 8001c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ca6:	6018      	str	r0, [r3, #0]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001cac:	2300      	movs	r3, #0
 8001cae:	673b      	str	r3, [r7, #112]	; 0x70
 8001cb0:	e035      	b.n	8001d1e <HandleGui+0x386>
 8001cb2:	bf00      	nop
 8001cb4:	20000764 	.word	0x20000764
 8001cb8:	20000a68 	.word	0x20000a68
 8001cbc:	08011110 	.word	0x08011110
 8001cc0:	20000454 	.word	0x20000454
 8001cc4:	08011118 	.word	0x08011118
 8001cc8:	08011120 	.word	0x08011120
 8001ccc:	08011128 	.word	0x08011128
 8001cd0:	08011130 	.word	0x08011130
 8001cd4:	08011138 	.word	0x08011138
 8001cd8:	080111b0 	.word	0x080111b0
 8001cdc:	461c3c00 	.word	0x461c3c00
 8001ce0:	460ae000 	.word	0x460ae000
 8001ce4:	20000aac 	.word	0x20000aac
 8001ce8:	20000a30 	.word	0x20000a30
 8001cec:	08011140 	.word	0x08011140
 8001cf0:	08011148 	.word	0x08011148
 8001cf4:	08011150 	.word	0x08011150
 8001cf8:	08011158 	.word	0x08011158
 8001cfc:	08011160 	.word	0x08011160
 8001d00:	08011168 	.word	0x08011168
						UART_Recieved_Data[i]=defaultUart[i];
 8001d04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0a:	4413      	add	r3, r2
 8001d0c:	7819      	ldrb	r1, [r3, #0]
 8001d0e:	4ab2      	ldr	r2, [pc, #712]	; (8001fd8 <HandleGui+0x640>)
 8001d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d12:	4413      	add	r3, r2
 8001d14:	460a      	mov	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	ddef      	ble.n	8001d04 <HandleGui+0x36c>
					}
				  Output = HandleKeyPad();
 8001d24:	f7ff fc80 	bl	8001628 <HandleKeyPad>
 8001d28:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001d2c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d30:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001fdc <HandleGui+0x644>
 8001d34:	eef4 7a47 	vcmp.f32	s15, s14
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	d0ae      	beq.n	8001c9c <HandleGui+0x304>
			  }
			  if(Output == 8888){
 8001d3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d42:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001fe0 <HandleGui+0x648>
 8001d46:	eef4 7a47 	vcmp.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d102      	bne.n	8001d56 <HandleGui+0x3be>
				 Output = ReflowParameters.firstHeatUpRate;
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <HandleGui+0x64c>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if(Output < 0.2)
 8001d56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	a39c      	add	r3, pc, #624	; (adr r3, 8001fd0 <HandleGui+0x638>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe febb 	bl	8000adc <__aeabi_dcmplt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HandleGui+0x3d8>
				  Output = 0.2;
 8001d6c:	4b9e      	ldr	r3, [pc, #632]	; (8001fe8 <HandleGui+0x650>)
 8001d6e:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001d70:	4a9c      	ldr	r2, [pc, #624]	; (8001fe4 <HandleGui+0x64c>)
 8001d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d74:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001d76:	f7ff fcc7 	bl	8001708 <Update_Page_3>
		NEXTION_CMD("page 3");
 8001d7a:	489c      	ldr	r0, [pc, #624]	; (8001fec <HandleGui+0x654>)
 8001d7c:	f7ff fbe4 	bl	8001548 <NEXTION_CMD>
		calculateReflowCurve();
 8001d80:	f000 fade 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001d84:	2205      	movs	r2, #5
 8001d86:	499a      	ldr	r1, [pc, #616]	; (8001ff0 <HandleGui+0x658>)
 8001d88:	4893      	ldr	r0, [pc, #588]	; (8001fd8 <HandleGui+0x640>)
 8001d8a:	f00b fd19 	bl	800d7c0 <strncmp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d14f      	bne.n	8001e34 <HandleGui+0x49c>
			  float32_t Output =0;
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001d9a:	f7ff fc45 	bl	8001628 <HandleKeyPad>
 8001d9e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001da2:	e01e      	b.n	8001de2 <HandleGui+0x44a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001da4:	4a93      	ldr	r2, [pc, #588]	; (8001ff4 <HandleGui+0x65c>)
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dae:	6018      	str	r0, [r3, #0]
 8001db0:	3304      	adds	r3, #4
 8001db2:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001db4:	2300      	movs	r3, #0
 8001db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001db8:	e00c      	b.n	8001dd4 <HandleGui+0x43c>
						UART_Recieved_Data[i]=defaultUart[i];
 8001dba:	f107 0220 	add.w	r2, r7, #32
 8001dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc0:	4413      	add	r3, r2
 8001dc2:	7819      	ldrb	r1, [r3, #0]
 8001dc4:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HandleGui+0x640>)
 8001dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc8:	4413      	add	r3, r2
 8001dca:	460a      	mov	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	ddef      	ble.n	8001dba <HandleGui+0x422>
					}
				  Output = HandleKeyPad();
 8001dda:	f7ff fc25 	bl	8001628 <HandleKeyPad>
 8001dde:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001de2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001de6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001fdc <HandleGui+0x644>
 8001dea:	eef4 7a47 	vcmp.f32	s15, s14
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d0d7      	beq.n	8001da4 <HandleGui+0x40c>
			  }
			  if(Output == 8888){
 8001df4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001fe0 <HandleGui+0x648>
 8001dfc:	eef4 7a47 	vcmp.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d107      	bne.n	8001e16 <HandleGui+0x47e>
				 Output = ReflowParameters.SoakTime;
 8001e06:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HandleGui+0x64c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			  }
			ReflowParameters.SoakTime = Output;
 8001e16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 2a90 	vmov	r2, s15
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HandleGui+0x64c>)
 8001e24:	615a      	str	r2, [r3, #20]
			Update_Page_3();
 8001e26:	f7ff fc6f 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001e2a:	4870      	ldr	r0, [pc, #448]	; (8001fec <HandleGui+0x654>)
 8001e2c:	f7ff fb8c 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001e30:	f000 fa86 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001e34:	2205      	movs	r2, #5
 8001e36:	4970      	ldr	r1, [pc, #448]	; (8001ff8 <HandleGui+0x660>)
 8001e38:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <HandleGui+0x640>)
 8001e3a:	f00b fcc1 	bl	800d7c0 <strncmp>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d14f      	bne.n	8001ee4 <HandleGui+0x54c>
			  float32_t Output =0;
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001e4a:	f7ff fbed 	bl	8001628 <HandleKeyPad>
 8001e4e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e52:	e01e      	b.n	8001e92 <HandleGui+0x4fa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e54:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <HandleGui+0x65c>)
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e5e:	6018      	str	r0, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
 8001e68:	e00c      	b.n	8001e84 <HandleGui+0x4ec>
						UART_Recieved_Data[i]=defaultUart[i];
 8001e6a:	f107 0218 	add.w	r2, r7, #24
 8001e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e70:	4413      	add	r3, r2
 8001e72:	7819      	ldrb	r1, [r3, #0]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HandleGui+0x640>)
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	4413      	add	r3, r2
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e80:	3301      	adds	r3, #1
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
 8001e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	ddef      	ble.n	8001e6a <HandleGui+0x4d2>
					}
				  Output = HandleKeyPad();
 8001e8a:	f7ff fbcd 	bl	8001628 <HandleKeyPad>
 8001e8e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e92:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e96:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001fdc <HandleGui+0x644>
 8001e9a:	eef4 7a47 	vcmp.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d0d7      	beq.n	8001e54 <HandleGui+0x4bc>
			  }
			  if(Output == 8888){
 8001ea4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ea8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001fe0 <HandleGui+0x648>
 8001eac:	eef4 7a47 	vcmp.f32	s15, s14
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d107      	bne.n	8001ec6 <HandleGui+0x52e>
				 Output = ReflowParameters.SoakTempeture;
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HandleGui+0x64c>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			  }
			ReflowParameters.SoakTempeture = Output;
 8001ec6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 2a90 	vmov	r2, s15
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HandleGui+0x64c>)
 8001ed4:	611a      	str	r2, [r3, #16]
			Update_Page_3();
 8001ed6:	f7ff fc17 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001eda:	4844      	ldr	r0, [pc, #272]	; (8001fec <HandleGui+0x654>)
 8001edc:	f7ff fb34 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001ee0:	f000 fa2e 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	4945      	ldr	r1, [pc, #276]	; (8001ffc <HandleGui+0x664>)
 8001ee8:	483b      	ldr	r0, [pc, #236]	; (8001fd8 <HandleGui+0x640>)
 8001eea:	f00b fc69 	bl	800d7c0 <strncmp>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d152      	bne.n	8001f9a <HandleGui+0x602>
			  float32_t Output =0;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001efa:	f7ff fb95 	bl	8001628 <HandleKeyPad>
 8001efe:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f02:	e01e      	b.n	8001f42 <HandleGui+0x5aa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001f04:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HandleGui+0x65c>)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0e:	6018      	str	r0, [r3, #0]
 8001f10:	3304      	adds	r3, #4
 8001f12:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f18:	e00c      	b.n	8001f34 <HandleGui+0x59c>
						UART_Recieved_Data[i]=defaultUart[i];
 8001f1a:	f107 0210 	add.w	r2, r7, #16
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	4413      	add	r3, r2
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <HandleGui+0x640>)
 8001f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f28:	4413      	add	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	3301      	adds	r3, #1
 8001f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	ddef      	ble.n	8001f1a <HandleGui+0x582>
					}
				  Output = HandleKeyPad();
 8001f3a:	f7ff fb75 	bl	8001628 <HandleKeyPad>
 8001f3e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f46:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001fdc <HandleGui+0x644>
 8001f4a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d0d7      	beq.n	8001f04 <HandleGui+0x56c>
			  }
			  if(Output == 8888){
 8001f54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fe0 <HandleGui+0x648>
 8001f5c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d102      	bne.n	8001f6c <HandleGui+0x5d4>
				 Output = ReflowParameters.secondHeatUpRate;
 8001f66:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HandleGui+0x64c>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }
			  if(Output < 0.2)
 8001f6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f6e:	f7fe faeb 	bl	8000548 <__aeabi_f2d>
 8001f72:	a317      	add	r3, pc, #92	; (adr r3, 8001fd0 <HandleGui+0x638>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fdb0 	bl	8000adc <__aeabi_dcmplt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HandleGui+0x5ee>
						  Output = 0.2;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HandleGui+0x650>)
 8001f84:	65fb      	str	r3, [r7, #92]	; 0x5c
			ReflowParameters.secondHeatUpRate = Output;
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HandleGui+0x64c>)
 8001f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8a:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001f8c:	f7ff fbbc 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <HandleGui+0x654>)
 8001f92:	f7ff fad9 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8001f96:	f000 f9d3 	bl	8002340 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	4918      	ldr	r1, [pc, #96]	; (8002000 <HandleGui+0x668>)
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <HandleGui+0x640>)
 8001fa0:	f00b fc0e 	bl	800d7c0 <strncmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d169      	bne.n	800207e <HandleGui+0x6e6>
			  float32_t Output =0;
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001fb0:	f7ff fb3a 	bl	8001628 <HandleKeyPad>
 8001fb4:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001fb8:	e038      	b.n	800202c <HandleGui+0x694>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HandleGui+0x65c>)
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc4:	6018      	str	r0, [r3, #0]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8001fce:	e026      	b.n	800201e <HandleGui+0x686>
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	3fc99999 	.word	0x3fc99999
 8001fd8:	20000454 	.word	0x20000454
 8001fdc:	461c3c00 	.word	0x461c3c00
 8001fe0:	460ae000 	.word	0x460ae000
 8001fe4:	20000aac 	.word	0x20000aac
 8001fe8:	3e4ccccd 	.word	0x3e4ccccd
 8001fec:	08011170 	.word	0x08011170
 8001ff0:	08011178 	.word	0x08011178
 8001ff4:	080111b0 	.word	0x080111b0
 8001ff8:	08011180 	.word	0x08011180
 8001ffc:	08011188 	.word	0x08011188
 8002000:	08011190 	.word	0x08011190
						UART_Recieved_Data[i]=defaultUart[i];
 8002004:	f107 0208 	add.w	r2, r7, #8
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	4413      	add	r3, r2
 800200c:	7819      	ldrb	r1, [r3, #0]
 800200e:	4a55      	ldr	r2, [pc, #340]	; (8002164 <HandleGui+0x7cc>)
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	4413      	add	r3, r2
 8002014:	460a      	mov	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8002018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201a:	3301      	adds	r3, #1
 800201c:	653b      	str	r3, [r7, #80]	; 0x50
 800201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002020:	2b04      	cmp	r3, #4
 8002022:	ddef      	ble.n	8002004 <HandleGui+0x66c>
					}
				  Output = HandleKeyPad();
 8002024:	f7ff fb00 	bl	8001628 <HandleKeyPad>
 8002028:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 800202c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002030:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002168 <HandleGui+0x7d0>
 8002034:	eef4 7a47 	vcmp.f32	s15, s14
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d0bd      	beq.n	8001fba <HandleGui+0x622>
			  }
			  if(Output == 8888){
 800203e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002042:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800216c <HandleGui+0x7d4>
 8002046:	eef4 7a47 	vcmp.f32	s15, s14
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d107      	bne.n	8002060 <HandleGui+0x6c8>
				 Output = ReflowParameters.ReflowTime;
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HandleGui+0x7d8>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			  }
			ReflowParameters.ReflowTime = Output;
 8002060:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002068:	ee17 2a90 	vmov	r2, s15
 800206c:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HandleGui+0x7d8>)
 800206e:	621a      	str	r2, [r3, #32]
			Update_Page_3();
 8002070:	f7ff fb4a 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002074:	483f      	ldr	r0, [pc, #252]	; (8002174 <HandleGui+0x7dc>)
 8002076:	f7ff fa67 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 800207a:	f000 f961 	bl	8002340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 800207e:	2205      	movs	r2, #5
 8002080:	493d      	ldr	r1, [pc, #244]	; (8002178 <HandleGui+0x7e0>)
 8002082:	4838      	ldr	r0, [pc, #224]	; (8002164 <HandleGui+0x7cc>)
 8002084:	f00b fb9c 	bl	800d7c0 <strncmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d14d      	bne.n	800212a <HandleGui+0x792>
			  float32_t Output =0;
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8002094:	f7ff fac8 	bl	8001628 <HandleKeyPad>
 8002098:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 800209c:	e01c      	b.n	80020d8 <HandleGui+0x740>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 800209e:	4a37      	ldr	r2, [pc, #220]	; (800217c <HandleGui+0x7e4>)
 80020a0:	463b      	mov	r3, r7
 80020a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	3304      	adds	r3, #4
 80020aa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80020ac:	2300      	movs	r3, #0
 80020ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80020b0:	e00b      	b.n	80020ca <HandleGui+0x732>
						UART_Recieved_Data[i]=defaultUart[i];
 80020b2:	463a      	mov	r2, r7
 80020b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b6:	4413      	add	r3, r2
 80020b8:	7819      	ldrb	r1, [r3, #0]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HandleGui+0x7cc>)
 80020bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020be:	4413      	add	r3, r2
 80020c0:	460a      	mov	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	3301      	adds	r3, #1
 80020c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	ddf0      	ble.n	80020b2 <HandleGui+0x71a>
					}
				  Output = HandleKeyPad();
 80020d0:	f7ff faaa 	bl	8001628 <HandleKeyPad>
 80020d4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 80020d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020dc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002168 <HandleGui+0x7d0>
 80020e0:	eef4 7a47 	vcmp.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d0d9      	beq.n	800209e <HandleGui+0x706>
			  }
			  if(Output == 8888){
 80020ea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800216c <HandleGui+0x7d4>
 80020f2:	eef4 7a47 	vcmp.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	d107      	bne.n	800210c <HandleGui+0x774>
				 Output = ReflowParameters.ReflowTempeture;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HandleGui+0x7d8>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002108:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			  }
			ReflowParameters.ReflowTempeture = Output;
 800210c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HandleGui+0x7d8>)
 800211a:	61da      	str	r2, [r3, #28]
			Update_Page_3();
 800211c:	f7ff faf4 	bl	8001708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <HandleGui+0x7dc>)
 8002122:	f7ff fa11 	bl	8001548 <NEXTION_CMD>
			calculateReflowCurve();
 8002126:	f000 f90b 	bl	8002340 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 800212a:	2205      	movs	r2, #5
 800212c:	4914      	ldr	r1, [pc, #80]	; (8002180 <HandleGui+0x7e8>)
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <HandleGui+0x7cc>)
 8002130:	f00b fb46 	bl	800d7c0 <strncmp>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HandleGui+0x7a6>
			Update_Page_2();
 800213a:	f7ff fbe9 	bl	8001910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 800213e:	2205      	movs	r2, #5
 8002140:	4910      	ldr	r1, [pc, #64]	; (8002184 <HandleGui+0x7ec>)
 8002142:	4808      	ldr	r0, [pc, #32]	; (8002164 <HandleGui+0x7cc>)
 8002144:	f00b fb3c 	bl	800d7c0 <strncmp>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HandleGui+0x7c2>
			Update_Page_0();
 800214e:	f7ff fb3b 	bl	80017c8 <Update_Page_0>
			Draw_Reflow_Curve();
 8002152:	f000 f871 	bl	8002238 <Draw_Reflow_Curve>
			SaveParameters();
 8002156:	f7ff f94f 	bl	80013f8 <SaveParameters>
//	NEXTION_SenduInt("t1",ReflowParameters.SoakTime );
//	NEXTION_SenduInt("t2",ReflowParameters.SoakTempeture );
//	NEXTION_SendFloat("t3",ReflowParameters.secondHeatUpRate );
//	NEXTION_SenduInt("t4",ReflowParameters.ReflowTime );
//	NEXTION_SenduInt("t5",ReflowParameters.ReflowTempeture );
}
 800215a:	bf00      	nop
 800215c:	3790      	adds	r7, #144	; 0x90
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000454 	.word	0x20000454
 8002168:	461c3c00 	.word	0x461c3c00
 800216c:	460ae000 	.word	0x460ae000
 8002170:	20000aac 	.word	0x20000aac
 8002174:	08011170 	.word	0x08011170
 8002178:	08011198 	.word	0x08011198
 800217c:	080111b0 	.word	0x080111b0
 8002180:	080111a0 	.word	0x080111a0
 8002184:	080111a8 	.word	0x080111a8

08002188 <startReflow>:

void startReflow(){
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

if(0==ReflowEnable)
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <startReflow+0x44>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <startReflow+0x16>
{
	initFlags();
 8002194:	f000 fa20 	bl	80025d8 <initFlags>
	State=Initializing;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <startReflow+0x48>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
}
ReflowEnable = 1;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <startReflow+0x44>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
NEXTION_CMD("page 0");
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <startReflow+0x4c>)
 80021a6:	f7ff f9cf 	bl	8001548 <NEXTION_CMD>
Draw_Reflow_Curve();
 80021aa:	f000 f845 	bl	8002238 <Draw_Reflow_Curve>
sprintf(ConsoleMSG,"REFLOW START");
 80021ae:	490a      	ldr	r1, [pc, #40]	; (80021d8 <startReflow+0x50>)
 80021b0:	480a      	ldr	r0, [pc, #40]	; (80021dc <startReflow+0x54>)
 80021b2:	f00b fae5 	bl	800d780 <siprintf>
Update_Page_0();
 80021b6:	f7ff fb07 	bl	80017c8 <Update_Page_0>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80021ba:	2017      	movs	r0, #23
 80021bc:	f002 f8cb 	bl	8004356 <HAL_NVIC_EnableIRQ>
HAL_TIM_Base_Start_IT(&htim5);
 80021c0:	4807      	ldr	r0, [pc, #28]	; (80021e0 <startReflow+0x58>)
 80021c2:	f004 fffc 	bl	80071be <HAL_TIM_Base_Start_IT>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000074c 	.word	0x2000074c
 80021d0:	20000a68 	.word	0x20000a68
 80021d4:	080111b8 	.word	0x080111b8
 80021d8:	080111c0 	.word	0x080111c0
 80021dc:	20000b00 	.word	0x20000b00
 80021e0:	200008c0 	.word	0x200008c0

080021e4 <stopReflow>:

void stopReflow(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80021e8:	2017      	movs	r0, #23
 80021ea:	f002 f8c2 	bl	8004372 <HAL_NVIC_DisableIRQ>
	//HAL_TIM_Base_Stop_IT(&htim5);
	if(ReflowEnable ==1){
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <stopReflow+0x40>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <stopReflow+0x3a>
		ReflowEnable = 0;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <stopReflow+0x40>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80021fc:	2104      	movs	r1, #4
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <stopReflow+0x44>)
 8002200:	f005 f874 	bl	80072ec <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002204:	2108      	movs	r1, #8
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <stopReflow+0x44>)
 8002208:	f005 f870 	bl	80072ec <HAL_TIM_PWM_Stop>
		sprintf(ConsoleMSG,"STOPPED");
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <stopReflow+0x48>)
 800220e:	4808      	ldr	r0, [pc, #32]	; (8002230 <stopReflow+0x4c>)
 8002210:	f00b fab6 	bl	800d780 <siprintf>
		Update_Page_0();
 8002214:	f7ff fad8 	bl	80017c8 <Update_Page_0>
		 PIDFlag=0;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <stopReflow+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
	}
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000074c 	.word	0x2000074c
 8002228:	20000900 	.word	0x20000900
 800222c:	080111d0 	.word	0x080111d0
 8002230:	20000b00 	.word	0x20000b00
 8002234:	20000afc 	.word	0x20000afc

08002238 <Draw_Reflow_Curve>:

void Draw_Reflow_Curve(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0

	float32_t dx =0.23; //275px / 400s //92px 400s
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <Draw_Reflow_Curve+0x94>)
 8002240:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <Draw_Reflow_Curve+0x98>)
 8002244:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 28;
 8002246:	231c      	movs	r3, #28
 8002248:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 153; //151
 800224a:	2399      	movs	r3, #153	; 0x99
 800224c:	607b      	str	r3, [r7, #4]
//	float32_t dx = 0.625 / 4; //275px / 880s / 500 ms
//	float32_t dy = 0.8333; //200px / 240 Grad
//	uint32_t OffsetX = 35;
//	uint32_t OffsetY = 230;

	uint32_t index = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]



	while(ReflowCurve[index] != 0){
 8002252:	e02f      	b.n	80022b4 <Draw_Reflow_Curve+0x7c>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800226a:	ee17 2a90 	vmov	r2, s15
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	441a      	add	r2, r3
 8002272:	4918      	ldr	r1, [pc, #96]	; (80022d4 <Draw_Reflow_Curve+0x9c>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	440b      	add	r3, r1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002282:	edd7 7a03 	vldr	s15, [r7, #12]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228e:	ee17 1a90 	vmov	r1, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1a5b      	subs	r3, r3, r1
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7ff f973 	bl	8001584 <NextionDrawDot>
		index= index + 4;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 80022a4:	2205      	movs	r2, #5
 80022a6:	490c      	ldr	r1, [pc, #48]	; (80022d8 <Draw_Reflow_Curve+0xa0>)
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <Draw_Reflow_Curve+0xa4>)
 80022aa:	f00b fa89 	bl	800d7c0 <strncmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <Draw_Reflow_Curve+0x8a>
	while(ReflowCurve[index] != 0){
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <Draw_Reflow_Curve+0x9c>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4413      	add	r3, r2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1c9      	bne.n	8002254 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 80022c0:	e000      	b.n	80022c4 <Draw_Reflow_Curve+0x8c>
			break;
 80022c2:	bf00      	nop
}
 80022c4:	bf00      	nop
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	3e6b851f 	.word	0x3e6b851f
 80022d0:	3f0bb98c 	.word	0x3f0bb98c
 80022d4:	20000b68 	.word	0x20000b68
 80022d8:	08011118 	.word	0x08011118
 80022dc:	20000454 	.word	0x20000454

080022e0 <setReflowParameters>:

void setReflowParameters(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	ReflowParameters.KP = 10; //203
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <setReflowParameters+0x48>)
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <setReflowParameters+0x4c>)
 80022e8:	601a      	str	r2, [r3, #0]
	ReflowParameters.Ki = 10; //5.2
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <setReflowParameters+0x48>)
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <setReflowParameters+0x4c>)
 80022ee:	605a      	str	r2, [r3, #4]
	ReflowParameters.KD = 0;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <setReflowParameters+0x48>)
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
	ReflowParameters.firstHeatUpRate = 1.2;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <setReflowParameters+0x48>)
 80022fa:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <setReflowParameters+0x50>)
 80022fc:	60da      	str	r2, [r3, #12]
	ReflowParameters.SoakTempeture = 100;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <setReflowParameters+0x48>)
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	611a      	str	r2, [r3, #16]
	ReflowParameters.SoakTime = 100;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <setReflowParameters+0x48>)
 8002306:	2264      	movs	r2, #100	; 0x64
 8002308:	615a      	str	r2, [r3, #20]
	ReflowParameters.secondHeatUpRate = 1.2;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <setReflowParameters+0x48>)
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <setReflowParameters+0x50>)
 800230e:	619a      	str	r2, [r3, #24]
	ReflowParameters.ReflowTempeture = 210;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <setReflowParameters+0x48>)
 8002312:	22d2      	movs	r2, #210	; 0xd2
 8002314:	61da      	str	r2, [r3, #28]
	ReflowParameters.ReflowTime =100;
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <setReflowParameters+0x48>)
 8002318:	2264      	movs	r2, #100	; 0x64
 800231a:	621a      	str	r2, [r3, #32]
	sprintf(ConsoleMSG,"IDLE");
 800231c:	4905      	ldr	r1, [pc, #20]	; (8002334 <setReflowParameters+0x54>)
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <setReflowParameters+0x58>)
 8002320:	f00b fa2e 	bl	800d780 <siprintf>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000aac 	.word	0x20000aac
 800232c:	41200000 	.word	0x41200000
 8002330:	3f99999a 	.word	0x3f99999a
 8002334:	080111d8 	.word	0x080111d8
 8002338:	20000b00 	.word	0x20000b00
 800233c:	00000000 	.word	0x00000000

08002340 <calculateReflowCurve>:

void calculateReflowCurve(){
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e007      	b.n	800235c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 800234c:	4a9e      	ldr	r2, [pc, #632]	; (80025c8 <calculateReflowCurve+0x288>)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	4413      	add	r3, r2
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002362:	dbf3      	blt.n	800234c <calculateReflowCurve+0xc>
	}

	int index = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
	float timestep = 0.5;
 8002368:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800236c:	61fb      	str	r3, [r7, #28]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 800236e:	e020      	b.n	80023b2 <calculateReflowCurve+0x72>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <calculateReflowCurve+0x28c>)
 8002372:	ed93 7a03 	vldr	s14, [r3, #12]
 8002376:	edd7 7a07 	vldr	s15, [r7, #28]
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238a:	edc7 7a01 	vstr	s15, [r7, #4]
 800238e:	793b      	ldrb	r3, [r7, #4]
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	4a8d      	ldr	r2, [pc, #564]	; (80025c8 <calculateReflowCurve+0x288>)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4413      	add	r3, r2
 8002398:	460a      	mov	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]
	index++;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3301      	adds	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 80023a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ae:	edc7 7a07 	vstr	s15, [r7, #28]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <calculateReflowCurve+0x28c>)
 80023b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80023b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80023c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <calculateReflowCurve+0x28c>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d9c8      	bls.n	8002370 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <calculateReflowCurve+0x290>)
 80023e4:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 80023e6:	4b79      	ldr	r3, [pc, #484]	; (80025cc <calculateReflowCurve+0x28c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	613b      	str	r3, [r7, #16]

	for(int i=0;i<Soakduration;i++){
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e00a      	b.n	800240a <calculateReflowCurve+0xca>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <calculateReflowCurve+0x28c>)
 80023f6:	6919      	ldr	r1, [r3, #16]
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2c9      	uxtb	r1, r1
 8002400:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <calculateReflowCurve+0x288>)
 8002402:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	3301      	adds	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <calculateReflowCurve+0xb4>
	}


	//Second Heat Up:
	index = index + Soakduration;
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	623b      	str	r3, [r7, #32]
	PhaseIndex[2]=index;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <calculateReflowCurve+0x290>)
 8002420:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002422:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002426:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8002428:	e02e      	b.n	8002488 <calculateReflowCurve+0x148>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 800242a:	4b68      	ldr	r3, [pc, #416]	; (80025cc <calculateReflowCurve+0x28c>)
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002436:	edd7 7a07 	vldr	s15, [r7, #28]
 800243a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002442:	793b      	ldrb	r3, [r7, #4]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <calculateReflowCurve+0x28c>)
 8002450:	edd3 7a06 	vldr	s15, [r3, #24]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	edc7 7a01 	vstr	s15, [r7, #4]
 8002464:	793b      	ldrb	r3, [r7, #4]
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <calculateReflowCurve+0x288>)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	4413      	add	r3, r2
 800246e:	460a      	mov	r2, r1
 8002470:	701a      	strb	r2, [r3, #0]
	index++;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	3301      	adds	r3, #1
 8002476:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 8002478:	edd7 7a07 	vldr	s15, [r7, #28]
 800247c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002484:	edc7 7a07 	vstr	s15, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <calculateReflowCurve+0x28c>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002494:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <calculateReflowCurve+0x28c>)
 8002496:	edd3 6a06 	vldr	s13, [r3, #24]
 800249a:	edd7 7a07 	vldr	s15, [r7, #28]
 800249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <calculateReflowCurve+0x28c>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d9b6      	bls.n	800242a <calculateReflowCurve+0xea>
	}
	PhaseIndex[3]=index;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <calculateReflowCurve+0x290>)
 80024c2:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <calculateReflowCurve+0x28c>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<Reflowduration;i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00a      	b.n	80024e8 <calculateReflowCurve+0x1a8>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <calculateReflowCurve+0x28c>)
 80024d4:	69d9      	ldr	r1, [r3, #28]
 80024d6:	6a3a      	ldr	r2, [r7, #32]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4413      	add	r3, r2
 80024dc:	b2c9      	uxtb	r1, r1
 80024de:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <calculateReflowCurve+0x288>)
 80024e0:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf0      	blt.n	80024d2 <calculateReflowCurve+0x192>
	}

	index = index + Reflowduration;
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	623b      	str	r3, [r7, #32]
	ReflowCurve[index]=0;
 80024f8:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <calculateReflowCurve+0x288>)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4413      	add	r3, r2
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <calculateReflowCurve+0x290>)
 8002508:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 800250a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800250e:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002510:	e030      	b.n	8002574 <calculateReflowCurve+0x234>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <calculateReflowCurve+0x28c>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fff4 	bl	8000504 <__aeabi_ui2d>
 800251c:	4604      	mov	r4, r0
 800251e:	460d      	mov	r5, r1
 8002520:	69f8      	ldr	r0, [r7, #28]
 8002522:	f7fe f811 	bl	8000548 <__aeabi_f2d>
 8002526:	a326      	add	r3, pc, #152	; (adr r3, 80025c0 <calculateReflowCurve+0x280>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f864 	bl	80005f8 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fd fea6 	bl	8000288 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb30 	bl	8000ba8 <__aeabi_d2uiz>
 8002548:	4603      	mov	r3, r0
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <calculateReflowCurve+0x288>)
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	4413      	add	r3, r2
 8002552:	460a      	mov	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
	index++;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	3301      	adds	r3, #1
 800255a:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002568:	edc7 7a07 	vstr	s15, [r7, #28]
	PhaseIndex[5]=index;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <calculateReflowCurve+0x290>)
 8002572:	815a      	strh	r2, [r3, #10]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <calculateReflowCurve+0x28c>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffc3 	bl	8000504 <__aeabi_ui2d>
 800257e:	4604      	mov	r4, r0
 8002580:	460d      	mov	r5, r1
 8002582:	69f8      	ldr	r0, [r7, #28]
 8002584:	f7fd ffe0 	bl	8000548 <__aeabi_f2d>
 8002588:	a30d      	add	r3, pc, #52	; (adr r3, 80025c0 <calculateReflowCurve+0x280>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe f833 	bl	80005f8 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe75 	bl	8000288 <__aeabi_dsub>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <calculateReflowCurve+0x294>)
 80025ac:	f7fe faaa 	bl	8000b04 <__aeabi_dcmpge>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ad      	bne.n	8002512 <calculateReflowCurve+0x1d2>
	}




}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	3ffccccc 	.word	0x3ffccccc
 80025c8:	20000b68 	.word	0x20000b68
 80025cc:	20000aac 	.word	0x20000aac
 80025d0:	20000758 	.word	0x20000758
 80025d4:	40380000 	.word	0x40380000

080025d8 <initFlags>:

void initFlags(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
	Flags.StartFlag=TRUE;
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <initFlags+0x34>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <initFlags+0x34>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <initFlags+0x34>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <initFlags+0x34>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <initFlags+0x34>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <initFlags+0x34>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	715a      	strb	r2, [r3, #5]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000b18 	.word	0x20000b18

08002610 <arm_pid_init_f32>:
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edd3 7a07 	vldr	s15, [r3, #28]
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edc3 7a00 	vstr	s15, [r3]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002640:	eeb1 7a67 	vneg.f32	s14, s15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edd3 7a08 	vldr	s15, [r3, #32]
 800264a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edc3 7a01 	vstr	s15, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <arm_pid_init_f32+0x64>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	330c      	adds	r3, #12
 800266a:	220c      	movs	r2, #12
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f00a fb5a 	bl	800cd28 <memset>
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <delay_us>:
 return HAL_GetTick();

}

void delay_us(unsigned long delay_us)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 __HAL_TIM_SET_COUNTER(&htim5,0);
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <delay_us+0x2c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
// __HAL_TIM_SET_COUNTER(&htim6,0);
 while(__HAL_TIM_GET_COUNTER(&htim5)<delay_us);
 800268c:	bf00      	nop
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <delay_us+0x2c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	d8f9      	bhi.n	800268e <delay_us+0x12>


}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	200008c0 	.word	0x200008c0

080026ac <readTemperatureData>:

void readTemperatureData(volatile float* temperature_val)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2110      	movs	r1, #16
 80026b8:	4820      	ldr	r0, [pc, #128]	; (800273c <readTemperatureData+0x90>)
 80026ba:	f002 fb17 	bl	8004cec <HAL_GPIO_WritePin>
			uint8_t data8[2]={0};
 80026be:	2300      	movs	r3, #0
 80026c0:	81bb      	strh	r3, [r7, #12]
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2110      	movs	r1, #16
 80026c6:	481d      	ldr	r0, [pc, #116]	; (800273c <readTemperatureData+0x90>)
 80026c8:	f002 fb10 	bl	8004cec <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 80026cc:	f107 010c 	add.w	r1, r7, #12
 80026d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026d4:	2202      	movs	r2, #2
 80026d6:	481a      	ldr	r0, [pc, #104]	; (8002740 <readTemperatureData+0x94>)
 80026d8:	f004 f98a 	bl	80069f0 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2110      	movs	r1, #16
 80026e0:	4816      	ldr	r0, [pc, #88]	; (800273c <readTemperatureData+0x90>)
 80026e2:	f002 fb03 	bl	8004cec <HAL_GPIO_WritePin>
			uint16_t sum={0};
 80026e6:	2300      	movs	r3, #0
 80026e8:	81fb      	strh	r3, [r7, #14]
			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	7b3b      	ldrb	r3, [r7, #12]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	81fb      	strh	r3, [r7, #14]
			if(sum &	0x0004)//No TC connected, error -1
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <readTemperatureData+0x60>
			{
				(*temperature_val)=-1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <readTemperatureData+0x98>)
 8002708:	601a      	str	r2, [r3, #0]
				//sum2=(uint16_t) data8[3] | (uint16_t) data8[2]<< 8 ;
				(*temperature_val)=((sum>>3)/4.0);
			}


}
 800270a:	e013      	b.n	8002734 <readTemperatureData+0x88>
				(*temperature_val)=((sum>>3)/4.0);
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff06 	bl	8000524 <__aeabi_i2d>
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <readTemperatureData+0x9c>)
 800271e:	f7fe f895 	bl	800084c <__aeabi_ddiv>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe fa5d 	bl	8000be8 <__aeabi_d2f>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020000 	.word	0x40020000
 8002740:	200009cc 	.word	0x200009cc
 8002744:	bf800000 	.word	0xbf800000
 8002748:	40100000 	.word	0x40100000

0800274c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM2
        {
    //	counter_us++;
    	//counter_us2++;
        }
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	static	SETPOINT Mod1; //Thermal profile setup
	Mod1.Tpreheat_setpoint=90.00;
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <main+0x160>)
 8002768:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <main+0x164>)
 800276a:	601a      	str	r2, [r3, #0]
	Mod1.Tsoak_setpoint=200.00;
 800276c:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <main+0x160>)
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <main+0x168>)
 8002770:	605a      	str	r2, [r3, #4]
	Mod1.Treflow_setpoint=250.00;
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <main+0x160>)
 8002774:	4a55      	ldr	r2, [pc, #340]	; (80028cc <main+0x16c>)
 8002776:	609a      	str	r2, [r3, #8]
	Mod1.Tcooldown_setpoint=30.00;
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <main+0x160>)
 800277a:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <main+0x170>)
 800277c:	60da      	str	r2, [r3, #12]
	Mod1.tPreheat=60;
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <main+0x160>)
 8002780:	223c      	movs	r2, #60	; 0x3c
 8002782:	61da      	str	r2, [r3, #28]
	Mod1.tSoak=60;
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <main+0x160>)
 8002786:	223c      	movs	r2, #60	; 0x3c
 8002788:	621a      	str	r2, [r3, #32]
	Mod1.tReflow=120;
 800278a:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <main+0x160>)
 800278c:	2278      	movs	r2, #120	; 0x78
 800278e:	625a      	str	r2, [r3, #36]	; 0x24


extern FLAGS Flags; //Flags for status

	Flags.StartFlag=TRUE;
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <main+0x174>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 8002796:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <main+0x174>)
 8002798:	2200      	movs	r2, #0
 800279a:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <main+0x174>)
 800279e:	2200      	movs	r2, #0
 80027a0:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <main+0x174>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80027a8:	4b4a      	ldr	r3, [pc, #296]	; (80028d4 <main+0x174>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80027ae:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <main+0x174>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027b4:	f001 f9bc 	bl	8003b30 <HAL_Init>

  /* USER CODE BEGIN Init */
  setReflowParameters();
 80027b8:	f7ff fd92 	bl	80022e0 <setReflowParameters>
  LoadParameters();
 80027bc:	f7fe fe28 	bl	8001410 <LoadParameters>
  PID.Kp = ReflowParameters.KP;
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <main+0x178>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <main+0x17c>)
 80027c6:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.Ki;
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <main+0x178>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a43      	ldr	r2, [pc, #268]	; (80028dc <main+0x17c>)
 80027ce:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 80027d0:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <main+0x178>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <main+0x17c>)
 80027d6:	6213      	str	r3, [r2, #32]
  calculateReflowCurve();
 80027d8:	f7ff fdb2 	bl	8002340 <calculateReflowCurve>
  arm_pid_init_f32(&PID, 1);
 80027dc:	2101      	movs	r1, #1
 80027de:	483f      	ldr	r0, [pc, #252]	; (80028dc <main+0x17c>)
 80027e0:	f7ff ff16 	bl	8002610 <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e4:	f000 f898 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e8:	f000 fb26 	bl	8002e38 <MX_GPIO_Init>
  MX_SPI1_Init();
 80027ec:	f000 f950 	bl	8002a90 <MX_SPI1_Init>
  MX_TIM5_Init();
 80027f0:	f000 faaa 	bl	8002d48 <MX_TIM5_Init>
  MX_TIM1_Init();
 80027f4:	f000 f982 	bl	8002afc <MX_TIM1_Init>
  MX_TIM2_Init();
 80027f8:	f000 f9d8 	bl	8002bac <MX_TIM2_Init>
  MX_ADC1_Init();
 80027fc:	f000 f8f6 	bl	80029ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002800:	f000 faf0 	bl	8002de4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002804:	f000 fa1e 	bl	8002c44 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8002808:	f009 fdc6 	bl	800c398 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


	void sendToNum(char *obj,uint16_t value);
	HAL_TIM_Base_Start_IT(&htim5);
 800280c:	4834      	ldr	r0, [pc, #208]	; (80028e0 <main+0x180>)
 800280e:	f004 fcd6 	bl	80071be <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8002812:	4834      	ldr	r0, [pc, #208]	; (80028e4 <main+0x184>)
 8002814:	f004 fcd3 	bl	80071be <HAL_TIM_Base_Start_IT>
	//Init values for PWM duty cycle
	TIM3->CCR2=200;
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <main+0x188>)
 800281a:	22c8      	movs	r2, #200	; 0xc8
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3=450;
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <main+0x188>)
 8002820:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
	//  	    CH3_DC -= 10;
	//  	    HAL_Delay(1);
	//  	}

	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	HAL_Delay(2000);
 8002826:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800282a:	f001 f9f3 	bl	8003c14 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 800282e:	2205      	movs	r2, #5
 8002830:	492e      	ldr	r1, [pc, #184]	; (80028ec <main+0x18c>)
 8002832:	482f      	ldr	r0, [pc, #188]	; (80028f0 <main+0x190>)
 8002834:	f005 fd84 	bl	8008340 <HAL_UART_Receive_IT>
	sprintf(ConsoleMSG,"IDLE");
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <main+0x194>)
 800283a:	482f      	ldr	r0, [pc, #188]	; (80028f8 <main+0x198>)
 800283c:	f00a ffa0 	bl	800d780 <siprintf>
	//State Status
	State=Initializing;
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <main+0x19c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
	Update_Page_0();
 8002846:	f7fe ffbf 	bl	80017c8 <Update_Page_0>
	Draw_Reflow_Curve();
 800284a:	f7ff fcf5 	bl	8002238 <Draw_Reflow_Curve>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 800284e:	2205      	movs	r2, #5
 8002850:	4926      	ldr	r1, [pc, #152]	; (80028ec <main+0x18c>)
 8002852:	4827      	ldr	r0, [pc, #156]	; (80028f0 <main+0x190>)
 8002854:	f005 fd74 	bl	8008340 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	f001 f9db 	bl	8003c14 <HAL_Delay>
	volatile uint32_t counter_us_delay=0;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		counter_us_delay++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3301      	adds	r3, #1
 8002866:	607b      	str	r3, [r7, #4]
		 boolflag=__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <main+0x1a0>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <main+0x1a4>)
 8002876:	701a      	strb	r2, [r3, #0]
		 HandleGui();
 8002878:	f7ff f88e 	bl	8001998 <HandleGui>


		 HAL_Delay(1);
 800287c:	2001      	movs	r0, #1
 800287e:	f001 f9c9 	bl	8003c14 <HAL_Delay>
		 //melody for finished procedure
		 if(	(TRUE==Flags.cooldownComplete) &&	(Finish==State)	)
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <main+0x174>)
 8002884:	795b      	ldrb	r3, [r3, #5]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <main+0x146>
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <main+0x19c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d109      	bne.n	80028a6 <main+0x146>
		 {
			 if(0==songFlag)
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <main+0x1a8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <main+0x146>
			 {
			 sing(2);
 800289a:	2002      	movs	r0, #2
 800289c:	f7fe fbe8 	bl	8001070 <sing>
			 songFlag=1;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <main+0x1a8>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		 {
			 //do nothing
		 }


			 if(strncmp((char *)UART_Recieved_Data, (char *)"p0xxx", 5) == 0)
 80028a6:	2205      	movs	r2, #5
 80028a8:	4918      	ldr	r1, [pc, #96]	; (800290c <main+0x1ac>)
 80028aa:	4810      	ldr	r0, [pc, #64]	; (80028ec <main+0x18c>)
 80028ac:	f00a ff88 	bl	800d7c0 <strncmp>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1d5      	bne.n	8002862 <main+0x102>
			 {
					  debug = 5;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <main+0x1b0>)
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <main+0x1b4>)
 80028ba:	601a      	str	r2, [r3, #0]
		counter_us_delay++;
 80028bc:	e7d1      	b.n	8002862 <main+0x102>
 80028be:	bf00      	nop
 80028c0:	2000076c 	.word	0x2000076c
 80028c4:	42b40000 	.word	0x42b40000
 80028c8:	43480000 	.word	0x43480000
 80028cc:	437a0000 	.word	0x437a0000
 80028d0:	41f00000 	.word	0x41f00000
 80028d4:	20000b18 	.word	0x20000b18
 80028d8:	20000aac 	.word	0x20000aac
 80028dc:	20000a30 	.word	0x20000a30
 80028e0:	200008c0 	.word	0x200008c0
 80028e4:	20001b08 	.word	0x20001b08
 80028e8:	40000400 	.word	0x40000400
 80028ec:	20000454 	.word	0x20000454
 80028f0:	20000a6c 	.word	0x20000a6c
 80028f4:	080111e8 	.word	0x080111e8
 80028f8:	20000b00 	.word	0x20000b00
 80028fc:	20000a68 	.word	0x20000a68
 8002900:	40013c00 	.word	0x40013c00
 8002904:	20000768 	.word	0x20000768
 8002908:	20000769 	.word	0x20000769
 800290c:	080111f0 	.word	0x080111f0
 8002910:	20000750 	.word	0x20000750
 8002914:	40a00000 	.word	0x40a00000

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	; 0x50
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f00a f9fe 	bl	800cd28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <SystemClock_Config+0xcc>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <SystemClock_Config+0xcc>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <SystemClock_Config+0xcc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <SystemClock_Config+0xd0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <SystemClock_Config+0xd0>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <SystemClock_Config+0xd0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2302      	movs	r3, #2
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002988:	2304      	movs	r3, #4
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 800298c:	2378      	movs	r3, #120	; 0x78
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002990:	2302      	movs	r3, #2
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002994:	2305      	movs	r3, #5
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fb57 	bl	8006050 <HAL_RCC_OscConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029a8:	f000 fb6e 	bl	8003088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
 80029ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b0:	2302      	movs	r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fdb0 	bl	8006530 <HAL_RCC_ClockConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029d6:	f000 fb57 	bl	8003088 <Error_Handler>
  }
}
 80029da:	bf00      	nop
 80029dc:	3750      	adds	r7, #80	; 0x50
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000

080029ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029f2:	463b      	mov	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <MX_ADC1_Init+0x9c>)
 8002a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MX_ADC1_Init+0xa0>)
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a4c:	f001 f906 	bl	8003c5c <HAL_ADC_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002a56:	f000 fb17 	bl	8003088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_ADC1_Init+0x98>)
 8002a6c:	f001 f93a 	bl	8003ce4 <HAL_ADC_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002a76:	f000 fb07 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000b20 	.word	0x20000b20
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <MX_SPI1_Init+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ac4:	2238      	movs	r2, #56	; 0x38
 8002ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002adc:	220a      	movs	r2, #10
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ae0:	4804      	ldr	r0, [pc, #16]	; (8002af4 <MX_SPI1_Init+0x64>)
 8002ae2:	f003 ff21 	bl	8006928 <HAL_SPI_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aec:	f000 facc 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200009cc 	.word	0x200009cc
 8002af8:	40013000 	.word	0x40013000

08002afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a f90c 	bl	800cd28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_TIM1_Init+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002b54:	230a      	movs	r3, #10
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002b64:	230a      	movs	r3, #10
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b70:	f004 fc14 	bl	800739c <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b7a:	f000 fa85 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b8c:	f005 fa62 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b96:	f000 fa77 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000098c 	.word	0x2000098c
 8002ba8:	40010000 	.word	0x40010000

08002bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bd2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002bd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bf0:	4813      	ldr	r0, [pc, #76]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002bf2:	f004 fab9 	bl	8007168 <HAL_TIM_Base_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002bfc:	f000 fa44 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002c0e:	f004 fe25 	bl	800785c <HAL_TIM_ConfigClockSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c18:	f000 fa36 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_TIM2_Init+0x94>)
 8002c2a:	f005 fa13 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c34:	f000 fa28 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20001b08 	.word	0x20001b08

08002c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	f107 0320 	add.w	r3, r7, #32
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	615a      	str	r2, [r3, #20]
 8002c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <MX_TIM3_Init+0x100>)
 8002c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c7c:	f240 2257 	movw	r2, #599	; 0x257
 8002c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c9c:	4828      	ldr	r0, [pc, #160]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002c9e:	f004 fa63 	bl	8007168 <HAL_TIM_Base_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ca8:	f000 f9ee 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4821      	ldr	r0, [pc, #132]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002cba:	f004 fdcf 	bl	800785c <HAL_TIM_ConfigClockSource>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002cc4:	f000 f9e0 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc8:	481d      	ldr	r0, [pc, #116]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002cca:	f004 fa9c 	bl	8007206 <HAL_TIM_PWM_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cd4:	f000 f9d8 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce0:	f107 0320 	add.w	r3, r7, #32
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4816      	ldr	r0, [pc, #88]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002ce8:	f005 f9b4 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cf2:	f000 f9c9 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	; 0x60
 8002cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2204      	movs	r2, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d0e:	f004 fcdf 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d18:	f000 f9b6 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d24:	f004 fcd4 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d2e:	f000 f9ab 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d32:	4803      	ldr	r0, [pc, #12]	; (8002d40 <MX_TIM3_Init+0xfc>)
 8002d34:	f000 fb0e 	bl	8003354 <HAL_TIM_MspPostInit>

}
 8002d38:	bf00      	nop
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000900 	.word	0x20000900
 8002d44:	40000400 	.word	0x40000400

08002d48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <MX_TIM5_Init+0x98>)
 8002d68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 59;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d6c:	223b      	movs	r2, #59	; 0x3b
 8002d6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002d8c:	f004 f9ec 	bl	8007168 <HAL_TIM_Base_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002d96:	f000 f977 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	4619      	mov	r1, r3
 8002da6:	480d      	ldr	r0, [pc, #52]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002da8:	f004 fd58 	bl	800785c <HAL_TIM_ConfigClockSource>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002db2:	f000 f969 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002db6:	2320      	movs	r3, #32
 8002db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4806      	ldr	r0, [pc, #24]	; (8002ddc <MX_TIM5_Init+0x94>)
 8002dc4:	f005 f946 	bl	8008054 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002dce:	f000 f95b 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200008c0 	.word	0x200008c0
 8002de0:	40000c00 	.word	0x40000c00

08002de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <MX_USART1_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e1a:	4805      	ldr	r0, [pc, #20]	; (8002e30 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	f005 f9aa 	bl	8008174 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e26:	f000 f92f 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000a6c 	.word	0x20000a6c
 8002e34:	40011000 	.word	0x40011000

08002e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a84      	ldr	r2, [pc, #528]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	4b77      	ldr	r3, [pc, #476]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <MX_GPIO_Init+0x230>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b69      	ldr	r3, [pc, #420]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a68      	ldr	r2, [pc, #416]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	4b62      	ldr	r3, [pc, #392]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a61      	ldr	r2, [pc, #388]	; (8003068 <MX_GPIO_Init+0x230>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <MX_GPIO_Init+0x230>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2101      	movs	r1, #1
 8002efa:	485c      	ldr	r0, [pc, #368]	; (800306c <MX_GPIO_Init+0x234>)
 8002efc:	f001 fef6 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2110      	movs	r1, #16
 8002f04:	485a      	ldr	r0, [pc, #360]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f06:	f001 fef1 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002f10:	4858      	ldr	r0, [pc, #352]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f12:	f001 feeb 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIOTestPin_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002f16:	2200      	movs	r2, #0
 8002f18:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002f1c:	4856      	ldr	r0, [pc, #344]	; (8003078 <MX_GPIO_Init+0x240>)
 8002f1e:	f001 fee5 	bl	8004cec <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2120      	movs	r1, #32
 8002f26:	4853      	ldr	r0, [pc, #332]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f28:	f001 fee0 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	484a      	ldr	r0, [pc, #296]	; (800306c <MX_GPIO_Init+0x234>)
 8002f44:	f001 fd36 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <MX_GPIO_Init+0x244>)
 8002f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4845      	ldr	r0, [pc, #276]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f5c:	f001 fd2a 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002f60:	2310      	movs	r3, #16
 8002f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	4619      	mov	r1, r3
 8002f76:	483e      	ldr	r0, [pc, #248]	; (8003070 <MX_GPIO_Init+0x238>)
 8002f78:	f001 fd1c 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLPin_Pin BOOT1_Pin */
  GPIO_InitStruct.Pin = BLPin_Pin|BOOT1_Pin;
 8002f7c:	2305      	movs	r3, #5
 8002f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4839      	ldr	r0, [pc, #228]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002f90:	f001 fd10 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4835      	ldr	r0, [pc, #212]	; (8003080 <MX_GPIO_Init+0x248>)
 8002faa:	f001 fd03 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BackFanPin_Pin ShutterPin_Pin AmbiLightPin_Pin */
  GPIO_InitStruct.Pin = BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin;
 8002fae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	482b      	ldr	r0, [pc, #172]	; (8003074 <MX_GPIO_Init+0x23c>)
 8002fc8:	f001 fcf4 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIOTestPin_Pin */
  GPIO_InitStruct.Pin = GPIOTestPin_Pin;
 8002fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOTestPin_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4824      	ldr	r0, [pc, #144]	; (8003078 <MX_GPIO_Init+0x240>)
 8002fe6:	f001 fce5 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002fea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	481d      	ldr	r0, [pc, #116]	; (8003078 <MX_GPIO_Init+0x240>)
 8003004:	f001 fcd6 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_GPIO_Init+0x24c>)
 800300e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003010:	2302      	movs	r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	4814      	ldr	r0, [pc, #80]	; (800306c <MX_GPIO_Init+0x234>)
 800301c:	f001 fcca 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003020:	2320      	movs	r3, #32
 8003022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4811      	ldr	r0, [pc, #68]	; (8003078 <MX_GPIO_Init+0x240>)
 8003034:	f001 fcbe 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BuzzerPin_Pin */
  GPIO_InitStruct.Pin = BuzzerPin_Pin;
 8003038:	2320      	movs	r3, #32
 800303a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800303c:	2311      	movs	r3, #17
 800303e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003040:	2301      	movs	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BuzzerPin_GPIO_Port, &GPIO_InitStruct);
 8003048:	f107 031c 	add.w	r3, r7, #28
 800304c:	4619      	mov	r1, r3
 800304e:	4809      	ldr	r0, [pc, #36]	; (8003074 <MX_GPIO_Init+0x23c>)
 8003050:	f001 fcb0 	bl	80049b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	2017      	movs	r0, #23
 800305a:	f001 f960 	bl	800431e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 800305e:	bf00      	nop
 8003060:	3730      	adds	r7, #48	; 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40020800 	.word	0x40020800
 8003070:	40020000 	.word	0x40020000
 8003074:	40020400 	.word	0x40020400
 8003078:	40020c00 	.word	0x40020c00
 800307c:	10120000 	.word	0x10120000
 8003080:	40021000 	.word	0x40021000
 8003084:	10110000 	.word	0x10110000

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_MspInit+0x4c>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_MspInit+0x4c>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_MspInit+0x4c>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_MspInit+0x4c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030d6:	2007      	movs	r0, #7
 80030d8:	f001 f916 	bl	8004308 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_ADC_MspInit+0x7c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d127      	bne.n	800315a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_ADC_MspInit+0x80>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_ADC_MspInit+0x80>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_ADC_MspInit+0x80>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_NC_Pin|ADC2_NC_Pin;
 8003142:	2306      	movs	r3, #6
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003146:	2303      	movs	r3, #3
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_ADC_MspInit+0x84>)
 8003156:	f001 fc2d 	bl	80049b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800315a:	bf00      	nop
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40012000 	.word	0x40012000
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000

08003170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_SPI_MspInit+0x84>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12b      	bne.n	80031ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_SPI_MspInit+0x88>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80031ca:	23e0      	movs	r3, #224	; 0xe0
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031da:	2305      	movs	r3, #5
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <HAL_SPI_MspInit+0x8c>)
 80031e6:	f001 fbe5 	bl	80049b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80031ea:	bf00      	nop
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40013000 	.word	0x40013000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000

08003200 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_TIM_Encoder_MspInit+0x94>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d134      	bne.n	800328c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003248:	f043 0310 	orr.w	r3, r3, #16
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_TIM_Encoder_MspInit+0x98>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderPin1_Pin|EncoderPin2_Pin;
 800325a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800325e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800326c:	2301      	movs	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4619      	mov	r1, r3
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_TIM_Encoder_MspInit+0x9c>)
 8003278:	f001 fb9c 	bl	80049b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 2);
 800327c:	2202      	movs	r2, #2
 800327e:	2100      	movs	r1, #0
 8003280:	2018      	movs	r0, #24
 8003282:	f001 f84c 	bl	800431e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003286:	2018      	movs	r0, #24
 8003288:	f001 f865 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40010000 	.word	0x40010000
 8003298:	40023800 	.word	0x40023800
 800329c:	40021000 	.word	0x40021000

080032a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d116      	bne.n	80032e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 80032ce:	2201      	movs	r2, #1
 80032d0:	2100      	movs	r1, #0
 80032d2:	201c      	movs	r0, #28
 80032d4:	f001 f823 	bl	800431e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032d8:	201c      	movs	r0, #28
 80032da:	f001 f83c 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032de:	e02e      	b.n	800333e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_TIM_Base_MspInit+0xac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
}
 8003306:	e01a      	b.n	800333e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_TIM_Base_MspInit+0xb0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d115      	bne.n	800333e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_TIM_Base_MspInit+0xa8>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 800332e:	2201      	movs	r2, #1
 8003330:	2100      	movs	r1, #0
 8003332:	2032      	movs	r0, #50	; 0x32
 8003334:	f000 fff3 	bl	800431e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003338:	2032      	movs	r0, #50	; 0x32
 800333a:	f001 f80c 	bl	8004356 <HAL_NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40000400 	.word	0x40000400
 8003350:	40000c00 	.word	0x40000c00

08003354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <HAL_TIM_MspPostInit+0x68>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11e      	bne.n	80033b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_TIM_MspPostInit+0x6c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringPinBank1_Pin|FiringPinBank2_Pin;
 8003392:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	4619      	mov	r1, r3
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <HAL_TIM_MspPostInit+0x70>)
 80033b0:	f001 fb00 	bl	80049b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020800 	.word	0x40020800

080033c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_UART_MspInit+0x94>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d133      	bne.n	8003452 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	6453      	str	r3, [r2, #68]	; 0x44
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_UART_MspInit+0x98>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_UART_MspInit+0x98>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UART_MspInit+0x98>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_UART_MspInit+0x98>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003422:	23c0      	movs	r3, #192	; 0xc0
 8003424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003432:	2307      	movs	r3, #7
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4619      	mov	r1, r3
 800343c:	4809      	ldr	r0, [pc, #36]	; (8003464 <HAL_UART_MspInit+0x9c>)
 800343e:	f001 fab9 	bl	80049b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 8003442:	2201      	movs	r2, #1
 8003444:	2100      	movs	r1, #0
 8003446:	2025      	movs	r0, #37	; 0x25
 8003448:	f000 ff69 	bl	800431e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800344c:	2025      	movs	r0, #37	; 0x25
 800344e:	f000 ff82 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003452:	bf00      	nop
 8003454:	3728      	adds	r7, #40	; 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40011000 	.word	0x40011000
 8003460:	40023800 	.word	0x40023800
 8003464:	40020400 	.word	0x40020400

08003468 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	edd7 7a00 	vldr	s15, [r7]
 800347e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	edd3 6a01 	vldr	s13, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edd3 7a03 	vldr	s15, [r3, #12]
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003492:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 6a02 	vldr	s13, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	edd3 7a04 	vldr	s15, [r3, #16]
 80034a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	ee07 3a90 	vmov	s15, r3

  }
 80034d2:	eeb0 0a67 	vmov.f32	s0, s15
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <HardFault_Handler+0x4>

080034f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <MemManage_Handler+0x4>

080034fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fe:	e7fe      	b.n	80034fe <BusFault_Handler+0x4>

08003500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <UsageFault_Handler+0x4>

08003506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003534:	f000 fb4e 	bl	8003bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <EXTI9_5_IRQHandler+0x3c>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <EXTI9_5_IRQHandler+0x30>
	{
		//Test output pin for zero crossing
		HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);
 800354c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003550:	480a      	ldr	r0, [pc, #40]	; (800357c <EXTI9_5_IRQHandler+0x40>)
 8003552:	f001 fbe4 	bl	8004d1e <HAL_GPIO_TogglePin>

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003556:	2104      	movs	r1, #4
 8003558:	4809      	ldr	r0, [pc, #36]	; (8003580 <EXTI9_5_IRQHandler+0x44>)
 800355a:	f003 fe89 	bl	8007270 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800355e:	2108      	movs	r1, #8
 8003560:	4807      	ldr	r0, [pc, #28]	; (8003580 <EXTI9_5_IRQHandler+0x44>)
 8003562:	f003 fe85 	bl	8007270 <HAL_TIM_PWM_Start>
		PIDFlag=1;
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <EXTI9_5_IRQHandler+0x48>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800356c:	2040      	movs	r0, #64	; 0x40
 800356e:	f001 fbf1 	bl	8004d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40013c00 	.word	0x40013c00
 800357c:	40020c00 	.word	0x40020c00
 8003580:	20000900 	.word	0x20000900
 8003584:	20000afc 	.word	0x20000afc

08003588 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800358e:	f003 ff97 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000098c 	.word	0x2000098c

0800359c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	counter3++;
 80035a0:	4ba6      	ldr	r3, [pc, #664]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4aa5      	ldr	r2, [pc, #660]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035a8:	6013      	str	r3, [r2, #0]
	counter4++;
 80035aa:	4ba5      	ldr	r3, [pc, #660]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4aa3      	ldr	r2, [pc, #652]	; (8003840 <TIM2_IRQHandler+0x2a4>)
 80035b2:	6013      	str	r3, [r2, #0]
	counter5++;
 80035b4:	4ba3      	ldr	r3, [pc, #652]	; (8003844 <TIM2_IRQHandler+0x2a8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	4aa2      	ldr	r2, [pc, #648]	; (8003844 <TIM2_IRQHandler+0x2a8>)
 80035bc:	6013      	str	r3, [r2, #0]
	rate_counter++;
 80035be:	4ba2      	ldr	r3, [pc, #648]	; (8003848 <TIM2_IRQHandler+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4aa0      	ldr	r2, [pc, #640]	; (8003848 <TIM2_IRQHandler+0x2ac>)
 80035c6:	6013      	str	r3, [r2, #0]




	if(200==counter3)
 80035c8:	4b9c      	ldr	r3, [pc, #624]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2bc8      	cmp	r3, #200	; 0xc8
 80035ce:	d133      	bne.n	8003638 <TIM2_IRQHandler+0x9c>
	{
		counter3=0;
 80035d0:	4b9a      	ldr	r3, [pc, #616]	; (800383c <TIM2_IRQHandler+0x2a0>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
		readTemperatureData(p_temperature);
 80035d6:	4b9d      	ldr	r3, [pc, #628]	; (800384c <TIM2_IRQHandler+0x2b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f866 	bl	80026ac <readTemperatureData>
		if(avg_temp==-100)
 80035e0:	4b9b      	ldr	r3, [pc, #620]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8003854 <TIM2_IRQHandler+0x2b8>
 80035ea:	eef4 7a47 	vcmp.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d104      	bne.n	80035fe <TIM2_IRQHandler+0x62>
		{
			avg_temp=(*p_temperature);
 80035f4:	4b95      	ldr	r3, [pc, #596]	; (800384c <TIM2_IRQHandler+0x2b0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a95      	ldr	r2, [pc, #596]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 80035fc:	6013      	str	r3, [r2, #0]
		}
		else
		{

		}
		avg_temp=alpha*(*p_temperature)+(1-alpha)*avg_temp;
 80035fe:	4b93      	ldr	r3, [pc, #588]	; (800384c <TIM2_IRQHandler+0x2b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003858 <TIM2_IRQHandler+0x2bc>
 800360a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360e:	eddf 7a92 	vldr	s15, [pc, #584]	; 8003858 <TIM2_IRQHandler+0x2bc>
 8003612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003616:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800361a:	4b8d      	ldr	r3, [pc, #564]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4b89      	ldr	r3, [pc, #548]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
		(*p_temperature)=avg_temp;
 800362e:	4b87      	ldr	r3, [pc, #540]	; (800384c <TIM2_IRQHandler+0x2b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a87      	ldr	r2, [pc, #540]	; (8003850 <TIM2_IRQHandler+0x2b4>)
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
	if(500==counter5)
 8003638:	4b82      	ldr	r3, [pc, #520]	; (8003844 <TIM2_IRQHandler+0x2a8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003640:	f040 8146 	bne.w	80038d0 <TIM2_IRQHandler+0x334>
	{
		if(1==ReflowEnable)
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <TIM2_IRQHandler+0x2c0>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	f040 8135 	bne.w	80038b8 <TIM2_IRQHandler+0x31c>
		{
			//TODO need to perform modification of PID controller in order to get half power
			//Error
			//pid_error =temperature  -(float32_t)ReflowCurve[ReflowIndex];
			//Error for power limitation
			pid_error =(float32_t)ReflowCurve[ReflowIndex]-temperature;
 800364e:	4b84      	ldr	r3, [pc, #528]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b83      	ldr	r3, [pc, #524]	; (8003864 <TIM2_IRQHandler+0x2c8>)
 8003656:	5c9b      	ldrb	r3, [r3, r2]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003660:	4b81      	ldr	r3, [pc, #516]	; (8003868 <TIM2_IRQHandler+0x2cc>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366a:	4b80      	ldr	r3, [pc, #512]	; (800386c <TIM2_IRQHandler+0x2d0>)
 800366c:	edc3 7a00 	vstr	s15, [r3]
			//Correction
			PidCorr = arm_pid_f32(&PID, pid_error);
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <TIM2_IRQHandler+0x2d0>)
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	eeb0 0a67 	vmov.f32	s0, s15
 800367a:	487d      	ldr	r0, [pc, #500]	; (8003870 <TIM2_IRQHandler+0x2d4>)
 800367c:	f7ff fef4 	bl	8003468 <arm_pid_f32>
 8003680:	eef0 7a40 	vmov.f32	s15, s0
 8003684:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <TIM2_IRQHandler+0x2d8>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
			PidCorrLim=(uint32_t)PidCorr;
 800368a:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <TIM2_IRQHandler+0x2d8>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003694:	ee17 2a90 	vmov	r2, s15
 8003698:	4b77      	ldr	r3, [pc, #476]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 800369a:	601a      	str	r2, [r3, #0]
			//Correction limits bank1-set value
			if (PidCorrLim > 750)
 800369c:	4b76      	ldr	r3, [pc, #472]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d903      	bls.n	80036b0 <TIM2_IRQHandler+0x114>
			{
				PIDBank1 = 750;
 80036a8:	4b74      	ldr	r3, [pc, #464]	; (800387c <TIM2_IRQHandler+0x2e0>)
 80036aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80036ae:	801a      	strh	r2, [r3, #0]
			else
			{

			}
			//Correction limits bank2-set value
			if(PidCorrLim>750)
 80036b0:	4b71      	ldr	r3, [pc, #452]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d903      	bls.n	80036c4 <TIM2_IRQHandler+0x128>
			{
				PIDBank2 =750;
 80036bc:	4b70      	ldr	r3, [pc, #448]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 80036be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80036c2:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (450>=PidCorrLim)	)
 80036c4:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80036cc:	d809      	bhi.n	80036e2 <TIM2_IRQHandler+0x146>
			{
				PIDBank1 = PidCorrLim;
 80036ce:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b69      	ldr	r3, [pc, #420]	; (800387c <TIM2_IRQHandler+0x2e0>)
 80036d6:	801a      	strh	r2, [r3, #0]
				PIDBank2 = PidCorrLim;
 80036d8:	4b67      	ldr	r3, [pc, #412]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	4b68      	ldr	r3, [pc, #416]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 80036e0:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (750>=PidCorrLim)	)
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d804      	bhi.n	80036f8 <TIM2_IRQHandler+0x15c>
			{
				PIDBank1 = PidCorrLim;
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <TIM2_IRQHandler+0x2dc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	4b61      	ldr	r3, [pc, #388]	; (800387c <TIM2_IRQHandler+0x2e0>)
 80036f6:	801a      	strh	r2, [r3, #0]
			}
			//P Control without power limitation
			//TIM3->CCR2=999-PIDBank1;
			//TIM3->CCR3=450-PIDBank2;
			//P Control with power limitation
			TIM3->CCR2=PIDBank1;
 80036f8:	4b60      	ldr	r3, [pc, #384]	; (800387c <TIM2_IRQHandler+0x2e0>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b61      	ldr	r3, [pc, #388]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3=PIDBank2;
 8003702:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <TIM2_IRQHandler+0x2e4>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b5e      	ldr	r3, [pc, #376]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
			if((TIM3->CCR2>0) || (TIM3->CCR3>0))
 800370c:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <TIM2_IRQHandler+0x180>
 8003714:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <TIM2_IRQHandler+0x2e8>)
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d006      	beq.n	800372a <TIM2_IRQHandler+0x18e>
			{
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 800371c:	2201      	movs	r2, #1
 800371e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003722:	4859      	ldr	r0, [pc, #356]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 8003724:	f001 fae2 	bl	8004cec <HAL_GPIO_WritePin>
 8003728:	e005      	b.n	8003736 <TIM2_IRQHandler+0x19a>
			}
			else
			{
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003730:	4855      	ldr	r0, [pc, #340]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 8003732:	f001 fadb 	bl	8004cec <HAL_GPIO_WritePin>
			}

			if(	(ReflowIndex >= (PhaseIndex[0]+10)	)	&&	(ReflowIndex < PhaseIndex[1])	 )
 8003736:	4b55      	ldr	r3, [pc, #340]	; (800388c <TIM2_IRQHandler+0x2f0>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	3309      	adds	r3, #9
 800373c:	4a48      	ldr	r2, [pc, #288]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	4293      	cmp	r3, r2
 8003742:	da0f      	bge.n	8003764 <TIM2_IRQHandler+0x1c8>
 8003744:	4b51      	ldr	r3, [pc, #324]	; (800388c <TIM2_IRQHandler+0x2f0>)
 8003746:	885a      	ldrh	r2, [r3, #2]
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d909      	bls.n	8003764 <TIM2_IRQHandler+0x1c8>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 8003750:	494f      	ldr	r1, [pc, #316]	; (8003890 <TIM2_IRQHandler+0x2f4>)
 8003752:	4850      	ldr	r0, [pc, #320]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 8003754:	f00a f814 	bl	800d780 <siprintf>
				Flags.initComplete=TRUE;
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 800375a:	2201      	movs	r2, #1
 800375c:	705a      	strb	r2, [r3, #1]
				State=Preheat;
 800375e:	4b4f      	ldr	r3, [pc, #316]	; (800389c <TIM2_IRQHandler+0x300>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[1])
 8003764:	4b49      	ldr	r3, [pc, #292]	; (800388c <TIM2_IRQHandler+0x2f0>)
 8003766:	885a      	ldrh	r2, [r3, #2]
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d109      	bne.n	8003784 <TIM2_IRQHandler+0x1e8>
			{
				sprintf(ConsoleMSG,"SOAK");
 8003770:	494b      	ldr	r1, [pc, #300]	; (80038a0 <TIM2_IRQHandler+0x304>)
 8003772:	4848      	ldr	r0, [pc, #288]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 8003774:	f00a f804 	bl	800d780 <siprintf>
				Flags.preheatComplete=TRUE;
 8003778:	4b47      	ldr	r3, [pc, #284]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 800377a:	2201      	movs	r2, #1
 800377c:	709a      	strb	r2, [r3, #2]
				State=Soak;
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <TIM2_IRQHandler+0x300>)
 8003780:	2202      	movs	r2, #2
 8003782:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[2])
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <TIM2_IRQHandler+0x2f0>)
 8003786:	889a      	ldrh	r2, [r3, #4]
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d10c      	bne.n	80037aa <TIM2_IRQHandler+0x20e>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 8003790:	493f      	ldr	r1, [pc, #252]	; (8003890 <TIM2_IRQHandler+0x2f4>)
 8003792:	4840      	ldr	r0, [pc, #256]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 8003794:	f009 fff4 	bl	800d780 <siprintf>
				Flags.preheatComplete=FALSE;
 8003798:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 800379a:	2200      	movs	r2, #0
 800379c:	709a      	strb	r2, [r3, #2]
				Flags.soakComplete=TRUE;
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	70da      	strb	r2, [r3, #3]
				State=Preheat;
 80037a4:	4b3d      	ldr	r3, [pc, #244]	; (800389c <TIM2_IRQHandler+0x300>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[3])
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <TIM2_IRQHandler+0x2f0>)
 80037ac:	88da      	ldrh	r2, [r3, #6]
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d109      	bne.n	80037ca <TIM2_IRQHandler+0x22e>
			{
				sprintf(ConsoleMSG,"REFLOW");
 80037b6:	493b      	ldr	r1, [pc, #236]	; (80038a4 <TIM2_IRQHandler+0x308>)
 80037b8:	4836      	ldr	r0, [pc, #216]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 80037ba:	f009 ffe1 	bl	800d780 <siprintf>
				Flags.preheatComplete=TRUE;
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	709a      	strb	r2, [r3, #2]
				State=Reflow;
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <TIM2_IRQHandler+0x300>)
 80037c6:	2203      	movs	r2, #3
 80037c8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[4])
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <TIM2_IRQHandler+0x2f0>)
 80037cc:	891a      	ldrh	r2, [r3, #8]
 80037ce:	4b24      	ldr	r3, [pc, #144]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d11a      	bne.n	800380c <TIM2_IRQHandler+0x270>
			{
				HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80037d6:	2017      	movs	r0, #23
 80037d8:	f000 fdcb 	bl	8004372 <HAL_NVIC_DisableIRQ>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80037dc:	2104      	movs	r1, #4
 80037de:	4832      	ldr	r0, [pc, #200]	; (80038a8 <TIM2_IRQHandler+0x30c>)
 80037e0:	f003 fd84 	bl	80072ec <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80037e4:	2108      	movs	r1, #8
 80037e6:	4830      	ldr	r0, [pc, #192]	; (80038a8 <TIM2_IRQHandler+0x30c>)
 80037e8:	f003 fd80 	bl	80072ec <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037f2:	4825      	ldr	r0, [pc, #148]	; (8003888 <TIM2_IRQHandler+0x2ec>)
 80037f4:	f001 fa7a 	bl	8004cec <HAL_GPIO_WritePin>
				sprintf(ConsoleMSG,"COOL DOWN");
 80037f8:	492c      	ldr	r1, [pc, #176]	; (80038ac <TIM2_IRQHandler+0x310>)
 80037fa:	4826      	ldr	r0, [pc, #152]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 80037fc:	f009 ffc0 	bl	800d780 <siprintf>
				Flags.reflowComplete=TRUE;
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 8003802:	2201      	movs	r2, #1
 8003804:	711a      	strb	r2, [r3, #4]
				State=Cooldown;
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <TIM2_IRQHandler+0x300>)
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if (PhaseIndex[5]==ReflowIndex)
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <TIM2_IRQHandler+0x2f0>)
 800380e:	895a      	ldrh	r2, [r3, #10]
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <TIM2_IRQHandler+0x2c4>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d152      	bne.n	80038be <TIM2_IRQHandler+0x322>
			{
				sprintf(ConsoleMSG,"FINISHED");
 8003818:	4925      	ldr	r1, [pc, #148]	; (80038b0 <TIM2_IRQHandler+0x314>)
 800381a:	481e      	ldr	r0, [pc, #120]	; (8003894 <TIM2_IRQHandler+0x2f8>)
 800381c:	f009 ffb0 	bl	800d780 <siprintf>
				Flags.cooldownComplete=TRUE;
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <TIM2_IRQHandler+0x2fc>)
 8003822:	2201      	movs	r2, #1
 8003824:	715a      	strb	r2, [r3, #5]
				State=Finish;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <TIM2_IRQHandler+0x300>)
 8003828:	2205      	movs	r2, #5
 800382a:	701a      	strb	r2, [r3, #0]
				ReflowEnable = 0;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <TIM2_IRQHandler+0x2c0>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
				PIDFlag=0;
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <TIM2_IRQHandler+0x318>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e041      	b.n	80038be <TIM2_IRQHandler+0x322>
 800383a:	bf00      	nop
 800383c:	20000798 	.word	0x20000798
 8003840:	2000079c 	.word	0x2000079c
 8003844:	200007a0 	.word	0x200007a0
 8003848:	20001b50 	.word	0x20001b50
 800384c:	20000460 	.word	0x20000460
 8003850:	2000045c 	.word	0x2000045c
 8003854:	c2c80000 	.word	0xc2c80000
 8003858:	3dcccccd 	.word	0x3dcccccd
 800385c:	2000074c 	.word	0x2000074c
 8003860:	200007a4 	.word	0x200007a4
 8003864:	20000b68 	.word	0x20000b68
 8003868:	20000764 	.word	0x20000764
 800386c:	20001b58 	.word	0x20001b58
 8003870:	20000a30 	.word	0x20000a30
 8003874:	20001b54 	.word	0x20001b54
 8003878:	20001b48 	.word	0x20001b48
 800387c:	20001b64 	.word	0x20001b64
 8003880:	20001b68 	.word	0x20001b68
 8003884:	40000400 	.word	0x40000400
 8003888:	40020c00 	.word	0x40020c00
 800388c:	20000758 	.word	0x20000758
 8003890:	080111f8 	.word	0x080111f8
 8003894:	20000b00 	.word	0x20000b00
 8003898:	20000b18 	.word	0x20000b18
 800389c:	20000a68 	.word	0x20000a68
 80038a0:	08011200 	.word	0x08011200
 80038a4:	08011208 	.word	0x08011208
 80038a8:	20000900 	.word	0x20000900
 80038ac:	08011210 	.word	0x08011210
 80038b0:	0801121c 	.word	0x0801121c
 80038b4:	20000afc 	.word	0x20000afc
			}

		}
		else
		{
			ReflowIndex = 0;
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <TIM2_IRQHandler+0x340>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]
		}

		counter5=0;
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <TIM2_IRQHandler+0x344>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
		ReflowIndex++;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <TIM2_IRQHandler+0x340>)
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <TIM2_IRQHandler+0x340>)
 80038ce:	801a      	strh	r2, [r3, #0]

	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <TIM2_IRQHandler+0x348>)
 80038d2:	f003 fdf5 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200007a4 	.word	0x200007a4
 80038e0:	200007a0 	.word	0x200007a0
 80038e4:	20001b08 	.word	0x20001b08

080038e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <USART1_IRQHandler+0x10>)
 80038ee:	f004 fd7d 	bl	80083ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000a6c 	.word	0x20000a6c

080038fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <TIM5_IRQHandler+0x10>)
 8003902:	f003 fddd 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200008c0 	.word	0x200008c0

08003910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <OTG_FS_IRQHandler+0x10>)
 8003916:	f001 fbc9 	bl	80050ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20002060 	.word	0x20002060

08003924 <_getpid>:
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
 8003928:	2301      	movs	r3, #1
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_kill>:
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	f009 f9b9 	bl	800ccb4 <__errno>
 8003942:	4603      	mov	r3, r0
 8003944:	2216      	movs	r2, #22
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_exit>:
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffe7 	bl	8003934 <_kill>
 8003966:	e7fe      	b.n	8003966 <_exit+0x12>

08003968 <_read>:
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e00a      	b.n	8003990 <_read+0x28>
 800397a:	f3af 8000 	nop.w
 800397e:	4601      	mov	r1, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	b2ca      	uxtb	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	dbf0      	blt.n	800397a <_read+0x12>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_write>:
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e009      	b.n	80039c8 <_write+0x26>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	60ba      	str	r2, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f3af 8000 	nop.w
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dbf1      	blt.n	80039b4 <_write+0x12>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_close>:
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_fstat>:
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	2300      	movs	r3, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_isatty>:
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_lseek>:
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <_sbrk>:
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <_sbrk+0x5c>)
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <_sbrk+0x60>)
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <_sbrk+0x22>
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <_sbrk+0x64>)
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <_sbrk+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d207      	bcs.n	8003a84 <_sbrk+0x40>
 8003a74:	f009 f91e 	bl	800ccb4 <__errno>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	e009      	b.n	8003a98 <_sbrk+0x54>
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <_sbrk+0x64>)
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20020000 	.word	0x20020000
 8003aa4:	00000400 	.word	0x00000400
 8003aa8:	200007a8 	.word	0x200007a8
 8003aac:	20002478 	.word	0x20002478

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <SystemInit+0x28>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <SystemInit+0x28>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <SystemInit+0x28>)
 8003ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aca:	609a      	str	r2, [r3, #8]
#endif
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ae2:	e003      	b.n	8003aec <LoopCopyDataInit>

08003ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aea:	3104      	adds	r1, #4

08003aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003aec:	480b      	ldr	r0, [pc, #44]	; (8003b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003af4:	d3f6      	bcc.n	8003ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8003af6:	4a0b      	ldr	r2, [pc, #44]	; (8003b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003af8:	e002      	b.n	8003b00 <LoopFillZerobss>

08003afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003afc:	f842 3b04 	str.w	r3, [r2], #4

08003b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b04:	d3f9      	bcc.n	8003afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b06:	f7ff ffd3 	bl	8003ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b0a:	f009 f8d9 	bl	800ccc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b0e:	f7fe fe27 	bl	8002760 <main>
  bx  lr    
 8003b12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b18:	080117ac 	.word	0x080117ac
  ldr  r0, =_sdata
 8003b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b20:	20000714 	.word	0x20000714
  ldr  r2, =_sbss
 8003b24:	20000714 	.word	0x20000714
  ldr  r3, = _ebss
 8003b28:	20002478 	.word	0x20002478

08003b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b2c:	e7fe      	b.n	8003b2c <ADC_IRQHandler>
	...

08003b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_Init+0x40>)
 8003b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <HAL_Init+0x40>)
 8003b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <HAL_Init+0x40>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b58:	2003      	movs	r0, #3
 8003b5a:	f000 fbd5 	bl	8004308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f000 f808 	bl	8003b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b64:	f7ff fa98 	bl	8003098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00

08003b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_InitTick+0x54>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_InitTick+0x58>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4619      	mov	r1, r3
 8003b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fbfb 	bl	800438e <HAL_SYSTICK_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00e      	b.n	8003bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d80a      	bhi.n	8003bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	f000 fbb5 	bl	800431e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb4:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <HAL_InitTick+0x5c>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000464 	.word	0x20000464
 8003bcc:	2000046c 	.word	0x2000046c
 8003bd0:	20000468 	.word	0x20000468

08003bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_IncTick+0x20>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_IncTick+0x24>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4413      	add	r3, r2
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_IncTick+0x24>)
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	2000046c 	.word	0x2000046c
 8003bf8:	20001b6c 	.word	0x20001b6c

08003bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_GetTick+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20001b6c 	.word	0x20001b6c

08003c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c1c:	f7ff ffee 	bl	8003bfc <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d005      	beq.n	8003c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_Delay+0x44>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c3a:	bf00      	nop
 8003c3c:	f7ff ffde 	bl	8003bfc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d8f7      	bhi.n	8003c3c <HAL_Delay+0x28>
  {
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000046c 	.word	0x2000046c

08003c5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e033      	b.n	8003cda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fa34 	bl	80030e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d118      	bne.n	8003ccc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ca2:	f023 0302 	bic.w	r3, r3, #2
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f93a 	bl	8003f28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cca:	e001      	b.n	8003cd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e105      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x228>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	d925      	bls.n	8003d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68d9      	ldr	r1, [r3, #12]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	3b1e      	subs	r3, #30
 8003d26:	2207      	movs	r2, #7
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	400a      	ands	r2, r1
 8003d34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68d9      	ldr	r1, [r3, #12]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	4618      	mov	r0, r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4403      	add	r3, r0
 8003d4e:	3b1e      	subs	r3, #30
 8003d50:	409a      	lsls	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e022      	b.n	8003da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6919      	ldr	r1, [r3, #16]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	2207      	movs	r2, #7
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6919      	ldr	r1, [r3, #16]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4403      	add	r3, r0
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d824      	bhi.n	8003df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	3b05      	subs	r3, #5
 8003dbc:	221f      	movs	r2, #31
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	400a      	ands	r2, r1
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b05      	subs	r3, #5
 8003de6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34
 8003df2:	e04c      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	d824      	bhi.n	8003e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3b23      	subs	r3, #35	; 0x23
 8003e0e:	221f      	movs	r2, #31
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43da      	mvns	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	3b23      	subs	r3, #35	; 0x23
 8003e38:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
 8003e44:	e023      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	3b41      	subs	r3, #65	; 0x41
 8003e58:	221f      	movs	r2, #31
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	400a      	ands	r2, r1
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4618      	mov	r0, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	3b41      	subs	r3, #65	; 0x41
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e8e:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <HAL_ADC_ConfigChannel+0x234>)
 8003e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <HAL_ADC_ConfigChannel+0x238>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d109      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x1cc>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b12      	cmp	r3, #18
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_ADC_ConfigChannel+0x238>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d123      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x21e>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d003      	beq.n	8003eca <HAL_ADC_ConfigChannel+0x1e6>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b11      	cmp	r3, #17
 8003ec8:	d11b      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d111      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_ADC_ConfigChannel+0x23c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_ADC_ConfigChannel+0x240>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	0c9a      	lsrs	r2, r3, #18
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ef4:	e002      	b.n	8003efc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f9      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40012300 	.word	0x40012300
 8003f1c:	40012000 	.word	0x40012000
 8003f20:	20000464 	.word	0x20000464
 8003f24:	431bde83 	.word	0x431bde83

08003f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f30:	4b79      	ldr	r3, [pc, #484]	; (8004118 <ADC_Init+0x1f0>)
 8003f32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	4a58      	ldr	r2, [pc, #352]	; (800411c <ADC_Init+0x1f4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6899      	ldr	r1, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	e00f      	b.n	8004026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0202 	bic.w	r2, r2, #2
 8004034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7e1b      	ldrb	r3, [r3, #24]
 8004040:	005a      	lsls	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01b      	beq.n	800408c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	3b01      	subs	r3, #1
 8004080:	035a      	lsls	r2, r3, #13
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e007      	b.n	800409c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	051a      	lsls	r2, r3, #20
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040de:	025a      	lsls	r2, r3, #9
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	029a      	lsls	r2, r3, #10
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40012300 	.word	0x40012300
 800411c:	0f000001 	.word	0x0f000001

08004120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800413c:	4013      	ands	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800414c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	60d3      	str	r3, [r2, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <__NVIC_GetPriorityGrouping+0x18>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 0307 	and.w	r3, r3, #7
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db0b      	blt.n	80041ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	4907      	ldr	r1, [pc, #28]	; (80041bc <__NVIC_EnableIRQ+0x38>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2001      	movs	r0, #1
 80041a6:	fa00 f202 	lsl.w	r2, r0, r2
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000e100 	.word	0xe000e100

080041c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db12      	blt.n	80041f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	490a      	ldr	r1, [pc, #40]	; (8004204 <__NVIC_DisableIRQ+0x44>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2001      	movs	r0, #1
 80041e2:	fa00 f202 	lsl.w	r2, r0, r2
 80041e6:	3320      	adds	r3, #32
 80041e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041ec:	f3bf 8f4f 	dsb	sy
}
 80041f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041f2:	f3bf 8f6f 	isb	sy
}
 80041f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000e100 	.word	0xe000e100

08004208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db0a      	blt.n	8004232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	490c      	ldr	r1, [pc, #48]	; (8004254 <__NVIC_SetPriority+0x4c>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004230:	e00a      	b.n	8004248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4908      	ldr	r1, [pc, #32]	; (8004258 <__NVIC_SetPriority+0x50>)
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3b04      	subs	r3, #4
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	440b      	add	r3, r1
 8004246:	761a      	strb	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f1c3 0307 	rsb	r3, r3, #7
 8004276:	2b04      	cmp	r3, #4
 8004278:	bf28      	it	cs
 800427a:	2304      	movcs	r3, #4
 800427c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3304      	adds	r3, #4
 8004282:	2b06      	cmp	r3, #6
 8004284:	d902      	bls.n	800428c <NVIC_EncodePriority+0x30>
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3b03      	subs	r3, #3
 800428a:	e000      	b.n	800428e <NVIC_EncodePriority+0x32>
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	f04f 32ff 	mov.w	r2, #4294967295
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	401a      	ands	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a4:	f04f 31ff 	mov.w	r1, #4294967295
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	43d9      	mvns	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	4313      	orrs	r3, r2
         );
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3724      	adds	r7, #36	; 0x24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d4:	d301      	bcc.n	80042da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042d6:	2301      	movs	r3, #1
 80042d8:	e00f      	b.n	80042fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <SysTick_Config+0x40>)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3b01      	subs	r3, #1
 80042e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e2:	210f      	movs	r1, #15
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	f7ff ff8e 	bl	8004208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <SysTick_Config+0x40>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <SysTick_Config+0x40>)
 80042f4:	2207      	movs	r2, #7
 80042f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	e000e010 	.word	0xe000e010

08004308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff05 	bl	8004120 <__NVIC_SetPriorityGrouping>
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004330:	f7ff ff1a 	bl	8004168 <__NVIC_GetPriorityGrouping>
 8004334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff8e 	bl	800425c <NVIC_EncodePriority>
 8004340:	4602      	mov	r2, r0
 8004342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff5d 	bl	8004208 <__NVIC_SetPriority>
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff0d 	bl	8004184 <__NVIC_EnableIRQ>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	4603      	mov	r3, r0
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff1d 	bl	80041c0 <__NVIC_DisableIRQ>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ff94 	bl	80042c4 <SysTick_Config>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e00c      	b.n	80043de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2205      	movs	r2, #5
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_FLASH_Program+0xa0>)
 8004400:	7e1b      	ldrb	r3, [r3, #24]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_FLASH_Program+0x1e>
 8004406:	2302      	movs	r3, #2
 8004408:	e03b      	b.n	8004482 <HAL_FLASH_Program+0x96>
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_FLASH_Program+0xa0>)
 800440c:	2201      	movs	r2, #1
 800440e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004414:	f000 f87c 	bl	8004510 <FLASH_WaitForLastOperation>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12b      	bne.n	800447a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004428:	783b      	ldrb	r3, [r7, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	68b8      	ldr	r0, [r7, #8]
 800442e:	f000 f927 	bl	8004680 <FLASH_Program_Byte>
 8004432:	e016      	b.n	8004462 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800443a:	883b      	ldrh	r3, [r7, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	68b8      	ldr	r0, [r7, #8]
 8004440:	f000 f8fa 	bl	8004638 <FLASH_Program_HalfWord>
 8004444:	e00d      	b.n	8004462 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d105      	bne.n	8004458 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	68b8      	ldr	r0, [r7, #8]
 8004452:	f000 f8cf 	bl	80045f4 <FLASH_Program_Word>
 8004456:	e004      	b.n	8004462 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445c:	68b8      	ldr	r0, [r7, #8]
 800445e:	f000 f897 	bl	8004590 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004462:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004466:	f000 f853 	bl	8004510 <FLASH_WaitForLastOperation>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_FLASH_Program+0xa4>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <HAL_FLASH_Program+0xa4>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <HAL_FLASH_Program+0xa0>)
 800447c:	2200      	movs	r2, #0
 800447e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20001b70 	.word	0x20001b70
 8004490:	40023c00 	.word	0x40023c00

08004494 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_FLASH_Unlock+0x38>)
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da0b      	bge.n	80044be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_FLASH_Unlock+0x38>)
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <HAL_FLASH_Unlock+0x3c>)
 80044aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_FLASH_Unlock+0x38>)
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <HAL_FLASH_Unlock+0x40>)
 80044b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_FLASH_Unlock+0x38>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da01      	bge.n	80044be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80044be:	79fb      	ldrb	r3, [r7, #7]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40023c00 	.word	0x40023c00
 80044d0:	45670123 	.word	0x45670123
 80044d4:	cdef89ab 	.word	0xcdef89ab

080044d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_FLASH_Lock+0x1c>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <HAL_FLASH_Lock+0x1c>)
 80044e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40023c00 	.word	0x40023c00

080044f8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_FLASH_GetError+0x14>)
 80044fe:	69db      	ldr	r3, [r3, #28]
}  
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20001b70 	.word	0x20001b70

08004510 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <FLASH_WaitForLastOperation+0x78>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004522:	f7ff fb6b 	bl	8003bfc <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004528:	e010      	b.n	800454c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d00c      	beq.n	800454c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <FLASH_WaitForLastOperation+0x38>
 8004538:	f7ff fb60 	bl	8003bfc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d201      	bcs.n	800454c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e019      	b.n	8004580 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <FLASH_WaitForLastOperation+0x7c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e8      	bne.n	800452a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <FLASH_WaitForLastOperation+0x7c>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <FLASH_WaitForLastOperation+0x7c>)
 8004566:	2201      	movs	r2, #1
 8004568:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <FLASH_WaitForLastOperation+0x7c>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004576:	f000 f8a5 	bl	80046c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
  
}  
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20001b70 	.word	0x20001b70
 800458c:	40023c00 	.word	0x40023c00

08004590 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 80045a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80045a8:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 80045ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80045b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <FLASH_Program_DoubleWord+0x60>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80045c6:	f3bf 8f6f 	isb	sy
}
 80045ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80045cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	000a      	movs	r2, r1
 80045da:	2300      	movs	r3, #0
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	3104      	adds	r1, #4
 80045e0:	4613      	mov	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40023c00 	.word	0x40023c00

080045f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <FLASH_Program_Word+0x40>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <FLASH_Program_Word+0x40>)
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <FLASH_Program_Word+0x40>)
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <FLASH_Program_Word+0x40>)
 8004610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <FLASH_Program_Word+0x40>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	4a06      	ldr	r2, [pc, #24]	; (8004634 <FLASH_Program_Word+0x40>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40023c00 	.word	0x40023c00

08004638 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <FLASH_Program_HalfWord+0x44>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <FLASH_Program_HalfWord+0x44>)
 800464a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <FLASH_Program_HalfWord+0x44>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a09      	ldr	r2, [pc, #36]	; (800467c <FLASH_Program_HalfWord+0x44>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <FLASH_Program_HalfWord+0x44>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4a06      	ldr	r2, [pc, #24]	; (800467c <FLASH_Program_HalfWord+0x44>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	801a      	strh	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00

08004680 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <FLASH_Program_Byte+0x40>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <FLASH_Program_Byte+0x40>)
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <FLASH_Program_Byte+0x40>)
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <FLASH_Program_Byte+0x40>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <FLASH_Program_Byte+0x40>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <FLASH_Program_Byte+0x40>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	701a      	strb	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40023c00 	.word	0x40023c00

080046c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <FLASH_SetErrorCode+0xa8>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f043 0310 	orr.w	r3, r3, #16
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <FLASH_SetErrorCode+0xa8>)
 80046de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 80046e2:	2210      	movs	r2, #16
 80046e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <FLASH_SetErrorCode+0xa8>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f043 0308 	orr.w	r3, r3, #8
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <FLASH_SetErrorCode+0xa8>)
 80046fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 8004700:	2220      	movs	r2, #32
 8004702:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004710:	4b16      	ldr	r3, [pc, #88]	; (800476c <FLASH_SetErrorCode+0xa8>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <FLASH_SetErrorCode+0xa8>)
 800471a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 800471e:	2240      	movs	r2, #64	; 0x40
 8004720:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <FLASH_SetErrorCode+0xa8>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	4a0d      	ldr	r2, [pc, #52]	; (800476c <FLASH_SetErrorCode+0xa8>)
 8004738:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800474c:	4b07      	ldr	r3, [pc, #28]	; (800476c <FLASH_SetErrorCode+0xa8>)
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f043 0320 	orr.w	r3, r3, #32
 8004754:	4a05      	ldr	r2, [pc, #20]	; (800476c <FLASH_SetErrorCode+0xa8>)
 8004756:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <FLASH_SetErrorCode+0xa4>)
 800475a:	2202      	movs	r2, #2
 800475c:	60da      	str	r2, [r3, #12]
  }
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40023c00 	.word	0x40023c00
 800476c:	20001b70 	.word	0x20001b70

08004770 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004782:	4b31      	ldr	r3, [pc, #196]	; (8004848 <HAL_FLASHEx_Erase+0xd8>)
 8004784:	7e1b      	ldrb	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_FLASHEx_Erase+0x1e>
 800478a:	2302      	movs	r3, #2
 800478c:	e058      	b.n	8004840 <HAL_FLASHEx_Erase+0xd0>
 800478e:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <HAL_FLASHEx_Erase+0xd8>)
 8004790:	2201      	movs	r2, #1
 8004792:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004794:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004798:	f7ff feba 	bl	8004510 <FLASH_WaitForLastOperation>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d148      	bne.n	8004838 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d115      	bne.n	80047e2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 f844 	bl	8004850 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047cc:	f7ff fea0 	bl	8004510 <FLASH_WaitForLastOperation>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_FLASHEx_Erase+0xdc>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_FLASHEx_Erase+0xdc>)
 80047da:	f023 0304 	bic.w	r3, r3, #4
 80047de:	6113      	str	r3, [r2, #16]
 80047e0:	e028      	b.n	8004834 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	e01c      	b.n	8004824 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	68b8      	ldr	r0, [r7, #8]
 80047f4:	f000 f850 	bl	8004898 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047fc:	f7ff fe88 	bl	8004510 <FLASH_WaitForLastOperation>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_FLASHEx_Erase+0xdc>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <HAL_FLASHEx_Erase+0xdc>)
 800480a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800480e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	601a      	str	r2, [r3, #0]
          break;
 800481c:	e00a      	b.n	8004834 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4413      	add	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d3da      	bcc.n	80047ea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004834:	f000 f878 	bl	8004928 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004838:	4b03      	ldr	r3, [pc, #12]	; (8004848 <HAL_FLASHEx_Erase+0xd8>)
 800483a:	2200      	movs	r2, #0
 800483c:	761a      	strb	r2, [r3, #24]

  return status;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20001b70 	.word	0x20001b70
 800484c:	40023c00 	.word	0x40023c00

08004850 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <FLASH_MassErase+0x44>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <FLASH_MassErase+0x44>)
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <FLASH_MassErase+0x44>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	4a09      	ldr	r2, [pc, #36]	; (8004894 <FLASH_MassErase+0x44>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <FLASH_MassErase+0x44>)
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4313      	orrs	r3, r2
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <FLASH_MassErase+0x44>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6113      	str	r3, [r2, #16]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00

08004898 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e010      	b.n	80048d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d103      	bne.n	80048c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80048ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e009      	b.n	80048d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d103      	bne.n	80048d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80048c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e002      	b.n	80048d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80048d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	490f      	ldr	r1, [pc, #60]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4313      	orrs	r3, r2
 8004904:	4a07      	ldr	r2, [pc, #28]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <FLASH_Erase_Sector+0x8c>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004916:	6113      	str	r3, [r2, #16]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40023c00 	.word	0x40023c00

08004928 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800492c:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800493e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004942:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800494a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004966:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004968:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800497a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <FLASH_FlushCaches+0x88>)
 8004992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004996:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <FLASH_FlushCaches+0x88>)
 800499e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a2:	6013      	str	r3, [r2, #0]
  }
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e16b      	b.n	8004ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049d0:	2201      	movs	r2, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	f040 815a 	bne.w	8004ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00b      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a02:	2b11      	cmp	r3, #17
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b12      	cmp	r3, #18
 8004a0c:	d130      	bne.n	8004a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	2203      	movs	r2, #3
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a44:	2201      	movs	r2, #1
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 0201 	and.w	r2, r3, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0xfc>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b12      	cmp	r3, #18
 8004aae:	d123      	bne.n	8004af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	08da      	lsrs	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3208      	adds	r2, #8
 8004ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	08da      	lsrs	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3208      	adds	r2, #8
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2203      	movs	r2, #3
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80b4 	beq.w	8004ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4b60      	ldr	r3, [pc, #384]	; (8004cc0 <HAL_GPIO_Init+0x30c>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	4a5f      	ldr	r2, [pc, #380]	; (8004cc0 <HAL_GPIO_Init+0x30c>)
 8004b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b48:	6453      	str	r3, [r2, #68]	; 0x44
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	; (8004cc0 <HAL_GPIO_Init+0x30c>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b56:	4a5b      	ldr	r2, [pc, #364]	; (8004cc4 <HAL_GPIO_Init+0x310>)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	220f      	movs	r2, #15
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <HAL_GPIO_Init+0x314>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02b      	beq.n	8004bda <HAL_GPIO_Init+0x226>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a51      	ldr	r2, [pc, #324]	; (8004ccc <HAL_GPIO_Init+0x318>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d025      	beq.n	8004bd6 <HAL_GPIO_Init+0x222>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a50      	ldr	r2, [pc, #320]	; (8004cd0 <HAL_GPIO_Init+0x31c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <HAL_GPIO_Init+0x21e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a4f      	ldr	r2, [pc, #316]	; (8004cd4 <HAL_GPIO_Init+0x320>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d019      	beq.n	8004bce <HAL_GPIO_Init+0x21a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a4e      	ldr	r2, [pc, #312]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_GPIO_Init+0x216>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a4d      	ldr	r2, [pc, #308]	; (8004cdc <HAL_GPIO_Init+0x328>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_GPIO_Init+0x212>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a4c      	ldr	r2, [pc, #304]	; (8004ce0 <HAL_GPIO_Init+0x32c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	; (8004ce4 <HAL_GPIO_Init+0x330>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_GPIO_Init+0x20a>
 8004bba:	2307      	movs	r3, #7
 8004bbc:	e00e      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e00c      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e00a      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e008      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e006      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e004      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e002      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_GPIO_Init+0x228>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	f002 0203 	and.w	r2, r2, #3
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	4093      	lsls	r3, r2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bec:	4935      	ldr	r1, [pc, #212]	; (8004cc4 <HAL_GPIO_Init+0x310>)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c1e:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c48:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c9c:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <HAL_GPIO_Init+0x334>)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	f67f ae90 	bls.w	80049d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40020400 	.word	0x40020400
 8004cd0:	40020800 	.word	0x40020800
 8004cd4:	40020c00 	.word	0x40020c00
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40021400 	.word	0x40021400
 8004ce0:	40021800 	.word	0x40021800
 8004ce4:	40021c00 	.word	0x40021c00
 8004ce8:	40013c00 	.word	0x40013c00

08004cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cfc:	787b      	ldrb	r3, [r7, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d08:	e003      	b.n	8004d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	041a      	lsls	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	887b      	ldrh	r3, [r7, #2]
 8004d30:	401a      	ands	r2, r3
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d104      	bne.n	8004d42 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	041a      	lsls	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004d40:	e002      	b.n	8004d48 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	619a      	str	r2, [r3, #24]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d006      	beq.n	8004d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f806 	bl	8004d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40013c00 	.word	0x40013c00

08004d84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9c:	b08f      	sub	sp, #60	; 0x3c
 8004d9e:	af0a      	add	r7, sp, #40	; 0x28
 8004da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e10f      	b.n	8004fcc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f007 fc6c 	bl	800c6a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2203      	movs	r2, #3
 8004dd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f004 fa2f 	bl	800924e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	687e      	ldr	r6, [r7, #4]
 8004df8:	466d      	mov	r5, sp
 8004dfa:	f106 0410 	add.w	r4, r6, #16
 8004dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e0e:	1d33      	adds	r3, r6, #4
 8004e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e12:	6838      	ldr	r0, [r7, #0]
 8004e14:	f004 f906 	bl	8009024 <USB_CoreInit>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0d0      	b.n	8004fcc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f004 fa1d 	bl	8009270 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e04a      	b.n	8004ed2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	333d      	adds	r3, #61	; 0x3d
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	333c      	adds	r3, #60	; 0x3c
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	b298      	uxth	r0, r3
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3342      	adds	r3, #66	; 0x42
 8004e78:	4602      	mov	r2, r0
 8004e7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	333f      	adds	r3, #63	; 0x3f
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3344      	adds	r3, #68	; 0x44
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3348      	adds	r3, #72	; 0x48
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3350      	adds	r3, #80	; 0x50
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d3af      	bcc.n	8004e3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e044      	b.n	8004f6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f0e:	7bfa      	ldrb	r2, [r7, #15]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f24:	7bfa      	ldrb	r2, [r7, #15]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d3b5      	bcc.n	8004ee2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	687e      	ldr	r6, [r7, #4]
 8004f7e:	466d      	mov	r5, sp
 8004f80:	f106 0410 	add.w	r4, r6, #16
 8004f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f90:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f94:	1d33      	adds	r3, r6, #4
 8004f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f98:	6838      	ldr	r0, [r7, #0]
 8004f9a:	f004 f993 	bl	80092c4 <USB_DevInit>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00d      	b.n	8004fcc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f005 f8ff 	bl	800a1c8 <USB_DevDisconnect>

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_PCD_Start+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e020      	b.n	8005032 <HAL_PCD_Start+0x5e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d109      	bne.n	8005014 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005004:	2b01      	cmp	r3, #1
 8005006:	d005      	beq.n	8005014 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f004 f907 	bl	800922c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f005 f8af 	bl	800a186 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_PCD_Stop+0x1c>
 8005052:	2302      	movs	r3, #2
 8005054:	e026      	b.n	80050a4 <HAL_PCD_Stop+0x6a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f004 f8f3 	bl	800924e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f005 f8ab 	bl	800a1c8 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2110      	movs	r1, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f004 fa87 	bl	800958c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d109      	bne.n	800509a <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800508a:	2b01      	cmp	r3, #1
 800508c:	d005      	beq.n	800509a <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b08d      	sub	sp, #52	; 0x34
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f005 f934 	bl	800a330 <USB_GetMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 839d 	bne.w	800580a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 f898 	bl	800a20a <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8393 	beq.w	8005808 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 f88f 	bl	800a20a <USB_ReadInterrupts>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d107      	bne.n	8005106 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f002 0202 	and.w	r2, r2, #2
 8005104:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f87d 	bl	800a20a <USB_ReadInterrupts>
 8005110:	4603      	mov	r3, r0
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d161      	bne.n	80051de <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0210 	bic.w	r2, r2, #16
 8005128:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 020f 	and.w	r2, r3, #15
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	3304      	adds	r3, #4
 8005148:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	0c5b      	lsrs	r3, r3, #17
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	2b02      	cmp	r3, #2
 8005154:	d124      	bne.n	80051a0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d035      	beq.n	80051ce <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800516c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005170:	b29b      	uxth	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	6a38      	ldr	r0, [r7, #32]
 8005176:	f004 fee3 	bl	8009f40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005186:	441a      	add	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005198:	441a      	add	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	619a      	str	r2, [r3, #24]
 800519e:	e016      	b.n	80051ce <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	0c5b      	lsrs	r3, r3, #17
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d110      	bne.n	80051ce <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051b2:	2208      	movs	r2, #8
 80051b4:	4619      	mov	r1, r3
 80051b6:	6a38      	ldr	r0, [r7, #32]
 80051b8:	f004 fec2 	bl	8009f40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c8:	441a      	add	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0210 	orr.w	r2, r2, #16
 80051dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f005 f811 	bl	800a20a <USB_ReadInterrupts>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051f2:	d16e      	bne.n	80052d2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f005 f817 	bl	800a230 <USB_ReadDevAllOutEpInterrupt>
 8005202:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005204:	e062      	b.n	80052cc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d057      	beq.n	80052c0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f005 f83c 	bl	800a298 <USB_ReadDevOutEPInterrupt>
 8005220:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	2301      	movs	r3, #1
 800523c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800523e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fd4f 	bl	8005ce4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	2308      	movs	r3, #8
 8005260:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fe49 	bl	8005efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	461a      	mov	r2, r3
 8005282:	2310      	movs	r3, #16
 8005284:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	2320      	movs	r3, #32
 80052a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d199      	bne.n	8005206 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f004 ff97 	bl	800a20a <USB_ReadInterrupts>
 80052dc:	4603      	mov	r3, r0
 80052de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052e6:	f040 80c0 	bne.w	800546a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f004 ffb8 	bl	800a264 <USB_ReadDevAllInEpInterrupt>
 80052f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052fa:	e0b2      	b.n	8005462 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80a7 	beq.w	8005456 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f004 ffde 	bl	800a2d4 <USB_ReadDevInEPInterrupt>
 8005318:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d057      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	43db      	mvns	r3, r3
 800533e:	69f9      	ldr	r1, [r7, #28]
 8005340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005344:	4013      	ands	r3, r2
 8005346:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	461a      	mov	r2, r3
 8005356:	2301      	movs	r3, #1
 8005358:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d132      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	3348      	adds	r3, #72	; 0x48
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4403      	add	r3, r0
 8005382:	3344      	adds	r3, #68	; 0x44
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4419      	add	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4403      	add	r3, r0
 8005396:	3348      	adds	r3, #72	; 0x48
 8005398:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d113      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x31c>
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3350      	adds	r3, #80	; 0x50
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053c0:	461a      	mov	r2, r3
 80053c2:	2101      	movs	r1, #1
 80053c4:	f004 ffe6 	bl	800a394 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f007 fa07 	bl	800c7e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	2308      	movs	r3, #8
 80053ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	461a      	mov	r2, r3
 8005408:	2310      	movs	r3, #16
 800540a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	461a      	mov	r2, r3
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	461a      	mov	r2, r3
 8005440:	2302      	movs	r3, #2
 8005442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800544e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fbb9 	bl	8005bc8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	3301      	adds	r3, #1
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	f47f af49 	bne.w	80052fc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f004 fecb 	bl	800a20a <USB_ReadInterrupts>
 8005474:	4603      	mov	r3, r0
 8005476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800547a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547e:	d122      	bne.n	80054c6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800549a:	2b01      	cmp	r3, #1
 800549c:	d108      	bne.n	80054b0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a6:	2100      	movs	r1, #0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fdc5 	bl	8006038 <HAL_PCDEx_LPM_Callback>
 80054ae:	e002      	b.n	80054b6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f007 fa0d 	bl	800c8d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fe9d 	bl	800a20a <USB_ReadInterrupts>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d112      	bne.n	8005502 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d102      	bne.n	80054f2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f007 f9c9 	bl	800c884 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695a      	ldr	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005500:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f004 fe7f 	bl	800a20a <USB_ReadInterrupts>
 800550c:	4603      	mov	r3, r0
 800550e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	f040 80c7 	bne.w	80056a8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2110      	movs	r1, #16
 8005534:	4618      	mov	r0, r3
 8005536:	f004 f829 	bl	800958c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800553a:	2300      	movs	r3, #0
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553e:	e056      	b.n	80055ee <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	461a      	mov	r2, r3
 800554e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005552:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005572:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005592:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	3301      	adds	r3, #1
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d3a3      	bcc.n	8005540 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005606:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800560a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d016      	beq.n	8005642 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005624:	f043 030b 	orr.w	r3, r3, #11
 8005628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563a:	f043 030b 	orr.w	r3, r3, #11
 800563e:	6453      	str	r3, [r2, #68]	; 0x44
 8005640:	e015      	b.n	800566e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005654:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005658:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f043 030b 	orr.w	r3, r3, #11
 800566c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005680:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005692:	461a      	mov	r2, r3
 8005694:	f004 fe7e 	bl	800a394 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f004 fdac 	bl	800a20a <USB_ReadInterrupts>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d124      	bne.n	8005708 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f004 fe42 	bl	800a34c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f003 ffbe 	bl	800964e <USB_GetDevSpeed>
 80056d2:	4603      	mov	r3, r0
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681c      	ldr	r4, [r3, #0]
 80056de:	f001 f8ef 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80056e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	4620      	mov	r0, r4
 80056ee:	f003 fcfb 	bl	80090e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f007 f89d 	bl	800c832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005706:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f004 fd7c 	bl	800a20a <USB_ReadInterrupts>
 8005712:	4603      	mov	r3, r0
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d10a      	bne.n	8005732 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f007 f87a 	bl	800c816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f002 0208 	and.w	r2, r2, #8
 8005730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f004 fd67 	bl	800a20a <USB_ReadInterrupts>
 800573c:	4603      	mov	r3, r0
 800573e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005746:	d10f      	bne.n	8005768 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	b2db      	uxtb	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f007 f8dc 	bl	800c910 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f004 fd4c 	bl	800a20a <USB_ReadInterrupts>
 8005772:	4603      	mov	r3, r0
 8005774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800577c:	d10f      	bne.n	800579e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f007 f8af 	bl	800c8ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800579c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f004 fd31 	bl	800a20a <USB_ReadInterrupts>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d10a      	bne.n	80057ca <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f007 f8bd 	bl	800c934 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f004 fd1b 	bl	800a20a <USB_ReadInterrupts>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d115      	bne.n	800580a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f007 f8ad 	bl	800c950 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	e000      	b.n	800580a <HAL_PCD_IRQHandler+0x75e>
      return;
 8005808:	bf00      	nop
    }
  }
}
 800580a:	3734      	adds	r7, #52	; 0x34
 800580c:	46bd      	mov	sp, r7
 800580e:	bd90      	pop	{r4, r7, pc}

08005810 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_PCD_SetAddress+0x1a>
 8005826:	2302      	movs	r3, #2
 8005828:	e013      	b.n	8005852 <HAL_PCD_SetAddress+0x42>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f004 fc79 	bl	800a13a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	4608      	mov	r0, r1
 8005864:	4611      	mov	r1, r2
 8005866:	461a      	mov	r2, r3
 8005868:	4603      	mov	r3, r0
 800586a:	70fb      	strb	r3, [r7, #3]
 800586c:	460b      	mov	r3, r1
 800586e:	803b      	strh	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800587c:	2b00      	cmp	r3, #0
 800587e:	da0f      	bge.n	80058a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	4613      	mov	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	3338      	adds	r3, #56	; 0x38
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	3304      	adds	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	705a      	strb	r2, [r3, #1]
 800589e:	e00f      	b.n	80058c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	f003 020f 	and.w	r2, r3, #15
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	3304      	adds	r3, #4
 80058b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058cc:	883a      	ldrh	r2, [r7, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	78ba      	ldrb	r2, [r7, #2]
 80058d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058ea:	78bb      	ldrb	r3, [r7, #2]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d102      	bne.n	80058f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_PCD_EP_Open+0xaa>
 8005900:	2302      	movs	r3, #2
 8005902:	e00e      	b.n	8005922 <HAL_PCD_EP_Open+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	4618      	mov	r0, r3
 8005914:	f003 fec0 	bl	8009698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005920:	7afb      	ldrb	r3, [r7, #11]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	460b      	mov	r3, r1
 8005938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	f003 020f 	and.w	r2, r3, #15
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	3304      	adds	r3, #4
 8005952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2200      	movs	r2, #0
 8005964:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800596c:	7afb      	ldrb	r3, [r7, #11]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	b2da      	uxtb	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	f004 f947 	bl	8009c30 <USB_EP0StartXfer>
 80059a2:	e008      	b.n	80059b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	f003 fef9 	bl	80097a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	460b      	mov	r3, r1
 80059ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d0:	7afb      	ldrb	r3, [r7, #11]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	3338      	adds	r3, #56	; 0x38
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	3304      	adds	r3, #4
 80059e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2201      	movs	r2, #1
 80059fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6979      	ldr	r1, [r7, #20]
 8005a32:	f004 f8fd 	bl	8009c30 <USB_EP0StartXfer>
 8005a36:	e008      	b.n	8005a4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	6979      	ldr	r1, [r7, #20]
 8005a46:	f003 feaf 	bl	80097a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	f003 020f 	and.w	r2, r3, #15
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d901      	bls.n	8005a72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e050      	b.n	8005b14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da0f      	bge.n	8005a9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	3338      	adds	r3, #56	; 0x38
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	705a      	strb	r2, [r3, #1]
 8005a98:	e00d      	b.n	8005ab6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	3304      	adds	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_PCD_EP_SetStall+0x82>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e01e      	b.n	8005b14 <HAL_PCD_EP_SetStall+0xc0>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f004 fa54 	bl	8009f92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	b2d9      	uxtb	r1, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b04:	461a      	mov	r2, r3
 8005b06:	f004 fc45 	bl	800a394 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d901      	bls.n	8005b3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e042      	b.n	8005bc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da0f      	bge.n	8005b62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	f003 020f 	and.w	r2, r3, #15
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	3338      	adds	r3, #56	; 0x38
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	3304      	adds	r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	705a      	strb	r2, [r3, #1]
 8005b60:	e00f      	b.n	8005b82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	3304      	adds	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_PCD_EP_ClrStall+0x86>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e00e      	b.n	8005bc0 <HAL_PCD_EP_ClrStall+0xa4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f004 fa5c 	bl	800a06e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	3338      	adds	r3, #56	; 0x38
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d901      	bls.n	8005c00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e06c      	b.n	8005cda <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d902      	bls.n	8005c1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	3303      	adds	r3, #3
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c24:	e02b      	b.n	8005c7e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d902      	bls.n	8005c42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3303      	adds	r3, #3
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68d9      	ldr	r1, [r3, #12]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	4603      	mov	r3, r0
 8005c60:	6978      	ldr	r0, [r7, #20]
 8005c62:	f004 f938 	bl	8009ed6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d809      	bhi.n	8005ca8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d203      	bcs.n	8005ca8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1be      	bne.n	8005c26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d811      	bhi.n	8005cd8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	333c      	adds	r3, #60	; 0x3c
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	f040 80a0 	bne.w	8005e5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d015      	beq.n	8005d52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a72      	ldr	r2, [pc, #456]	; (8005ef4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f240 80dd 	bls.w	8005eea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80d7 	beq.w	8005eea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	6093      	str	r3, [r2, #8]
 8005d50:	e0cb      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	6093      	str	r3, [r2, #8]
 8005d6e:	e0bc      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 80b7 	bne.w	8005eea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a5d      	ldr	r2, [pc, #372]	; (8005ef4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d90f      	bls.n	8005da4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da0:	6093      	str	r3, [r2, #8]
 8005da2:	e0a2      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005db6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	0159      	lsls	r1, r3, #5
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005dca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4403      	add	r3, r0
 8005dda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005dde:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4403      	add	r3, r0
 8005e02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4419      	add	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4403      	add	r3, r0
 8005e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d114      	bne.n	8005e4e <PCD_EP_OutXfrComplete_int+0x16a>
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e46:	461a      	mov	r2, r3
 8005e48:	2101      	movs	r1, #1
 8005e4a:	f004 faa3 	bl	800a394 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f006 fca9 	bl	800c7ac <HAL_PCD_DataOutStageCallback>
 8005e5a:	e046      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d124      	bne.n	8005eae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	e032      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f006 fc80 	bl	800c7ac <HAL_PCD_DataOutStageCallback>
 8005eac:	e01d      	b.n	8005eea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d114      	bne.n	8005ede <PCD_EP_OutXfrComplete_int+0x1fa>
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d108      	bne.n	8005ede <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f004 fa5b 	bl	800a394 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f006 fc61 	bl	800c7ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	4f54300a 	.word	0x4f54300a
 8005ef8:	4f54310a 	.word	0x4f54310a

08005efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	333c      	adds	r3, #60	; 0x3c
 8005f14:	3304      	adds	r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d90e      	bls.n	8005f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f006 fc19 	bl	800c788 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d90c      	bls.n	8005f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d108      	bne.n	8005f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f70:	461a      	mov	r2, r3
 8005f72:	2101      	movs	r1, #1
 8005f74:	f004 fa0e 	bl	800a394 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	4f54300a 	.word	0x4f54300a

08005f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
 8005f94:	4613      	mov	r3, r2
 8005f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005fa6:	883b      	ldrh	r3, [r7, #0]
 8005fa8:	0419      	lsls	r1, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fb4:	e028      	b.n	8006008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e00d      	b.n	8005fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	3340      	adds	r3, #64	; 0x40
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d3ec      	bcc.n	8005fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ff0:	883b      	ldrh	r3, [r7, #0]
 8005ff2:	0418      	lsls	r0, r3, #16
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	4302      	orrs	r2, r0
 8006000:	3340      	adds	r3, #64	; 0x40
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	887a      	ldrh	r2, [r7, #2]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e25b      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d075      	beq.n	800615a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800606e:	4ba3      	ldr	r3, [pc, #652]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b04      	cmp	r3, #4
 8006078:	d00c      	beq.n	8006094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800607a:	4ba0      	ldr	r3, [pc, #640]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006082:	2b08      	cmp	r3, #8
 8006084:	d112      	bne.n	80060ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006086:	4b9d      	ldr	r3, [pc, #628]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006092:	d10b      	bne.n	80060ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006094:	4b99      	ldr	r3, [pc, #612]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05b      	beq.n	8006158 <HAL_RCC_OscConfig+0x108>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d157      	bne.n	8006158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e236      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b4:	d106      	bne.n	80060c4 <HAL_RCC_OscConfig+0x74>
 80060b6:	4b91      	ldr	r3, [pc, #580]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a90      	ldr	r2, [pc, #576]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e01d      	b.n	8006100 <HAL_RCC_OscConfig+0xb0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x98>
 80060ce:	4b8b      	ldr	r3, [pc, #556]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a8a      	ldr	r2, [pc, #552]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4b88      	ldr	r3, [pc, #544]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a87      	ldr	r2, [pc, #540]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e00b      	b.n	8006100 <HAL_RCC_OscConfig+0xb0>
 80060e8:	4b84      	ldr	r3, [pc, #528]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a83      	ldr	r2, [pc, #524]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4b81      	ldr	r3, [pc, #516]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a80      	ldr	r2, [pc, #512]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80060fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d013      	beq.n	8006130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fd fd78 	bl	8003bfc <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006110:	f7fd fd74 	bl	8003bfc <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	; 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e1fb      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	4b76      	ldr	r3, [pc, #472]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0xc0>
 800612e:	e014      	b.n	800615a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fd fd64 	bl	8003bfc <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006138:	f7fd fd60 	bl	8003bfc <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b64      	cmp	r3, #100	; 0x64
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1e7      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614a:	4b6c      	ldr	r3, [pc, #432]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0xe8>
 8006156:	e000      	b.n	800615a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d063      	beq.n	800622e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006166:	4b65      	ldr	r3, [pc, #404]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006172:	4b62      	ldr	r3, [pc, #392]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800617a:	2b08      	cmp	r3, #8
 800617c:	d11c      	bne.n	80061b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617e:	4b5f      	ldr	r3, [pc, #380]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d116      	bne.n	80061b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800618a:	4b5c      	ldr	r3, [pc, #368]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_RCC_OscConfig+0x152>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e1bb      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a2:	4b56      	ldr	r3, [pc, #344]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4952      	ldr	r1, [pc, #328]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b6:	e03a      	b.n	800622e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c0:	4b4f      	ldr	r3, [pc, #316]	; (8006300 <HAL_RCC_OscConfig+0x2b0>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fd fd19 	bl	8003bfc <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fd fd15 	bl	8003bfc <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e19c      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e0:	4b46      	ldr	r3, [pc, #280]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	4b43      	ldr	r3, [pc, #268]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4940      	ldr	r1, [pc, #256]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	600b      	str	r3, [r1, #0]
 8006200:	e015      	b.n	800622e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006202:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <HAL_RCC_OscConfig+0x2b0>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fd fcf8 	bl	8003bfc <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006210:	f7fd fcf4 	bl	8003bfc <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e17b      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006222:	4b36      	ldr	r3, [pc, #216]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f0      	bne.n	8006210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d030      	beq.n	800629c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <HAL_RCC_OscConfig+0x2b4>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fd fcd8 	bl	8003bfc <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006250:	f7fd fcd4 	bl	8003bfc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e15b      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006262:	4b26      	ldr	r3, [pc, #152]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x200>
 800626e:	e015      	b.n	800629c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006270:	4b24      	ldr	r3, [pc, #144]	; (8006304 <HAL_RCC_OscConfig+0x2b4>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006276:	f7fd fcc1 	bl	8003bfc <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627e:	f7fd fcbd 	bl	8003bfc <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e144      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006290:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 8006292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80a0 	beq.w	80063ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10f      	bne.n	80062da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d2:	60bb      	str	r3, [r7, #8]
 80062d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_RCC_OscConfig+0x2b8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d121      	bne.n	800632a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <HAL_RCC_OscConfig+0x2b8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <HAL_RCC_OscConfig+0x2b8>)
 80062ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f2:	f7fd fc83 	bl	8003bfc <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f8:	e011      	b.n	800631e <HAL_RCC_OscConfig+0x2ce>
 80062fa:	bf00      	nop
 80062fc:	40023800 	.word	0x40023800
 8006300:	42470000 	.word	0x42470000
 8006304:	42470e80 	.word	0x42470e80
 8006308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800630c:	f7fd fc76 	bl	8003bfc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0fd      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631e:	4b81      	ldr	r3, [pc, #516]	; (8006524 <HAL_RCC_OscConfig+0x4d4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d106      	bne.n	8006340 <HAL_RCC_OscConfig+0x2f0>
 8006332:	4b7d      	ldr	r3, [pc, #500]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a7c      	ldr	r2, [pc, #496]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	; 0x70
 800633e:	e01c      	b.n	800637a <HAL_RCC_OscConfig+0x32a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b05      	cmp	r3, #5
 8006346:	d10c      	bne.n	8006362 <HAL_RCC_OscConfig+0x312>
 8006348:	4b77      	ldr	r3, [pc, #476]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a76      	ldr	r2, [pc, #472]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 800634e:	f043 0304 	orr.w	r3, r3, #4
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	4b74      	ldr	r3, [pc, #464]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a73      	ldr	r2, [pc, #460]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
 8006360:	e00b      	b.n	800637a <HAL_RCC_OscConfig+0x32a>
 8006362:	4b71      	ldr	r3, [pc, #452]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a70      	ldr	r2, [pc, #448]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	4b6e      	ldr	r3, [pc, #440]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	4a6d      	ldr	r2, [pc, #436]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006374:	f023 0304 	bic.w	r3, r3, #4
 8006378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d015      	beq.n	80063ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006382:	f7fd fc3b 	bl	8003bfc <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006388:	e00a      	b.n	80063a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800638a:	f7fd fc37 	bl	8003bfc <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	f241 3288 	movw	r2, #5000	; 0x1388
 8006398:	4293      	cmp	r3, r2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e0bc      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a0:	4b61      	ldr	r3, [pc, #388]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ee      	beq.n	800638a <HAL_RCC_OscConfig+0x33a>
 80063ac:	e014      	b.n	80063d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ae:	f7fd fc25 	bl	8003bfc <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b4:	e00a      	b.n	80063cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b6:	f7fd fc21 	bl	8003bfc <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e0a6      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063cc:	4b56      	ldr	r3, [pc, #344]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ee      	bne.n	80063b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d105      	bne.n	80063ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063de:	4b52      	ldr	r3, [pc, #328]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	4a51      	ldr	r2, [pc, #324]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80063e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8092 	beq.w	8006518 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063f4:	4b4c      	ldr	r3, [pc, #304]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d05c      	beq.n	80064ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d141      	bne.n	800648c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006408:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCC_OscConfig+0x4dc>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640e:	f7fd fbf5 	bl	8003bfc <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006416:	f7fd fbf1 	bl	8003bfc <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e078      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f0      	bne.n	8006416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	019b      	lsls	r3, r3, #6
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	3b01      	subs	r3, #1
 800644e:	041b      	lsls	r3, r3, #16
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	061b      	lsls	r3, r3, #24
 8006458:	4933      	ldr	r1, [pc, #204]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645e:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_RCC_OscConfig+0x4dc>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006464:	f7fd fbca 	bl	8003bfc <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646c:	f7fd fbc6 	bl	8003bfc <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e04d      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x41c>
 800648a:	e045      	b.n	8006518 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648c:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_RCC_OscConfig+0x4dc>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006492:	f7fd fbb3 	bl	8003bfc <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649a:	f7fd fbaf 	bl	8003bfc <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e036      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ac:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f0      	bne.n	800649a <HAL_RCC_OscConfig+0x44a>
 80064b8:	e02e      	b.n	8006518 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e029      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064c6:	4b18      	ldr	r3, [pc, #96]	; (8006528 <HAL_RCC_OscConfig+0x4d8>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d11c      	bne.n	8006514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d115      	bne.n	8006514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064ee:	4013      	ands	r3, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10d      	bne.n	8006514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d106      	bne.n	8006514 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40007000 	.word	0x40007000
 8006528:	40023800 	.word	0x40023800
 800652c:	42470060 	.word	0x42470060

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0cc      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006544:	4b68      	ldr	r3, [pc, #416]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90c      	bls.n	800656c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b65      	ldr	r3, [pc, #404]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b63      	ldr	r3, [pc, #396]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0b8      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006584:	4b59      	ldr	r3, [pc, #356]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a58      	ldr	r2, [pc, #352]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800658e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800659c:	4b53      	ldr	r3, [pc, #332]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a52      	ldr	r2, [pc, #328]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b50      	ldr	r3, [pc, #320]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	494d      	ldr	r1, [pc, #308]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b47      	ldr	r3, [pc, #284]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	4b3b      	ldr	r3, [pc, #236]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e067      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b37      	ldr	r3, [pc, #220]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4934      	ldr	r1, [pc, #208]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006620:	f7fd faec 	bl	8003bfc <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fd fae8 	bl	8003bfc <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	; 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e04f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b2b      	ldr	r3, [pc, #172]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20c      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e032      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4916      	ldr	r1, [pc, #88]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	490e      	ldr	r1, [pc, #56]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066b6:	f000 f821 	bl	80066fc <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490a      	ldr	r1, [pc, #40]	; (80066f0 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd fa4c 	bl	8003b74 <HAL_InitTick>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00
 80066ec:	40023800 	.word	0x40023800
 80066f0:	080112d8 	.word	0x080112d8
 80066f4:	20000464 	.word	0x20000464
 80066f8:	20000468 	.word	0x20000468

080066fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	2300      	movs	r3, #0
 800670e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006714:	4b67      	ldr	r3, [pc, #412]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d00d      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x40>
 8006720:	2b08      	cmp	r3, #8
 8006722:	f200 80bd 	bhi.w	80068a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x34>
 800672a:	2b04      	cmp	r3, #4
 800672c:	d003      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0x3a>
 800672e:	e0b7      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006732:	60bb      	str	r3, [r7, #8]
       break;
 8006734:	e0b7      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006736:	4b61      	ldr	r3, [pc, #388]	; (80068bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006738:	60bb      	str	r3, [r7, #8]
      break;
 800673a:	e0b4      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800673c:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006744:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006746:	4b5b      	ldr	r3, [pc, #364]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d04d      	beq.n	80067ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006752:	4b58      	ldr	r3, [pc, #352]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	461a      	mov	r2, r3
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006762:	f04f 0100 	mov.w	r1, #0
 8006766:	ea02 0800 	and.w	r8, r2, r0
 800676a:	ea03 0901 	and.w	r9, r3, r1
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	014b      	lsls	r3, r1, #5
 800677c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006780:	0142      	lsls	r2, r0, #5
 8006782:	4610      	mov	r0, r2
 8006784:	4619      	mov	r1, r3
 8006786:	ebb0 0008 	subs.w	r0, r0, r8
 800678a:	eb61 0109 	sbc.w	r1, r1, r9
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	018b      	lsls	r3, r1, #6
 8006798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800679c:	0182      	lsls	r2, r0, #6
 800679e:	1a12      	subs	r2, r2, r0
 80067a0:	eb63 0301 	sbc.w	r3, r3, r1
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f04f 0100 	mov.w	r1, #0
 80067ac:	00d9      	lsls	r1, r3, #3
 80067ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b2:	00d0      	lsls	r0, r2, #3
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	eb12 0208 	adds.w	r2, r2, r8
 80067bc:	eb43 0309 	adc.w	r3, r3, r9
 80067c0:	f04f 0000 	mov.w	r0, #0
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	0259      	lsls	r1, r3, #9
 80067ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80067ce:	0250      	lsls	r0, r2, #9
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	f7fa fa52 	bl	8000c88 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e04a      	b.n	8006884 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	461a      	mov	r2, r3
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067fe:	f04f 0100 	mov.w	r1, #0
 8006802:	ea02 0400 	and.w	r4, r2, r0
 8006806:	ea03 0501 	and.w	r5, r3, r1
 800680a:	4620      	mov	r0, r4
 800680c:	4629      	mov	r1, r5
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	014b      	lsls	r3, r1, #5
 8006818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800681c:	0142      	lsls	r2, r0, #5
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	1b00      	subs	r0, r0, r4
 8006824:	eb61 0105 	sbc.w	r1, r1, r5
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	018b      	lsls	r3, r1, #6
 8006832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006836:	0182      	lsls	r2, r0, #6
 8006838:	1a12      	subs	r2, r2, r0
 800683a:	eb63 0301 	sbc.w	r3, r3, r1
 800683e:	f04f 0000 	mov.w	r0, #0
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	00d9      	lsls	r1, r3, #3
 8006848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800684c:	00d0      	lsls	r0, r2, #3
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	1912      	adds	r2, r2, r4
 8006854:	eb45 0303 	adc.w	r3, r5, r3
 8006858:	f04f 0000 	mov.w	r0, #0
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	0299      	lsls	r1, r3, #10
 8006862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006866:	0290      	lsls	r0, r2, #10
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4610      	mov	r0, r2
 800686e:	4619      	mov	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	461a      	mov	r2, r3
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	f7fa fa06 	bl	8000c88 <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4613      	mov	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	0c1b      	lsrs	r3, r3, #16
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	3301      	adds	r3, #1
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	60bb      	str	r3, [r7, #8]
      break;
 800689e:	e002      	b.n	80068a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068a2:	60bb      	str	r3, [r7, #8]
      break;
 80068a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a6:	68bb      	ldr	r3, [r7, #8]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068b2:	bf00      	nop
 80068b4:	40023800 	.word	0x40023800
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	007a1200 	.word	0x007a1200

080068c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068c6:	681b      	ldr	r3, [r3, #0]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000464 	.word	0x20000464

080068d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068dc:	f7ff fff0 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	0a9b      	lsrs	r3, r3, #10
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4903      	ldr	r1, [pc, #12]	; (80068fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	080112e8 	.word	0x080112e8

08006900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006904:	f7ff ffdc 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8006908:	4602      	mov	r2, r0
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	0b5b      	lsrs	r3, r3, #13
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	4903      	ldr	r1, [pc, #12]	; (8006924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006916:	5ccb      	ldrb	r3, [r1, r3]
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40023800 	.word	0x40023800
 8006924:	080112e8 	.word	0x080112e8

08006928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e056      	b.n	80069e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fc fc0b 	bl	8003170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006970:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	ea42 0103 	orr.w	r1, r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	f003 0104 	and.w	r1, r3, #4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0c:	d112      	bne.n	8006a34 <HAL_SPI_Receive+0x44>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10e      	bne.n	8006a34 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f8e9 	bl	8006c02 <HAL_SPI_TransmitReceive>
 8006a30:	4603      	mov	r3, r0
 8006a32:	e0e2      	b.n	8006bfa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_SPI_Receive+0x52>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e0db      	b.n	8006bfa <HAL_SPI_Receive+0x20a>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a4a:	f7fd f8d7 	bl	8003bfc <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d002      	beq.n	8006a62 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a60:	e0c2      	b.n	8006be8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_SPI_Receive+0x7e>
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a72:	e0b9      	b.n	8006be8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2204      	movs	r2, #4
 8006a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aba:	d107      	bne.n	8006acc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d007      	beq.n	8006aea <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d162      	bne.n	8006bb8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006af2:	e02e      	b.n	8006b52 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d115      	bne.n	8006b2e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f103 020c 	add.w	r2, r3, #12
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b2c:	e011      	b.n	8006b52 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b2e:	f7fd f865 	bl	8003bfc <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d803      	bhi.n	8006b46 <HAL_SPI_Receive+0x156>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d102      	bne.n	8006b4c <HAL_SPI_Receive+0x15c>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b50:	e04a      	b.n	8006be8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1cb      	bne.n	8006af4 <HAL_SPI_Receive+0x104>
 8006b5c:	e031      	b.n	8006bc2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d113      	bne.n	8006b94 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	b292      	uxth	r2, r2
 8006b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b92:	e011      	b.n	8006bb8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b94:	f7fd f832 	bl	8003bfc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d803      	bhi.n	8006bac <HAL_SPI_Receive+0x1bc>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d102      	bne.n	8006bb2 <HAL_SPI_Receive+0x1c2>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006bb6:	e017      	b.n	8006be8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1cd      	bne.n	8006b5e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa27 	bl	800701a <SPI_EndRxTransaction>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
 8006be4:	e000      	b.n	8006be8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08c      	sub	sp, #48	; 0x30
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c10:	2301      	movs	r3, #1
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x26>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e18a      	b.n	8006f3e <HAL_SPI_TransmitReceive+0x33c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c30:	f7fc ffe4 	bl	8003bfc <HAL_GetTick>
 8006c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d00f      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0x70>
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c58:	d107      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x68>
 8006c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d003      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c70:	e15b      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x82>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x82>
 8006c7e:	887b      	ldrh	r3, [r7, #2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c8a:	e14e      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d003      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	887a      	ldrh	r2, [r7, #2]
 8006cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	887a      	ldrh	r2, [r7, #2]
 8006cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	887a      	ldrh	r2, [r7, #2]
 8006cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d007      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d178      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x10a>
 8006d06:	8b7b      	ldrh	r3, [r7, #26]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d166      	bne.n	8006dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d30:	e053      	b.n	8006dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d11b      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x176>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x176>
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d113      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	1c9a      	adds	r2, r3, #2
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d119      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x1b8>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d014      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	1c9a      	adds	r2, r3, #2
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006db6:	2301      	movs	r3, #1
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dba:	f7fc ff1f 	bl	8003bfc <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d807      	bhi.n	8006dda <HAL_SPI_TransmitReceive+0x1d8>
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d003      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dd8:	e0a7      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1a6      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x130>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1a1      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x130>
 8006dee:	e07c      	b.n	8006eea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x1fc>
 8006df8:	8b7b      	ldrh	r3, [r7, #26]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d16b      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e24:	e057      	b.n	8006ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d11c      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x26c>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x26c>
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d114      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x2ae>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eac:	2301      	movs	r3, #1
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006eb0:	f7fc fea4 	bl	8003bfc <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d803      	bhi.n	8006ec8 <HAL_SPI_TransmitReceive+0x2c6>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x2cc>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ed4:	e029      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1a2      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x224>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d19d      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f8f8 	bl	80070e4 <SPI_EndRxTxTransaction>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d006      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f06:	e010      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3730      	adds	r7, #48	; 0x30
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f56:	e04c      	b.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d048      	beq.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f60:	f7fc fe4c 	bl	8003bfc <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d902      	bls.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d13d      	bne.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f8e:	d111      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f98:	d004      	beq.n	8006fa4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa2:	d107      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbc:	d10f      	bne.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d1a3      	bne.n	8006f58 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af02      	add	r7, sp, #8
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800702e:	d111      	bne.n	8007054 <SPI_EndRxTransaction+0x3a>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007038:	d004      	beq.n	8007044 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007042:	d107      	bne.n	8007054 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007052:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800705c:	d12a      	bne.n	80070b4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007066:	d012      	beq.n	800708e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff ff67 	bl	8006f46 <SPI_WaitFlagStateUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02d      	beq.n	80070da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e026      	b.n	80070dc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	2101      	movs	r1, #1
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ff54 	bl	8006f46 <SPI_WaitFlagStateUntilTimeout>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01a      	beq.n	80070da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e013      	b.n	80070dc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	2101      	movs	r1, #1
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff ff41 	bl	8006f46 <SPI_WaitFlagStateUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	f043 0220 	orr.w	r2, r3, #32
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e000      	b.n	80070dc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070f0:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <SPI_EndRxTxTransaction+0x7c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <SPI_EndRxTxTransaction+0x80>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	0d5b      	lsrs	r3, r3, #21
 80070fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710e:	d112      	bne.n	8007136 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	2180      	movs	r1, #128	; 0x80
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff13 	bl	8006f46 <SPI_WaitFlagStateUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e00f      	b.n	8007156 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3b01      	subs	r3, #1
 8007140:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d0f2      	beq.n	8007136 <SPI_EndRxTxTransaction+0x52>
 8007150:	e000      	b.n	8007154 <SPI_EndRxTxTransaction+0x70>
        break;
 8007152:	bf00      	nop
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000464 	.word	0x20000464
 8007164:	165e9f81 	.word	0x165e9f81

08007168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e01d      	b.n	80071b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fc f886 	bl	80032a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f000 fc44 	bl	8007a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0201 	orr.w	r2, r2, #1
 80071d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e01d      	b.n	8007254 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f815 	bl	800725c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f000 fbf5 	bl	8007a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2201      	movs	r2, #1
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fec0 	bl	8008008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <HAL_TIM_PWM_Start+0x74>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIM_PWM_Start+0x2c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a14      	ldr	r2, [pc, #80]	; (80072e8 <HAL_TIM_PWM_Start+0x78>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <HAL_TIM_PWM_Start+0x30>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_TIM_PWM_Start+0x32>
 80072a0:	2300      	movs	r3, #0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d007      	beq.n	80072d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40010400 	.word	0x40010400

080072ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fe82 	bl	8008008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a22      	ldr	r2, [pc, #136]	; (8007394 <HAL_TIM_PWM_Stop+0xa8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_TIM_PWM_Stop+0x2c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a21      	ldr	r2, [pc, #132]	; (8007398 <HAL_TIM_PWM_Stop+0xac>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d101      	bne.n	800731c <HAL_TIM_PWM_Stop+0x30>
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_TIM_PWM_Stop+0x32>
 800731c:	2300      	movs	r3, #0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d017      	beq.n	8007352 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	f241 1311 	movw	r3, #4369	; 0x1111
 800732c:	4013      	ands	r3, r2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <HAL_TIM_PWM_Stop+0x66>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a1a      	ldr	r2, [r3, #32]
 8007338:	f240 4344 	movw	r3, #1092	; 0x444
 800733c:	4013      	ands	r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <HAL_TIM_PWM_Stop+0x66>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	f241 1311 	movw	r3, #4369	; 0x1111
 800735c:	4013      	ands	r3, r2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10f      	bne.n	8007382 <HAL_TIM_PWM_Stop+0x96>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6a1a      	ldr	r2, [r3, #32]
 8007368:	f240 4344 	movw	r3, #1092	; 0x444
 800736c:	4013      	ands	r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d107      	bne.n	8007382 <HAL_TIM_PWM_Stop+0x96>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40010000 	.word	0x40010000
 8007398:	40010400 	.word	0x40010400

0800739c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e083      	b.n	80074b8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fb ff1b 	bl	8003200 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e0:	f023 0307 	bic.w	r3, r3, #7
 80073e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 fb1f 	bl	8007a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4313      	orrs	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800743c:	f023 030c 	bic.w	r3, r3, #12
 8007440:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	4313      	orrs	r3, r2
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	031b      	lsls	r3, r3, #12
 800746c:	4313      	orrs	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800747a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	4313      	orrs	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa78 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa6a 	bl	80079e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa7b 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b04      	cmp	r3, #4
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0204 	mvn.w	r2, #4
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa4e 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa40 	bl	80079e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa51 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b08      	cmp	r3, #8
 800757c:	d122      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d11b      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0208 	mvn.w	r2, #8
 8007594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2204      	movs	r2, #4
 800759a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa24 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 80075b0:	e005      	b.n	80075be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa16 	bl	80079e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa27 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d122      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d11b      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9fa 	bl	80079f8 <HAL_TIM_IC_CaptureCallback>
 8007604:	e005      	b.n	8007612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9ec 	bl	80079e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9fd 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10e      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d107      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0201 	mvn.w	r2, #1
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb f884 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d10e      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d107      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fd78 	bl	8008160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d10e      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d107      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9c2 	bl	8007a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d10e      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d107      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0220 	mvn.w	r2, #32
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fd42 	bl	800814c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e0b4      	b.n	8007854 <HAL_TIM_PWM_ConfigChannel+0x184>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	f200 809f 	bhi.w	8007840 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	0800773d 	.word	0x0800773d
 800770c:	08007841 	.word	0x08007841
 8007710:	08007841 	.word	0x08007841
 8007714:	08007841 	.word	0x08007841
 8007718:	0800777d 	.word	0x0800777d
 800771c:	08007841 	.word	0x08007841
 8007720:	08007841 	.word	0x08007841
 8007724:	08007841 	.word	0x08007841
 8007728:	080077bf 	.word	0x080077bf
 800772c:	08007841 	.word	0x08007841
 8007730:	08007841 	.word	0x08007841
 8007734:	08007841 	.word	0x08007841
 8007738:	080077ff 	.word	0x080077ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fa16 	bl	8007b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0204 	bic.w	r2, r2, #4
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	619a      	str	r2, [r3, #24]
      break;
 800777a:	e062      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fa66 	bl	8007c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	021a      	lsls	r2, r3, #8
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	619a      	str	r2, [r3, #24]
      break;
 80077bc:	e041      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fabb 	bl	8007d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0208 	orr.w	r2, r2, #8
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0204 	bic.w	r2, r2, #4
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	61da      	str	r2, [r3, #28]
      break;
 80077fc:	e021      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fb0f 	bl	8007e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	021a      	lsls	r2, r3, #8
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
      break;
 800783e:	e000      	b.n	8007842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007840:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_TIM_ConfigClockSource+0x18>
 8007870:	2302      	movs	r3, #2
 8007872:	e0b3      	b.n	80079dc <HAL_TIM_ConfigClockSource+0x180>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800789a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ac:	d03e      	beq.n	800792c <HAL_TIM_ConfigClockSource+0xd0>
 80078ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b2:	f200 8087 	bhi.w	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ba:	f000 8085 	beq.w	80079c8 <HAL_TIM_ConfigClockSource+0x16c>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	d87f      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078c4:	2b70      	cmp	r3, #112	; 0x70
 80078c6:	d01a      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0xa2>
 80078c8:	2b70      	cmp	r3, #112	; 0x70
 80078ca:	d87b      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078cc:	2b60      	cmp	r3, #96	; 0x60
 80078ce:	d050      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x116>
 80078d0:	2b60      	cmp	r3, #96	; 0x60
 80078d2:	d877      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078d4:	2b50      	cmp	r3, #80	; 0x50
 80078d6:	d03c      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0xf6>
 80078d8:	2b50      	cmp	r3, #80	; 0x50
 80078da:	d873      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d058      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x136>
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d86f      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078e4:	2b30      	cmp	r3, #48	; 0x30
 80078e6:	d064      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x156>
 80078e8:	2b30      	cmp	r3, #48	; 0x30
 80078ea:	d86b      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d060      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x156>
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d867      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d05c      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x156>
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d05a      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078fc:	e062      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6899      	ldr	r1, [r3, #8]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f000 fb5b 	bl	8007fc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007920:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	609a      	str	r2, [r3, #8]
      break;
 800792a:	e04e      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f000 fb44 	bl	8007fc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800794e:	609a      	str	r2, [r3, #8]
      break;
 8007950:	e03b      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 fab8 	bl	8007ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2150      	movs	r1, #80	; 0x50
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fb11 	bl	8007f92 <TIM_ITRx_SetConfig>
      break;
 8007970:	e02b      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	461a      	mov	r2, r3
 8007980:	f000 fad7 	bl	8007f32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2160      	movs	r1, #96	; 0x60
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb01 	bl	8007f92 <TIM_ITRx_SetConfig>
      break;
 8007990:	e01b      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	461a      	mov	r2, r3
 80079a0:	f000 fa98 	bl	8007ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2140      	movs	r1, #64	; 0x40
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 faf1 	bl	8007f92 <TIM_ITRx_SetConfig>
      break;
 80079b0:	e00b      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f000 fae8 	bl	8007f92 <TIM_ITRx_SetConfig>
      break;
 80079c2:	e002      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a40      	ldr	r2, [pc, #256]	; (8007b48 <TIM_Base_SetConfig+0x114>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a52:	d00f      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3d      	ldr	r2, [pc, #244]	; (8007b4c <TIM_Base_SetConfig+0x118>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00b      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3c      	ldr	r2, [pc, #240]	; (8007b50 <TIM_Base_SetConfig+0x11c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d007      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a3b      	ldr	r2, [pc, #236]	; (8007b54 <TIM_Base_SetConfig+0x120>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3a      	ldr	r2, [pc, #232]	; (8007b58 <TIM_Base_SetConfig+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d108      	bne.n	8007a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <TIM_Base_SetConfig+0x114>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d02b      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a94:	d027      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2c      	ldr	r2, [pc, #176]	; (8007b4c <TIM_Base_SetConfig+0x118>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d023      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2b      	ldr	r2, [pc, #172]	; (8007b50 <TIM_Base_SetConfig+0x11c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01f      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2a      	ldr	r2, [pc, #168]	; (8007b54 <TIM_Base_SetConfig+0x120>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d01b      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a29      	ldr	r2, [pc, #164]	; (8007b58 <TIM_Base_SetConfig+0x124>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d017      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a28      	ldr	r2, [pc, #160]	; (8007b5c <TIM_Base_SetConfig+0x128>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a27      	ldr	r2, [pc, #156]	; (8007b60 <TIM_Base_SetConfig+0x12c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a26      	ldr	r2, [pc, #152]	; (8007b64 <TIM_Base_SetConfig+0x130>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a25      	ldr	r2, [pc, #148]	; (8007b68 <TIM_Base_SetConfig+0x134>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a24      	ldr	r2, [pc, #144]	; (8007b6c <TIM_Base_SetConfig+0x138>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a23      	ldr	r2, [pc, #140]	; (8007b70 <TIM_Base_SetConfig+0x13c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d108      	bne.n	8007af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a0a      	ldr	r2, [pc, #40]	; (8007b48 <TIM_Base_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_Base_SetConfig+0xf8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a0c      	ldr	r2, [pc, #48]	; (8007b58 <TIM_Base_SetConfig+0x124>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d103      	bne.n	8007b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	615a      	str	r2, [r3, #20]
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40010000 	.word	0x40010000
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40000c00 	.word	0x40000c00
 8007b58:	40010400 	.word	0x40010400
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	40014400 	.word	0x40014400
 8007b64:	40014800 	.word	0x40014800
 8007b68:	40001800 	.word	0x40001800
 8007b6c:	40001c00 	.word	0x40001c00
 8007b70:	40002000 	.word	0x40002000

08007b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f023 0302 	bic.w	r3, r3, #2
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a20      	ldr	r2, [pc, #128]	; (8007c4c <TIM_OC1_SetConfig+0xd8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC1_SetConfig+0x64>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <TIM_OC1_SetConfig+0xdc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d10c      	bne.n	8007bf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0308 	bic.w	r3, r3, #8
 8007bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f023 0304 	bic.w	r3, r3, #4
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <TIM_OC1_SetConfig+0xd8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_OC1_SetConfig+0x8e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <TIM_OC1_SetConfig+0xdc>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d111      	bne.n	8007c26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	621a      	str	r2, [r3, #32]
}
 8007c40:	bf00      	nop
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400

08007c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f023 0210 	bic.w	r2, r3, #16
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f023 0320 	bic.w	r3, r3, #32
 8007c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a22      	ldr	r2, [pc, #136]	; (8007d38 <TIM_OC2_SetConfig+0xe4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC2_SetConfig+0x68>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <TIM_OC2_SetConfig+0xe8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10d      	bne.n	8007cd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <TIM_OC2_SetConfig+0xe4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC2_SetConfig+0x94>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <TIM_OC2_SetConfig+0xe8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d113      	bne.n	8007d10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	621a      	str	r2, [r3, #32]
}
 8007d2a:	bf00      	nop
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40010400 	.word	0x40010400

08007d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <TIM_OC3_SetConfig+0xe0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d003      	beq.n	8007da6 <TIM_OC3_SetConfig+0x66>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <TIM_OC3_SetConfig+0xe4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d10d      	bne.n	8007dc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <TIM_OC3_SetConfig+0xe0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_OC3_SetConfig+0x92>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <TIM_OC3_SetConfig+0xe4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d113      	bne.n	8007dfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	621a      	str	r2, [r3, #32]
}
 8007e14:	bf00      	nop
 8007e16:	371c      	adds	r7, #28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40010400 	.word	0x40010400

08007e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	031b      	lsls	r3, r3, #12
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a12      	ldr	r2, [pc, #72]	; (8007ecc <TIM_OC4_SetConfig+0xa4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_OC4_SetConfig+0x68>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <TIM_OC4_SetConfig+0xa8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d109      	bne.n	8007ea4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	019b      	lsls	r3, r3, #6
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	40010000 	.word	0x40010000
 8007ed0:	40010400 	.word	0x40010400

08007ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 030a 	bic.w	r3, r3, #10
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f023 0210 	bic.w	r2, r3, #16
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	031b      	lsls	r3, r3, #12
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f043 0307 	orr.w	r3, r3, #7
 8007fb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	609a      	str	r2, [r3, #8]
}
 8007fbc:	bf00      	nop
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	021a      	lsls	r2, r3, #8
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	609a      	str	r2, [r3, #8]
}
 8007ffc:	bf00      	nop
 8007ffe:	371c      	adds	r7, #28
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2201      	movs	r2, #1
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	43db      	mvns	r3, r3
 800802a:	401a      	ands	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
	...

08008054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e05a      	b.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a21      	ldr	r2, [pc, #132]	; (8008130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d022      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d01d      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1d      	ldr	r2, [pc, #116]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1a      	ldr	r2, [pc, #104]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a18      	ldr	r2, [pc, #96]	; (8008140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d10c      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4313      	orrs	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40001800 	.word	0x40001800

0800814c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e03f      	b.n	8008206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fb f914 	bl	80033c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fb97 	bl	80088ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b088      	sub	sp, #32
 8008212:	af02      	add	r7, sp, #8
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b20      	cmp	r3, #32
 800822c:	f040 8083 	bne.w	8008336 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_UART_Transmit+0x2e>
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e07b      	b.n	8008338 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_UART_Transmit+0x40>
 800824a:	2302      	movs	r3, #2
 800824c:	e074      	b.n	8008338 <HAL_UART_Transmit+0x12a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2221      	movs	r2, #33	; 0x21
 8008260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008264:	f7fb fcca 	bl	8003bfc <HAL_GetTick>
 8008268:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800827e:	e042      	b.n	8008306 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008284:	b29b      	uxth	r3, r3
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008296:	d122      	bne.n	80082de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2200      	movs	r2, #0
 80082a0:	2180      	movs	r1, #128	; 0x80
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f9b6 	bl	8008614 <UART_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e042      	b.n	8008338 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3302      	adds	r3, #2
 80082d2:	60bb      	str	r3, [r7, #8]
 80082d4:	e017      	b.n	8008306 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3301      	adds	r3, #1
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	e013      	b.n	8008306 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f993 	bl	8008614 <UART_WaitOnFlagUntilTimeout>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e01f      	b.n	8008338 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	60ba      	str	r2, [r7, #8]
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1b7      	bne.n	8008280 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2200      	movs	r2, #0
 8008318:	2140      	movs	r1, #64	; 0x40
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f97a 	bl	8008614 <UART_WaitOnFlagUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e006      	b.n	8008338 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008336:	2302      	movs	r3, #2
  }
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b20      	cmp	r3, #32
 8008358:	d140      	bne.n	80083dc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_UART_Receive_IT+0x26>
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e039      	b.n	80083de <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_UART_Receive_IT+0x38>
 8008374:	2302      	movs	r3, #2
 8008376:	e032      	b.n	80083de <HAL_UART_Receive_IT+0x9e>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2222      	movs	r2, #34	; 0x22
 800839c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0201 	orr.w	r2, r2, #1
 80083c6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0220 	orr.w	r2, r2, #32
 80083d6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	e000      	b.n	80083de <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80083dc:	2302      	movs	r3, #2
  }
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10d      	bne.n	800843e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_UART_IRQHandler+0x52>
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9d6 	bl	80087e8 <UART_Receive_IT>
      return;
 800843c:	e0d0      	b.n	80085e0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80b0 	beq.w	80085a6 <HAL_UART_IRQHandler+0x1ba>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_UART_IRQHandler+0x70>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80a5 	beq.w	80085a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <HAL_UART_IRQHandler+0x90>
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	f043 0201 	orr.w	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f003 0304 	and.w	r3, r3, #4
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_UART_IRQHandler+0xb0>
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008494:	f043 0202 	orr.w	r2, r3, #2
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_UART_IRQHandler+0xd0>
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b4:	f043 0204 	orr.w	r2, r3, #4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00f      	beq.n	80084e6 <HAL_UART_IRQHandler+0xfa>
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <HAL_UART_IRQHandler+0xee>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084de:	f043 0208 	orr.w	r2, r3, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d077      	beq.n	80085de <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <HAL_UART_IRQHandler+0x11c>
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f970 	bl	80087e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <HAL_UART_IRQHandler+0x144>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d031      	beq.n	8008594 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8b9 	bl	80086a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d123      	bne.n	800858c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008552:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	2b00      	cmp	r3, #0
 800855a:	d013      	beq.n	8008584 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	4a21      	ldr	r2, [pc, #132]	; (80085e8 <HAL_UART_IRQHandler+0x1fc>)
 8008562:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008568:	4618      	mov	r0, r3
 800856a:	f7fb ff1c 	bl	80043a6 <HAL_DMA_Abort_IT>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d016      	beq.n	80085a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800857e:	4610      	mov	r0, r2
 8008580:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008582:	e00e      	b.n	80085a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f83b 	bl	8008600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858a:	e00a      	b.n	80085a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f837 	bl	8008600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008592:	e006      	b.n	80085a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f833 	bl	8008600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80085a0:	e01d      	b.n	80085de <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a2:	bf00      	nop
    return;
 80085a4:	e01b      	b.n	80085de <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <HAL_UART_IRQHandler+0x1d6>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8a6 	bl	800870c <UART_Transmit_IT>
    return;
 80085c0:	e00e      	b.n	80085e0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <HAL_UART_IRQHandler+0x1f4>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f8ee 	bl	80087b8 <UART_EndTransmit_IT>
    return;
 80085dc:	e000      	b.n	80085e0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80085de:	bf00      	nop
  }
}
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	080086e5 	.word	0x080086e5

080085ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	4613      	mov	r3, r2
 8008622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008624:	e02c      	b.n	8008680 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862c:	d028      	beq.n	8008680 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d007      	beq.n	8008644 <UART_WaitOnFlagUntilTimeout+0x30>
 8008634:	f7fb fae2 	bl	8003bfc <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	429a      	cmp	r2, r3
 8008642:	d21d      	bcs.n	8008680 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008652:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695a      	ldr	r2, [r3, #20]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e00f      	b.n	80086a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4013      	ands	r3, r2
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	bf0c      	ite	eq
 8008690:	2301      	moveq	r3, #1
 8008692:	2300      	movne	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	429a      	cmp	r2, r3
 800869c:	d0c3      	beq.n	8008626 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0201 	bic.w	r2, r2, #1
 80086ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff ff7e 	bl	8008600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b21      	cmp	r3, #33	; 0x21
 800871e:	d144      	bne.n	80087aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008728:	d11a      	bne.n	8008760 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800873e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	621a      	str	r2, [r3, #32]
 8008752:	e00e      	b.n	8008772 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	621a      	str	r2, [r3, #32]
 800875e:	e008      	b.n	8008772 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	1c59      	adds	r1, r3, #1
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6211      	str	r1, [r2, #32]
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29b      	uxth	r3, r3
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4619      	mov	r1, r3
 8008780:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008794:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff07 	bl	80085ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b22      	cmp	r3, #34	; 0x22
 80087fa:	d171      	bne.n	80088e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008804:	d123      	bne.n	800884e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10e      	bne.n	8008832 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	1c9a      	adds	r2, r3, #2
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	629a      	str	r2, [r3, #40]	; 0x28
 8008830:	e029      	b.n	8008886 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	b29b      	uxth	r3, r3
 800883a:	b2db      	uxtb	r3, r3
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	629a      	str	r2, [r3, #40]	; 0x28
 800884c:	e01b      	b.n	8008886 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6858      	ldr	r0, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6291      	str	r1, [r2, #40]	; 0x28
 8008866:	b2c2      	uxtb	r2, r0
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e00c      	b.n	8008886 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	b2da      	uxtb	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	1c58      	adds	r0, r3, #1
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	6288      	str	r0, [r1, #40]	; 0x28
 800887e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29b      	uxth	r3, r3
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4619      	mov	r1, r3
 8008894:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008896:	2b00      	cmp	r3, #0
 8008898:	d120      	bne.n	80088dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0220 	bic.w	r2, r2, #32
 80088a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0201 	bic.w	r2, r2, #1
 80088c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7f8 fda8 	bl	8001428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	e002      	b.n	80088e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	e000      	b.n	80088e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80088e0:	2302      	movs	r3, #2
  }
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	b0bd      	sub	sp, #244	; 0xf4
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008908:	68d9      	ldr	r1, [r3, #12]
 800890a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	ea40 0301 	orr.w	r3, r0, r1
 8008914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	431a      	orrs	r2, r3
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	431a      	orrs	r2, r3
 800892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008944:	f021 010c 	bic.w	r1, r1, #12
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008952:	430b      	orrs	r3, r1
 8008954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008966:	6999      	ldr	r1, [r3, #24]
 8008968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	ea40 0301 	orr.w	r3, r0, r1
 8008972:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897e:	f040 81a5 	bne.w	8008ccc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4bcd      	ldr	r3, [pc, #820]	; (8008cc0 <UART_SetConfig+0x3d4>)
 800898a:	429a      	cmp	r2, r3
 800898c:	d006      	beq.n	800899c <UART_SetConfig+0xb0>
 800898e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4bcb      	ldr	r3, [pc, #812]	; (8008cc4 <UART_SetConfig+0x3d8>)
 8008996:	429a      	cmp	r2, r3
 8008998:	f040 80cb 	bne.w	8008b32 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800899c:	f7fd ffb0 	bl	8006900 <HAL_RCC_GetPCLK2Freq>
 80089a0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089a8:	461c      	mov	r4, r3
 80089aa:	f04f 0500 	mov.w	r5, #0
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	1891      	adds	r1, r2, r2
 80089b4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80089b8:	415b      	adcs	r3, r3
 80089ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80089c2:	1912      	adds	r2, r2, r4
 80089c4:	eb45 0303 	adc.w	r3, r5, r3
 80089c8:	f04f 0000 	mov.w	r0, #0
 80089cc:	f04f 0100 	mov.w	r1, #0
 80089d0:	00d9      	lsls	r1, r3, #3
 80089d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089d6:	00d0      	lsls	r0, r2, #3
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	1911      	adds	r1, r2, r4
 80089de:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80089e2:	416b      	adcs	r3, r5
 80089e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	1891      	adds	r1, r2, r2
 80089f6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80089fa:	415b      	adcs	r3, r3
 80089fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a00:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008a04:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008a08:	f7f8 f93e 	bl	8000c88 <__aeabi_uldivmod>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4bad      	ldr	r3, [pc, #692]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008a12:	fba3 2302 	umull	r2, r3, r3, r2
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	011e      	lsls	r6, r3, #4
 8008a1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a1e:	461c      	mov	r4, r3
 8008a20:	f04f 0500 	mov.w	r5, #0
 8008a24:	4622      	mov	r2, r4
 8008a26:	462b      	mov	r3, r5
 8008a28:	1891      	adds	r1, r2, r2
 8008a2a:	67b9      	str	r1, [r7, #120]	; 0x78
 8008a2c:	415b      	adcs	r3, r3
 8008a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008a34:	1912      	adds	r2, r2, r4
 8008a36:	eb45 0303 	adc.w	r3, r5, r3
 8008a3a:	f04f 0000 	mov.w	r0, #0
 8008a3e:	f04f 0100 	mov.w	r1, #0
 8008a42:	00d9      	lsls	r1, r3, #3
 8008a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a48:	00d0      	lsls	r0, r2, #3
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	1911      	adds	r1, r2, r4
 8008a50:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008a54:	416b      	adcs	r3, r5
 8008a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	461a      	mov	r2, r3
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	1891      	adds	r1, r2, r2
 8008a68:	6739      	str	r1, [r7, #112]	; 0x70
 8008a6a:	415b      	adcs	r3, r3
 8008a6c:	677b      	str	r3, [r7, #116]	; 0x74
 8008a6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008a72:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008a76:	f7f8 f907 	bl	8000c88 <__aeabi_uldivmod>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4b92      	ldr	r3, [pc, #584]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008a80:	fba3 1302 	umull	r1, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	2164      	movs	r1, #100	; 0x64
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	3332      	adds	r3, #50	; 0x32
 8008a92:	4a8d      	ldr	r2, [pc, #564]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008a94:	fba2 2303 	umull	r2, r3, r2, r3
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008aa0:	441e      	add	r6, r3
 8008aa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f04f 0100 	mov.w	r1, #0
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	1894      	adds	r4, r2, r2
 8008ab2:	66bc      	str	r4, [r7, #104]	; 0x68
 8008ab4:	415b      	adcs	r3, r3
 8008ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ab8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008abc:	1812      	adds	r2, r2, r0
 8008abe:	eb41 0303 	adc.w	r3, r1, r3
 8008ac2:	f04f 0400 	mov.w	r4, #0
 8008ac6:	f04f 0500 	mov.w	r5, #0
 8008aca:	00dd      	lsls	r5, r3, #3
 8008acc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ad0:	00d4      	lsls	r4, r2, #3
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	1814      	adds	r4, r2, r0
 8008ad8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008adc:	414b      	adcs	r3, r1
 8008ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	1891      	adds	r1, r2, r2
 8008af0:	6639      	str	r1, [r7, #96]	; 0x60
 8008af2:	415b      	adcs	r3, r3
 8008af4:	667b      	str	r3, [r7, #100]	; 0x64
 8008af6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008afe:	f7f8 f8c3 	bl	8000c88 <__aeabi_uldivmod>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4b70      	ldr	r3, [pc, #448]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008b08:	fba3 1302 	umull	r1, r3, r3, r2
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	2164      	movs	r1, #100	; 0x64
 8008b10:	fb01 f303 	mul.w	r3, r1, r3
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	3332      	adds	r3, #50	; 0x32
 8008b1a:	4a6b      	ldr	r2, [pc, #428]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	f003 0207 	and.w	r2, r3, #7
 8008b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4432      	add	r2, r6
 8008b2e:	609a      	str	r2, [r3, #8]
 8008b30:	e26d      	b.n	800900e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b32:	f7fd fed1 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8008b36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b3e:	461c      	mov	r4, r3
 8008b40:	f04f 0500 	mov.w	r5, #0
 8008b44:	4622      	mov	r2, r4
 8008b46:	462b      	mov	r3, r5
 8008b48:	1891      	adds	r1, r2, r2
 8008b4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b4c:	415b      	adcs	r3, r3
 8008b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b54:	1912      	adds	r2, r2, r4
 8008b56:	eb45 0303 	adc.w	r3, r5, r3
 8008b5a:	f04f 0000 	mov.w	r0, #0
 8008b5e:	f04f 0100 	mov.w	r1, #0
 8008b62:	00d9      	lsls	r1, r3, #3
 8008b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b68:	00d0      	lsls	r0, r2, #3
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	1911      	adds	r1, r2, r4
 8008b70:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008b74:	416b      	adcs	r3, r5
 8008b76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	461a      	mov	r2, r3
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	1891      	adds	r1, r2, r2
 8008b88:	6539      	str	r1, [r7, #80]	; 0x50
 8008b8a:	415b      	adcs	r3, r3
 8008b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008b96:	f7f8 f877 	bl	8000c88 <__aeabi_uldivmod>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4b4a      	ldr	r3, [pc, #296]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ba4:	095b      	lsrs	r3, r3, #5
 8008ba6:	011e      	lsls	r6, r3, #4
 8008ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bac:	461c      	mov	r4, r3
 8008bae:	f04f 0500 	mov.w	r5, #0
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	1891      	adds	r1, r2, r2
 8008bb8:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bba:	415b      	adcs	r3, r3
 8008bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bc2:	1912      	adds	r2, r2, r4
 8008bc4:	eb45 0303 	adc.w	r3, r5, r3
 8008bc8:	f04f 0000 	mov.w	r0, #0
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	00d9      	lsls	r1, r3, #3
 8008bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bd6:	00d0      	lsls	r0, r2, #3
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	1911      	adds	r1, r2, r4
 8008bde:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008be2:	416b      	adcs	r3, r5
 8008be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	6439      	str	r1, [r7, #64]	; 0x40
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008bfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008c04:	f7f8 f840 	bl	8000c88 <__aeabi_uldivmod>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4b2e      	ldr	r3, [pc, #184]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	2164      	movs	r1, #100	; 0x64
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	3332      	adds	r3, #50	; 0x32
 8008c20:	4a29      	ldr	r2, [pc, #164]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008c22:	fba2 2303 	umull	r2, r3, r2, r3
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c2e:	441e      	add	r6, r3
 8008c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c34:	4618      	mov	r0, r3
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	1894      	adds	r4, r2, r2
 8008c40:	63bc      	str	r4, [r7, #56]	; 0x38
 8008c42:	415b      	adcs	r3, r3
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c4a:	1812      	adds	r2, r2, r0
 8008c4c:	eb41 0303 	adc.w	r3, r1, r3
 8008c50:	f04f 0400 	mov.w	r4, #0
 8008c54:	f04f 0500 	mov.w	r5, #0
 8008c58:	00dd      	lsls	r5, r3, #3
 8008c5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c5e:	00d4      	lsls	r4, r2, #3
 8008c60:	4622      	mov	r2, r4
 8008c62:	462b      	mov	r3, r5
 8008c64:	1814      	adds	r4, r2, r0
 8008c66:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008c6a:	414b      	adcs	r3, r1
 8008c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	1891      	adds	r1, r2, r2
 8008c7e:	6339      	str	r1, [r7, #48]	; 0x30
 8008c80:	415b      	adcs	r3, r3
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
 8008c84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c88:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c8c:	f7f7 fffc 	bl	8000c88 <__aeabi_uldivmod>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008c96:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	2164      	movs	r1, #100	; 0x64
 8008c9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	3332      	adds	r3, #50	; 0x32
 8008ca8:	4a07      	ldr	r2, [pc, #28]	; (8008cc8 <UART_SetConfig+0x3dc>)
 8008caa:	fba2 2303 	umull	r2, r3, r2, r3
 8008cae:	095b      	lsrs	r3, r3, #5
 8008cb0:	f003 0207 	and.w	r2, r3, #7
 8008cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4432      	add	r2, r6
 8008cbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008cbe:	e1a6      	b.n	800900e <UART_SetConfig+0x722>
 8008cc0:	40011000 	.word	0x40011000
 8008cc4:	40011400 	.word	0x40011400
 8008cc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4bd1      	ldr	r3, [pc, #836]	; (8009018 <UART_SetConfig+0x72c>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d006      	beq.n	8008ce6 <UART_SetConfig+0x3fa>
 8008cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4bcf      	ldr	r3, [pc, #828]	; (800901c <UART_SetConfig+0x730>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	f040 80ca 	bne.w	8008e7a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ce6:	f7fd fe0b 	bl	8006900 <HAL_RCC_GetPCLK2Freq>
 8008cea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cf2:	461c      	mov	r4, r3
 8008cf4:	f04f 0500 	mov.w	r5, #0
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	1891      	adds	r1, r2, r2
 8008cfe:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d00:	415b      	adcs	r3, r3
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d08:	1912      	adds	r2, r2, r4
 8008d0a:	eb45 0303 	adc.w	r3, r5, r3
 8008d0e:	f04f 0000 	mov.w	r0, #0
 8008d12:	f04f 0100 	mov.w	r1, #0
 8008d16:	00d9      	lsls	r1, r3, #3
 8008d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d1c:	00d0      	lsls	r0, r2, #3
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	eb12 0a04 	adds.w	sl, r2, r4
 8008d26:	eb43 0b05 	adc.w	fp, r3, r5
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f04f 0100 	mov.w	r1, #0
 8008d36:	f04f 0200 	mov.w	r2, #0
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	008b      	lsls	r3, r1, #2
 8008d40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d44:	0082      	lsls	r2, r0, #2
 8008d46:	4650      	mov	r0, sl
 8008d48:	4659      	mov	r1, fp
 8008d4a:	f7f7 ff9d 	bl	8000c88 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4bb3      	ldr	r3, [pc, #716]	; (8009020 <UART_SetConfig+0x734>)
 8008d54:	fba3 2302 	umull	r2, r3, r3, r2
 8008d58:	095b      	lsrs	r3, r3, #5
 8008d5a:	011e      	lsls	r6, r3, #4
 8008d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d60:	4618      	mov	r0, r3
 8008d62:	f04f 0100 	mov.w	r1, #0
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	1894      	adds	r4, r2, r2
 8008d6c:	623c      	str	r4, [r7, #32]
 8008d6e:	415b      	adcs	r3, r3
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
 8008d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d76:	1812      	adds	r2, r2, r0
 8008d78:	eb41 0303 	adc.w	r3, r1, r3
 8008d7c:	f04f 0400 	mov.w	r4, #0
 8008d80:	f04f 0500 	mov.w	r5, #0
 8008d84:	00dd      	lsls	r5, r3, #3
 8008d86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d8a:	00d4      	lsls	r4, r2, #3
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	1814      	adds	r4, r2, r0
 8008d92:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008d96:	414b      	adcs	r3, r1
 8008d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f04f 0100 	mov.w	r1, #0
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	008b      	lsls	r3, r1, #2
 8008db2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008db6:	0082      	lsls	r2, r0, #2
 8008db8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008dbc:	f7f7 ff64 	bl	8000c88 <__aeabi_uldivmod>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4b96      	ldr	r3, [pc, #600]	; (8009020 <UART_SetConfig+0x734>)
 8008dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	2164      	movs	r1, #100	; 0x64
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	3332      	adds	r3, #50	; 0x32
 8008dd8:	4a91      	ldr	r2, [pc, #580]	; (8009020 <UART_SetConfig+0x734>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de4:	441e      	add	r6, r3
 8008de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dea:	4618      	mov	r0, r3
 8008dec:	f04f 0100 	mov.w	r1, #0
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	1894      	adds	r4, r2, r2
 8008df6:	61bc      	str	r4, [r7, #24]
 8008df8:	415b      	adcs	r3, r3
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e00:	1812      	adds	r2, r2, r0
 8008e02:	eb41 0303 	adc.w	r3, r1, r3
 8008e06:	f04f 0400 	mov.w	r4, #0
 8008e0a:	f04f 0500 	mov.w	r5, #0
 8008e0e:	00dd      	lsls	r5, r3, #3
 8008e10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e14:	00d4      	lsls	r4, r2, #3
 8008e16:	4622      	mov	r2, r4
 8008e18:	462b      	mov	r3, r5
 8008e1a:	1814      	adds	r4, r2, r0
 8008e1c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008e20:	414b      	adcs	r3, r1
 8008e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f04f 0100 	mov.w	r1, #0
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	008b      	lsls	r3, r1, #2
 8008e3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e40:	0082      	lsls	r2, r0, #2
 8008e42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008e46:	f7f7 ff1f 	bl	8000c88 <__aeabi_uldivmod>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4b74      	ldr	r3, [pc, #464]	; (8009020 <UART_SetConfig+0x734>)
 8008e50:	fba3 1302 	umull	r1, r3, r3, r2
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	2164      	movs	r1, #100	; 0x64
 8008e58:	fb01 f303 	mul.w	r3, r1, r3
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	3332      	adds	r3, #50	; 0x32
 8008e62:	4a6f      	ldr	r2, [pc, #444]	; (8009020 <UART_SetConfig+0x734>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4432      	add	r2, r6
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	e0c9      	b.n	800900e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e7a:	f7fd fd2d 	bl	80068d8 <HAL_RCC_GetPCLK1Freq>
 8008e7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e86:	461c      	mov	r4, r3
 8008e88:	f04f 0500 	mov.w	r5, #0
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	462b      	mov	r3, r5
 8008e90:	1891      	adds	r1, r2, r2
 8008e92:	6139      	str	r1, [r7, #16]
 8008e94:	415b      	adcs	r3, r3
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e9c:	1912      	adds	r2, r2, r4
 8008e9e:	eb45 0303 	adc.w	r3, r5, r3
 8008ea2:	f04f 0000 	mov.w	r0, #0
 8008ea6:	f04f 0100 	mov.w	r1, #0
 8008eaa:	00d9      	lsls	r1, r3, #3
 8008eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eb0:	00d0      	lsls	r0, r2, #3
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	eb12 0804 	adds.w	r8, r2, r4
 8008eba:	eb43 0905 	adc.w	r9, r3, r5
 8008ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	008b      	lsls	r3, r1, #2
 8008ed4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ed8:	0082      	lsls	r2, r0, #2
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fed3 	bl	8000c88 <__aeabi_uldivmod>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4b4e      	ldr	r3, [pc, #312]	; (8009020 <UART_SetConfig+0x734>)
 8008ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	011e      	lsls	r6, r3, #4
 8008ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f04f 0100 	mov.w	r1, #0
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	1894      	adds	r4, r2, r2
 8008f00:	60bc      	str	r4, [r7, #8]
 8008f02:	415b      	adcs	r3, r3
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f0a:	1812      	adds	r2, r2, r0
 8008f0c:	eb41 0303 	adc.w	r3, r1, r3
 8008f10:	f04f 0400 	mov.w	r4, #0
 8008f14:	f04f 0500 	mov.w	r5, #0
 8008f18:	00dd      	lsls	r5, r3, #3
 8008f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f1e:	00d4      	lsls	r4, r2, #3
 8008f20:	4622      	mov	r2, r4
 8008f22:	462b      	mov	r3, r5
 8008f24:	1814      	adds	r4, r2, r0
 8008f26:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008f2a:	414b      	adcs	r3, r1
 8008f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	008b      	lsls	r3, r1, #2
 8008f46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f4a:	0082      	lsls	r2, r0, #2
 8008f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f50:	f7f7 fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4b31      	ldr	r3, [pc, #196]	; (8009020 <UART_SetConfig+0x734>)
 8008f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	2164      	movs	r1, #100	; 0x64
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	3332      	adds	r3, #50	; 0x32
 8008f6c:	4a2c      	ldr	r2, [pc, #176]	; (8009020 <UART_SetConfig+0x734>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f78:	441e      	add	r6, r3
 8008f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f04f 0100 	mov.w	r1, #0
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	1894      	adds	r4, r2, r2
 8008f8a:	603c      	str	r4, [r7, #0]
 8008f8c:	415b      	adcs	r3, r3
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f94:	1812      	adds	r2, r2, r0
 8008f96:	eb41 0303 	adc.w	r3, r1, r3
 8008f9a:	f04f 0400 	mov.w	r4, #0
 8008f9e:	f04f 0500 	mov.w	r5, #0
 8008fa2:	00dd      	lsls	r5, r3, #3
 8008fa4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fa8:	00d4      	lsls	r4, r2, #3
 8008faa:	4622      	mov	r2, r4
 8008fac:	462b      	mov	r3, r5
 8008fae:	1814      	adds	r4, r2, r0
 8008fb0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f04f 0100 	mov.w	r1, #0
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	008b      	lsls	r3, r1, #2
 8008fd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fd4:	0082      	lsls	r2, r0, #2
 8008fd6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008fda:	f7f7 fe55 	bl	8000c88 <__aeabi_uldivmod>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <UART_SetConfig+0x734>)
 8008fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	2164      	movs	r1, #100	; 0x64
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	3332      	adds	r3, #50	; 0x32
 8008ff6:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <UART_SetConfig+0x734>)
 8008ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	f003 020f 	and.w	r2, r3, #15
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4432      	add	r2, r6
 800900a:	609a      	str	r2, [r3, #8]
}
 800900c:	e7ff      	b.n	800900e <UART_SetConfig+0x722>
 800900e:	bf00      	nop
 8009010:	37f4      	adds	r7, #244	; 0xf4
 8009012:	46bd      	mov	sp, r7
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	40011000 	.word	0x40011000
 800901c:	40011400 	.word	0x40011400
 8009020:	51eb851f 	.word	0x51eb851f

08009024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009024:	b084      	sub	sp, #16
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	f107 001c 	add.w	r0, r7, #28
 8009032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	2b01      	cmp	r3, #1
 800903a:	d122      	bne.n	8009082 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d105      	bne.n	8009076 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f9ea 	bl	800a450 <USB_CoreReset>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	e01a      	b.n	80090b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 f9de 	bl	800a450 <USB_CoreReset>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
 80090aa:	e005      	b.n	80090b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d10b      	bne.n	80090d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f043 0206 	orr.w	r2, r3, #6
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f043 0220 	orr.w	r2, r3, #32
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090e2:	b004      	add	sp, #16
 80090e4:	4770      	bx	lr
	...

080090e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d165      	bne.n	80091c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a41      	ldr	r2, [pc, #260]	; (8009204 <USB_SetTurnaroundTime+0x11c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d906      	bls.n	8009112 <USB_SetTurnaroundTime+0x2a>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4a40      	ldr	r2, [pc, #256]	; (8009208 <USB_SetTurnaroundTime+0x120>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d202      	bcs.n	8009112 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800910c:	230f      	movs	r3, #15
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e062      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4a3c      	ldr	r2, [pc, #240]	; (8009208 <USB_SetTurnaroundTime+0x120>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d306      	bcc.n	8009128 <USB_SetTurnaroundTime+0x40>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	4a3b      	ldr	r2, [pc, #236]	; (800920c <USB_SetTurnaroundTime+0x124>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d202      	bcs.n	8009128 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009122:	230e      	movs	r3, #14
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e057      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a38      	ldr	r2, [pc, #224]	; (800920c <USB_SetTurnaroundTime+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d306      	bcc.n	800913e <USB_SetTurnaroundTime+0x56>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4a37      	ldr	r2, [pc, #220]	; (8009210 <USB_SetTurnaroundTime+0x128>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d202      	bcs.n	800913e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009138:	230d      	movs	r3, #13
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e04c      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a33      	ldr	r2, [pc, #204]	; (8009210 <USB_SetTurnaroundTime+0x128>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d306      	bcc.n	8009154 <USB_SetTurnaroundTime+0x6c>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a32      	ldr	r2, [pc, #200]	; (8009214 <USB_SetTurnaroundTime+0x12c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d802      	bhi.n	8009154 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800914e:	230c      	movs	r3, #12
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	e041      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a2f      	ldr	r2, [pc, #188]	; (8009214 <USB_SetTurnaroundTime+0x12c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d906      	bls.n	800916a <USB_SetTurnaroundTime+0x82>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	4a2e      	ldr	r2, [pc, #184]	; (8009218 <USB_SetTurnaroundTime+0x130>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d802      	bhi.n	800916a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009164:	230b      	movs	r3, #11
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e036      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a2a      	ldr	r2, [pc, #168]	; (8009218 <USB_SetTurnaroundTime+0x130>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d906      	bls.n	8009180 <USB_SetTurnaroundTime+0x98>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <USB_SetTurnaroundTime+0x134>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d802      	bhi.n	8009180 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800917a:	230a      	movs	r3, #10
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e02b      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4a26      	ldr	r2, [pc, #152]	; (800921c <USB_SetTurnaroundTime+0x134>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d906      	bls.n	8009196 <USB_SetTurnaroundTime+0xae>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	4a25      	ldr	r2, [pc, #148]	; (8009220 <USB_SetTurnaroundTime+0x138>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d202      	bcs.n	8009196 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009190:	2309      	movs	r3, #9
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e020      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	4a21      	ldr	r2, [pc, #132]	; (8009220 <USB_SetTurnaroundTime+0x138>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d306      	bcc.n	80091ac <USB_SetTurnaroundTime+0xc4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4a20      	ldr	r2, [pc, #128]	; (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d802      	bhi.n	80091ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80091a6:	2308      	movs	r3, #8
 80091a8:	617b      	str	r3, [r7, #20]
 80091aa:	e015      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <USB_SetTurnaroundTime+0x13c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d906      	bls.n	80091c2 <USB_SetTurnaroundTime+0xda>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <USB_SetTurnaroundTime+0x140>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d202      	bcs.n	80091c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80091bc:	2307      	movs	r3, #7
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e00a      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80091c2:	2306      	movs	r3, #6
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	e007      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80091ce:	2309      	movs	r3, #9
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091d4:	2309      	movs	r3, #9
 80091d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	029b      	lsls	r3, r3, #10
 80091ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	00d8acbf 	.word	0x00d8acbf
 8009208:	00e4e1c0 	.word	0x00e4e1c0
 800920c:	00f42400 	.word	0x00f42400
 8009210:	01067380 	.word	0x01067380
 8009214:	011a499f 	.word	0x011a499f
 8009218:	01312cff 	.word	0x01312cff
 800921c:	014ca43f 	.word	0x014ca43f
 8009220:	016e3600 	.word	0x016e3600
 8009224:	01a6ab1f 	.word	0x01a6ab1f
 8009228:	01e84800 	.word	0x01e84800

0800922c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f023 0201 	bic.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d106      	bne.n	800929c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	60da      	str	r2, [r3, #12]
 800929a:	e00b      	b.n	80092b4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e001      	b.n	80092b4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e003      	b.n	80092bc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80092b4:	2032      	movs	r0, #50	; 0x32
 80092b6:	f7fa fcad 	bl	8003c14 <HAL_Delay>

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c4:	b084      	sub	sp, #16
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	e009      	b.n	80092f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3340      	adds	r3, #64	; 0x40
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b0e      	cmp	r3, #14
 80092fc:	d9f2      	bls.n	80092e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11c      	bne.n	800933e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009312:	f043 0302 	orr.w	r3, r3, #2
 8009316:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	639a      	str	r2, [r3, #56]	; 0x38
 800933c:	e00b      	b.n	8009356 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800935c:	461a      	mov	r2, r3
 800935e:	2300      	movs	r3, #0
 8009360:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009368:	4619      	mov	r1, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009370:	461a      	mov	r2, r3
 8009372:	680b      	ldr	r3, [r1, #0]
 8009374:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	2b01      	cmp	r3, #1
 800937a:	d10c      	bne.n	8009396 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d104      	bne.n	800938c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f949 	bl	800961c <USB_SetDevSpeed>
 800938a:	e008      	b.n	800939e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800938c:	2101      	movs	r1, #1
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f944 	bl	800961c <USB_SetDevSpeed>
 8009394:	e003      	b.n	800939e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009396:	2103      	movs	r1, #3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f93f 	bl	800961c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800939e:	2110      	movs	r1, #16
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f8f3 	bl	800958c <USB_FlushTxFifo>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f911 	bl	80095d8 <USB_FlushRxFifo>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	461a      	mov	r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	461a      	mov	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	461a      	mov	r2, r3
 80093e0:	2300      	movs	r3, #0
 80093e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	e043      	b.n	8009472 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009400:	d118      	bne.n	8009434 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	461a      	mov	r2, r3
 8009416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e013      	b.n	8009446 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	461a      	mov	r2, r3
 800942c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e008      	b.n	8009446 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	461a      	mov	r2, r3
 8009442:	2300      	movs	r3, #0
 8009444:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009452:	461a      	mov	r2, r3
 8009454:	2300      	movs	r3, #0
 8009456:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	461a      	mov	r2, r3
 8009466:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800946a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3301      	adds	r3, #1
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	429a      	cmp	r2, r3
 8009478:	d3b7      	bcc.n	80093ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800947a:	2300      	movs	r3, #0
 800947c:	613b      	str	r3, [r7, #16]
 800947e:	e043      	b.n	8009508 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009496:	d118      	bne.n	80094ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	461a      	mov	r2, r3
 80094ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	e013      	b.n	80094dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c0:	461a      	mov	r2, r3
 80094c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e008      	b.n	80094dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d6:	461a      	mov	r2, r3
 80094d8:	2300      	movs	r3, #0
 80094da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	461a      	mov	r2, r3
 80094ea:	2300      	movs	r3, #0
 80094ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	461a      	mov	r2, r3
 80094fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	3301      	adds	r3, #1
 8009506:	613b      	str	r3, [r7, #16]
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	429a      	cmp	r2, r3
 800950e:	d3b7      	bcc.n	8009480 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800951e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009522:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f043 0210 	orr.w	r2, r3, #16
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <USB_DevInit+0x2c4>)
 800954a:	4313      	orrs	r3, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	f043 0208 	orr.w	r2, r3, #8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	2b01      	cmp	r3, #1
 8009566:	d107      	bne.n	8009578 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009570:	f043 0304 	orr.w	r3, r3, #4
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009584:	b004      	add	sp, #16
 8009586:	4770      	bx	lr
 8009588:	803c3800 	.word	0x803c3800

0800958c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	019b      	lsls	r3, r3, #6
 800959e:	f043 0220 	orr.w	r2, r3, #32
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <USB_FlushTxFifo+0x48>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d901      	bls.n	80095b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e006      	b.n	80095c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d0f0      	beq.n	80095a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	00030d40 	.word	0x00030d40

080095d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2210      	movs	r2, #16
 80095e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3301      	adds	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a09      	ldr	r2, [pc, #36]	; (8009618 <USB_FlushRxFifo+0x40>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d901      	bls.n	80095fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e006      	b.n	800960a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b10      	cmp	r3, #16
 8009606:	d0f0      	beq.n	80095ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	00030d40 	.word	0x00030d40

0800961c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800963c:	4313      	orrs	r3, r2
 800963e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 0306 	and.w	r3, r3, #6
 8009666:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
 8009672:	e00a      	b.n	800968a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b02      	cmp	r3, #2
 8009678:	d002      	beq.n	8009680 <USB_GetDevSpeed+0x32>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b06      	cmp	r3, #6
 800967e:	d102      	bne.n	8009686 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009680:	2302      	movs	r3, #2
 8009682:	75fb      	strb	r3, [r7, #23]
 8009684:	e001      	b.n	800968a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009686:	230f      	movs	r3, #15
 8009688:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d13a      	bne.n	800972a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 030f 	and.w	r3, r3, #15
 80096c4:	2101      	movs	r1, #1
 80096c6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	68f9      	ldr	r1, [r7, #12]
 80096ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d2:	4313      	orrs	r3, r2
 80096d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d155      	bne.n	8009798 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	78db      	ldrb	r3, [r3, #3]
 8009706:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009708:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	059b      	lsls	r3, r3, #22
 800970e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009710:	4313      	orrs	r3, r2
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800971e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	e036      	b.n	8009798 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009730:	69da      	ldr	r2, [r3, #28]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	2101      	movs	r1, #1
 800973c:	fa01 f303 	lsl.w	r3, r1, r3
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	68f9      	ldr	r1, [r7, #12]
 8009744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009748:	4313      	orrs	r3, r2
 800974a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d11a      	bne.n	8009798 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800977e:	430b      	orrs	r3, r1
 8009780:	4313      	orrs	r3, r2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	440a      	add	r2, r1
 800978a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009796:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	f040 815c 	bne.w	8009a82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d132      	bne.n	8009838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	440a      	add	r2, r1
 800982c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009830:	0cdb      	lsrs	r3, r3, #19
 8009832:	04db      	lsls	r3, r3, #19
 8009834:	6113      	str	r3, [r2, #16]
 8009836:	e074      	b.n	8009922 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009852:	0cdb      	lsrs	r3, r3, #19
 8009854:	04db      	lsls	r3, r3, #19
 8009856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800987a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	4413      	add	r3, r2
 8009884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6959      	ldr	r1, [r3, #20]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	440b      	add	r3, r1
 8009894:	1e59      	subs	r1, r3, #1
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	fbb1 f3f3 	udiv	r3, r1, r3
 800989e:	04d9      	lsls	r1, r3, #19
 80098a0:	4b9d      	ldr	r3, [pc, #628]	; (8009b18 <USB_EPStartXfer+0x370>)
 80098a2:	400b      	ands	r3, r1
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	0148      	lsls	r0, r1, #5
 80098a8:	69f9      	ldr	r1, [r7, #28]
 80098aa:	4401      	add	r1, r0
 80098ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098b0:	4313      	orrs	r3, r2
 80098b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098ca:	69b9      	ldr	r1, [r7, #24]
 80098cc:	0148      	lsls	r0, r1, #5
 80098ce:	69f9      	ldr	r1, [r7, #28]
 80098d0:	4401      	add	r1, r0
 80098d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098d6:	4313      	orrs	r3, r2
 80098d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	78db      	ldrb	r3, [r3, #3]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d11f      	bne.n	8009922 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009900:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	015a      	lsls	r2, r3, #5
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4413      	add	r3, r2
 800990a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	0151      	lsls	r1, r2, #5
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	440a      	add	r2, r1
 8009918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800991c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009920:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d14b      	bne.n	80099c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d009      	beq.n	8009944 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	461a      	mov	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d128      	bne.n	800999e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009958:	2b00      	cmp	r3, #0
 800995a:	d110      	bne.n	800997e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	0151      	lsls	r1, r2, #5
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	440a      	add	r2, r1
 8009972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	e00f      	b.n	800999e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	0151      	lsls	r1, r2, #5
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	440a      	add	r2, r1
 8009994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800999c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	0151      	lsls	r1, r2, #5
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	440a      	add	r2, r1
 80099b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	e12f      	b.n	8009c20 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	78db      	ldrb	r3, [r3, #3]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d015      	beq.n	8009a14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f000 8117 	beq.w	8009c20 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	2101      	movs	r1, #1
 8009a04:	fa01 f303 	lsl.w	r3, r1, r3
 8009a08:	69f9      	ldr	r1, [r7, #28]
 8009a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	634b      	str	r3, [r1, #52]	; 0x34
 8009a12:	e105      	b.n	8009c20 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d110      	bne.n	8009a46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	0151      	lsls	r1, r2, #5
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	440a      	add	r2, r1
 8009a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	e00f      	b.n	8009a66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	68d9      	ldr	r1, [r3, #12]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	781a      	ldrb	r2, [r3, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	b298      	uxth	r0, r3
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4603      	mov	r3, r0
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 fa2b 	bl	8009ed6 <USB_WritePacket>
 8009a80:	e0ce      	b.n	8009c20 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9c:	0cdb      	lsrs	r3, r3, #19
 8009a9e:	04db      	lsls	r3, r3, #19
 8009aa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	0151      	lsls	r1, r2, #5
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	440a      	add	r2, r1
 8009ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ac4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d126      	bne.n	8009b1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae4:	69b9      	ldr	r1, [r7, #24]
 8009ae6:	0148      	lsls	r0, r1, #5
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	4401      	add	r1, r0
 8009aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009af0:	4313      	orrs	r3, r2
 8009af2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	69ba      	ldr	r2, [r7, #24]
 8009b04:	0151      	lsls	r1, r2, #5
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	440a      	add	r2, r1
 8009b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b12:	6113      	str	r3, [r2, #16]
 8009b14:	e036      	b.n	8009b84 <USB_EPStartXfer+0x3dc>
 8009b16:	bf00      	nop
 8009b18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	4413      	add	r3, r2
 8009b26:	1e5a      	subs	r2, r3, #1
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b30:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3e:	691a      	ldr	r2, [r3, #16]
 8009b40:	8afb      	ldrh	r3, [r7, #22]
 8009b42:	04d9      	lsls	r1, r3, #19
 8009b44:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <USB_EPStartXfer+0x484>)
 8009b46:	400b      	ands	r3, r1
 8009b48:	69b9      	ldr	r1, [r7, #24]
 8009b4a:	0148      	lsls	r0, r1, #5
 8009b4c:	69f9      	ldr	r1, [r7, #28]
 8009b4e:	4401      	add	r1, r0
 8009b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b54:	4313      	orrs	r3, r2
 8009b56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	8af9      	ldrh	r1, [r7, #22]
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b74:	69b9      	ldr	r1, [r7, #24]
 8009b76:	0148      	lsls	r0, r1, #5
 8009b78:	69f9      	ldr	r1, [r7, #28]
 8009b7a:	4401      	add	r1, r0
 8009b7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b80:	4313      	orrs	r3, r2
 8009b82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d10d      	bne.n	8009ba6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	68d9      	ldr	r1, [r3, #12]
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba2:	460a      	mov	r2, r1
 8009ba4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d128      	bne.n	8009c00 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d110      	bne.n	8009be0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	e00f      	b.n	8009c00 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	0151      	lsls	r1, r2, #5
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	440a      	add	r2, r1
 8009bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	1ff80000 	.word	0x1ff80000

08009c30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	f040 80cd 	bne.w	8009dec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d132      	bne.n	8009cc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	0151      	lsls	r1, r2, #5
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	440a      	add	r2, r1
 8009c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	0151      	lsls	r1, r2, #5
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	440a      	add	r2, r1
 8009c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	0151      	lsls	r1, r2, #5
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	440a      	add	r2, r1
 8009cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb8:	0cdb      	lsrs	r3, r3, #19
 8009cba:	04db      	lsls	r3, r3, #19
 8009cbc:	6113      	str	r3, [r2, #16]
 8009cbe:	e04e      	b.n	8009d5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	0151      	lsls	r1, r2, #5
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	440a      	add	r2, r1
 8009cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cda:	0cdb      	lsrs	r3, r3, #19
 8009cdc:	04db      	lsls	r3, r3, #19
 8009cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	695a      	ldr	r2, [r3, #20]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d903      	bls.n	8009d18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d44:	691a      	ldr	r2, [r3, #16]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d4e:	6939      	ldr	r1, [r7, #16]
 8009d50:	0148      	lsls	r0, r1, #5
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	4401      	add	r1, r0
 8009d56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d11e      	bne.n	8009da2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d009      	beq.n	8009d80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d78:	461a      	mov	r2, r3
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	e092      	b.n	8009ec8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d07e      	beq.n	8009ec8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	2101      	movs	r1, #1
 8009ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8009de0:	6979      	ldr	r1, [r7, #20]
 8009de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de6:	4313      	orrs	r3, r2
 8009de8:	634b      	str	r3, [r1, #52]	; 0x34
 8009dea:	e06d      	b.n	8009ec8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e06:	0cdb      	lsrs	r3, r3, #19
 8009e08:	04db      	lsls	r3, r3, #19
 8009e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6c:	691a      	ldr	r2, [r3, #16]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e76:	6939      	ldr	r1, [r7, #16]
 8009e78:	0148      	lsls	r0, r1, #5
 8009e7a:	6979      	ldr	r1, [r7, #20]
 8009e7c:	4401      	add	r1, r0
 8009e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e82:	4313      	orrs	r3, r2
 8009e84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d10d      	bne.n	8009ea8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	68d9      	ldr	r1, [r3, #12]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea4:	460a      	mov	r2, r1
 8009ea6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b089      	sub	sp, #36	; 0x24
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	71fb      	strb	r3, [r7, #7]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11a      	bne.n	8009f32 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009efc:	88bb      	ldrh	r3, [r7, #4]
 8009efe:	3303      	adds	r3, #3
 8009f00:	089b      	lsrs	r3, r3, #2
 8009f02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f04:	2300      	movs	r3, #0
 8009f06:	61bb      	str	r3, [r7, #24]
 8009f08:	e00f      	b.n	8009f2a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	031a      	lsls	r2, r3, #12
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f16:	461a      	mov	r2, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	3304      	adds	r3, #4
 8009f22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61bb      	str	r3, [r7, #24]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d3eb      	bcc.n	8009f0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3724      	adds	r7, #36	; 0x24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b089      	sub	sp, #36	; 0x24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	3303      	adds	r3, #3
 8009f5a:	089b      	lsrs	r3, r3, #2
 8009f5c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e00b      	b.n	8009f7c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	3304      	adds	r3, #4
 8009f74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	61bb      	str	r3, [r7, #24]
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d3ef      	bcc.n	8009f64 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009f84:	69fb      	ldr	r3, [r7, #28]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3724      	adds	r7, #36	; 0x24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d12c      	bne.n	800a008 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	db12      	blt.n	8009fe6 <USB_EPSetStall+0x54>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00f      	beq.n	8009fe6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	0151      	lsls	r1, r2, #5
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	440a      	add	r2, r1
 8009fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fe4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	e02b      	b.n	800a060 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	db12      	blt.n	800a040 <USB_EPSetStall+0xae>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00f      	beq.n	800a040 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	0151      	lsls	r1, r2, #5
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	440a      	add	r2, r1
 800a036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a03a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a03e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a05a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a05e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d128      	bne.n	800a0dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	78db      	ldrb	r3, [r3, #3]
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d003      	beq.n	800a0ba <USB_EPClearStall+0x4c>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d138      	bne.n	800a12c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	e027      	b.n	800a12c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	78db      	ldrb	r3, [r3, #3]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d003      	beq.n	800a10c <USB_EPClearStall+0x9e>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	78db      	ldrb	r3, [r3, #3]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d10f      	bne.n	800a12c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a12a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a158:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a15c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	78fb      	ldrb	r3, [r7, #3]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a16e:	68f9      	ldr	r1, [r7, #12]
 800a170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a174:	4313      	orrs	r3, r2
 800a176:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b4:	f023 0302 	bic.w	r3, r3, #2
 800a1b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1f6:	f043 0302 	orr.w	r3, r3, #2
 800a1fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b085      	sub	sp, #20
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4013      	ands	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a222:	68fb      	ldr	r3, [r7, #12]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	0c1b      	lsrs	r3, r3, #16
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	4013      	ands	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	b29b      	uxth	r3, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	f003 030f 	and.w	r3, r3, #15
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	fa22 f303 	lsr.w	r3, r2, r3
 800a304:	01db      	lsls	r3, r3, #7
 800a306:	b2db      	uxtb	r3, r3
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a30e:	78fb      	ldrb	r3, [r7, #3]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4013      	ands	r3, r2
 800a320:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a322:	68bb      	ldr	r3, [r7, #8]
}
 800a324:	4618      	mov	r0, r3
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	f003 0301 	and.w	r3, r3, #1
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a366:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a36a:	f023 0307 	bic.w	r3, r3, #7
 800a36e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a37e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	460b      	mov	r3, r1
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	333c      	adds	r3, #60	; 0x3c
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	4a26      	ldr	r2, [pc, #152]	; (800a44c <USB_EP0_OutStart+0xb8>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d90a      	bls.n	800a3ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3c8:	d101      	bne.n	800a3ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e037      	b.n	800a43e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3fc:	f043 0318 	orr.w	r3, r3, #24
 800a400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a410:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a414:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10f      	bne.n	800a43c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a436:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a43a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	4f54300a 	.word	0x4f54300a

0800a450 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4a13      	ldr	r2, [pc, #76]	; (800a4b4 <USB_CoreReset+0x64>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d901      	bls.n	800a46e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e01b      	b.n	800a4a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	daf2      	bge.n	800a45c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f043 0201 	orr.w	r2, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <USB_CoreReset+0x64>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d901      	bls.n	800a498 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e006      	b.n	800a4a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d0f0      	beq.n	800a486 <USB_CoreReset+0x36>

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	00030d40 	.word	0x00030d40

0800a4b8 <__NVIC_SystemReset>:
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a4bc:	f3bf 8f4f 	dsb	sy
}
 800a4c0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a4c2:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <__NVIC_SystemReset+0x24>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a4ca:	4904      	ldr	r1, [pc, #16]	; (800a4dc <__NVIC_SystemReset+0x24>)
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <__NVIC_SystemReset+0x28>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4d2:	f3bf 8f4f 	dsb	sy
}
 800a4d6:	bf00      	nop
    __NOP();
 800a4d8:	bf00      	nop
 800a4da:	e7fd      	b.n	800a4d8 <__NVIC_SystemReset+0x20>
 800a4dc:	e000ed00 	.word	0xe000ed00
 800a4e0:	05fa0004 	.word	0x05fa0004

0800a4e4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800a4f0:	f240 401c 	movw	r0, #1052	; 0x41c
 800a4f4:	f002 fc08 	bl	800cd08 <malloc>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d105      	bne.n	800a50e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a50a:	2302      	movs	r3, #2
 800a50c:	e03f      	b.n	800a58e <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a524:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2202      	movs	r2, #2
 800a56c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	4798      	blx	r3
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	e000      	b.n	800a58e <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e027      	b.n	800a600 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b6:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f002 fb91 	bl	800cd18 <free>
  pdev->pClassData = NULL;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a618:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800a622:	2300      	movs	r3, #0
 800a624:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a632:	2b00      	cmp	r3, #0
 800a634:	d03f      	beq.n	800a6b6 <USBD_DFU_Setup+0xae>
 800a636:	2b20      	cmp	r3, #32
 800a638:	f040 80c3 	bne.w	800a7c2 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b06      	cmp	r3, #6
 800a642:	d830      	bhi.n	800a6a6 <USBD_DFU_Setup+0x9e>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USBD_DFU_Setup+0x44>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a69d 	.word	0x0800a69d
 800a650:	0800a669 	.word	0x0800a669
 800a654:	0800a673 	.word	0x0800a673
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a685 	.word	0x0800a685
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	0800a695 	.word	0x0800a695
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fa5c 	bl	800ab28 <DFU_Download>
      break;
 800a670:	e020      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fac0 	bl	800abfa <DFU_Upload>
      break;
 800a67a:	e01b      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fb91 	bl	800ada4 <DFU_GetStatus>
      break;
 800a682:	e017      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc3f 	bl	800af08 <DFU_ClearStatus>
      break;
 800a68a:	e013      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fc8b 	bl	800afa8 <DFU_GetState>
      break;
 800a692:	e00f      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc9b 	bl	800afd0 <DFU_Abort>
      break;
 800a69a:	e00b      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f9e2 	bl	800aa68 <DFU_Detach>
      break;
 800a6a4:	e006      	b.n	800a6b4 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fd84 	bl	800c1b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	77fb      	strb	r3, [r7, #31]
      break;
 800a6b2:	bf00      	nop
    }
    break;
 800a6b4:	e08c      	b.n	800a7d0 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	2b0b      	cmp	r3, #11
 800a6bc:	d878      	bhi.n	800a7b0 <USBD_DFU_Setup+0x1a8>
 800a6be:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <USBD_DFU_Setup+0xbc>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a6f5 	.word	0x0800a6f5
 800a6c8:	0800a7bf 	.word	0x0800a7bf
 800a6cc:	0800a7b1 	.word	0x0800a7b1
 800a6d0:	0800a7b1 	.word	0x0800a7b1
 800a6d4:	0800a7b1 	.word	0x0800a7b1
 800a6d8:	0800a7b1 	.word	0x0800a7b1
 800a6dc:	0800a71d 	.word	0x0800a71d
 800a6e0:	0800a7b1 	.word	0x0800a7b1
 800a6e4:	0800a7b1 	.word	0x0800a7b1
 800a6e8:	0800a7b1 	.word	0x0800a7b1
 800a6ec:	0800a747 	.word	0x0800a747
 800a6f0:	0800a771 	.word	0x0800a771
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d107      	bne.n	800a70e <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6fe:	f107 030e 	add.w	r3, r7, #14
 800a702:	2202      	movs	r2, #2
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fdc6 	bl	800c298 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a70c:	e058      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 fd50 	bl	800c1b6 <USBD_CtlError>
        ret = USBD_FAIL;
 800a716:	2303      	movs	r3, #3
 800a718:	77fb      	strb	r3, [r7, #31]
      break;
 800a71a:	e051      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	885b      	ldrh	r3, [r3, #2]
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	b29b      	uxth	r3, r3
 800a724:	2b21      	cmp	r3, #33	; 0x21
 800a726:	d107      	bne.n	800a738 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800a728:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <USBD_DFU_Setup+0x1d4>)
 800a72a:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	88db      	ldrh	r3, [r3, #6]
 800a730:	2b09      	cmp	r3, #9
 800a732:	bf28      	it	cs
 800a734:	2309      	movcs	r3, #9
 800a736:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a738:	8afb      	ldrh	r3, [r7, #22]
 800a73a:	461a      	mov	r2, r3
 800a73c:	69b9      	ldr	r1, [r7, #24]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 fdaa 	bl	800c298 <USBD_CtlSendData>
      break;
 800a744:	e03c      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d108      	bne.n	800a762 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a756:	2201      	movs	r2, #1
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fd9c 	bl	800c298 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a760:	e02e      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fd26 	bl	800c1b6 <USBD_CtlError>
        ret = USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	77fb      	strb	r3, [r7, #31]
      break;
 800a76e:	e027      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	885b      	ldrh	r3, [r3, #2]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d113      	bne.n	800a7a2 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a780:	2b03      	cmp	r3, #3
 800a782:	d107      	bne.n	800a794 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	885b      	ldrh	r3, [r3, #2]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a792:	e015      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fd0d 	bl	800c1b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a79c:	2303      	movs	r3, #3
 800a79e:	77fb      	strb	r3, [r7, #31]
      break;
 800a7a0:	e00e      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fd06 	bl	800c1b6 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	77fb      	strb	r3, [r7, #31]
      break;
 800a7ae:	e007      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 fcff 	bl	800c1b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	77fb      	strb	r3, [r7, #31]
      break;
 800a7bc:	e000      	b.n	800a7c0 <USBD_DFU_Setup+0x1b8>
      break;
 800a7be:	bf00      	nop
    }
    break;
 800a7c0:	e006      	b.n	800a7d0 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 fcf6 	bl	800c1b6 <USBD_CtlError>
    ret = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	77fb      	strb	r3, [r7, #31]
    break;
 800a7ce:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3720      	adds	r7, #32
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200004be 	.word	0x200004be

0800a7e0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	221b      	movs	r2, #27
 800a7ec:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800a7ee:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <USBD_DFU_GetCfgDesc+0x1c>)
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	200004ac 	.word	0x200004ac

0800a800 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b088      	sub	sp, #32
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a824:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82c:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a834:	2b04      	cmp	r3, #4
 800a836:	f040 80bb 	bne.w	800a9b0 <USBD_DFU_EP0_TxReady+0x19a>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a840:	2b00      	cmp	r3, #0
 800a842:	d17a      	bne.n	800a93a <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	f000 8091 	beq.w	800a972 <USBD_DFU_EP0_TxReady+0x15c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a856:	2b05      	cmp	r3, #5
 800a858:	d15c      	bne.n	800a914 <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b21      	cmp	r3, #33	; 0x21
 800a860:	d124      	bne.n	800a8ac <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	785b      	ldrb	r3, [r3, #1]
 800a866:	461a      	mov	r2, r3
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	789b      	ldrb	r3, [r3, #2]
 800a878:	021b      	lsls	r3, r3, #8
 800a87a:	441a      	add	r2, r3
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	78db      	ldrb	r3, [r3, #3]
 800a88c:	041b      	lsls	r3, r3, #16
 800a88e:	441a      	add	r2, r3
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	791b      	ldrb	r3, [r3, #4]
 800a8a0:	061b      	lsls	r3, r3, #24
 800a8a2:	441a      	add	r2, r3
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800a8aa:	e062      	b.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b41      	cmp	r3, #65	; 0x41
 800a8b2:	d15e      	bne.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	789b      	ldrb	r3, [r3, #2]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	441a      	add	r2, r3
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	78db      	ldrb	r3, [r3, #3]
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	441a      	add	r2, r3
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	791b      	ldrb	r3, [r3, #4]
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	441a      	add	r2, r3
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	69fa      	ldr	r2, [r7, #28]
 800a902:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800a906:	4610      	mov	r0, r2
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d030      	beq.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
          {
            return (uint8_t)USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	e056      	b.n	800a9c2 <USBD_DFU_EP0_TxReady+0x1ac>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800a928:	2301      	movs	r3, #1
 800a92a:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800a92c:	f107 030c 	add.w	r3, r7, #12
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 fc3f 	bl	800c1b6 <USBD_CtlError>
 800a938:	e01b      	b.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a940:	2b01      	cmp	r3, #1
 800a942:	d916      	bls.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a94a:	3b02      	subs	r3, #2
 800a94c:	029a      	lsls	r2, r3, #10
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a954:	4413      	add	r3, r2
 800a956:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	69f8      	ldr	r0, [r7, #28]
 800a95e:	6979      	ldr	r1, [r7, #20]
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800a966:	4798      	blx	r3
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <USBD_DFU_EP0_TxReady+0x15c>
        {
          return (uint8_t)USBD_FAIL;
 800a96e:	2303      	movs	r3, #3
 800a970:	e027      	b.n	800a9c2 <USBD_DFU_EP0_TxReady+0x1ac>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	2203      	movs	r2, #3
 800a986:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800a9ae:	e007      	b.n	800a9c0 <USBD_DFU_EP0_TxReady+0x1aa>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a9b6:	2b07      	cmp	r3, #7
 800a9b8:	d102      	bne.n	800a9c0 <USBD_DFU_EP0_TxReady+0x1aa>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fb56 	bl	800b06c <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	220a      	movs	r2, #10
 800a9ec:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800a9ee:	4b03      	ldr	r3, [pc, #12]	; (800a9fc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	200004c8 	.word	0x200004c8

0800aa00 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa14:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800aa16:	7afb      	ldrb	r3, [r7, #11]
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	d808      	bhi.n	800aa2e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	4905      	ldr	r1, [pc, #20]	; (800aa38 <USBD_DFU_GetUsrStringDesc+0x38>)
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fbd7 	bl	800c1d8 <USBD_GetString>
    return USBD_StrDesc;
 800aa2a:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <USBD_DFU_GetUsrStringDesc+0x38>)
 800aa2c:	e000      	b.n	800aa30 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800aa2e:	2300      	movs	r3, #0
  }
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	200007ac 	.word	0x200007ac

0800aa3c <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e004      	b.n	800aa5a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa78:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d013      	beq.n	800aaac <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d00e      	beq.n	800aaac <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800aa94:	2b05      	cmp	r3, #5
 800aa96:	d009      	beq.n	800aaac <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800aa9e:	2b06      	cmp	r3, #6
 800aaa0:	d004      	beq.n	800aaac <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800aaa8:	2b09      	cmp	r3, #9
 800aaaa:	d125      	bne.n	800aaf8 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <DFU_Detach+0xbc>)
 800aafa:	7d5b      	ldrb	r3, [r3, #21]
 800aafc:	f003 0310 	and.w	r3, r3, #16
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d006      	beq.n	800ab12 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fb5e 	bl	800b1c6 <USBD_Stop>
    (void)USBD_Start(pdev);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb4f 	bl	800b1ae <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800ab10:	e004      	b.n	800ab1c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	885b      	ldrh	r3, [r3, #2]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f9 f87c 	bl	8003c14 <HAL_Delay>
}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200004ac 	.word	0x200004ac

0800ab28 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	88db      	ldrh	r3, [r3, #6]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d02d      	beq.n	800ab9e <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d004      	beq.n	800ab56 <DFU_Download+0x2e>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ab52:	2b05      	cmp	r3, #5
 800ab54:	d11e      	bne.n	800ab94 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	88db      	ldrh	r3, [r3, #6]
 800ab66:	461a      	mov	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2203      	movs	r2, #3
 800ab72:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 fbaf 	bl	800c2f0 <USBD_CtlPrepareRx>
 800ab92:	e02e      	b.n	800abf2 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f001 fb0d 	bl	800c1b6 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800ab9c:	e029      	b.n	800abf2 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d004      	beq.n	800abb2 <DFU_Download+0x8a>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d11a      	bne.n	800abe8 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2206      	movs	r2, #6
 800abbe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800abe6:	e004      	b.n	800abf2 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 fae3 	bl	800c1b6 <USBD_CtlError>
}
 800abf0:	e7ff      	b.n	800abf2 <DFU_Download+0xca>
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac0a:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac12:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	88db      	ldrh	r3, [r3, #6]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80a8 	beq.w	800ad6e <DFU_Upload+0x174>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d005      	beq.n	800ac34 <DFU_Upload+0x3a>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ac2e:	2b09      	cmp	r3, #9
 800ac30:	f040 8090 	bne.w	800ad54 <DFU_Upload+0x15a>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	88db      	ldrh	r3, [r3, #6]
 800ac44:	461a      	mov	r2, r3
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d12c      	bne.n	800acb0 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d901      	bls.n	800ac64 <DFU_Upload+0x6a>
 800ac60:	2202      	movs	r2, #2
 800ac62:	e000      	b.n	800ac66 <DFU_Upload+0x6c>
 800ac64:	2209      	movs	r2, #9
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2221      	movs	r2, #33	; 0x21
 800ac9a:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2241      	movs	r2, #65	; 0x41
 800aca0:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2203      	movs	r2, #3
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f001 faf5 	bl	800c298 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800acae:	e075      	b.n	800ad9c <DFU_Upload+0x1a2>
      }
      else if (hdfu->wblock_num > 1U)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d931      	bls.n	800ad1e <DFU_Upload+0x124>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2209      	movs	r2, #9
 800acbe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800acec:	3b02      	subs	r3, #2
 800acee:	029a      	lsls	r2, r3, #10
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800acf6:	4413      	add	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	6979      	ldr	r1, [r7, #20]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800ad08:	4798      	blx	r3
 800ad0a:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad12:	461a      	mov	r2, r3
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 fabe 	bl	800c298 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800ad1c:	e03e      	b.n	800ad9c <DFU_Upload+0x1a2>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	220f      	movs	r2, #15
 800ad22:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 fa32 	bl	800c1b6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800ad52:	e023      	b.n	800ad9c <DFU_Upload+0x1a2>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fa25 	bl	800c1b6 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800ad6c:	e016      	b.n	800ad9c <DFU_Upload+0x1a2>
    hdfu->dev_state = DFU_STATE_IDLE;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800ad9a:	e7ff      	b.n	800ad9c <DFU_Upload+0x1a2>
 800ad9c:	bf00      	nop
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb2:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adba:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d002      	beq.n	800adcc <DFU_GetStatus+0x28>
 800adc6:	2b06      	cmp	r3, #6
 800adc8:	d051      	beq.n	800ae6e <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 800adca:	e08e      	b.n	800aeea <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800add2:	2b00      	cmp	r3, #0
 800add4:	d034      	beq.n	800ae40 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2204      	movs	r2, #4
 800adda:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10e      	bne.n	800ae2a <DFU_GetStatus+0x86>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2b41      	cmp	r3, #65	; 0x41
 800ae12:	d10a      	bne.n	800ae2a <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800ae24:	2100      	movs	r1, #0
 800ae26:	4798      	blx	r3
    break;
 800ae28:	e05f      	b.n	800aeea <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	4798      	blx	r3
    break;
 800ae3e:	e054      	b.n	800aeea <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2205      	movs	r2, #5
 800ae44:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800ae6c:	e03d      	b.n	800aeea <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d116      	bne.n	800aea6 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2207      	movs	r2, #7
 800ae7c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800aea4:	e020      	b.n	800aee8 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d11b      	bne.n	800aee8 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800aeb0:	4b14      	ldr	r3, [pc, #80]	; (800af04 <DFU_GetStatus+0x160>)
 800aeb2:	7d1b      	ldrb	r3, [r3, #20]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d015      	beq.n	800aee8 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800aee8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800aef0:	2206      	movs	r2, #6
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f9cf 	bl	800c298 <USBD_CtlSendData>
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	200004ac 	.word	0x200004ac

0800af08 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af16:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800af1e:	2b0a      	cmp	r3, #10
 800af20:	d11e      	bne.n	800af60 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2202      	movs	r2, #2
 800af26:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 800af5e:	e01d      	b.n	800af9c <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	220a      	movs	r2, #10
 800af64:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	220e      	movs	r2, #14
 800af6c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800afbe:	2201      	movs	r2, #1
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 f968 	bl	800c298 <USBD_CtlSendData>
}
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afde:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d013      	beq.n	800b012 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d00e      	beq.n	800b012 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800affa:	2b05      	cmp	r3, #5
 800affc:	d009      	beq.n	800b012 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800b004:	2b06      	cmp	r3, #6
 800b006:	d004      	beq.n	800b012 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800b00e:	2b09      	cmp	r3, #9
 800b010:	d125      	bne.n	800b05e <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2202      	movs	r2, #2
 800b016:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
	...

0800b06c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b07a:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800b084:	4b1d      	ldr	r3, [pc, #116]	; (800b0fc <DFU_Leave+0x90>)
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d016      	beq.n	800b0be <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2206      	movs	r2, #6
 800b094:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800b0bc:	e01a      	b.n	800b0f4 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f86b 	bl	800b1c6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800b0f0:	f7ff f9e2 	bl	800a4b8 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	200004ac 	.word	0x200004ac

0800b100 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	4613      	mov	r3, r2
 800b10c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b114:	2303      	movs	r3, #3
 800b116:	e025      	b.n	800b164 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	79fa      	ldrb	r2, [r7, #7]
 800b156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f001 fc07 	bl	800c96c <USBD_LL_Init>
 800b15e:	4603      	mov	r3, r0
 800b160:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b180:	2303      	movs	r3, #3
 800b182:	e010      	b.n	800b1a6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b194:	f107 020e 	add.w	r2, r7, #14
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
 800b19c:	4602      	mov	r2, r0
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 fc24 	bl	800ca04 <USBD_LL_Start>
 800b1bc:	4603      	mov	r3, r0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d009      	beq.n	800b1ec <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6852      	ldr	r2, [r2, #4]
 800b1e4:	b2d2      	uxtb	r2, r2
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 fc1b 	bl	800ca3a <USBD_LL_Stop>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]

  return ret;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b212:	b480      	push	{r7}
 800b214:	b083      	sub	sp, #12
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b234:	2303      	movs	r3, #3
 800b236:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d009      	beq.n	800b256 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	78fa      	ldrb	r2, [r7, #3]
 800b24c:	4611      	mov	r1, r2
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
 800b252:	4603      	mov	r3, r0
 800b254:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b256:	7bfb      	ldrb	r3, [r7, #15]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b272:	2b00      	cmp	r3, #0
 800b274:	d007      	beq.n	800b286 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	78fa      	ldrb	r2, [r7, #3]
 800b280:	4611      	mov	r1, r2
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
  }

  return USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 ff4d 	bl	800c142 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2c4:	f003 031f 	and.w	r3, r3, #31
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d01a      	beq.n	800b302 <USBD_LL_SetupStage+0x72>
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d822      	bhi.n	800b316 <USBD_LL_SetupStage+0x86>
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <USBD_LL_SetupStage+0x4a>
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d00a      	beq.n	800b2ee <USBD_LL_SetupStage+0x5e>
 800b2d8:	e01d      	b.n	800b316 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fa18 	bl	800b718 <USBD_StdDevReq>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ec:	e020      	b.n	800b330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fa7c 	bl	800b7f4 <USBD_StdItfReq>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b300:	e016      	b.n	800b330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 faba 	bl	800b884 <USBD_StdEPReq>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]
      break;
 800b314:	e00c      	b.n	800b330 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b31c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b320:	b2db      	uxtb	r3, r3
 800b322:	4619      	mov	r1, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f001 fbc9 	bl	800cabc <USBD_LL_StallEP>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
      break;
 800b32e:	bf00      	nop
  }

  return ret;
 800b330:	7bfb      	ldrb	r3, [r7, #15]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	460b      	mov	r3, r1
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d137      	bne.n	800b3be <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b354:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d14a      	bne.n	800b3f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	689a      	ldr	r2, [r3, #8]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d913      	bls.n	800b394 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	689a      	ldr	r2, [r3, #8]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	1ad2      	subs	r2, r2, r3
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	68da      	ldr	r2, [r3, #12]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	4293      	cmp	r3, r2
 800b384:	bf28      	it	cs
 800b386:	4613      	movcs	r3, r2
 800b388:	461a      	mov	r2, r3
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 ffcc 	bl	800c32a <USBD_CtlContinueRx>
 800b392:	e030      	b.n	800b3f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00a      	beq.n	800b3b6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d105      	bne.n	800b3b6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 ffc8 	bl	800c34c <USBD_CtlSendStatus>
 800b3bc:	e01b      	b.n	800b3f6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d013      	beq.n	800b3f2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d10e      	bne.n	800b3f2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	7afa      	ldrb	r2, [r7, #11]
 800b3de:	4611      	mov	r1, r2
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	4798      	blx	r3
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	e002      	b.n	800b3f8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e000      	b.n	800b3f8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	460b      	mov	r3, r1
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b40e:	7afb      	ldrb	r3, [r7, #11]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d16a      	bne.n	800b4ea <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3314      	adds	r3, #20
 800b418:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b420:	2b02      	cmp	r3, #2
 800b422:	d155      	bne.n	800b4d0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d914      	bls.n	800b45a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	1ad2      	subs	r2, r2, r3
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	461a      	mov	r2, r3
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 ff41 	bl	800c2ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b44c:	2300      	movs	r3, #0
 800b44e:	2200      	movs	r2, #0
 800b450:	2100      	movs	r1, #0
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f001 fbdc 	bl	800cc10 <USBD_LL_PrepareReceive>
 800b458:	e03a      	b.n	800b4d0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	d11c      	bne.n	800b4a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b46e:	429a      	cmp	r2, r3
 800b470:	d316      	bcc.n	800b4a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d20f      	bcs.n	800b4a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 ff22 	bl	800c2ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b492:	2300      	movs	r3, #0
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f001 fbb9 	bl	800cc10 <USBD_LL_PrepareReceive>
 800b49e:	e017      	b.n	800b4d0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00a      	beq.n	800b4c2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d105      	bne.n	800b4c2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4c2:	2180      	movs	r1, #128	; 0x80
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f001 faf9 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 ff51 	bl	800c372 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d123      	bne.n	800b522 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff fe99 	bl	800b212 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4e8:	e01b      	b.n	800b522 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d013      	beq.n	800b51e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d10e      	bne.n	800b51e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	4611      	mov	r1, r2
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	4798      	blx	r3
 800b510:	4603      	mov	r3, r0
 800b512:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	e002      	b.n	800b524 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b51e:	2303      	movs	r3, #3
 800b520:	e000      	b.n	800b524 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6852      	ldr	r2, [r2, #4]
 800b568:	b2d2      	uxtb	r2, r2
 800b56a:	4611      	mov	r1, r2
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b570:	2340      	movs	r3, #64	; 0x40
 800b572:	2200      	movs	r2, #0
 800b574:	2100      	movs	r1, #0
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 fa7a 	bl	800ca70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2240      	movs	r2, #64	; 0x40
 800b588:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b58c:	2340      	movs	r3, #64	; 0x40
 800b58e:	2200      	movs	r2, #0
 800b590:	2180      	movs	r1, #128	; 0x80
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fa6c 	bl	800ca70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2240      	movs	r2, #64	; 0x40
 800b5a2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b083      	sub	sp, #12
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2204      	movs	r2, #4
 800b5e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b606:	2b04      	cmp	r3, #4
 800b608:	d105      	bne.n	800b616 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b632:	2b03      	cmp	r3, #3
 800b634:	d10b      	bne.n	800b64e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6852      	ldr	r2, [r2, #4]
 800b6c8:	b2d2      	uxtb	r2, r2
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	4798      	blx	r3
  }

  return USBD_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b087      	sub	sp, #28
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6f8:	8a3b      	ldrh	r3, [r7, #16]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	b21a      	sxth	r2, r3
 800b6fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b702:	4313      	orrs	r3, r2
 800b704:	b21b      	sxth	r3, r3
 800b706:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b708:	89fb      	ldrh	r3, [r7, #14]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
	...

0800b718 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b72e:	2b40      	cmp	r3, #64	; 0x40
 800b730:	d005      	beq.n	800b73e <USBD_StdDevReq+0x26>
 800b732:	2b40      	cmp	r3, #64	; 0x40
 800b734:	d853      	bhi.n	800b7de <USBD_StdDevReq+0xc6>
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00b      	beq.n	800b752 <USBD_StdDevReq+0x3a>
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d14f      	bne.n	800b7de <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]
    break;
 800b750:	e04a      	b.n	800b7e8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	2b09      	cmp	r3, #9
 800b758:	d83b      	bhi.n	800b7d2 <USBD_StdDevReq+0xba>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <USBD_StdDevReq+0x48>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b7c9 	.word	0x0800b7c9
 800b768:	0800b7d3 	.word	0x0800b7d3
 800b76c:	0800b7bf 	.word	0x0800b7bf
 800b770:	0800b7d3 	.word	0x0800b7d3
 800b774:	0800b793 	.word	0x0800b793
 800b778:	0800b789 	.word	0x0800b789
 800b77c:	0800b7d3 	.word	0x0800b7d3
 800b780:	0800b7ab 	.word	0x0800b7ab
 800b784:	0800b79d 	.word	0x0800b79d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f9d8 	bl	800bb40 <USBD_GetDescriptor>
      break;
 800b790:	e024      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fb4f 	bl	800be38 <USBD_SetAddress>
      break;
 800b79a:	e01f      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fb8e 	bl	800bec0 <USBD_SetConfig>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a8:	e018      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fc2b 	bl	800c008 <USBD_GetConfig>
      break;
 800b7b2:	e013      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fc5b 	bl	800c072 <USBD_GetStatus>
      break;
 800b7bc:	e00e      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fc89 	bl	800c0d8 <USBD_SetFeature>
      break;
 800b7c6:	e009      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fc98 	bl	800c100 <USBD_ClrFeature>
      break;
 800b7d0:	e004      	b.n	800b7dc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fcee 	bl	800c1b6 <USBD_CtlError>
      break;
 800b7da:	bf00      	nop
    }
    break;
 800b7dc:	e004      	b.n	800b7e8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fce8 	bl	800c1b6 <USBD_CtlError>
    break;
 800b7e6:	bf00      	nop
  }

  return ret;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop

0800b7f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b80a:	2b40      	cmp	r3, #64	; 0x40
 800b80c:	d005      	beq.n	800b81a <USBD_StdItfReq+0x26>
 800b80e:	2b40      	cmp	r3, #64	; 0x40
 800b810:	d82e      	bhi.n	800b870 <USBD_StdItfReq+0x7c>
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <USBD_StdItfReq+0x26>
 800b816:	2b20      	cmp	r3, #32
 800b818:	d12a      	bne.n	800b870 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b820:	3b01      	subs	r3, #1
 800b822:	2b02      	cmp	r3, #2
 800b824:	d81d      	bhi.n	800b862 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	889b      	ldrh	r3, [r3, #4]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d813      	bhi.n	800b858 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	88db      	ldrh	r3, [r3, #6]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <USBD_StdItfReq+0x78>
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fd7b 	bl	800c34c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b856:	e009      	b.n	800b86c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fcab 	bl	800c1b6 <USBD_CtlError>
      break;
 800b860:	e004      	b.n	800b86c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fca6 	bl	800c1b6 <USBD_CtlError>
      break;
 800b86a:	e000      	b.n	800b86e <USBD_StdItfReq+0x7a>
      break;
 800b86c:	bf00      	nop
    }
    break;
 800b86e:	e004      	b.n	800b87a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fc9f 	bl	800c1b6 <USBD_CtlError>
    break;
 800b878:	bf00      	nop
  }

  return ret;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d007      	beq.n	800b8b4 <USBD_StdEPReq+0x30>
 800b8a4:	2b40      	cmp	r3, #64	; 0x40
 800b8a6:	f200 8140 	bhi.w	800bb2a <USBD_StdEPReq+0x2a6>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00c      	beq.n	800b8c8 <USBD_StdEPReq+0x44>
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 813b 	bne.w	800bb2a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	4798      	blx	r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c6:	e135      	b.n	800bb34 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	785b      	ldrb	r3, [r3, #1]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d007      	beq.n	800b8e0 <USBD_StdEPReq+0x5c>
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	f300 8124 	bgt.w	800bb1e <USBD_StdEPReq+0x29a>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d07b      	beq.n	800b9d2 <USBD_StdEPReq+0x14e>
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d03b      	beq.n	800b956 <USBD_StdEPReq+0xd2>
 800b8de:	e11e      	b.n	800bb1e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d002      	beq.n	800b8f0 <USBD_StdEPReq+0x6c>
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d016      	beq.n	800b91c <USBD_StdEPReq+0x98>
 800b8ee:	e02c      	b.n	800b94a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00d      	beq.n	800b912 <USBD_StdEPReq+0x8e>
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b80      	cmp	r3, #128	; 0x80
 800b8fa:	d00a      	beq.n	800b912 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f8db 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b906:	2180      	movs	r1, #128	; 0x80
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f8d7 	bl	800cabc <USBD_LL_StallEP>
 800b90e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b910:	e020      	b.n	800b954 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fc4e 	bl	800c1b6 <USBD_CtlError>
        break;
 800b91a:	e01b      	b.n	800b954 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	885b      	ldrh	r3, [r3, #2]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10e      	bne.n	800b942 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00b      	beq.n	800b942 <USBD_StdEPReq+0xbe>
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	2b80      	cmp	r3, #128	; 0x80
 800b92e:	d008      	beq.n	800b942 <USBD_StdEPReq+0xbe>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	88db      	ldrh	r3, [r3, #6]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d104      	bne.n	800b942 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 f8bd 	bl	800cabc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fd02 	bl	800c34c <USBD_CtlSendStatus>

        break;
 800b948:	e004      	b.n	800b954 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc32 	bl	800c1b6 <USBD_CtlError>
        break;
 800b952:	bf00      	nop
      }
      break;
 800b954:	e0e8      	b.n	800bb28 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d002      	beq.n	800b966 <USBD_StdEPReq+0xe2>
 800b960:	2b03      	cmp	r3, #3
 800b962:	d016      	beq.n	800b992 <USBD_StdEPReq+0x10e>
 800b964:	e02e      	b.n	800b9c4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00d      	beq.n	800b988 <USBD_StdEPReq+0x104>
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2b80      	cmp	r3, #128	; 0x80
 800b970:	d00a      	beq.n	800b988 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f001 f8a0 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b97c:	2180      	movs	r1, #128	; 0x80
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 f89c 	bl	800cabc <USBD_LL_StallEP>
 800b984:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b986:	e023      	b.n	800b9d0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fc13 	bl	800c1b6 <USBD_CtlError>
        break;
 800b990:	e01e      	b.n	800b9d0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	885b      	ldrh	r3, [r3, #2]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d119      	bne.n	800b9ce <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d004      	beq.n	800b9ae <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 f8a6 	bl	800cafa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fccc 	bl	800c34c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
        }
        break;
 800b9c2:	e004      	b.n	800b9ce <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fbf5 	bl	800c1b6 <USBD_CtlError>
        break;
 800b9cc:	e000      	b.n	800b9d0 <USBD_StdEPReq+0x14c>
        break;
 800b9ce:	bf00      	nop
      }
      break;
 800b9d0:	e0aa      	b.n	800bb28 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d002      	beq.n	800b9e2 <USBD_StdEPReq+0x15e>
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d032      	beq.n	800ba46 <USBD_StdEPReq+0x1c2>
 800b9e0:	e097      	b.n	800bb12 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9e2:	7bbb      	ldrb	r3, [r7, #14]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <USBD_StdEPReq+0x174>
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b80      	cmp	r3, #128	; 0x80
 800b9ec:	d004      	beq.n	800b9f8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fbe0 	bl	800c1b6 <USBD_CtlError>
          break;
 800b9f6:	e091      	b.n	800bb1c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	da0b      	bge.n	800ba18 <USBD_StdEPReq+0x194>
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	3310      	adds	r3, #16
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4413      	add	r3, r2
 800ba14:	3304      	adds	r3, #4
 800ba16:	e00b      	b.n	800ba30 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	3304      	adds	r3, #4
 800ba30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fc2a 	bl	800c298 <USBD_CtlSendData>
        break;
 800ba44:	e06a      	b.n	800bb1c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ba46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	da11      	bge.n	800ba72 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba4e:	7bbb      	ldrb	r3, [r7, #14]
 800ba50:	f003 020f 	and.w	r2, r3, #15
 800ba54:	6879      	ldr	r1, [r7, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	440b      	add	r3, r1
 800ba60:	3324      	adds	r3, #36	; 0x24
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d117      	bne.n	800ba98 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fba3 	bl	800c1b6 <USBD_CtlError>
            break;
 800ba70:	e054      	b.n	800bb1c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	f003 020f 	and.w	r2, r3, #15
 800ba78:	6879      	ldr	r1, [r7, #4]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	440b      	add	r3, r1
 800ba84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fb90 	bl	800c1b6 <USBD_CtlError>
            break;
 800ba96:	e041      	b.n	800bb1c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	da0b      	bge.n	800bab8 <USBD_StdEPReq+0x234>
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	3310      	adds	r3, #16
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	4413      	add	r3, r2
 800bab4:	3304      	adds	r3, #4
 800bab6:	e00b      	b.n	800bad0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	3304      	adds	r3, #4
 800bad0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <USBD_StdEPReq+0x25a>
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	2b80      	cmp	r3, #128	; 0x80
 800badc:	d103      	bne.n	800bae6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e00e      	b.n	800bb04 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f001 f824 	bl	800cb38 <USBD_LL_IsStallEP>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2201      	movs	r2, #1
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	e002      	b.n	800bb04 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2202      	movs	r2, #2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fbc4 	bl	800c298 <USBD_CtlSendData>
          break;
 800bb10:	e004      	b.n	800bb1c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fb4e 	bl	800c1b6 <USBD_CtlError>
        break;
 800bb1a:	bf00      	nop
      }
      break;
 800bb1c:	e004      	b.n	800bb28 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fb48 	bl	800c1b6 <USBD_CtlError>
      break;
 800bb26:	bf00      	nop
    }
    break;
 800bb28:	e004      	b.n	800bb34 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fb42 	bl	800c1b6 <USBD_CtlError>
    break;
 800bb32:	bf00      	nop
  }

  return ret;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	885b      	ldrh	r3, [r3, #2]
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	2b06      	cmp	r3, #6
 800bb62:	f200 813b 	bhi.w	800bddc <USBD_GetDescriptor+0x29c>
 800bb66:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <USBD_GetDescriptor+0x2c>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bb89 	.word	0x0800bb89
 800bb70:	0800bba1 	.word	0x0800bba1
 800bb74:	0800bbe1 	.word	0x0800bbe1
 800bb78:	0800bddd 	.word	0x0800bddd
 800bb7c:	0800bddd 	.word	0x0800bddd
 800bb80:	0800bd7d 	.word	0x0800bd7d
 800bb84:	0800bda9 	.word	0x0800bda9
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	7c12      	ldrb	r2, [r2, #16]
 800bb94:	f107 0108 	add.w	r1, r7, #8
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	60f8      	str	r0, [r7, #12]
    break;
 800bb9e:	e125      	b.n	800bdec <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7c1b      	ldrb	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10d      	bne.n	800bbc4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb0:	f107 0208 	add.w	r2, r7, #8
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bbc2:	e113      	b.n	800bdec <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	f107 0208 	add.w	r2, r7, #8
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	2202      	movs	r2, #2
 800bbdc:	701a      	strb	r2, [r3, #0]
    break;
 800bbde:	e105      	b.n	800bdec <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	885b      	ldrh	r3, [r3, #2]
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b05      	cmp	r3, #5
 800bbe8:	f200 80ac 	bhi.w	800bd44 <USBD_GetDescriptor+0x204>
 800bbec:	a201      	add	r2, pc, #4	; (adr r2, 800bbf4 <USBD_GetDescriptor+0xb4>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc0d 	.word	0x0800bc0d
 800bbf8:	0800bc41 	.word	0x0800bc41
 800bbfc:	0800bc75 	.word	0x0800bc75
 800bc00:	0800bca9 	.word	0x0800bca9
 800bc04:	0800bcdd 	.word	0x0800bcdd
 800bc08:	0800bd11 	.word	0x0800bd11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00b      	beq.n	800bc30 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	7c12      	ldrb	r2, [r2, #16]
 800bc24:	f107 0108 	add.w	r1, r7, #8
 800bc28:	4610      	mov	r0, r2
 800bc2a:	4798      	blx	r3
 800bc2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc2e:	e0a4      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fabf 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bc38:	7afb      	ldrb	r3, [r7, #11]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	72fb      	strb	r3, [r7, #11]
      break;
 800bc3e:	e09c      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	7c12      	ldrb	r2, [r2, #16]
 800bc58:	f107 0108 	add.w	r1, r7, #8
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
 800bc60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc62:	e08a      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 faa5 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bc6c:	7afb      	ldrb	r3, [r7, #11]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	72fb      	strb	r3, [r7, #11]
      break;
 800bc72:	e082      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	7c12      	ldrb	r2, [r2, #16]
 800bc8c:	f107 0108 	add.w	r1, r7, #8
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
 800bc94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc96:	e070      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fa8b 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bca0:	7afb      	ldrb	r3, [r7, #11]
 800bca2:	3301      	adds	r3, #1
 800bca4:	72fb      	strb	r3, [r7, #11]
      break;
 800bca6:	e068      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	7c12      	ldrb	r2, [r2, #16]
 800bcc0:	f107 0108 	add.w	r1, r7, #8
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	4798      	blx	r3
 800bcc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcca:	e056      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa71 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	72fb      	strb	r3, [r7, #11]
      break;
 800bcda:	e04e      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00b      	beq.n	800bd00 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	7c12      	ldrb	r2, [r2, #16]
 800bcf4:	f107 0108 	add.w	r1, r7, #8
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
 800bcfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcfe:	e03c      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fa57 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	72fb      	strb	r3, [r7, #11]
      break;
 800bd0e:	e034      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	7c12      	ldrb	r2, [r2, #16]
 800bd28:	f107 0108 	add.w	r1, r7, #8
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	4798      	blx	r3
 800bd30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd32:	e022      	b.n	800bd7a <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fa3d 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bd3c:	7afb      	ldrb	r3, [r7, #11]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	72fb      	strb	r3, [r7, #11]
      break;
 800bd42:	e01a      	b.n	800bd7a <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00c      	beq.n	800bd6a <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	8852      	ldrh	r2, [r2, #2]
 800bd5c:	b2d1      	uxtb	r1, r2
 800bd5e:	f107 0208 	add.w	r2, r7, #8
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
 800bd66:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 800bd68:	e006      	b.n	800bd78 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fa22 	bl	800c1b6 <USBD_CtlError>
        err++;
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	3301      	adds	r3, #1
 800bd76:	72fb      	strb	r3, [r7, #11]
      break;
 800bd78:	bf00      	nop
    }
    break;
 800bd7a:	e037      	b.n	800bdec <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7c1b      	ldrb	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8c:	f107 0208 	add.w	r2, r7, #8
 800bd90:	4610      	mov	r0, r2
 800bd92:	4798      	blx	r3
 800bd94:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bd96:	e029      	b.n	800bdec <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fa0b 	bl	800c1b6 <USBD_CtlError>
      err++;
 800bda0:	7afb      	ldrb	r3, [r7, #11]
 800bda2:	3301      	adds	r3, #1
 800bda4:	72fb      	strb	r3, [r7, #11]
    break;
 800bda6:	e021      	b.n	800bdec <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	7c1b      	ldrb	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10d      	bne.n	800bdcc <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb8:	f107 0208 	add.w	r2, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	2207      	movs	r2, #7
 800bdc8:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bdca:	e00f      	b.n	800bdec <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f9f1 	bl	800c1b6 <USBD_CtlError>
      err++;
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	72fb      	strb	r3, [r7, #11]
    break;
 800bdda:	e007      	b.n	800bdec <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9e9 	bl	800c1b6 <USBD_CtlError>
    err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
    break;
 800bdea:	bf00      	nop
  }

  if (err != 0U)
 800bdec:	7afb      	ldrb	r3, [r7, #11]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11e      	bne.n	800be30 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	88db      	ldrh	r3, [r3, #6]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d016      	beq.n	800be28 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00e      	beq.n	800be1e <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	88da      	ldrh	r2, [r3, #6]
 800be04:	893b      	ldrh	r3, [r7, #8]
 800be06:	4293      	cmp	r3, r2
 800be08:	bf28      	it	cs
 800be0a:	4613      	movcs	r3, r2
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800be10:	893b      	ldrh	r3, [r7, #8]
 800be12:	461a      	mov	r2, r3
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa3e 	bl	800c298 <USBD_CtlSendData>
 800be1c:	e009      	b.n	800be32 <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f9c8 	bl	800c1b6 <USBD_CtlError>
 800be26:	e004      	b.n	800be32 <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa8f 	bl	800c34c <USBD_CtlSendStatus>
 800be2e:	e000      	b.n	800be32 <USBD_GetDescriptor+0x2f2>
    return;
 800be30:	bf00      	nop
    }
  }
}
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	889b      	ldrh	r3, [r3, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d130      	bne.n	800beac <USBD_SetAddress+0x74>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	88db      	ldrh	r3, [r3, #6]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d12c      	bne.n	800beac <USBD_SetAddress+0x74>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	885b      	ldrh	r3, [r3, #2]
 800be56:	2b7f      	cmp	r3, #127	; 0x7f
 800be58:	d828      	bhi.n	800beac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	d104      	bne.n	800be7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f99f 	bl	800c1b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be78:	e01d      	b.n	800beb6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	7bfa      	ldrb	r2, [r7, #15]
 800be7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fe82 	bl	800cb90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa5d 	bl	800c34c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bea0:	e009      	b.n	800beb6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beaa:	e004      	b.n	800beb6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f981 	bl	800c1b6 <USBD_CtlError>
  }
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	885b      	ldrh	r3, [r3, #2]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	4b4b      	ldr	r3, [pc, #300]	; (800c004 <USBD_SetConfig+0x144>)
 800bed6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bed8:	4b4a      	ldr	r3, [pc, #296]	; (800c004 <USBD_SetConfig+0x144>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d905      	bls.n	800beec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f967 	bl	800c1b6 <USBD_CtlError>
    return USBD_FAIL;
 800bee8:	2303      	movs	r3, #3
 800beea:	e087      	b.n	800bffc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d002      	beq.n	800befc <USBD_SetConfig+0x3c>
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d025      	beq.n	800bf46 <USBD_SetConfig+0x86>
 800befa:	e071      	b.n	800bfe0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800befc:	4b41      	ldr	r3, [pc, #260]	; (800c004 <USBD_SetConfig+0x144>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01c      	beq.n	800bf3e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bf04:	4b3f      	ldr	r3, [pc, #252]	; (800c004 <USBD_SetConfig+0x144>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf0e:	4b3d      	ldr	r3, [pc, #244]	; (800c004 <USBD_SetConfig+0x144>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff f987 	bl	800b228 <USBD_SetClassConfig>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d004      	beq.n	800bf2e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f945 	bl	800c1b6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bf2c:	e065      	b.n	800bffa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa0c 	bl	800c34c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2203      	movs	r2, #3
 800bf38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bf3c:	e05d      	b.n	800bffa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fa04 	bl	800c34c <USBD_CtlSendStatus>
    break;
 800bf44:	e059      	b.n	800bffa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800bf46:	4b2f      	ldr	r3, [pc, #188]	; (800c004 <USBD_SetConfig+0x144>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d112      	bne.n	800bf74 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800bf56:	4b2b      	ldr	r3, [pc, #172]	; (800c004 <USBD_SetConfig+0x144>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf60:	4b28      	ldr	r3, [pc, #160]	; (800c004 <USBD_SetConfig+0x144>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff f97a 	bl	800b260 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f9ed 	bl	800c34c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bf72:	e042      	b.n	800bffa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bf74:	4b23      	ldr	r3, [pc, #140]	; (800c004 <USBD_SetConfig+0x144>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d02a      	beq.n	800bfd8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff f968 	bl	800b260 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bf90:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <USBD_SetConfig+0x144>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf9a:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <USBD_SetConfig+0x144>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff f941 	bl	800b228 <USBD_SetClassConfig>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00f      	beq.n	800bfd0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f8ff 	bl	800c1b6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff f94d 	bl	800b260 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2202      	movs	r2, #2
 800bfca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bfce:	e014      	b.n	800bffa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f9bb 	bl	800c34c <USBD_CtlSendStatus>
    break;
 800bfd6:	e010      	b.n	800bffa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f9b7 	bl	800c34c <USBD_CtlSendStatus>
    break;
 800bfde:	e00c      	b.n	800bffa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f8e7 	bl	800c1b6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfe8:	4b06      	ldr	r3, [pc, #24]	; (800c004 <USBD_SetConfig+0x144>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff f936 	bl	800b260 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bff4:	2303      	movs	r3, #3
 800bff6:	73fb      	strb	r3, [r7, #15]
    break;
 800bff8:	bf00      	nop
  }

  return ret;
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200008ab 	.word	0x200008ab

0800c008 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	88db      	ldrh	r3, [r3, #6]
 800c016:	2b01      	cmp	r3, #1
 800c018:	d004      	beq.n	800c024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f8ca 	bl	800c1b6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c022:	e022      	b.n	800c06a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	dc02      	bgt.n	800c034 <USBD_GetConfig+0x2c>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dc03      	bgt.n	800c03a <USBD_GetConfig+0x32>
 800c032:	e015      	b.n	800c060 <USBD_GetConfig+0x58>
 800c034:	2b03      	cmp	r3, #3
 800c036:	d00b      	beq.n	800c050 <USBD_GetConfig+0x48>
 800c038:	e012      	b.n	800c060 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3308      	adds	r3, #8
 800c044:	2201      	movs	r2, #1
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f925 	bl	800c298 <USBD_CtlSendData>
      break;
 800c04e:	e00c      	b.n	800c06a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3304      	adds	r3, #4
 800c054:	2201      	movs	r2, #1
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f91d 	bl	800c298 <USBD_CtlSendData>
      break;
 800c05e:	e004      	b.n	800c06a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f8a7 	bl	800c1b6 <USBD_CtlError>
      break;
 800c068:	bf00      	nop
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b082      	sub	sp, #8
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c082:	3b01      	subs	r3, #1
 800c084:	2b02      	cmp	r3, #2
 800c086:	d81e      	bhi.n	800c0c6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d004      	beq.n	800c09a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f88f 	bl	800c1b6 <USBD_CtlError>
      break;
 800c098:	e01a      	b.n	800c0d0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d005      	beq.n	800c0b6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	f043 0202 	orr.w	r2, r3, #2
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f8ea 	bl	800c298 <USBD_CtlSendData>
    break;
 800c0c4:	e004      	b.n	800c0d0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f874 	bl	800c1b6 <USBD_CtlError>
    break;
 800c0ce:	bf00      	nop
  }
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	885b      	ldrh	r3, [r3, #2]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d106      	bne.n	800c0f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f92a 	bl	800c34c <USBD_CtlSendStatus>
  }
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c110:	3b01      	subs	r3, #1
 800c112:	2b02      	cmp	r3, #2
 800c114:	d80b      	bhi.n	800c12e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d10c      	bne.n	800c138 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f910 	bl	800c34c <USBD_CtlSendStatus>
      }
      break;
 800c12c:	e004      	b.n	800c138 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f840 	bl	800c1b6 <USBD_CtlError>
      break;
 800c136:	e000      	b.n	800c13a <USBD_ClrFeature+0x3a>
      break;
 800c138:	bf00      	nop
  }
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	781a      	ldrb	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3301      	adds	r3, #1
 800c15c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	781a      	ldrb	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3301      	adds	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f7ff fab4 	bl	800b6da <SWAPBYTE>
 800c172:	4603      	mov	r3, r0
 800c174:	461a      	mov	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3301      	adds	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff faa7 	bl	800b6da <SWAPBYTE>
 800c18c:	4603      	mov	r3, r0
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3301      	adds	r3, #1
 800c198:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3301      	adds	r3, #1
 800c19e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7ff fa9a 	bl	800b6da <SWAPBYTE>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	80da      	strh	r2, [r3, #6]
}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1c0:	2180      	movs	r1, #128	; 0x80
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fc7a 	bl	800cabc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fc76 	bl	800cabc <USBD_LL_StallEP>
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d036      	beq.n	800c25c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1f2:	6938      	ldr	r0, [r7, #16]
 800c1f4:	f000 f836 	bl	800c264 <USBD_GetLen>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	b29a      	uxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	4413      	add	r3, r2
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	7812      	ldrb	r2, [r2, #0]
 800c210:	701a      	strb	r2, [r3, #0]
  idx++;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	3301      	adds	r3, #1
 800c216:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c218:	7dfb      	ldrb	r3, [r7, #23]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	4413      	add	r3, r2
 800c21e:	2203      	movs	r2, #3
 800c220:	701a      	strb	r2, [r3, #0]
  idx++;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	3301      	adds	r3, #1
 800c226:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c228:	e013      	b.n	800c252 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	4413      	add	r3, r2
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	7812      	ldrb	r2, [r2, #0]
 800c234:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	3301      	adds	r3, #1
 800c23a:	613b      	str	r3, [r7, #16]
    idx++;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	3301      	adds	r3, #1
 800c240:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	4413      	add	r3, r2
 800c248:	2200      	movs	r2, #0
 800c24a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
 800c24e:	3301      	adds	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1e7      	bne.n	800c22a <USBD_GetString+0x52>
 800c25a:	e000      	b.n	800c25e <USBD_GetString+0x86>
    return;
 800c25c:	bf00      	nop
  }
}
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c274:	e005      	b.n	800c282 <USBD_GetLen+0x1e>
  {
    len++;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	3301      	adds	r3, #1
 800c27a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	3301      	adds	r3, #1
 800c280:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1f5      	bne.n	800c276 <USBD_GetLen+0x12>
  }

  return len;
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 fc85 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	2100      	movs	r1, #0
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 fc74 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2203      	movs	r2, #3
 800c300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	2100      	movs	r1, #0
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 fc78 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	2100      	movs	r1, #0
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 fc67 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2204      	movs	r2, #4
 800c358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c35c:	2300      	movs	r3, #0
 800c35e:	2200      	movs	r2, #0
 800c360:	2100      	movs	r1, #0
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fc33 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2205      	movs	r2, #5
 800c37e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c382:	2300      	movs	r3, #0
 800c384:	2200      	movs	r2, #0
 800c386:	2100      	movs	r1, #0
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fc41 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c39c:	2200      	movs	r2, #0
 800c39e:	4912      	ldr	r1, [pc, #72]	; (800c3e8 <MX_USB_DEVICE_Init+0x50>)
 800c3a0:	4812      	ldr	r0, [pc, #72]	; (800c3ec <MX_USB_DEVICE_Init+0x54>)
 800c3a2:	f7fe fead 	bl	800b100 <USBD_Init>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3ac:	f7f6 fe6c 	bl	8003088 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800c3b0:	490f      	ldr	r1, [pc, #60]	; (800c3f0 <MX_USB_DEVICE_Init+0x58>)
 800c3b2:	480e      	ldr	r0, [pc, #56]	; (800c3ec <MX_USB_DEVICE_Init+0x54>)
 800c3b4:	f7fe feda 	bl	800b16c <USBD_RegisterClass>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3be:	f7f6 fe63 	bl	8003088 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800c3c2:	490c      	ldr	r1, [pc, #48]	; (800c3f4 <MX_USB_DEVICE_Init+0x5c>)
 800c3c4:	4809      	ldr	r0, [pc, #36]	; (800c3ec <MX_USB_DEVICE_Init+0x54>)
 800c3c6:	f7fe fb39 	bl	800aa3c <USBD_DFU_RegisterMedia>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3d0:	f7f6 fe5a 	bl	8003088 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3d4:	4805      	ldr	r0, [pc, #20]	; (800c3ec <MX_USB_DEVICE_Init+0x54>)
 800c3d6:	f7fe feea 	bl	800b1ae <USBD_Start>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3e0:	f7f6 fe52 	bl	8003088 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3e4:	bf00      	nop
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	200004d4 	.word	0x200004d4
 800c3ec:	20001b90 	.word	0x20001b90
 800c3f0:	20000470 	.word	0x20000470
 800c3f4:	20000524 	.word	0x20000524

0800c3f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	6039      	str	r1, [r7, #0]
 800c402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2212      	movs	r2, #18
 800c408:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c40a:	4b03      	ldr	r3, [pc, #12]	; (800c418 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	200004f0 	.word	0x200004f0

0800c41c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	6039      	str	r1, [r7, #0]
 800c426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2204      	movs	r2, #4
 800c42c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c42e:	4b03      	ldr	r3, [pc, #12]	; (800c43c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c430:	4618      	mov	r0, r3
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	20000504 	.word	0x20000504

0800c440 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	6039      	str	r1, [r7, #0]
 800c44a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d105      	bne.n	800c45e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	4907      	ldr	r1, [pc, #28]	; (800c474 <USBD_FS_ProductStrDescriptor+0x34>)
 800c456:	4808      	ldr	r0, [pc, #32]	; (800c478 <USBD_FS_ProductStrDescriptor+0x38>)
 800c458:	f7ff febe 	bl	800c1d8 <USBD_GetString>
 800c45c:	e004      	b.n	800c468 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	4904      	ldr	r1, [pc, #16]	; (800c474 <USBD_FS_ProductStrDescriptor+0x34>)
 800c462:	4805      	ldr	r0, [pc, #20]	; (800c478 <USBD_FS_ProductStrDescriptor+0x38>)
 800c464:	f7ff feb8 	bl	800c1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c468:	4b02      	ldr	r3, [pc, #8]	; (800c474 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20001e60 	.word	0x20001e60
 800c478:	08011228 	.word	0x08011228

0800c47c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	6039      	str	r1, [r7, #0]
 800c486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	4904      	ldr	r1, [pc, #16]	; (800c49c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c48c:	4804      	ldr	r0, [pc, #16]	; (800c4a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c48e:	f7ff fea3 	bl	800c1d8 <USBD_GetString>
  return USBD_StrDesc;
 800c492:	4b02      	ldr	r3, [pc, #8]	; (800c49c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	20001e60 	.word	0x20001e60
 800c4a0:	08011248 	.word	0x08011248

0800c4a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	6039      	str	r1, [r7, #0]
 800c4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	221a      	movs	r2, #26
 800c4b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4b6:	f000 f843 	bl	800c540 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4ba:	4b02      	ldr	r3, [pc, #8]	; (800c4c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20000508 	.word	0x20000508

0800c4c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	6039      	str	r1, [r7, #0]
 800c4d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4d4:	79fb      	ldrb	r3, [r7, #7]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4907      	ldr	r1, [pc, #28]	; (800c4fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4de:	4808      	ldr	r0, [pc, #32]	; (800c500 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4e0:	f7ff fe7a 	bl	800c1d8 <USBD_GetString>
 800c4e4:	e004      	b.n	800c4f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	4904      	ldr	r1, [pc, #16]	; (800c4fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4ea:	4805      	ldr	r0, [pc, #20]	; (800c500 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4ec:	f7ff fe74 	bl	800c1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4f0:	4b02      	ldr	r3, [pc, #8]	; (800c4fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20001e60 	.word	0x20001e60
 800c500:	0801125c 	.word	0x0801125c

0800c504 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d105      	bne.n	800c522 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	4907      	ldr	r1, [pc, #28]	; (800c538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c51a:	4808      	ldr	r0, [pc, #32]	; (800c53c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c51c:	f7ff fe5c 	bl	800c1d8 <USBD_GetString>
 800c520:	e004      	b.n	800c52c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	4904      	ldr	r1, [pc, #16]	; (800c538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c526:	4805      	ldr	r0, [pc, #20]	; (800c53c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c528:	f7ff fe56 	bl	800c1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c52c:	4b02      	ldr	r3, [pc, #8]	; (800c538 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20001e60 	.word	0x20001e60
 800c53c:	08011268 	.word	0x08011268

0800c540 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c546:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <Get_SerialNum+0x44>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c54c:	4b0e      	ldr	r3, [pc, #56]	; (800c588 <Get_SerialNum+0x48>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c552:	4b0e      	ldr	r3, [pc, #56]	; (800c58c <Get_SerialNum+0x4c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4413      	add	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c566:	2208      	movs	r2, #8
 800c568:	4909      	ldr	r1, [pc, #36]	; (800c590 <Get_SerialNum+0x50>)
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 f814 	bl	800c598 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c570:	2204      	movs	r2, #4
 800c572:	4908      	ldr	r1, [pc, #32]	; (800c594 <Get_SerialNum+0x54>)
 800c574:	68b8      	ldr	r0, [r7, #8]
 800c576:	f000 f80f 	bl	800c598 <IntToUnicode>
  }
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	1fff7a10 	.word	0x1fff7a10
 800c588:	1fff7a14 	.word	0x1fff7a14
 800c58c:	1fff7a18 	.word	0x1fff7a18
 800c590:	2000050a 	.word	0x2000050a
 800c594:	2000051a 	.word	0x2000051a

0800c598 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c598:	b480      	push	{r7}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	75fb      	strb	r3, [r7, #23]
 800c5ae:	e027      	b.n	800c600 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	0f1b      	lsrs	r3, r3, #28
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d80b      	bhi.n	800c5d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	0f1b      	lsrs	r3, r3, #28
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	440b      	add	r3, r1
 800c5c8:	3230      	adds	r2, #48	; 0x30
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e00a      	b.n	800c5e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	0f1b      	lsrs	r3, r3, #28
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	440b      	add	r3, r1
 800c5e0:	3237      	adds	r2, #55	; 0x37
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	011b      	lsls	r3, r3, #4
 800c5ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5fa:	7dfb      	ldrb	r3, [r7, #23]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	75fb      	strb	r3, [r7, #23]
 800c600:	7dfa      	ldrb	r2, [r7, #23]
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	429a      	cmp	r2, r3
 800c606:	d3d3      	bcc.n	800c5b0 <IntToUnicode+0x18>
  }
}
 800c608:	bf00      	nop
 800c60a:	bf00      	nop
 800c60c:	371c      	adds	r7, #28
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800c616:	b480      	push	{r7}
 800c618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800c61a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800c626:	b480      	push	{r7}
 800c628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800c62a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800c63e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800c658:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c666:	b480      	push	{r7}
 800c668:	b085      	sub	sp, #20
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800c672:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	460b      	mov	r3, r1
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800c692:	bf00      	nop
  }
  return (USBD_OK);
 800c694:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b08a      	sub	sp, #40	; 0x28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6ac:	f107 0314 	add.w	r3, r7, #20
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	605a      	str	r2, [r3, #4]
 800c6b6:	609a      	str	r2, [r3, #8]
 800c6b8:	60da      	str	r2, [r3, #12]
 800c6ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6c4:	d158      	bne.n	800c778 <HAL_PCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	613b      	str	r3, [r7, #16]
 800c6ca:	4b2d      	ldr	r3, [pc, #180]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ce:	4a2c      	ldr	r2, [pc, #176]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c6d0:	f043 0301 	orr.w	r3, r3, #1
 800c6d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6d6:	4b2a      	ldr	r3, [pc, #168]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	613b      	str	r3, [r7, #16]
 800c6e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800c6e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6f4:	230a      	movs	r3, #10
 800c6f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6f8:	f107 0314 	add.w	r3, r7, #20
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	4821      	ldr	r0, [pc, #132]	; (800c784 <HAL_PCD_MspInit+0xe0>)
 800c700:	f7f8 f958 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c70a:	2300      	movs	r3, #0
 800c70c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c712:	f107 0314 	add.w	r3, r7, #20
 800c716:	4619      	mov	r1, r3
 800c718:	481a      	ldr	r0, [pc, #104]	; (800c784 <HAL_PCD_MspInit+0xe0>)
 800c71a:	f7f8 f94b 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c71e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c724:	2302      	movs	r3, #2
 800c726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c72c:	2300      	movs	r3, #0
 800c72e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c730:	230a      	movs	r3, #10
 800c732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c734:	f107 0314 	add.w	r3, r7, #20
 800c738:	4619      	mov	r1, r3
 800c73a:	4812      	ldr	r0, [pc, #72]	; (800c784 <HAL_PCD_MspInit+0xe0>)
 800c73c:	f7f8 f93a 	bl	80049b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c740:	4b0f      	ldr	r3, [pc, #60]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c744:	4a0e      	ldr	r2, [pc, #56]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c74a:	6353      	str	r3, [r2, #52]	; 0x34
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	4b0b      	ldr	r3, [pc, #44]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c754:	4a0a      	ldr	r2, [pc, #40]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c75a:	6453      	str	r3, [r2, #68]	; 0x44
 800c75c:	4b08      	ldr	r3, [pc, #32]	; (800c780 <HAL_PCD_MspInit+0xdc>)
 800c75e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 1);
 800c768:	2201      	movs	r2, #1
 800c76a:	2100      	movs	r1, #0
 800c76c:	2043      	movs	r0, #67	; 0x43
 800c76e:	f7f7 fdd6 	bl	800431e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c772:	2043      	movs	r0, #67	; 0x43
 800c774:	f7f7 fdef 	bl	8004356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c778:	bf00      	nop
 800c77a:	3728      	adds	r7, #40	; 0x28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	40023800 	.word	0x40023800
 800c784:	40020000 	.word	0x40020000

0800c788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c79c:	4619      	mov	r1, r3
 800c79e:	4610      	mov	r0, r2
 800c7a0:	f7fe fd76 	bl	800b290 <USBD_LL_SetupStage>
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7be:	78fa      	ldrb	r2, [r7, #3]
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	1a9b      	subs	r3, r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	440b      	add	r3, r1
 800c7cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f7fe fdb0 	bl	800b33a <USBD_LL_DataOutStage>
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7f4:	78fa      	ldrb	r2, [r7, #3]
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	3348      	adds	r3, #72	; 0x48
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	78fb      	ldrb	r3, [r7, #3]
 800c808:	4619      	mov	r1, r3
 800c80a:	f7fe fdf9 	bl	800b400 <USBD_LL_DataInStage>
}
 800c80e:	bf00      	nop
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe fefd 	bl	800b624 <USBD_LL_SOF>
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c83a:	2301      	movs	r3, #1
 800c83c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
 800c84a:	e008      	b.n	800c85e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d102      	bne.n	800c85a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]
 800c858:	e001      	b.n	800c85e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c85a:	f7f6 fc15 	bl	8003088 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c864:	7bfa      	ldrb	r2, [r7, #15]
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe fea0 	bl	800b5ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe fe59 	bl	800b52c <USBD_LL_Reset>
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c892:	4618      	mov	r0, r3
 800c894:	f7fe fe9b 	bl	800b5ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	6812      	ldr	r2, [r2, #0]
 800c8a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d005      	beq.n	800c8c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <HAL_PCD_SuspendCallback+0x48>)
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	4a03      	ldr	r2, [pc, #12]	; (800c8cc <HAL_PCD_SuspendCallback+0x48>)
 800c8be:	f043 0306 	orr.w	r3, r3, #6
 800c8c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	e000ed00 	.word	0xe000ed00

0800c8d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fe8a 	bl	800b5f8 <USBD_LL_Resume>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8fe:	78fa      	ldrb	r2, [r7, #3]
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f7fe feb5 	bl	800b672 <USBD_LL_IsoOUTIncomplete>
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c922:	78fa      	ldrb	r2, [r7, #3]
 800c924:	4611      	mov	r1, r2
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe fe96 	bl	800b658 <USBD_LL_IsoINIncomplete>
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe fea2 	bl	800b68c <USBD_LL_DevConnected>
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fe9f 	bl	800b6a2 <USBD_LL_DevDisconnected>
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d13c      	bne.n	800c9f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c97c:	4a20      	ldr	r2, [pc, #128]	; (800ca00 <USBD_LL_Init+0x94>)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a1e      	ldr	r2, [pc, #120]	; (800ca00 <USBD_LL_Init+0x94>)
 800c988:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c98c:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <USBD_LL_Init+0x94>)
 800c98e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c994:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <USBD_LL_Init+0x94>)
 800c996:	2204      	movs	r2, #4
 800c998:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c99a:	4b19      	ldr	r3, [pc, #100]	; (800ca00 <USBD_LL_Init+0x94>)
 800c99c:	2202      	movs	r2, #2
 800c99e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c9a0:	4b17      	ldr	r3, [pc, #92]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c9a6:	4b16      	ldr	r3, [pc, #88]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9a8:	2202      	movs	r2, #2
 800c9aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c9ac:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9b2:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9b8:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c9be:	4b10      	ldr	r3, [pc, #64]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9ca:	480d      	ldr	r0, [pc, #52]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9cc:	f7f8 f9e5 	bl	8004d9a <HAL_PCD_Init>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c9d6:	f7f6 fb57 	bl	8003088 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9da:	2180      	movs	r1, #128	; 0x80
 800c9dc:	4808      	ldr	r0, [pc, #32]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9de:	f7f9 fb1a 	bl	8006016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9e2:	2240      	movs	r2, #64	; 0x40
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	4806      	ldr	r0, [pc, #24]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9e8:	f7f9 face 	bl	8005f88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c9ec:	2280      	movs	r2, #128	; 0x80
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <USBD_LL_Init+0x94>)
 800c9f2:	f7f9 fac9 	bl	8005f88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20002060 	.word	0x20002060

0800ca04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f8 fada 	bl	8004fd4 <HAL_PCD_Start>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f914 	bl	800cc54 <USBD_Get_USB_Status>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7f8 faf2 	bl	800503a <HAL_PCD_Stop>
 800ca56:	4603      	mov	r3, r0
 800ca58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 f8f9 	bl	800cc54 <USBD_Get_USB_Status>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	70fb      	strb	r3, [r7, #3]
 800ca82:	460b      	mov	r3, r1
 800ca84:	70bb      	strb	r3, [r7, #2]
 800ca86:	4613      	mov	r3, r2
 800ca88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca98:	78bb      	ldrb	r3, [r7, #2]
 800ca9a:	883a      	ldrh	r2, [r7, #0]
 800ca9c:	78f9      	ldrb	r1, [r7, #3]
 800ca9e:	f7f8 fedc 	bl	800585a <HAL_PCD_EP_Open>
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f8d3 	bl	800cc54 <USBD_Get_USB_Status>
 800caae:	4603      	mov	r3, r0
 800cab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cad6:	78fa      	ldrb	r2, [r7, #3]
 800cad8:	4611      	mov	r1, r2
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f8 ffba 	bl	8005a54 <HAL_PCD_EP_SetStall>
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f8b4 	bl	800cc54 <USBD_Get_USB_Status>
 800caec:	4603      	mov	r3, r0
 800caee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f8 ffff 	bl	8005b1c <HAL_PCD_EP_ClrStall>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f895 	bl	800cc54 <USBD_Get_USB_Status>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	da0b      	bge.n	800cb6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb54:	78fb      	ldrb	r3, [r7, #3]
 800cb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	333e      	adds	r3, #62	; 0x3e
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	e00b      	b.n	800cb84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	4613      	mov	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	460b      	mov	r3, r1
 800cb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbaa:	78fa      	ldrb	r2, [r7, #3]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f8 fe2e 	bl	8005810 <HAL_PCD_SetAddress>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f84a 	bl	800cc54 <USBD_Get_USB_Status>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b086      	sub	sp, #24
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbec:	7af9      	ldrb	r1, [r7, #11]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	f7f8 fee5 	bl	80059c0 <HAL_PCD_EP_Transmit>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f829 	bl	800cc54 <USBD_Get_USB_Status>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc06:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc2e:	7af9      	ldrb	r1, [r7, #11]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	f7f8 fe79 	bl	800592a <HAL_PCD_EP_Receive>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 f808 	bl	800cc54 <USBD_Get_USB_Status>
 800cc44:	4603      	mov	r3, r0
 800cc46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc48:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d817      	bhi.n	800cc98 <USBD_Get_USB_Status+0x44>
 800cc68:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <USBD_Get_USB_Status+0x1c>)
 800cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6e:	bf00      	nop
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cc87 	.word	0x0800cc87
 800cc78:	0800cc8d 	.word	0x0800cc8d
 800cc7c:	0800cc93 	.word	0x0800cc93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	e00b      	b.n	800cc9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc86:	2303      	movs	r3, #3
 800cc88:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8a:	e008      	b.n	800cc9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	e005      	b.n	800cc9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc92:	2303      	movs	r3, #3
 800cc94:	73fb      	strb	r3, [r7, #15]
    break;
 800cc96:	e002      	b.n	800cc9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc9c:	bf00      	nop
  }
  return usb_status;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <atof>:
 800ccac:	2100      	movs	r1, #0
 800ccae:	f001 bbc1 	b.w	800e434 <strtod>
	...

0800ccb4 <__errno>:
 800ccb4:	4b01      	ldr	r3, [pc, #4]	; (800ccbc <__errno+0x8>)
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	20000540 	.word	0x20000540

0800ccc0 <__libc_init_array>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	4d0d      	ldr	r5, [pc, #52]	; (800ccf8 <__libc_init_array+0x38>)
 800ccc4:	4c0d      	ldr	r4, [pc, #52]	; (800ccfc <__libc_init_array+0x3c>)
 800ccc6:	1b64      	subs	r4, r4, r5
 800ccc8:	10a4      	asrs	r4, r4, #2
 800ccca:	2600      	movs	r6, #0
 800cccc:	42a6      	cmp	r6, r4
 800ccce:	d109      	bne.n	800cce4 <__libc_init_array+0x24>
 800ccd0:	4d0b      	ldr	r5, [pc, #44]	; (800cd00 <__libc_init_array+0x40>)
 800ccd2:	4c0c      	ldr	r4, [pc, #48]	; (800cd04 <__libc_init_array+0x44>)
 800ccd4:	f004 f9ba 	bl	801104c <_init>
 800ccd8:	1b64      	subs	r4, r4, r5
 800ccda:	10a4      	asrs	r4, r4, #2
 800ccdc:	2600      	movs	r6, #0
 800ccde:	42a6      	cmp	r6, r4
 800cce0:	d105      	bne.n	800ccee <__libc_init_array+0x2e>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
 800cce4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cce8:	4798      	blx	r3
 800ccea:	3601      	adds	r6, #1
 800ccec:	e7ee      	b.n	800cccc <__libc_init_array+0xc>
 800ccee:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccf2:	4798      	blx	r3
 800ccf4:	3601      	adds	r6, #1
 800ccf6:	e7f2      	b.n	800ccde <__libc_init_array+0x1e>
 800ccf8:	080117a4 	.word	0x080117a4
 800ccfc:	080117a4 	.word	0x080117a4
 800cd00:	080117a4 	.word	0x080117a4
 800cd04:	080117a8 	.word	0x080117a8

0800cd08 <malloc>:
 800cd08:	4b02      	ldr	r3, [pc, #8]	; (800cd14 <malloc+0xc>)
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	6818      	ldr	r0, [r3, #0]
 800cd0e:	f000 b863 	b.w	800cdd8 <_malloc_r>
 800cd12:	bf00      	nop
 800cd14:	20000540 	.word	0x20000540

0800cd18 <free>:
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <free+0xc>)
 800cd1a:	4601      	mov	r1, r0
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	f000 b80b 	b.w	800cd38 <_free_r>
 800cd22:	bf00      	nop
 800cd24:	20000540 	.word	0x20000540

0800cd28 <memset>:
 800cd28:	4402      	add	r2, r0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d100      	bne.n	800cd32 <memset+0xa>
 800cd30:	4770      	bx	lr
 800cd32:	f803 1b01 	strb.w	r1, [r3], #1
 800cd36:	e7f9      	b.n	800cd2c <memset+0x4>

0800cd38 <_free_r>:
 800cd38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd3a:	2900      	cmp	r1, #0
 800cd3c:	d048      	beq.n	800cdd0 <_free_r+0x98>
 800cd3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd42:	9001      	str	r0, [sp, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f1a1 0404 	sub.w	r4, r1, #4
 800cd4a:	bfb8      	it	lt
 800cd4c:	18e4      	addlt	r4, r4, r3
 800cd4e:	f002 fd8b 	bl	800f868 <__malloc_lock>
 800cd52:	4a20      	ldr	r2, [pc, #128]	; (800cdd4 <_free_r+0x9c>)
 800cd54:	9801      	ldr	r0, [sp, #4]
 800cd56:	6813      	ldr	r3, [r2, #0]
 800cd58:	4615      	mov	r5, r2
 800cd5a:	b933      	cbnz	r3, 800cd6a <_free_r+0x32>
 800cd5c:	6063      	str	r3, [r4, #4]
 800cd5e:	6014      	str	r4, [r2, #0]
 800cd60:	b003      	add	sp, #12
 800cd62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd66:	f002 bd85 	b.w	800f874 <__malloc_unlock>
 800cd6a:	42a3      	cmp	r3, r4
 800cd6c:	d90b      	bls.n	800cd86 <_free_r+0x4e>
 800cd6e:	6821      	ldr	r1, [r4, #0]
 800cd70:	1862      	adds	r2, r4, r1
 800cd72:	4293      	cmp	r3, r2
 800cd74:	bf04      	itt	eq
 800cd76:	681a      	ldreq	r2, [r3, #0]
 800cd78:	685b      	ldreq	r3, [r3, #4]
 800cd7a:	6063      	str	r3, [r4, #4]
 800cd7c:	bf04      	itt	eq
 800cd7e:	1852      	addeq	r2, r2, r1
 800cd80:	6022      	streq	r2, [r4, #0]
 800cd82:	602c      	str	r4, [r5, #0]
 800cd84:	e7ec      	b.n	800cd60 <_free_r+0x28>
 800cd86:	461a      	mov	r2, r3
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	b10b      	cbz	r3, 800cd90 <_free_r+0x58>
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d9fa      	bls.n	800cd86 <_free_r+0x4e>
 800cd90:	6811      	ldr	r1, [r2, #0]
 800cd92:	1855      	adds	r5, r2, r1
 800cd94:	42a5      	cmp	r5, r4
 800cd96:	d10b      	bne.n	800cdb0 <_free_r+0x78>
 800cd98:	6824      	ldr	r4, [r4, #0]
 800cd9a:	4421      	add	r1, r4
 800cd9c:	1854      	adds	r4, r2, r1
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	6011      	str	r1, [r2, #0]
 800cda2:	d1dd      	bne.n	800cd60 <_free_r+0x28>
 800cda4:	681c      	ldr	r4, [r3, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	6053      	str	r3, [r2, #4]
 800cdaa:	4421      	add	r1, r4
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	e7d7      	b.n	800cd60 <_free_r+0x28>
 800cdb0:	d902      	bls.n	800cdb8 <_free_r+0x80>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	6003      	str	r3, [r0, #0]
 800cdb6:	e7d3      	b.n	800cd60 <_free_r+0x28>
 800cdb8:	6825      	ldr	r5, [r4, #0]
 800cdba:	1961      	adds	r1, r4, r5
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf04      	itt	eq
 800cdc0:	6819      	ldreq	r1, [r3, #0]
 800cdc2:	685b      	ldreq	r3, [r3, #4]
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	bf04      	itt	eq
 800cdc8:	1949      	addeq	r1, r1, r5
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	6054      	str	r4, [r2, #4]
 800cdce:	e7c7      	b.n	800cd60 <_free_r+0x28>
 800cdd0:	b003      	add	sp, #12
 800cdd2:	bd30      	pop	{r4, r5, pc}
 800cdd4:	200008ac 	.word	0x200008ac

0800cdd8 <_malloc_r>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	1ccd      	adds	r5, r1, #3
 800cddc:	f025 0503 	bic.w	r5, r5, #3
 800cde0:	3508      	adds	r5, #8
 800cde2:	2d0c      	cmp	r5, #12
 800cde4:	bf38      	it	cc
 800cde6:	250c      	movcc	r5, #12
 800cde8:	2d00      	cmp	r5, #0
 800cdea:	4606      	mov	r6, r0
 800cdec:	db01      	blt.n	800cdf2 <_malloc_r+0x1a>
 800cdee:	42a9      	cmp	r1, r5
 800cdf0:	d903      	bls.n	800cdfa <_malloc_r+0x22>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	6033      	str	r3, [r6, #0]
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdfa:	f002 fd35 	bl	800f868 <__malloc_lock>
 800cdfe:	4921      	ldr	r1, [pc, #132]	; (800ce84 <_malloc_r+0xac>)
 800ce00:	680a      	ldr	r2, [r1, #0]
 800ce02:	4614      	mov	r4, r2
 800ce04:	b99c      	cbnz	r4, 800ce2e <_malloc_r+0x56>
 800ce06:	4f20      	ldr	r7, [pc, #128]	; (800ce88 <_malloc_r+0xb0>)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	b923      	cbnz	r3, 800ce16 <_malloc_r+0x3e>
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f000 fca6 	bl	800d760 <_sbrk_r>
 800ce14:	6038      	str	r0, [r7, #0]
 800ce16:	4629      	mov	r1, r5
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 fca1 	bl	800d760 <_sbrk_r>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	d123      	bne.n	800ce6a <_malloc_r+0x92>
 800ce22:	230c      	movs	r3, #12
 800ce24:	6033      	str	r3, [r6, #0]
 800ce26:	4630      	mov	r0, r6
 800ce28:	f002 fd24 	bl	800f874 <__malloc_unlock>
 800ce2c:	e7e3      	b.n	800cdf6 <_malloc_r+0x1e>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	1b5b      	subs	r3, r3, r5
 800ce32:	d417      	bmi.n	800ce64 <_malloc_r+0x8c>
 800ce34:	2b0b      	cmp	r3, #11
 800ce36:	d903      	bls.n	800ce40 <_malloc_r+0x68>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	441c      	add	r4, r3
 800ce3c:	6025      	str	r5, [r4, #0]
 800ce3e:	e004      	b.n	800ce4a <_malloc_r+0x72>
 800ce40:	6863      	ldr	r3, [r4, #4]
 800ce42:	42a2      	cmp	r2, r4
 800ce44:	bf0c      	ite	eq
 800ce46:	600b      	streq	r3, [r1, #0]
 800ce48:	6053      	strne	r3, [r2, #4]
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f002 fd12 	bl	800f874 <__malloc_unlock>
 800ce50:	f104 000b 	add.w	r0, r4, #11
 800ce54:	1d23      	adds	r3, r4, #4
 800ce56:	f020 0007 	bic.w	r0, r0, #7
 800ce5a:	1ac2      	subs	r2, r0, r3
 800ce5c:	d0cc      	beq.n	800cdf8 <_malloc_r+0x20>
 800ce5e:	1a1b      	subs	r3, r3, r0
 800ce60:	50a3      	str	r3, [r4, r2]
 800ce62:	e7c9      	b.n	800cdf8 <_malloc_r+0x20>
 800ce64:	4622      	mov	r2, r4
 800ce66:	6864      	ldr	r4, [r4, #4]
 800ce68:	e7cc      	b.n	800ce04 <_malloc_r+0x2c>
 800ce6a:	1cc4      	adds	r4, r0, #3
 800ce6c:	f024 0403 	bic.w	r4, r4, #3
 800ce70:	42a0      	cmp	r0, r4
 800ce72:	d0e3      	beq.n	800ce3c <_malloc_r+0x64>
 800ce74:	1a21      	subs	r1, r4, r0
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 fc72 	bl	800d760 <_sbrk_r>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d1dd      	bne.n	800ce3c <_malloc_r+0x64>
 800ce80:	e7cf      	b.n	800ce22 <_malloc_r+0x4a>
 800ce82:	bf00      	nop
 800ce84:	200008ac 	.word	0x200008ac
 800ce88:	200008b0 	.word	0x200008b0

0800ce8c <__cvt>:
 800ce8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce90:	ec55 4b10 	vmov	r4, r5, d0
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	460e      	mov	r6, r1
 800ce98:	4619      	mov	r1, r3
 800ce9a:	462b      	mov	r3, r5
 800ce9c:	bfbb      	ittet	lt
 800ce9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cea2:	461d      	movlt	r5, r3
 800cea4:	2300      	movge	r3, #0
 800cea6:	232d      	movlt	r3, #45	; 0x2d
 800cea8:	700b      	strb	r3, [r1, #0]
 800ceaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ceb0:	4691      	mov	r9, r2
 800ceb2:	f023 0820 	bic.w	r8, r3, #32
 800ceb6:	bfbc      	itt	lt
 800ceb8:	4622      	movlt	r2, r4
 800ceba:	4614      	movlt	r4, r2
 800cebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cec0:	d005      	beq.n	800cece <__cvt+0x42>
 800cec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cec6:	d100      	bne.n	800ceca <__cvt+0x3e>
 800cec8:	3601      	adds	r6, #1
 800ceca:	2102      	movs	r1, #2
 800cecc:	e000      	b.n	800ced0 <__cvt+0x44>
 800cece:	2103      	movs	r1, #3
 800ced0:	ab03      	add	r3, sp, #12
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	ab02      	add	r3, sp, #8
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	ec45 4b10 	vmov	d0, r4, r5
 800cedc:	4653      	mov	r3, sl
 800cede:	4632      	mov	r2, r6
 800cee0:	f001 fb42 	bl	800e568 <_dtoa_r>
 800cee4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cee8:	4607      	mov	r7, r0
 800ceea:	d102      	bne.n	800cef2 <__cvt+0x66>
 800ceec:	f019 0f01 	tst.w	r9, #1
 800cef0:	d022      	beq.n	800cf38 <__cvt+0xac>
 800cef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cef6:	eb07 0906 	add.w	r9, r7, r6
 800cefa:	d110      	bne.n	800cf1e <__cvt+0x92>
 800cefc:	783b      	ldrb	r3, [r7, #0]
 800cefe:	2b30      	cmp	r3, #48	; 0x30
 800cf00:	d10a      	bne.n	800cf18 <__cvt+0x8c>
 800cf02:	2200      	movs	r2, #0
 800cf04:	2300      	movs	r3, #0
 800cf06:	4620      	mov	r0, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf0e:	b918      	cbnz	r0, 800cf18 <__cvt+0x8c>
 800cf10:	f1c6 0601 	rsb	r6, r6, #1
 800cf14:	f8ca 6000 	str.w	r6, [sl]
 800cf18:	f8da 3000 	ldr.w	r3, [sl]
 800cf1c:	4499      	add	r9, r3
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2300      	movs	r3, #0
 800cf22:	4620      	mov	r0, r4
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf2a:	b108      	cbz	r0, 800cf30 <__cvt+0xa4>
 800cf2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf30:	2230      	movs	r2, #48	; 0x30
 800cf32:	9b03      	ldr	r3, [sp, #12]
 800cf34:	454b      	cmp	r3, r9
 800cf36:	d307      	bcc.n	800cf48 <__cvt+0xbc>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf3c:	1bdb      	subs	r3, r3, r7
 800cf3e:	4638      	mov	r0, r7
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	b004      	add	sp, #16
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf48:	1c59      	adds	r1, r3, #1
 800cf4a:	9103      	str	r1, [sp, #12]
 800cf4c:	701a      	strb	r2, [r3, #0]
 800cf4e:	e7f0      	b.n	800cf32 <__cvt+0xa6>

0800cf50 <__exponent>:
 800cf50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf52:	4603      	mov	r3, r0
 800cf54:	2900      	cmp	r1, #0
 800cf56:	bfb8      	it	lt
 800cf58:	4249      	neglt	r1, r1
 800cf5a:	f803 2b02 	strb.w	r2, [r3], #2
 800cf5e:	bfb4      	ite	lt
 800cf60:	222d      	movlt	r2, #45	; 0x2d
 800cf62:	222b      	movge	r2, #43	; 0x2b
 800cf64:	2909      	cmp	r1, #9
 800cf66:	7042      	strb	r2, [r0, #1]
 800cf68:	dd2a      	ble.n	800cfc0 <__exponent+0x70>
 800cf6a:	f10d 0407 	add.w	r4, sp, #7
 800cf6e:	46a4      	mov	ip, r4
 800cf70:	270a      	movs	r7, #10
 800cf72:	46a6      	mov	lr, r4
 800cf74:	460a      	mov	r2, r1
 800cf76:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf7a:	fb07 1516 	mls	r5, r7, r6, r1
 800cf7e:	3530      	adds	r5, #48	; 0x30
 800cf80:	2a63      	cmp	r2, #99	; 0x63
 800cf82:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	dcf1      	bgt.n	800cf72 <__exponent+0x22>
 800cf8e:	3130      	adds	r1, #48	; 0x30
 800cf90:	f1ae 0502 	sub.w	r5, lr, #2
 800cf94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf98:	1c44      	adds	r4, r0, #1
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	4561      	cmp	r1, ip
 800cf9e:	d30a      	bcc.n	800cfb6 <__exponent+0x66>
 800cfa0:	f10d 0209 	add.w	r2, sp, #9
 800cfa4:	eba2 020e 	sub.w	r2, r2, lr
 800cfa8:	4565      	cmp	r5, ip
 800cfaa:	bf88      	it	hi
 800cfac:	2200      	movhi	r2, #0
 800cfae:	4413      	add	r3, r2
 800cfb0:	1a18      	subs	r0, r3, r0
 800cfb2:	b003      	add	sp, #12
 800cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfbe:	e7ed      	b.n	800cf9c <__exponent+0x4c>
 800cfc0:	2330      	movs	r3, #48	; 0x30
 800cfc2:	3130      	adds	r1, #48	; 0x30
 800cfc4:	7083      	strb	r3, [r0, #2]
 800cfc6:	70c1      	strb	r1, [r0, #3]
 800cfc8:	1d03      	adds	r3, r0, #4
 800cfca:	e7f1      	b.n	800cfb0 <__exponent+0x60>

0800cfcc <_printf_float>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	ed2d 8b02 	vpush	{d8}
 800cfd4:	b08d      	sub	sp, #52	; 0x34
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfdc:	4616      	mov	r6, r2
 800cfde:	461f      	mov	r7, r3
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	f002 fc1d 	bl	800f820 <_localeconv_r>
 800cfe6:	f8d0 a000 	ldr.w	sl, [r0]
 800cfea:	4650      	mov	r0, sl
 800cfec:	f7f3 f8f0 	bl	80001d0 <strlen>
 800cff0:	2300      	movs	r3, #0
 800cff2:	930a      	str	r3, [sp, #40]	; 0x28
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	9305      	str	r3, [sp, #20]
 800cff8:	f8d8 3000 	ldr.w	r3, [r8]
 800cffc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d000:	3307      	adds	r3, #7
 800d002:	f023 0307 	bic.w	r3, r3, #7
 800d006:	f103 0208 	add.w	r2, r3, #8
 800d00a:	f8c8 2000 	str.w	r2, [r8]
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d016:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d01a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d01e:	9307      	str	r3, [sp, #28]
 800d020:	f8cd 8018 	str.w	r8, [sp, #24]
 800d024:	ee08 0a10 	vmov	s16, r0
 800d028:	4b9f      	ldr	r3, [pc, #636]	; (800d2a8 <_printf_float+0x2dc>)
 800d02a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d02e:	f04f 32ff 	mov.w	r2, #4294967295
 800d032:	f7f3 fd7b 	bl	8000b2c <__aeabi_dcmpun>
 800d036:	bb88      	cbnz	r0, 800d09c <_printf_float+0xd0>
 800d038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03c:	4b9a      	ldr	r3, [pc, #616]	; (800d2a8 <_printf_float+0x2dc>)
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295
 800d042:	f7f3 fd55 	bl	8000af0 <__aeabi_dcmple>
 800d046:	bb48      	cbnz	r0, 800d09c <_printf_float+0xd0>
 800d048:	2200      	movs	r2, #0
 800d04a:	2300      	movs	r3, #0
 800d04c:	4640      	mov	r0, r8
 800d04e:	4649      	mov	r1, r9
 800d050:	f7f3 fd44 	bl	8000adc <__aeabi_dcmplt>
 800d054:	b110      	cbz	r0, 800d05c <_printf_float+0x90>
 800d056:	232d      	movs	r3, #45	; 0x2d
 800d058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d05c:	4b93      	ldr	r3, [pc, #588]	; (800d2ac <_printf_float+0x2e0>)
 800d05e:	4894      	ldr	r0, [pc, #592]	; (800d2b0 <_printf_float+0x2e4>)
 800d060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d064:	bf94      	ite	ls
 800d066:	4698      	movls	r8, r3
 800d068:	4680      	movhi	r8, r0
 800d06a:	2303      	movs	r3, #3
 800d06c:	6123      	str	r3, [r4, #16]
 800d06e:	9b05      	ldr	r3, [sp, #20]
 800d070:	f023 0204 	bic.w	r2, r3, #4
 800d074:	6022      	str	r2, [r4, #0]
 800d076:	f04f 0900 	mov.w	r9, #0
 800d07a:	9700      	str	r7, [sp, #0]
 800d07c:	4633      	mov	r3, r6
 800d07e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d080:	4621      	mov	r1, r4
 800d082:	4628      	mov	r0, r5
 800d084:	f000 f9d8 	bl	800d438 <_printf_common>
 800d088:	3001      	adds	r0, #1
 800d08a:	f040 8090 	bne.w	800d1ae <_printf_float+0x1e2>
 800d08e:	f04f 30ff 	mov.w	r0, #4294967295
 800d092:	b00d      	add	sp, #52	; 0x34
 800d094:	ecbd 8b02 	vpop	{d8}
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	4642      	mov	r2, r8
 800d09e:	464b      	mov	r3, r9
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 fd42 	bl	8000b2c <__aeabi_dcmpun>
 800d0a8:	b140      	cbz	r0, 800d0bc <_printf_float+0xf0>
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bfbc      	itt	lt
 800d0b0:	232d      	movlt	r3, #45	; 0x2d
 800d0b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0b6:	487f      	ldr	r0, [pc, #508]	; (800d2b4 <_printf_float+0x2e8>)
 800d0b8:	4b7f      	ldr	r3, [pc, #508]	; (800d2b8 <_printf_float+0x2ec>)
 800d0ba:	e7d1      	b.n	800d060 <_printf_float+0x94>
 800d0bc:	6863      	ldr	r3, [r4, #4]
 800d0be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0c2:	9206      	str	r2, [sp, #24]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	d13f      	bne.n	800d148 <_printf_float+0x17c>
 800d0c8:	2306      	movs	r3, #6
 800d0ca:	6063      	str	r3, [r4, #4]
 800d0cc:	9b05      	ldr	r3, [sp, #20]
 800d0ce:	6861      	ldr	r1, [r4, #4]
 800d0d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	ab0a      	add	r3, sp, #40	; 0x28
 800d0da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0de:	ab09      	add	r3, sp, #36	; 0x24
 800d0e0:	ec49 8b10 	vmov	d0, r8, r9
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f7ff fecd 	bl	800ce8c <__cvt>
 800d0f2:	9b06      	ldr	r3, [sp, #24]
 800d0f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0f6:	2b47      	cmp	r3, #71	; 0x47
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	d108      	bne.n	800d10e <_printf_float+0x142>
 800d0fc:	1cc8      	adds	r0, r1, #3
 800d0fe:	db02      	blt.n	800d106 <_printf_float+0x13a>
 800d100:	6863      	ldr	r3, [r4, #4]
 800d102:	4299      	cmp	r1, r3
 800d104:	dd41      	ble.n	800d18a <_printf_float+0x1be>
 800d106:	f1ab 0b02 	sub.w	fp, fp, #2
 800d10a:	fa5f fb8b 	uxtb.w	fp, fp
 800d10e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d112:	d820      	bhi.n	800d156 <_printf_float+0x18a>
 800d114:	3901      	subs	r1, #1
 800d116:	465a      	mov	r2, fp
 800d118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d11c:	9109      	str	r1, [sp, #36]	; 0x24
 800d11e:	f7ff ff17 	bl	800cf50 <__exponent>
 800d122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d124:	1813      	adds	r3, r2, r0
 800d126:	2a01      	cmp	r2, #1
 800d128:	4681      	mov	r9, r0
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	dc02      	bgt.n	800d134 <_printf_float+0x168>
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	07d2      	lsls	r2, r2, #31
 800d132:	d501      	bpl.n	800d138 <_printf_float+0x16c>
 800d134:	3301      	adds	r3, #1
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d09c      	beq.n	800d07a <_printf_float+0xae>
 800d140:	232d      	movs	r3, #45	; 0x2d
 800d142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d146:	e798      	b.n	800d07a <_printf_float+0xae>
 800d148:	9a06      	ldr	r2, [sp, #24]
 800d14a:	2a47      	cmp	r2, #71	; 0x47
 800d14c:	d1be      	bne.n	800d0cc <_printf_float+0x100>
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1bc      	bne.n	800d0cc <_printf_float+0x100>
 800d152:	2301      	movs	r3, #1
 800d154:	e7b9      	b.n	800d0ca <_printf_float+0xfe>
 800d156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d15a:	d118      	bne.n	800d18e <_printf_float+0x1c2>
 800d15c:	2900      	cmp	r1, #0
 800d15e:	6863      	ldr	r3, [r4, #4]
 800d160:	dd0b      	ble.n	800d17a <_printf_float+0x1ae>
 800d162:	6121      	str	r1, [r4, #16]
 800d164:	b913      	cbnz	r3, 800d16c <_printf_float+0x1a0>
 800d166:	6822      	ldr	r2, [r4, #0]
 800d168:	07d0      	lsls	r0, r2, #31
 800d16a:	d502      	bpl.n	800d172 <_printf_float+0x1a6>
 800d16c:	3301      	adds	r3, #1
 800d16e:	440b      	add	r3, r1
 800d170:	6123      	str	r3, [r4, #16]
 800d172:	65a1      	str	r1, [r4, #88]	; 0x58
 800d174:	f04f 0900 	mov.w	r9, #0
 800d178:	e7de      	b.n	800d138 <_printf_float+0x16c>
 800d17a:	b913      	cbnz	r3, 800d182 <_printf_float+0x1b6>
 800d17c:	6822      	ldr	r2, [r4, #0]
 800d17e:	07d2      	lsls	r2, r2, #31
 800d180:	d501      	bpl.n	800d186 <_printf_float+0x1ba>
 800d182:	3302      	adds	r3, #2
 800d184:	e7f4      	b.n	800d170 <_printf_float+0x1a4>
 800d186:	2301      	movs	r3, #1
 800d188:	e7f2      	b.n	800d170 <_printf_float+0x1a4>
 800d18a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d190:	4299      	cmp	r1, r3
 800d192:	db05      	blt.n	800d1a0 <_printf_float+0x1d4>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	6121      	str	r1, [r4, #16]
 800d198:	07d8      	lsls	r0, r3, #31
 800d19a:	d5ea      	bpl.n	800d172 <_printf_float+0x1a6>
 800d19c:	1c4b      	adds	r3, r1, #1
 800d19e:	e7e7      	b.n	800d170 <_printf_float+0x1a4>
 800d1a0:	2900      	cmp	r1, #0
 800d1a2:	bfd4      	ite	le
 800d1a4:	f1c1 0202 	rsble	r2, r1, #2
 800d1a8:	2201      	movgt	r2, #1
 800d1aa:	4413      	add	r3, r2
 800d1ac:	e7e0      	b.n	800d170 <_printf_float+0x1a4>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	055a      	lsls	r2, r3, #21
 800d1b2:	d407      	bmi.n	800d1c4 <_printf_float+0x1f8>
 800d1b4:	6923      	ldr	r3, [r4, #16]
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	47b8      	blx	r7
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d12c      	bne.n	800d21c <_printf_float+0x250>
 800d1c2:	e764      	b.n	800d08e <_printf_float+0xc2>
 800d1c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1c8:	f240 80e0 	bls.w	800d38c <_printf_float+0x3c0>
 800d1cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f7f3 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d034      	beq.n	800d246 <_printf_float+0x27a>
 800d1dc:	4a37      	ldr	r2, [pc, #220]	; (800d2bc <_printf_float+0x2f0>)
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f43f af51 	beq.w	800d08e <_printf_float+0xc2>
 800d1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	db02      	blt.n	800d1fa <_printf_float+0x22e>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	07d8      	lsls	r0, r3, #31
 800d1f8:	d510      	bpl.n	800d21c <_printf_float+0x250>
 800d1fa:	ee18 3a10 	vmov	r3, s16
 800d1fe:	4652      	mov	r2, sl
 800d200:	4631      	mov	r1, r6
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	f43f af41 	beq.w	800d08e <_printf_float+0xc2>
 800d20c:	f04f 0800 	mov.w	r8, #0
 800d210:	f104 091a 	add.w	r9, r4, #26
 800d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d216:	3b01      	subs	r3, #1
 800d218:	4543      	cmp	r3, r8
 800d21a:	dc09      	bgt.n	800d230 <_printf_float+0x264>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	079b      	lsls	r3, r3, #30
 800d220:	f100 8105 	bmi.w	800d42e <_printf_float+0x462>
 800d224:	68e0      	ldr	r0, [r4, #12]
 800d226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d228:	4298      	cmp	r0, r3
 800d22a:	bfb8      	it	lt
 800d22c:	4618      	movlt	r0, r3
 800d22e:	e730      	b.n	800d092 <_printf_float+0xc6>
 800d230:	2301      	movs	r3, #1
 800d232:	464a      	mov	r2, r9
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	f43f af27 	beq.w	800d08e <_printf_float+0xc2>
 800d240:	f108 0801 	add.w	r8, r8, #1
 800d244:	e7e6      	b.n	800d214 <_printf_float+0x248>
 800d246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dc39      	bgt.n	800d2c0 <_printf_float+0x2f4>
 800d24c:	4a1b      	ldr	r2, [pc, #108]	; (800d2bc <_printf_float+0x2f0>)
 800d24e:	2301      	movs	r3, #1
 800d250:	4631      	mov	r1, r6
 800d252:	4628      	mov	r0, r5
 800d254:	47b8      	blx	r7
 800d256:	3001      	adds	r0, #1
 800d258:	f43f af19 	beq.w	800d08e <_printf_float+0xc2>
 800d25c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d260:	4313      	orrs	r3, r2
 800d262:	d102      	bne.n	800d26a <_printf_float+0x29e>
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	d5d8      	bpl.n	800d21c <_printf_float+0x250>
 800d26a:	ee18 3a10 	vmov	r3, s16
 800d26e:	4652      	mov	r2, sl
 800d270:	4631      	mov	r1, r6
 800d272:	4628      	mov	r0, r5
 800d274:	47b8      	blx	r7
 800d276:	3001      	adds	r0, #1
 800d278:	f43f af09 	beq.w	800d08e <_printf_float+0xc2>
 800d27c:	f04f 0900 	mov.w	r9, #0
 800d280:	f104 0a1a 	add.w	sl, r4, #26
 800d284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d286:	425b      	negs	r3, r3
 800d288:	454b      	cmp	r3, r9
 800d28a:	dc01      	bgt.n	800d290 <_printf_float+0x2c4>
 800d28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d28e:	e792      	b.n	800d1b6 <_printf_float+0x1ea>
 800d290:	2301      	movs	r3, #1
 800d292:	4652      	mov	r2, sl
 800d294:	4631      	mov	r1, r6
 800d296:	4628      	mov	r0, r5
 800d298:	47b8      	blx	r7
 800d29a:	3001      	adds	r0, #1
 800d29c:	f43f aef7 	beq.w	800d08e <_printf_float+0xc2>
 800d2a0:	f109 0901 	add.w	r9, r9, #1
 800d2a4:	e7ee      	b.n	800d284 <_printf_float+0x2b8>
 800d2a6:	bf00      	nop
 800d2a8:	7fefffff 	.word	0x7fefffff
 800d2ac:	080112f4 	.word	0x080112f4
 800d2b0:	080112f8 	.word	0x080112f8
 800d2b4:	08011300 	.word	0x08011300
 800d2b8:	080112fc 	.word	0x080112fc
 800d2bc:	08011304 	.word	0x08011304
 800d2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	bfa8      	it	ge
 800d2c8:	461a      	movge	r2, r3
 800d2ca:	2a00      	cmp	r2, #0
 800d2cc:	4691      	mov	r9, r2
 800d2ce:	dc37      	bgt.n	800d340 <_printf_float+0x374>
 800d2d0:	f04f 0b00 	mov.w	fp, #0
 800d2d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2d8:	f104 021a 	add.w	r2, r4, #26
 800d2dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2de:	9305      	str	r3, [sp, #20]
 800d2e0:	eba3 0309 	sub.w	r3, r3, r9
 800d2e4:	455b      	cmp	r3, fp
 800d2e6:	dc33      	bgt.n	800d350 <_printf_float+0x384>
 800d2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	db3b      	blt.n	800d368 <_printf_float+0x39c>
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	07da      	lsls	r2, r3, #31
 800d2f4:	d438      	bmi.n	800d368 <_printf_float+0x39c>
 800d2f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	eba2 0901 	sub.w	r9, r2, r1
 800d302:	4599      	cmp	r9, r3
 800d304:	bfa8      	it	ge
 800d306:	4699      	movge	r9, r3
 800d308:	f1b9 0f00 	cmp.w	r9, #0
 800d30c:	dc35      	bgt.n	800d37a <_printf_float+0x3ae>
 800d30e:	f04f 0800 	mov.w	r8, #0
 800d312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d316:	f104 0a1a 	add.w	sl, r4, #26
 800d31a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	eba3 0309 	sub.w	r3, r3, r9
 800d324:	4543      	cmp	r3, r8
 800d326:	f77f af79 	ble.w	800d21c <_printf_float+0x250>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4652      	mov	r2, sl
 800d32e:	4631      	mov	r1, r6
 800d330:	4628      	mov	r0, r5
 800d332:	47b8      	blx	r7
 800d334:	3001      	adds	r0, #1
 800d336:	f43f aeaa 	beq.w	800d08e <_printf_float+0xc2>
 800d33a:	f108 0801 	add.w	r8, r8, #1
 800d33e:	e7ec      	b.n	800d31a <_printf_float+0x34e>
 800d340:	4613      	mov	r3, r2
 800d342:	4631      	mov	r1, r6
 800d344:	4642      	mov	r2, r8
 800d346:	4628      	mov	r0, r5
 800d348:	47b8      	blx	r7
 800d34a:	3001      	adds	r0, #1
 800d34c:	d1c0      	bne.n	800d2d0 <_printf_float+0x304>
 800d34e:	e69e      	b.n	800d08e <_printf_float+0xc2>
 800d350:	2301      	movs	r3, #1
 800d352:	4631      	mov	r1, r6
 800d354:	4628      	mov	r0, r5
 800d356:	9205      	str	r2, [sp, #20]
 800d358:	47b8      	blx	r7
 800d35a:	3001      	adds	r0, #1
 800d35c:	f43f ae97 	beq.w	800d08e <_printf_float+0xc2>
 800d360:	9a05      	ldr	r2, [sp, #20]
 800d362:	f10b 0b01 	add.w	fp, fp, #1
 800d366:	e7b9      	b.n	800d2dc <_printf_float+0x310>
 800d368:	ee18 3a10 	vmov	r3, s16
 800d36c:	4652      	mov	r2, sl
 800d36e:	4631      	mov	r1, r6
 800d370:	4628      	mov	r0, r5
 800d372:	47b8      	blx	r7
 800d374:	3001      	adds	r0, #1
 800d376:	d1be      	bne.n	800d2f6 <_printf_float+0x32a>
 800d378:	e689      	b.n	800d08e <_printf_float+0xc2>
 800d37a:	9a05      	ldr	r2, [sp, #20]
 800d37c:	464b      	mov	r3, r9
 800d37e:	4442      	add	r2, r8
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	d1c1      	bne.n	800d30e <_printf_float+0x342>
 800d38a:	e680      	b.n	800d08e <_printf_float+0xc2>
 800d38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d38e:	2a01      	cmp	r2, #1
 800d390:	dc01      	bgt.n	800d396 <_printf_float+0x3ca>
 800d392:	07db      	lsls	r3, r3, #31
 800d394:	d538      	bpl.n	800d408 <_printf_float+0x43c>
 800d396:	2301      	movs	r3, #1
 800d398:	4642      	mov	r2, r8
 800d39a:	4631      	mov	r1, r6
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b8      	blx	r7
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	f43f ae74 	beq.w	800d08e <_printf_float+0xc2>
 800d3a6:	ee18 3a10 	vmov	r3, s16
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f43f ae6b 	beq.w	800d08e <_printf_float+0xc2>
 800d3b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f7f3 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3c4:	b9d8      	cbnz	r0, 800d3fe <_printf_float+0x432>
 800d3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c8:	f108 0201 	add.w	r2, r8, #1
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	47b8      	blx	r7
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d10e      	bne.n	800d3f6 <_printf_float+0x42a>
 800d3d8:	e659      	b.n	800d08e <_printf_float+0xc2>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	4652      	mov	r2, sl
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f43f ae52 	beq.w	800d08e <_printf_float+0xc2>
 800d3ea:	f108 0801 	add.w	r8, r8, #1
 800d3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	4543      	cmp	r3, r8
 800d3f4:	dcf1      	bgt.n	800d3da <_printf_float+0x40e>
 800d3f6:	464b      	mov	r3, r9
 800d3f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3fc:	e6dc      	b.n	800d1b8 <_printf_float+0x1ec>
 800d3fe:	f04f 0800 	mov.w	r8, #0
 800d402:	f104 0a1a 	add.w	sl, r4, #26
 800d406:	e7f2      	b.n	800d3ee <_printf_float+0x422>
 800d408:	2301      	movs	r3, #1
 800d40a:	4642      	mov	r2, r8
 800d40c:	e7df      	b.n	800d3ce <_printf_float+0x402>
 800d40e:	2301      	movs	r3, #1
 800d410:	464a      	mov	r2, r9
 800d412:	4631      	mov	r1, r6
 800d414:	4628      	mov	r0, r5
 800d416:	47b8      	blx	r7
 800d418:	3001      	adds	r0, #1
 800d41a:	f43f ae38 	beq.w	800d08e <_printf_float+0xc2>
 800d41e:	f108 0801 	add.w	r8, r8, #1
 800d422:	68e3      	ldr	r3, [r4, #12]
 800d424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d426:	1a5b      	subs	r3, r3, r1
 800d428:	4543      	cmp	r3, r8
 800d42a:	dcf0      	bgt.n	800d40e <_printf_float+0x442>
 800d42c:	e6fa      	b.n	800d224 <_printf_float+0x258>
 800d42e:	f04f 0800 	mov.w	r8, #0
 800d432:	f104 0919 	add.w	r9, r4, #25
 800d436:	e7f4      	b.n	800d422 <_printf_float+0x456>

0800d438 <_printf_common>:
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	4616      	mov	r6, r2
 800d43e:	4699      	mov	r9, r3
 800d440:	688a      	ldr	r2, [r1, #8]
 800d442:	690b      	ldr	r3, [r1, #16]
 800d444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d448:	4293      	cmp	r3, r2
 800d44a:	bfb8      	it	lt
 800d44c:	4613      	movlt	r3, r2
 800d44e:	6033      	str	r3, [r6, #0]
 800d450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d454:	4607      	mov	r7, r0
 800d456:	460c      	mov	r4, r1
 800d458:	b10a      	cbz	r2, 800d45e <_printf_common+0x26>
 800d45a:	3301      	adds	r3, #1
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	0699      	lsls	r1, r3, #26
 800d462:	bf42      	ittt	mi
 800d464:	6833      	ldrmi	r3, [r6, #0]
 800d466:	3302      	addmi	r3, #2
 800d468:	6033      	strmi	r3, [r6, #0]
 800d46a:	6825      	ldr	r5, [r4, #0]
 800d46c:	f015 0506 	ands.w	r5, r5, #6
 800d470:	d106      	bne.n	800d480 <_printf_common+0x48>
 800d472:	f104 0a19 	add.w	sl, r4, #25
 800d476:	68e3      	ldr	r3, [r4, #12]
 800d478:	6832      	ldr	r2, [r6, #0]
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	dc26      	bgt.n	800d4ce <_printf_common+0x96>
 800d480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d484:	1e13      	subs	r3, r2, #0
 800d486:	6822      	ldr	r2, [r4, #0]
 800d488:	bf18      	it	ne
 800d48a:	2301      	movne	r3, #1
 800d48c:	0692      	lsls	r2, r2, #26
 800d48e:	d42b      	bmi.n	800d4e8 <_printf_common+0xb0>
 800d490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d494:	4649      	mov	r1, r9
 800d496:	4638      	mov	r0, r7
 800d498:	47c0      	blx	r8
 800d49a:	3001      	adds	r0, #1
 800d49c:	d01e      	beq.n	800d4dc <_printf_common+0xa4>
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	68e5      	ldr	r5, [r4, #12]
 800d4a2:	6832      	ldr	r2, [r6, #0]
 800d4a4:	f003 0306 	and.w	r3, r3, #6
 800d4a8:	2b04      	cmp	r3, #4
 800d4aa:	bf08      	it	eq
 800d4ac:	1aad      	subeq	r5, r5, r2
 800d4ae:	68a3      	ldr	r3, [r4, #8]
 800d4b0:	6922      	ldr	r2, [r4, #16]
 800d4b2:	bf0c      	ite	eq
 800d4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b8:	2500      	movne	r5, #0
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	bfc4      	itt	gt
 800d4be:	1a9b      	subgt	r3, r3, r2
 800d4c0:	18ed      	addgt	r5, r5, r3
 800d4c2:	2600      	movs	r6, #0
 800d4c4:	341a      	adds	r4, #26
 800d4c6:	42b5      	cmp	r5, r6
 800d4c8:	d11a      	bne.n	800d500 <_printf_common+0xc8>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e008      	b.n	800d4e0 <_printf_common+0xa8>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	4649      	mov	r1, r9
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	47c0      	blx	r8
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d103      	bne.n	800d4e4 <_printf_common+0xac>
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	e7c6      	b.n	800d476 <_printf_common+0x3e>
 800d4e8:	18e1      	adds	r1, r4, r3
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	2030      	movs	r0, #48	; 0x30
 800d4ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4f2:	4422      	add	r2, r4
 800d4f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	e7c7      	b.n	800d490 <_printf_common+0x58>
 800d500:	2301      	movs	r3, #1
 800d502:	4622      	mov	r2, r4
 800d504:	4649      	mov	r1, r9
 800d506:	4638      	mov	r0, r7
 800d508:	47c0      	blx	r8
 800d50a:	3001      	adds	r0, #1
 800d50c:	d0e6      	beq.n	800d4dc <_printf_common+0xa4>
 800d50e:	3601      	adds	r6, #1
 800d510:	e7d9      	b.n	800d4c6 <_printf_common+0x8e>
	...

0800d514 <_printf_i>:
 800d514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	460c      	mov	r4, r1
 800d51a:	4691      	mov	r9, r2
 800d51c:	7e27      	ldrb	r7, [r4, #24]
 800d51e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d520:	2f78      	cmp	r7, #120	; 0x78
 800d522:	4680      	mov	r8, r0
 800d524:	469a      	mov	sl, r3
 800d526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d52a:	d807      	bhi.n	800d53c <_printf_i+0x28>
 800d52c:	2f62      	cmp	r7, #98	; 0x62
 800d52e:	d80a      	bhi.n	800d546 <_printf_i+0x32>
 800d530:	2f00      	cmp	r7, #0
 800d532:	f000 80d8 	beq.w	800d6e6 <_printf_i+0x1d2>
 800d536:	2f58      	cmp	r7, #88	; 0x58
 800d538:	f000 80a3 	beq.w	800d682 <_printf_i+0x16e>
 800d53c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d544:	e03a      	b.n	800d5bc <_printf_i+0xa8>
 800d546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d54a:	2b15      	cmp	r3, #21
 800d54c:	d8f6      	bhi.n	800d53c <_printf_i+0x28>
 800d54e:	a001      	add	r0, pc, #4	; (adr r0, 800d554 <_printf_i+0x40>)
 800d550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d5c1 	.word	0x0800d5c1
 800d55c:	0800d53d 	.word	0x0800d53d
 800d560:	0800d53d 	.word	0x0800d53d
 800d564:	0800d53d 	.word	0x0800d53d
 800d568:	0800d53d 	.word	0x0800d53d
 800d56c:	0800d5c1 	.word	0x0800d5c1
 800d570:	0800d53d 	.word	0x0800d53d
 800d574:	0800d53d 	.word	0x0800d53d
 800d578:	0800d53d 	.word	0x0800d53d
 800d57c:	0800d53d 	.word	0x0800d53d
 800d580:	0800d6cd 	.word	0x0800d6cd
 800d584:	0800d5f1 	.word	0x0800d5f1
 800d588:	0800d6af 	.word	0x0800d6af
 800d58c:	0800d53d 	.word	0x0800d53d
 800d590:	0800d53d 	.word	0x0800d53d
 800d594:	0800d6ef 	.word	0x0800d6ef
 800d598:	0800d53d 	.word	0x0800d53d
 800d59c:	0800d5f1 	.word	0x0800d5f1
 800d5a0:	0800d53d 	.word	0x0800d53d
 800d5a4:	0800d53d 	.word	0x0800d53d
 800d5a8:	0800d6b7 	.word	0x0800d6b7
 800d5ac:	680b      	ldr	r3, [r1, #0]
 800d5ae:	1d1a      	adds	r2, r3, #4
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	600a      	str	r2, [r1, #0]
 800d5b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e0a3      	b.n	800d708 <_printf_i+0x1f4>
 800d5c0:	6825      	ldr	r5, [r4, #0]
 800d5c2:	6808      	ldr	r0, [r1, #0]
 800d5c4:	062e      	lsls	r6, r5, #24
 800d5c6:	f100 0304 	add.w	r3, r0, #4
 800d5ca:	d50a      	bpl.n	800d5e2 <_printf_i+0xce>
 800d5cc:	6805      	ldr	r5, [r0, #0]
 800d5ce:	600b      	str	r3, [r1, #0]
 800d5d0:	2d00      	cmp	r5, #0
 800d5d2:	da03      	bge.n	800d5dc <_printf_i+0xc8>
 800d5d4:	232d      	movs	r3, #45	; 0x2d
 800d5d6:	426d      	negs	r5, r5
 800d5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5dc:	485e      	ldr	r0, [pc, #376]	; (800d758 <_printf_i+0x244>)
 800d5de:	230a      	movs	r3, #10
 800d5e0:	e019      	b.n	800d616 <_printf_i+0x102>
 800d5e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d5e6:	6805      	ldr	r5, [r0, #0]
 800d5e8:	600b      	str	r3, [r1, #0]
 800d5ea:	bf18      	it	ne
 800d5ec:	b22d      	sxthne	r5, r5
 800d5ee:	e7ef      	b.n	800d5d0 <_printf_i+0xbc>
 800d5f0:	680b      	ldr	r3, [r1, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	1d18      	adds	r0, r3, #4
 800d5f6:	6008      	str	r0, [r1, #0]
 800d5f8:	0628      	lsls	r0, r5, #24
 800d5fa:	d501      	bpl.n	800d600 <_printf_i+0xec>
 800d5fc:	681d      	ldr	r5, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <_printf_i+0xf2>
 800d600:	0669      	lsls	r1, r5, #25
 800d602:	d5fb      	bpl.n	800d5fc <_printf_i+0xe8>
 800d604:	881d      	ldrh	r5, [r3, #0]
 800d606:	4854      	ldr	r0, [pc, #336]	; (800d758 <_printf_i+0x244>)
 800d608:	2f6f      	cmp	r7, #111	; 0x6f
 800d60a:	bf0c      	ite	eq
 800d60c:	2308      	moveq	r3, #8
 800d60e:	230a      	movne	r3, #10
 800d610:	2100      	movs	r1, #0
 800d612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d616:	6866      	ldr	r6, [r4, #4]
 800d618:	60a6      	str	r6, [r4, #8]
 800d61a:	2e00      	cmp	r6, #0
 800d61c:	bfa2      	ittt	ge
 800d61e:	6821      	ldrge	r1, [r4, #0]
 800d620:	f021 0104 	bicge.w	r1, r1, #4
 800d624:	6021      	strge	r1, [r4, #0]
 800d626:	b90d      	cbnz	r5, 800d62c <_printf_i+0x118>
 800d628:	2e00      	cmp	r6, #0
 800d62a:	d04d      	beq.n	800d6c8 <_printf_i+0x1b4>
 800d62c:	4616      	mov	r6, r2
 800d62e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d632:	fb03 5711 	mls	r7, r3, r1, r5
 800d636:	5dc7      	ldrb	r7, [r0, r7]
 800d638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d63c:	462f      	mov	r7, r5
 800d63e:	42bb      	cmp	r3, r7
 800d640:	460d      	mov	r5, r1
 800d642:	d9f4      	bls.n	800d62e <_printf_i+0x11a>
 800d644:	2b08      	cmp	r3, #8
 800d646:	d10b      	bne.n	800d660 <_printf_i+0x14c>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	07df      	lsls	r7, r3, #31
 800d64c:	d508      	bpl.n	800d660 <_printf_i+0x14c>
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	6861      	ldr	r1, [r4, #4]
 800d652:	4299      	cmp	r1, r3
 800d654:	bfde      	ittt	le
 800d656:	2330      	movle	r3, #48	; 0x30
 800d658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d65c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d660:	1b92      	subs	r2, r2, r6
 800d662:	6122      	str	r2, [r4, #16]
 800d664:	f8cd a000 	str.w	sl, [sp]
 800d668:	464b      	mov	r3, r9
 800d66a:	aa03      	add	r2, sp, #12
 800d66c:	4621      	mov	r1, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	f7ff fee2 	bl	800d438 <_printf_common>
 800d674:	3001      	adds	r0, #1
 800d676:	d14c      	bne.n	800d712 <_printf_i+0x1fe>
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	b004      	add	sp, #16
 800d67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d682:	4835      	ldr	r0, [pc, #212]	; (800d758 <_printf_i+0x244>)
 800d684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	680e      	ldr	r6, [r1, #0]
 800d68c:	061f      	lsls	r7, r3, #24
 800d68e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d692:	600e      	str	r6, [r1, #0]
 800d694:	d514      	bpl.n	800d6c0 <_printf_i+0x1ac>
 800d696:	07d9      	lsls	r1, r3, #31
 800d698:	bf44      	itt	mi
 800d69a:	f043 0320 	orrmi.w	r3, r3, #32
 800d69e:	6023      	strmi	r3, [r4, #0]
 800d6a0:	b91d      	cbnz	r5, 800d6aa <_printf_i+0x196>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	f023 0320 	bic.w	r3, r3, #32
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	2310      	movs	r3, #16
 800d6ac:	e7b0      	b.n	800d610 <_printf_i+0xfc>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	f043 0320 	orr.w	r3, r3, #32
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	2378      	movs	r3, #120	; 0x78
 800d6b8:	4828      	ldr	r0, [pc, #160]	; (800d75c <_printf_i+0x248>)
 800d6ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6be:	e7e3      	b.n	800d688 <_printf_i+0x174>
 800d6c0:	065e      	lsls	r6, r3, #25
 800d6c2:	bf48      	it	mi
 800d6c4:	b2ad      	uxthmi	r5, r5
 800d6c6:	e7e6      	b.n	800d696 <_printf_i+0x182>
 800d6c8:	4616      	mov	r6, r2
 800d6ca:	e7bb      	b.n	800d644 <_printf_i+0x130>
 800d6cc:	680b      	ldr	r3, [r1, #0]
 800d6ce:	6826      	ldr	r6, [r4, #0]
 800d6d0:	6960      	ldr	r0, [r4, #20]
 800d6d2:	1d1d      	adds	r5, r3, #4
 800d6d4:	600d      	str	r5, [r1, #0]
 800d6d6:	0635      	lsls	r5, r6, #24
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	d501      	bpl.n	800d6e0 <_printf_i+0x1cc>
 800d6dc:	6018      	str	r0, [r3, #0]
 800d6de:	e002      	b.n	800d6e6 <_printf_i+0x1d2>
 800d6e0:	0671      	lsls	r1, r6, #25
 800d6e2:	d5fb      	bpl.n	800d6dc <_printf_i+0x1c8>
 800d6e4:	8018      	strh	r0, [r3, #0]
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	6123      	str	r3, [r4, #16]
 800d6ea:	4616      	mov	r6, r2
 800d6ec:	e7ba      	b.n	800d664 <_printf_i+0x150>
 800d6ee:	680b      	ldr	r3, [r1, #0]
 800d6f0:	1d1a      	adds	r2, r3, #4
 800d6f2:	600a      	str	r2, [r1, #0]
 800d6f4:	681e      	ldr	r6, [r3, #0]
 800d6f6:	6862      	ldr	r2, [r4, #4]
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7f2 fd70 	bl	80001e0 <memchr>
 800d700:	b108      	cbz	r0, 800d706 <_printf_i+0x1f2>
 800d702:	1b80      	subs	r0, r0, r6
 800d704:	6060      	str	r0, [r4, #4]
 800d706:	6863      	ldr	r3, [r4, #4]
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	2300      	movs	r3, #0
 800d70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d710:	e7a8      	b.n	800d664 <_printf_i+0x150>
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	4632      	mov	r2, r6
 800d716:	4649      	mov	r1, r9
 800d718:	4640      	mov	r0, r8
 800d71a:	47d0      	blx	sl
 800d71c:	3001      	adds	r0, #1
 800d71e:	d0ab      	beq.n	800d678 <_printf_i+0x164>
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	079b      	lsls	r3, r3, #30
 800d724:	d413      	bmi.n	800d74e <_printf_i+0x23a>
 800d726:	68e0      	ldr	r0, [r4, #12]
 800d728:	9b03      	ldr	r3, [sp, #12]
 800d72a:	4298      	cmp	r0, r3
 800d72c:	bfb8      	it	lt
 800d72e:	4618      	movlt	r0, r3
 800d730:	e7a4      	b.n	800d67c <_printf_i+0x168>
 800d732:	2301      	movs	r3, #1
 800d734:	4632      	mov	r2, r6
 800d736:	4649      	mov	r1, r9
 800d738:	4640      	mov	r0, r8
 800d73a:	47d0      	blx	sl
 800d73c:	3001      	adds	r0, #1
 800d73e:	d09b      	beq.n	800d678 <_printf_i+0x164>
 800d740:	3501      	adds	r5, #1
 800d742:	68e3      	ldr	r3, [r4, #12]
 800d744:	9903      	ldr	r1, [sp, #12]
 800d746:	1a5b      	subs	r3, r3, r1
 800d748:	42ab      	cmp	r3, r5
 800d74a:	dcf2      	bgt.n	800d732 <_printf_i+0x21e>
 800d74c:	e7eb      	b.n	800d726 <_printf_i+0x212>
 800d74e:	2500      	movs	r5, #0
 800d750:	f104 0619 	add.w	r6, r4, #25
 800d754:	e7f5      	b.n	800d742 <_printf_i+0x22e>
 800d756:	bf00      	nop
 800d758:	08011306 	.word	0x08011306
 800d75c:	08011317 	.word	0x08011317

0800d760 <_sbrk_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4d06      	ldr	r5, [pc, #24]	; (800d77c <_sbrk_r+0x1c>)
 800d764:	2300      	movs	r3, #0
 800d766:	4604      	mov	r4, r0
 800d768:	4608      	mov	r0, r1
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	f7f6 f96a 	bl	8003a44 <_sbrk>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_sbrk_r+0x1a>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_sbrk_r+0x1a>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	20002468 	.word	0x20002468

0800d780 <siprintf>:
 800d780:	b40e      	push	{r1, r2, r3}
 800d782:	b500      	push	{lr}
 800d784:	b09c      	sub	sp, #112	; 0x70
 800d786:	ab1d      	add	r3, sp, #116	; 0x74
 800d788:	9002      	str	r0, [sp, #8]
 800d78a:	9006      	str	r0, [sp, #24]
 800d78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d790:	4809      	ldr	r0, [pc, #36]	; (800d7b8 <siprintf+0x38>)
 800d792:	9107      	str	r1, [sp, #28]
 800d794:	9104      	str	r1, [sp, #16]
 800d796:	4909      	ldr	r1, [pc, #36]	; (800d7bc <siprintf+0x3c>)
 800d798:	f853 2b04 	ldr.w	r2, [r3], #4
 800d79c:	9105      	str	r1, [sp, #20]
 800d79e:	6800      	ldr	r0, [r0, #0]
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	a902      	add	r1, sp, #8
 800d7a4:	f002 fd92 	bl	80102cc <_svfiprintf_r>
 800d7a8:	9b02      	ldr	r3, [sp, #8]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	701a      	strb	r2, [r3, #0]
 800d7ae:	b01c      	add	sp, #112	; 0x70
 800d7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b4:	b003      	add	sp, #12
 800d7b6:	4770      	bx	lr
 800d7b8:	20000540 	.word	0x20000540
 800d7bc:	ffff0208 	.word	0xffff0208

0800d7c0 <strncmp>:
 800d7c0:	b510      	push	{r4, lr}
 800d7c2:	b16a      	cbz	r2, 800d7e0 <strncmp+0x20>
 800d7c4:	3901      	subs	r1, #1
 800d7c6:	1884      	adds	r4, r0, r2
 800d7c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d7cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d103      	bne.n	800d7dc <strncmp+0x1c>
 800d7d4:	42a0      	cmp	r0, r4
 800d7d6:	d001      	beq.n	800d7dc <strncmp+0x1c>
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1f5      	bne.n	800d7c8 <strncmp+0x8>
 800d7dc:	1a98      	subs	r0, r3, r2
 800d7de:	bd10      	pop	{r4, pc}
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	e7fc      	b.n	800d7de <strncmp+0x1e>

0800d7e4 <sulp>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	460d      	mov	r5, r1
 800d7ea:	ec45 4b10 	vmov	d0, r4, r5
 800d7ee:	4616      	mov	r6, r2
 800d7f0:	f002 fbb2 	bl	800ff58 <__ulp>
 800d7f4:	ec51 0b10 	vmov	r0, r1, d0
 800d7f8:	b17e      	cbz	r6, 800d81a <sulp+0x36>
 800d7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd09      	ble.n	800d81a <sulp+0x36>
 800d806:	051b      	lsls	r3, r3, #20
 800d808:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d80c:	2400      	movs	r4, #0
 800d80e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d812:	4622      	mov	r2, r4
 800d814:	462b      	mov	r3, r5
 800d816:	f7f2 feef 	bl	80005f8 <__aeabi_dmul>
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <_strtod_l>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	b0a3      	sub	sp, #140	; 0x8c
 800d826:	461f      	mov	r7, r3
 800d828:	2300      	movs	r3, #0
 800d82a:	931e      	str	r3, [sp, #120]	; 0x78
 800d82c:	4ba4      	ldr	r3, [pc, #656]	; (800dac0 <_strtod_l+0x2a0>)
 800d82e:	9219      	str	r2, [sp, #100]	; 0x64
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	9307      	str	r3, [sp, #28]
 800d834:	4604      	mov	r4, r0
 800d836:	4618      	mov	r0, r3
 800d838:	4688      	mov	r8, r1
 800d83a:	f7f2 fcc9 	bl	80001d0 <strlen>
 800d83e:	f04f 0a00 	mov.w	sl, #0
 800d842:	4605      	mov	r5, r0
 800d844:	f04f 0b00 	mov.w	fp, #0
 800d848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d84c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	2a2b      	cmp	r2, #43	; 0x2b
 800d852:	d04c      	beq.n	800d8ee <_strtod_l+0xce>
 800d854:	d839      	bhi.n	800d8ca <_strtod_l+0xaa>
 800d856:	2a0d      	cmp	r2, #13
 800d858:	d832      	bhi.n	800d8c0 <_strtod_l+0xa0>
 800d85a:	2a08      	cmp	r2, #8
 800d85c:	d832      	bhi.n	800d8c4 <_strtod_l+0xa4>
 800d85e:	2a00      	cmp	r2, #0
 800d860:	d03c      	beq.n	800d8dc <_strtod_l+0xbc>
 800d862:	2300      	movs	r3, #0
 800d864:	930e      	str	r3, [sp, #56]	; 0x38
 800d866:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d868:	7833      	ldrb	r3, [r6, #0]
 800d86a:	2b30      	cmp	r3, #48	; 0x30
 800d86c:	f040 80b4 	bne.w	800d9d8 <_strtod_l+0x1b8>
 800d870:	7873      	ldrb	r3, [r6, #1]
 800d872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d876:	2b58      	cmp	r3, #88	; 0x58
 800d878:	d16c      	bne.n	800d954 <_strtod_l+0x134>
 800d87a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	ab1e      	add	r3, sp, #120	; 0x78
 800d880:	9702      	str	r7, [sp, #8]
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	4a8f      	ldr	r2, [pc, #572]	; (800dac4 <_strtod_l+0x2a4>)
 800d886:	ab1f      	add	r3, sp, #124	; 0x7c
 800d888:	a91d      	add	r1, sp, #116	; 0x74
 800d88a:	4620      	mov	r0, r4
 800d88c:	f001 fcc0 	bl	800f210 <__gethex>
 800d890:	f010 0707 	ands.w	r7, r0, #7
 800d894:	4605      	mov	r5, r0
 800d896:	d005      	beq.n	800d8a4 <_strtod_l+0x84>
 800d898:	2f06      	cmp	r7, #6
 800d89a:	d12a      	bne.n	800d8f2 <_strtod_l+0xd2>
 800d89c:	3601      	adds	r6, #1
 800d89e:	2300      	movs	r3, #0
 800d8a0:	961d      	str	r6, [sp, #116]	; 0x74
 800d8a2:	930e      	str	r3, [sp, #56]	; 0x38
 800d8a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 8596 	bne.w	800e3d8 <_strtod_l+0xbb8>
 800d8ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ae:	b1db      	cbz	r3, 800d8e8 <_strtod_l+0xc8>
 800d8b0:	4652      	mov	r2, sl
 800d8b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8b6:	ec43 2b10 	vmov	d0, r2, r3
 800d8ba:	b023      	add	sp, #140	; 0x8c
 800d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c0:	2a20      	cmp	r2, #32
 800d8c2:	d1ce      	bne.n	800d862 <_strtod_l+0x42>
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	931d      	str	r3, [sp, #116]	; 0x74
 800d8c8:	e7c0      	b.n	800d84c <_strtod_l+0x2c>
 800d8ca:	2a2d      	cmp	r2, #45	; 0x2d
 800d8cc:	d1c9      	bne.n	800d862 <_strtod_l+0x42>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	920e      	str	r2, [sp, #56]	; 0x38
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	921d      	str	r2, [sp, #116]	; 0x74
 800d8d6:	785b      	ldrb	r3, [r3, #1]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1c4      	bne.n	800d866 <_strtod_l+0x46>
 800d8dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f040 8576 	bne.w	800e3d4 <_strtod_l+0xbb4>
 800d8e8:	4652      	mov	r2, sl
 800d8ea:	465b      	mov	r3, fp
 800d8ec:	e7e3      	b.n	800d8b6 <_strtod_l+0x96>
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	e7ee      	b.n	800d8d0 <_strtod_l+0xb0>
 800d8f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d8f4:	b13a      	cbz	r2, 800d906 <_strtod_l+0xe6>
 800d8f6:	2135      	movs	r1, #53	; 0x35
 800d8f8:	a820      	add	r0, sp, #128	; 0x80
 800d8fa:	f002 fc38 	bl	801016e <__copybits>
 800d8fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d900:	4620      	mov	r0, r4
 800d902:	f001 fffd 	bl	800f900 <_Bfree>
 800d906:	3f01      	subs	r7, #1
 800d908:	2f05      	cmp	r7, #5
 800d90a:	d807      	bhi.n	800d91c <_strtod_l+0xfc>
 800d90c:	e8df f007 	tbb	[pc, r7]
 800d910:	1d180b0e 	.word	0x1d180b0e
 800d914:	030e      	.short	0x030e
 800d916:	f04f 0b00 	mov.w	fp, #0
 800d91a:	46da      	mov	sl, fp
 800d91c:	0728      	lsls	r0, r5, #28
 800d91e:	d5c1      	bpl.n	800d8a4 <_strtod_l+0x84>
 800d920:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d924:	e7be      	b.n	800d8a4 <_strtod_l+0x84>
 800d926:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d92a:	e7f7      	b.n	800d91c <_strtod_l+0xfc>
 800d92c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d930:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d936:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d93a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d93e:	e7ed      	b.n	800d91c <_strtod_l+0xfc>
 800d940:	f8df b184 	ldr.w	fp, [pc, #388]	; 800dac8 <_strtod_l+0x2a8>
 800d944:	f04f 0a00 	mov.w	sl, #0
 800d948:	e7e8      	b.n	800d91c <_strtod_l+0xfc>
 800d94a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d94e:	f04f 3aff 	mov.w	sl, #4294967295
 800d952:	e7e3      	b.n	800d91c <_strtod_l+0xfc>
 800d954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	921d      	str	r2, [sp, #116]	; 0x74
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2b30      	cmp	r3, #48	; 0x30
 800d95e:	d0f9      	beq.n	800d954 <_strtod_l+0x134>
 800d960:	2b00      	cmp	r3, #0
 800d962:	d09f      	beq.n	800d8a4 <_strtod_l+0x84>
 800d964:	2301      	movs	r3, #1
 800d966:	f04f 0900 	mov.w	r9, #0
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d96e:	930a      	str	r3, [sp, #40]	; 0x28
 800d970:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d974:	464f      	mov	r7, r9
 800d976:	220a      	movs	r2, #10
 800d978:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d97a:	7806      	ldrb	r6, [r0, #0]
 800d97c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d980:	b2d9      	uxtb	r1, r3
 800d982:	2909      	cmp	r1, #9
 800d984:	d92a      	bls.n	800d9dc <_strtod_l+0x1bc>
 800d986:	9907      	ldr	r1, [sp, #28]
 800d988:	462a      	mov	r2, r5
 800d98a:	f7ff ff19 	bl	800d7c0 <strncmp>
 800d98e:	b398      	cbz	r0, 800d9f8 <_strtod_l+0x1d8>
 800d990:	2000      	movs	r0, #0
 800d992:	4633      	mov	r3, r6
 800d994:	463d      	mov	r5, r7
 800d996:	9007      	str	r0, [sp, #28]
 800d998:	4602      	mov	r2, r0
 800d99a:	2b65      	cmp	r3, #101	; 0x65
 800d99c:	d001      	beq.n	800d9a2 <_strtod_l+0x182>
 800d99e:	2b45      	cmp	r3, #69	; 0x45
 800d9a0:	d118      	bne.n	800d9d4 <_strtod_l+0x1b4>
 800d9a2:	b91d      	cbnz	r5, 800d9ac <_strtod_l+0x18c>
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	4303      	orrs	r3, r0
 800d9a8:	d098      	beq.n	800d8dc <_strtod_l+0xbc>
 800d9aa:	2500      	movs	r5, #0
 800d9ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800d9b0:	f108 0301 	add.w	r3, r8, #1
 800d9b4:	931d      	str	r3, [sp, #116]	; 0x74
 800d9b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d9ba:	2b2b      	cmp	r3, #43	; 0x2b
 800d9bc:	d075      	beq.n	800daaa <_strtod_l+0x28a>
 800d9be:	2b2d      	cmp	r3, #45	; 0x2d
 800d9c0:	d07b      	beq.n	800daba <_strtod_l+0x29a>
 800d9c2:	f04f 0c00 	mov.w	ip, #0
 800d9c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d9ca:	2909      	cmp	r1, #9
 800d9cc:	f240 8082 	bls.w	800dad4 <_strtod_l+0x2b4>
 800d9d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d9d4:	2600      	movs	r6, #0
 800d9d6:	e09d      	b.n	800db14 <_strtod_l+0x2f4>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e7c4      	b.n	800d966 <_strtod_l+0x146>
 800d9dc:	2f08      	cmp	r7, #8
 800d9de:	bfd8      	it	le
 800d9e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d9e2:	f100 0001 	add.w	r0, r0, #1
 800d9e6:	bfda      	itte	le
 800d9e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800d9ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d9f2:	3701      	adds	r7, #1
 800d9f4:	901d      	str	r0, [sp, #116]	; 0x74
 800d9f6:	e7bf      	b.n	800d978 <_strtod_l+0x158>
 800d9f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9fa:	195a      	adds	r2, r3, r5
 800d9fc:	921d      	str	r2, [sp, #116]	; 0x74
 800d9fe:	5d5b      	ldrb	r3, [r3, r5]
 800da00:	2f00      	cmp	r7, #0
 800da02:	d037      	beq.n	800da74 <_strtod_l+0x254>
 800da04:	9007      	str	r0, [sp, #28]
 800da06:	463d      	mov	r5, r7
 800da08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800da0c:	2a09      	cmp	r2, #9
 800da0e:	d912      	bls.n	800da36 <_strtod_l+0x216>
 800da10:	2201      	movs	r2, #1
 800da12:	e7c2      	b.n	800d99a <_strtod_l+0x17a>
 800da14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	921d      	str	r2, [sp, #116]	; 0x74
 800da1a:	785b      	ldrb	r3, [r3, #1]
 800da1c:	3001      	adds	r0, #1
 800da1e:	2b30      	cmp	r3, #48	; 0x30
 800da20:	d0f8      	beq.n	800da14 <_strtod_l+0x1f4>
 800da22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800da26:	2a08      	cmp	r2, #8
 800da28:	f200 84db 	bhi.w	800e3e2 <_strtod_l+0xbc2>
 800da2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800da2e:	9007      	str	r0, [sp, #28]
 800da30:	2000      	movs	r0, #0
 800da32:	920a      	str	r2, [sp, #40]	; 0x28
 800da34:	4605      	mov	r5, r0
 800da36:	3b30      	subs	r3, #48	; 0x30
 800da38:	f100 0201 	add.w	r2, r0, #1
 800da3c:	d014      	beq.n	800da68 <_strtod_l+0x248>
 800da3e:	9907      	ldr	r1, [sp, #28]
 800da40:	4411      	add	r1, r2
 800da42:	9107      	str	r1, [sp, #28]
 800da44:	462a      	mov	r2, r5
 800da46:	eb00 0e05 	add.w	lr, r0, r5
 800da4a:	210a      	movs	r1, #10
 800da4c:	4572      	cmp	r2, lr
 800da4e:	d113      	bne.n	800da78 <_strtod_l+0x258>
 800da50:	182a      	adds	r2, r5, r0
 800da52:	2a08      	cmp	r2, #8
 800da54:	f105 0501 	add.w	r5, r5, #1
 800da58:	4405      	add	r5, r0
 800da5a:	dc1c      	bgt.n	800da96 <_strtod_l+0x276>
 800da5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da5e:	220a      	movs	r2, #10
 800da60:	fb02 3301 	mla	r3, r2, r1, r3
 800da64:	9309      	str	r3, [sp, #36]	; 0x24
 800da66:	2200      	movs	r2, #0
 800da68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da6a:	1c59      	adds	r1, r3, #1
 800da6c:	911d      	str	r1, [sp, #116]	; 0x74
 800da6e:	785b      	ldrb	r3, [r3, #1]
 800da70:	4610      	mov	r0, r2
 800da72:	e7c9      	b.n	800da08 <_strtod_l+0x1e8>
 800da74:	4638      	mov	r0, r7
 800da76:	e7d2      	b.n	800da1e <_strtod_l+0x1fe>
 800da78:	2a08      	cmp	r2, #8
 800da7a:	dc04      	bgt.n	800da86 <_strtod_l+0x266>
 800da7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800da7e:	434e      	muls	r6, r1
 800da80:	9609      	str	r6, [sp, #36]	; 0x24
 800da82:	3201      	adds	r2, #1
 800da84:	e7e2      	b.n	800da4c <_strtod_l+0x22c>
 800da86:	f102 0c01 	add.w	ip, r2, #1
 800da8a:	f1bc 0f10 	cmp.w	ip, #16
 800da8e:	bfd8      	it	le
 800da90:	fb01 f909 	mulle.w	r9, r1, r9
 800da94:	e7f5      	b.n	800da82 <_strtod_l+0x262>
 800da96:	2d10      	cmp	r5, #16
 800da98:	bfdc      	itt	le
 800da9a:	220a      	movle	r2, #10
 800da9c:	fb02 3909 	mlale	r9, r2, r9, r3
 800daa0:	e7e1      	b.n	800da66 <_strtod_l+0x246>
 800daa2:	2300      	movs	r3, #0
 800daa4:	9307      	str	r3, [sp, #28]
 800daa6:	2201      	movs	r2, #1
 800daa8:	e77c      	b.n	800d9a4 <_strtod_l+0x184>
 800daaa:	f04f 0c00 	mov.w	ip, #0
 800daae:	f108 0302 	add.w	r3, r8, #2
 800dab2:	931d      	str	r3, [sp, #116]	; 0x74
 800dab4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dab8:	e785      	b.n	800d9c6 <_strtod_l+0x1a6>
 800daba:	f04f 0c01 	mov.w	ip, #1
 800dabe:	e7f6      	b.n	800daae <_strtod_l+0x28e>
 800dac0:	08011478 	.word	0x08011478
 800dac4:	08011328 	.word	0x08011328
 800dac8:	7ff00000 	.word	0x7ff00000
 800dacc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dace:	1c59      	adds	r1, r3, #1
 800dad0:	911d      	str	r1, [sp, #116]	; 0x74
 800dad2:	785b      	ldrb	r3, [r3, #1]
 800dad4:	2b30      	cmp	r3, #48	; 0x30
 800dad6:	d0f9      	beq.n	800dacc <_strtod_l+0x2ac>
 800dad8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800dadc:	2908      	cmp	r1, #8
 800dade:	f63f af79 	bhi.w	800d9d4 <_strtod_l+0x1b4>
 800dae2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800dae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dae8:	9308      	str	r3, [sp, #32]
 800daea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daec:	1c59      	adds	r1, r3, #1
 800daee:	911d      	str	r1, [sp, #116]	; 0x74
 800daf0:	785b      	ldrb	r3, [r3, #1]
 800daf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800daf6:	2e09      	cmp	r6, #9
 800daf8:	d937      	bls.n	800db6a <_strtod_l+0x34a>
 800dafa:	9e08      	ldr	r6, [sp, #32]
 800dafc:	1b89      	subs	r1, r1, r6
 800dafe:	2908      	cmp	r1, #8
 800db00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800db04:	dc02      	bgt.n	800db0c <_strtod_l+0x2ec>
 800db06:	4576      	cmp	r6, lr
 800db08:	bfa8      	it	ge
 800db0a:	4676      	movge	r6, lr
 800db0c:	f1bc 0f00 	cmp.w	ip, #0
 800db10:	d000      	beq.n	800db14 <_strtod_l+0x2f4>
 800db12:	4276      	negs	r6, r6
 800db14:	2d00      	cmp	r5, #0
 800db16:	d14f      	bne.n	800dbb8 <_strtod_l+0x398>
 800db18:	9904      	ldr	r1, [sp, #16]
 800db1a:	4301      	orrs	r1, r0
 800db1c:	f47f aec2 	bne.w	800d8a4 <_strtod_l+0x84>
 800db20:	2a00      	cmp	r2, #0
 800db22:	f47f aedb 	bne.w	800d8dc <_strtod_l+0xbc>
 800db26:	2b69      	cmp	r3, #105	; 0x69
 800db28:	d027      	beq.n	800db7a <_strtod_l+0x35a>
 800db2a:	dc24      	bgt.n	800db76 <_strtod_l+0x356>
 800db2c:	2b49      	cmp	r3, #73	; 0x49
 800db2e:	d024      	beq.n	800db7a <_strtod_l+0x35a>
 800db30:	2b4e      	cmp	r3, #78	; 0x4e
 800db32:	f47f aed3 	bne.w	800d8dc <_strtod_l+0xbc>
 800db36:	499e      	ldr	r1, [pc, #632]	; (800ddb0 <_strtod_l+0x590>)
 800db38:	a81d      	add	r0, sp, #116	; 0x74
 800db3a:	f001 fdc1 	bl	800f6c0 <__match>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f43f aecc 	beq.w	800d8dc <_strtod_l+0xbc>
 800db44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b28      	cmp	r3, #40	; 0x28
 800db4a:	d12d      	bne.n	800dba8 <_strtod_l+0x388>
 800db4c:	4999      	ldr	r1, [pc, #612]	; (800ddb4 <_strtod_l+0x594>)
 800db4e:	aa20      	add	r2, sp, #128	; 0x80
 800db50:	a81d      	add	r0, sp, #116	; 0x74
 800db52:	f001 fdc9 	bl	800f6e8 <__hexnan>
 800db56:	2805      	cmp	r0, #5
 800db58:	d126      	bne.n	800dba8 <_strtod_l+0x388>
 800db5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800db60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800db64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800db68:	e69c      	b.n	800d8a4 <_strtod_l+0x84>
 800db6a:	210a      	movs	r1, #10
 800db6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800db70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800db74:	e7b9      	b.n	800daea <_strtod_l+0x2ca>
 800db76:	2b6e      	cmp	r3, #110	; 0x6e
 800db78:	e7db      	b.n	800db32 <_strtod_l+0x312>
 800db7a:	498f      	ldr	r1, [pc, #572]	; (800ddb8 <_strtod_l+0x598>)
 800db7c:	a81d      	add	r0, sp, #116	; 0x74
 800db7e:	f001 fd9f 	bl	800f6c0 <__match>
 800db82:	2800      	cmp	r0, #0
 800db84:	f43f aeaa 	beq.w	800d8dc <_strtod_l+0xbc>
 800db88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db8a:	498c      	ldr	r1, [pc, #560]	; (800ddbc <_strtod_l+0x59c>)
 800db8c:	3b01      	subs	r3, #1
 800db8e:	a81d      	add	r0, sp, #116	; 0x74
 800db90:	931d      	str	r3, [sp, #116]	; 0x74
 800db92:	f001 fd95 	bl	800f6c0 <__match>
 800db96:	b910      	cbnz	r0, 800db9e <_strtod_l+0x37e>
 800db98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db9a:	3301      	adds	r3, #1
 800db9c:	931d      	str	r3, [sp, #116]	; 0x74
 800db9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ddcc <_strtod_l+0x5ac>
 800dba2:	f04f 0a00 	mov.w	sl, #0
 800dba6:	e67d      	b.n	800d8a4 <_strtod_l+0x84>
 800dba8:	4885      	ldr	r0, [pc, #532]	; (800ddc0 <_strtod_l+0x5a0>)
 800dbaa:	f002 fc91 	bl	80104d0 <nan>
 800dbae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dbb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dbb6:	e675      	b.n	800d8a4 <_strtod_l+0x84>
 800dbb8:	9b07      	ldr	r3, [sp, #28]
 800dbba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbbc:	1af3      	subs	r3, r6, r3
 800dbbe:	2f00      	cmp	r7, #0
 800dbc0:	bf08      	it	eq
 800dbc2:	462f      	moveq	r7, r5
 800dbc4:	2d10      	cmp	r5, #16
 800dbc6:	9308      	str	r3, [sp, #32]
 800dbc8:	46a8      	mov	r8, r5
 800dbca:	bfa8      	it	ge
 800dbcc:	f04f 0810 	movge.w	r8, #16
 800dbd0:	f7f2 fc98 	bl	8000504 <__aeabi_ui2d>
 800dbd4:	2d09      	cmp	r5, #9
 800dbd6:	4682      	mov	sl, r0
 800dbd8:	468b      	mov	fp, r1
 800dbda:	dd13      	ble.n	800dc04 <_strtod_l+0x3e4>
 800dbdc:	4b79      	ldr	r3, [pc, #484]	; (800ddc4 <_strtod_l+0x5a4>)
 800dbde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dbe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dbe6:	f7f2 fd07 	bl	80005f8 <__aeabi_dmul>
 800dbea:	4682      	mov	sl, r0
 800dbec:	4648      	mov	r0, r9
 800dbee:	468b      	mov	fp, r1
 800dbf0:	f7f2 fc88 	bl	8000504 <__aeabi_ui2d>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4650      	mov	r0, sl
 800dbfa:	4659      	mov	r1, fp
 800dbfc:	f7f2 fb46 	bl	800028c <__adddf3>
 800dc00:	4682      	mov	sl, r0
 800dc02:	468b      	mov	fp, r1
 800dc04:	2d0f      	cmp	r5, #15
 800dc06:	dc38      	bgt.n	800dc7a <_strtod_l+0x45a>
 800dc08:	9b08      	ldr	r3, [sp, #32]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f43f ae4a 	beq.w	800d8a4 <_strtod_l+0x84>
 800dc10:	dd24      	ble.n	800dc5c <_strtod_l+0x43c>
 800dc12:	2b16      	cmp	r3, #22
 800dc14:	dc0b      	bgt.n	800dc2e <_strtod_l+0x40e>
 800dc16:	4d6b      	ldr	r5, [pc, #428]	; (800ddc4 <_strtod_l+0x5a4>)
 800dc18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800dc1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc20:	4652      	mov	r2, sl
 800dc22:	465b      	mov	r3, fp
 800dc24:	f7f2 fce8 	bl	80005f8 <__aeabi_dmul>
 800dc28:	4682      	mov	sl, r0
 800dc2a:	468b      	mov	fp, r1
 800dc2c:	e63a      	b.n	800d8a4 <_strtod_l+0x84>
 800dc2e:	9a08      	ldr	r2, [sp, #32]
 800dc30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dc34:	4293      	cmp	r3, r2
 800dc36:	db20      	blt.n	800dc7a <_strtod_l+0x45a>
 800dc38:	4c62      	ldr	r4, [pc, #392]	; (800ddc4 <_strtod_l+0x5a4>)
 800dc3a:	f1c5 050f 	rsb	r5, r5, #15
 800dc3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc42:	4652      	mov	r2, sl
 800dc44:	465b      	mov	r3, fp
 800dc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc4a:	f7f2 fcd5 	bl	80005f8 <__aeabi_dmul>
 800dc4e:	9b08      	ldr	r3, [sp, #32]
 800dc50:	1b5d      	subs	r5, r3, r5
 800dc52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc5a:	e7e3      	b.n	800dc24 <_strtod_l+0x404>
 800dc5c:	9b08      	ldr	r3, [sp, #32]
 800dc5e:	3316      	adds	r3, #22
 800dc60:	db0b      	blt.n	800dc7a <_strtod_l+0x45a>
 800dc62:	9b07      	ldr	r3, [sp, #28]
 800dc64:	4a57      	ldr	r2, [pc, #348]	; (800ddc4 <_strtod_l+0x5a4>)
 800dc66:	1b9e      	subs	r6, r3, r6
 800dc68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800dc6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc70:	4650      	mov	r0, sl
 800dc72:	4659      	mov	r1, fp
 800dc74:	f7f2 fdea 	bl	800084c <__aeabi_ddiv>
 800dc78:	e7d6      	b.n	800dc28 <_strtod_l+0x408>
 800dc7a:	9b08      	ldr	r3, [sp, #32]
 800dc7c:	eba5 0808 	sub.w	r8, r5, r8
 800dc80:	4498      	add	r8, r3
 800dc82:	f1b8 0f00 	cmp.w	r8, #0
 800dc86:	dd71      	ble.n	800dd6c <_strtod_l+0x54c>
 800dc88:	f018 030f 	ands.w	r3, r8, #15
 800dc8c:	d00a      	beq.n	800dca4 <_strtod_l+0x484>
 800dc8e:	494d      	ldr	r1, [pc, #308]	; (800ddc4 <_strtod_l+0x5a4>)
 800dc90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc94:	4652      	mov	r2, sl
 800dc96:	465b      	mov	r3, fp
 800dc98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc9c:	f7f2 fcac 	bl	80005f8 <__aeabi_dmul>
 800dca0:	4682      	mov	sl, r0
 800dca2:	468b      	mov	fp, r1
 800dca4:	f038 080f 	bics.w	r8, r8, #15
 800dca8:	d04d      	beq.n	800dd46 <_strtod_l+0x526>
 800dcaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dcae:	dd22      	ble.n	800dcf6 <_strtod_l+0x4d6>
 800dcb0:	2500      	movs	r5, #0
 800dcb2:	462e      	mov	r6, r5
 800dcb4:	9509      	str	r5, [sp, #36]	; 0x24
 800dcb6:	9507      	str	r5, [sp, #28]
 800dcb8:	2322      	movs	r3, #34	; 0x22
 800dcba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ddcc <_strtod_l+0x5ac>
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	f04f 0a00 	mov.w	sl, #0
 800dcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f43f adec 	beq.w	800d8a4 <_strtod_l+0x84>
 800dccc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f001 fe16 	bl	800f900 <_Bfree>
 800dcd4:	9907      	ldr	r1, [sp, #28]
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f001 fe12 	bl	800f900 <_Bfree>
 800dcdc:	4631      	mov	r1, r6
 800dcde:	4620      	mov	r0, r4
 800dce0:	f001 fe0e 	bl	800f900 <_Bfree>
 800dce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dce6:	4620      	mov	r0, r4
 800dce8:	f001 fe0a 	bl	800f900 <_Bfree>
 800dcec:	4629      	mov	r1, r5
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f001 fe06 	bl	800f900 <_Bfree>
 800dcf4:	e5d6      	b.n	800d8a4 <_strtod_l+0x84>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dcfc:	4650      	mov	r0, sl
 800dcfe:	4659      	mov	r1, fp
 800dd00:	4699      	mov	r9, r3
 800dd02:	f1b8 0f01 	cmp.w	r8, #1
 800dd06:	dc21      	bgt.n	800dd4c <_strtod_l+0x52c>
 800dd08:	b10b      	cbz	r3, 800dd0e <_strtod_l+0x4ee>
 800dd0a:	4682      	mov	sl, r0
 800dd0c:	468b      	mov	fp, r1
 800dd0e:	4b2e      	ldr	r3, [pc, #184]	; (800ddc8 <_strtod_l+0x5a8>)
 800dd10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dd14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dd18:	4652      	mov	r2, sl
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dd20:	f7f2 fc6a 	bl	80005f8 <__aeabi_dmul>
 800dd24:	4b29      	ldr	r3, [pc, #164]	; (800ddcc <_strtod_l+0x5ac>)
 800dd26:	460a      	mov	r2, r1
 800dd28:	400b      	ands	r3, r1
 800dd2a:	4929      	ldr	r1, [pc, #164]	; (800ddd0 <_strtod_l+0x5b0>)
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	4682      	mov	sl, r0
 800dd30:	d8be      	bhi.n	800dcb0 <_strtod_l+0x490>
 800dd32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dd36:	428b      	cmp	r3, r1
 800dd38:	bf86      	itte	hi
 800dd3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ddd4 <_strtod_l+0x5b4>
 800dd3e:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dd46:	2300      	movs	r3, #0
 800dd48:	9304      	str	r3, [sp, #16]
 800dd4a:	e081      	b.n	800de50 <_strtod_l+0x630>
 800dd4c:	f018 0f01 	tst.w	r8, #1
 800dd50:	d007      	beq.n	800dd62 <_strtod_l+0x542>
 800dd52:	4b1d      	ldr	r3, [pc, #116]	; (800ddc8 <_strtod_l+0x5a8>)
 800dd54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 fc4c 	bl	80005f8 <__aeabi_dmul>
 800dd60:	2301      	movs	r3, #1
 800dd62:	f109 0901 	add.w	r9, r9, #1
 800dd66:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd6a:	e7ca      	b.n	800dd02 <_strtod_l+0x4e2>
 800dd6c:	d0eb      	beq.n	800dd46 <_strtod_l+0x526>
 800dd6e:	f1c8 0800 	rsb	r8, r8, #0
 800dd72:	f018 020f 	ands.w	r2, r8, #15
 800dd76:	d00a      	beq.n	800dd8e <_strtod_l+0x56e>
 800dd78:	4b12      	ldr	r3, [pc, #72]	; (800ddc4 <_strtod_l+0x5a4>)
 800dd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd7e:	4650      	mov	r0, sl
 800dd80:	4659      	mov	r1, fp
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	f7f2 fd61 	bl	800084c <__aeabi_ddiv>
 800dd8a:	4682      	mov	sl, r0
 800dd8c:	468b      	mov	fp, r1
 800dd8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dd92:	d0d8      	beq.n	800dd46 <_strtod_l+0x526>
 800dd94:	f1b8 0f1f 	cmp.w	r8, #31
 800dd98:	dd1e      	ble.n	800ddd8 <_strtod_l+0x5b8>
 800dd9a:	2500      	movs	r5, #0
 800dd9c:	462e      	mov	r6, r5
 800dd9e:	9509      	str	r5, [sp, #36]	; 0x24
 800dda0:	9507      	str	r5, [sp, #28]
 800dda2:	2322      	movs	r3, #34	; 0x22
 800dda4:	f04f 0a00 	mov.w	sl, #0
 800dda8:	f04f 0b00 	mov.w	fp, #0
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	e789      	b.n	800dcc4 <_strtod_l+0x4a4>
 800ddb0:	08011301 	.word	0x08011301
 800ddb4:	0801133c 	.word	0x0801133c
 800ddb8:	080112f9 	.word	0x080112f9
 800ddbc:	0801137b 	.word	0x0801137b
 800ddc0:	08011638 	.word	0x08011638
 800ddc4:	08011518 	.word	0x08011518
 800ddc8:	080114f0 	.word	0x080114f0
 800ddcc:	7ff00000 	.word	0x7ff00000
 800ddd0:	7ca00000 	.word	0x7ca00000
 800ddd4:	7fefffff 	.word	0x7fefffff
 800ddd8:	f018 0310 	ands.w	r3, r8, #16
 800dddc:	bf18      	it	ne
 800ddde:	236a      	movne	r3, #106	; 0x6a
 800dde0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e198 <_strtod_l+0x978>
 800dde4:	9304      	str	r3, [sp, #16]
 800dde6:	4650      	mov	r0, sl
 800dde8:	4659      	mov	r1, fp
 800ddea:	2300      	movs	r3, #0
 800ddec:	f018 0f01 	tst.w	r8, #1
 800ddf0:	d004      	beq.n	800ddfc <_strtod_l+0x5dc>
 800ddf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ddf6:	f7f2 fbff 	bl	80005f8 <__aeabi_dmul>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800de00:	f109 0908 	add.w	r9, r9, #8
 800de04:	d1f2      	bne.n	800ddec <_strtod_l+0x5cc>
 800de06:	b10b      	cbz	r3, 800de0c <_strtod_l+0x5ec>
 800de08:	4682      	mov	sl, r0
 800de0a:	468b      	mov	fp, r1
 800de0c:	9b04      	ldr	r3, [sp, #16]
 800de0e:	b1bb      	cbz	r3, 800de40 <_strtod_l+0x620>
 800de10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800de14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de18:	2b00      	cmp	r3, #0
 800de1a:	4659      	mov	r1, fp
 800de1c:	dd10      	ble.n	800de40 <_strtod_l+0x620>
 800de1e:	2b1f      	cmp	r3, #31
 800de20:	f340 8128 	ble.w	800e074 <_strtod_l+0x854>
 800de24:	2b34      	cmp	r3, #52	; 0x34
 800de26:	bfde      	ittt	le
 800de28:	3b20      	suble	r3, #32
 800de2a:	f04f 32ff 	movle.w	r2, #4294967295
 800de2e:	fa02 f303 	lslle.w	r3, r2, r3
 800de32:	f04f 0a00 	mov.w	sl, #0
 800de36:	bfcc      	ite	gt
 800de38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800de3c:	ea03 0b01 	andle.w	fp, r3, r1
 800de40:	2200      	movs	r2, #0
 800de42:	2300      	movs	r3, #0
 800de44:	4650      	mov	r0, sl
 800de46:	4659      	mov	r1, fp
 800de48:	f7f2 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d1a4      	bne.n	800dd9a <_strtod_l+0x57a>
 800de50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de56:	462b      	mov	r3, r5
 800de58:	463a      	mov	r2, r7
 800de5a:	4620      	mov	r0, r4
 800de5c:	f001 fdbc 	bl	800f9d8 <__s2b>
 800de60:	9009      	str	r0, [sp, #36]	; 0x24
 800de62:	2800      	cmp	r0, #0
 800de64:	f43f af24 	beq.w	800dcb0 <_strtod_l+0x490>
 800de68:	9b07      	ldr	r3, [sp, #28]
 800de6a:	1b9e      	subs	r6, r3, r6
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	bfb4      	ite	lt
 800de72:	4633      	movlt	r3, r6
 800de74:	2300      	movge	r3, #0
 800de76:	9310      	str	r3, [sp, #64]	; 0x40
 800de78:	9b08      	ldr	r3, [sp, #32]
 800de7a:	2500      	movs	r5, #0
 800de7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de80:	9318      	str	r3, [sp, #96]	; 0x60
 800de82:	462e      	mov	r6, r5
 800de84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de86:	4620      	mov	r0, r4
 800de88:	6859      	ldr	r1, [r3, #4]
 800de8a:	f001 fcf9 	bl	800f880 <_Balloc>
 800de8e:	9007      	str	r0, [sp, #28]
 800de90:	2800      	cmp	r0, #0
 800de92:	f43f af11 	beq.w	800dcb8 <_strtod_l+0x498>
 800de96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de98:	691a      	ldr	r2, [r3, #16]
 800de9a:	3202      	adds	r2, #2
 800de9c:	f103 010c 	add.w	r1, r3, #12
 800dea0:	0092      	lsls	r2, r2, #2
 800dea2:	300c      	adds	r0, #12
 800dea4:	f001 fcd2 	bl	800f84c <memcpy>
 800dea8:	ec4b ab10 	vmov	d0, sl, fp
 800deac:	aa20      	add	r2, sp, #128	; 0x80
 800deae:	a91f      	add	r1, sp, #124	; 0x7c
 800deb0:	4620      	mov	r0, r4
 800deb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800deb6:	f002 f8cb 	bl	8010050 <__d2b>
 800deba:	901e      	str	r0, [sp, #120]	; 0x78
 800debc:	2800      	cmp	r0, #0
 800debe:	f43f aefb 	beq.w	800dcb8 <_strtod_l+0x498>
 800dec2:	2101      	movs	r1, #1
 800dec4:	4620      	mov	r0, r4
 800dec6:	f001 fe21 	bl	800fb0c <__i2b>
 800deca:	4606      	mov	r6, r0
 800decc:	2800      	cmp	r0, #0
 800dece:	f43f aef3 	beq.w	800dcb8 <_strtod_l+0x498>
 800ded2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ded4:	9904      	ldr	r1, [sp, #16]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfab      	itete	ge
 800deda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800dedc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800dede:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800dee0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800dee4:	bfac      	ite	ge
 800dee6:	eb03 0902 	addge.w	r9, r3, r2
 800deea:	1ad7      	sublt	r7, r2, r3
 800deec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800deee:	eba3 0801 	sub.w	r8, r3, r1
 800def2:	4490      	add	r8, r2
 800def4:	4ba3      	ldr	r3, [pc, #652]	; (800e184 <_strtod_l+0x964>)
 800def6:	f108 38ff 	add.w	r8, r8, #4294967295
 800defa:	4598      	cmp	r8, r3
 800defc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800df00:	f280 80cc 	bge.w	800e09c <_strtod_l+0x87c>
 800df04:	eba3 0308 	sub.w	r3, r3, r8
 800df08:	2b1f      	cmp	r3, #31
 800df0a:	eba2 0203 	sub.w	r2, r2, r3
 800df0e:	f04f 0101 	mov.w	r1, #1
 800df12:	f300 80b6 	bgt.w	800e082 <_strtod_l+0x862>
 800df16:	fa01 f303 	lsl.w	r3, r1, r3
 800df1a:	9311      	str	r3, [sp, #68]	; 0x44
 800df1c:	2300      	movs	r3, #0
 800df1e:	930c      	str	r3, [sp, #48]	; 0x30
 800df20:	eb09 0802 	add.w	r8, r9, r2
 800df24:	9b04      	ldr	r3, [sp, #16]
 800df26:	45c1      	cmp	r9, r8
 800df28:	4417      	add	r7, r2
 800df2a:	441f      	add	r7, r3
 800df2c:	464b      	mov	r3, r9
 800df2e:	bfa8      	it	ge
 800df30:	4643      	movge	r3, r8
 800df32:	42bb      	cmp	r3, r7
 800df34:	bfa8      	it	ge
 800df36:	463b      	movge	r3, r7
 800df38:	2b00      	cmp	r3, #0
 800df3a:	bfc2      	ittt	gt
 800df3c:	eba8 0803 	subgt.w	r8, r8, r3
 800df40:	1aff      	subgt	r7, r7, r3
 800df42:	eba9 0903 	subgt.w	r9, r9, r3
 800df46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df48:	2b00      	cmp	r3, #0
 800df4a:	dd17      	ble.n	800df7c <_strtod_l+0x75c>
 800df4c:	4631      	mov	r1, r6
 800df4e:	461a      	mov	r2, r3
 800df50:	4620      	mov	r0, r4
 800df52:	f001 fe97 	bl	800fc84 <__pow5mult>
 800df56:	4606      	mov	r6, r0
 800df58:	2800      	cmp	r0, #0
 800df5a:	f43f aead 	beq.w	800dcb8 <_strtod_l+0x498>
 800df5e:	4601      	mov	r1, r0
 800df60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800df62:	4620      	mov	r0, r4
 800df64:	f001 fde8 	bl	800fb38 <__multiply>
 800df68:	900f      	str	r0, [sp, #60]	; 0x3c
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f43f aea4 	beq.w	800dcb8 <_strtod_l+0x498>
 800df70:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df72:	4620      	mov	r0, r4
 800df74:	f001 fcc4 	bl	800f900 <_Bfree>
 800df78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df7a:	931e      	str	r3, [sp, #120]	; 0x78
 800df7c:	f1b8 0f00 	cmp.w	r8, #0
 800df80:	f300 8091 	bgt.w	800e0a6 <_strtod_l+0x886>
 800df84:	9b08      	ldr	r3, [sp, #32]
 800df86:	2b00      	cmp	r3, #0
 800df88:	dd08      	ble.n	800df9c <_strtod_l+0x77c>
 800df8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df8c:	9907      	ldr	r1, [sp, #28]
 800df8e:	4620      	mov	r0, r4
 800df90:	f001 fe78 	bl	800fc84 <__pow5mult>
 800df94:	9007      	str	r0, [sp, #28]
 800df96:	2800      	cmp	r0, #0
 800df98:	f43f ae8e 	beq.w	800dcb8 <_strtod_l+0x498>
 800df9c:	2f00      	cmp	r7, #0
 800df9e:	dd08      	ble.n	800dfb2 <_strtod_l+0x792>
 800dfa0:	9907      	ldr	r1, [sp, #28]
 800dfa2:	463a      	mov	r2, r7
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f001 fec7 	bl	800fd38 <__lshift>
 800dfaa:	9007      	str	r0, [sp, #28]
 800dfac:	2800      	cmp	r0, #0
 800dfae:	f43f ae83 	beq.w	800dcb8 <_strtod_l+0x498>
 800dfb2:	f1b9 0f00 	cmp.w	r9, #0
 800dfb6:	dd08      	ble.n	800dfca <_strtod_l+0x7aa>
 800dfb8:	4631      	mov	r1, r6
 800dfba:	464a      	mov	r2, r9
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f001 febb 	bl	800fd38 <__lshift>
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	f43f ae77 	beq.w	800dcb8 <_strtod_l+0x498>
 800dfca:	9a07      	ldr	r2, [sp, #28]
 800dfcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f001 ff3a 	bl	800fe48 <__mdiff>
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f43f ae6e 	beq.w	800dcb8 <_strtod_l+0x498>
 800dfdc:	68c3      	ldr	r3, [r0, #12]
 800dfde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60c3      	str	r3, [r0, #12]
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	f001 ff13 	bl	800fe10 <__mcmp>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	da65      	bge.n	800e0ba <_strtod_l+0x89a>
 800dfee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dff0:	ea53 030a 	orrs.w	r3, r3, sl
 800dff4:	f040 8087 	bne.w	800e106 <_strtod_l+0x8e6>
 800dff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 8082 	bne.w	800e106 <_strtod_l+0x8e6>
 800e002:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e006:	0d1b      	lsrs	r3, r3, #20
 800e008:	051b      	lsls	r3, r3, #20
 800e00a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e00e:	d97a      	bls.n	800e106 <_strtod_l+0x8e6>
 800e010:	696b      	ldr	r3, [r5, #20]
 800e012:	b913      	cbnz	r3, 800e01a <_strtod_l+0x7fa>
 800e014:	692b      	ldr	r3, [r5, #16]
 800e016:	2b01      	cmp	r3, #1
 800e018:	dd75      	ble.n	800e106 <_strtod_l+0x8e6>
 800e01a:	4629      	mov	r1, r5
 800e01c:	2201      	movs	r2, #1
 800e01e:	4620      	mov	r0, r4
 800e020:	f001 fe8a 	bl	800fd38 <__lshift>
 800e024:	4631      	mov	r1, r6
 800e026:	4605      	mov	r5, r0
 800e028:	f001 fef2 	bl	800fe10 <__mcmp>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	dd6a      	ble.n	800e106 <_strtod_l+0x8e6>
 800e030:	9904      	ldr	r1, [sp, #16]
 800e032:	4a55      	ldr	r2, [pc, #340]	; (800e188 <_strtod_l+0x968>)
 800e034:	465b      	mov	r3, fp
 800e036:	2900      	cmp	r1, #0
 800e038:	f000 8085 	beq.w	800e146 <_strtod_l+0x926>
 800e03c:	ea02 010b 	and.w	r1, r2, fp
 800e040:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e044:	dc7f      	bgt.n	800e146 <_strtod_l+0x926>
 800e046:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e04a:	f77f aeaa 	ble.w	800dda2 <_strtod_l+0x582>
 800e04e:	4a4f      	ldr	r2, [pc, #316]	; (800e18c <_strtod_l+0x96c>)
 800e050:	2300      	movs	r3, #0
 800e052:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e056:	4650      	mov	r0, sl
 800e058:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e05c:	4659      	mov	r1, fp
 800e05e:	f7f2 facb 	bl	80005f8 <__aeabi_dmul>
 800e062:	460b      	mov	r3, r1
 800e064:	4303      	orrs	r3, r0
 800e066:	bf08      	it	eq
 800e068:	2322      	moveq	r3, #34	; 0x22
 800e06a:	4682      	mov	sl, r0
 800e06c:	468b      	mov	fp, r1
 800e06e:	bf08      	it	eq
 800e070:	6023      	streq	r3, [r4, #0]
 800e072:	e62b      	b.n	800dccc <_strtod_l+0x4ac>
 800e074:	f04f 32ff 	mov.w	r2, #4294967295
 800e078:	fa02 f303 	lsl.w	r3, r2, r3
 800e07c:	ea03 0a0a 	and.w	sl, r3, sl
 800e080:	e6de      	b.n	800de40 <_strtod_l+0x620>
 800e082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e08a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e08e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e092:	fa01 f308 	lsl.w	r3, r1, r8
 800e096:	930c      	str	r3, [sp, #48]	; 0x30
 800e098:	9111      	str	r1, [sp, #68]	; 0x44
 800e09a:	e741      	b.n	800df20 <_strtod_l+0x700>
 800e09c:	2300      	movs	r3, #0
 800e09e:	930c      	str	r3, [sp, #48]	; 0x30
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	9311      	str	r3, [sp, #68]	; 0x44
 800e0a4:	e73c      	b.n	800df20 <_strtod_l+0x700>
 800e0a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0a8:	4642      	mov	r2, r8
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f001 fe44 	bl	800fd38 <__lshift>
 800e0b0:	901e      	str	r0, [sp, #120]	; 0x78
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f47f af66 	bne.w	800df84 <_strtod_l+0x764>
 800e0b8:	e5fe      	b.n	800dcb8 <_strtod_l+0x498>
 800e0ba:	465f      	mov	r7, fp
 800e0bc:	d16e      	bne.n	800e19c <_strtod_l+0x97c>
 800e0be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0c4:	b342      	cbz	r2, 800e118 <_strtod_l+0x8f8>
 800e0c6:	4a32      	ldr	r2, [pc, #200]	; (800e190 <_strtod_l+0x970>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d128      	bne.n	800e11e <_strtod_l+0x8fe>
 800e0cc:	9b04      	ldr	r3, [sp, #16]
 800e0ce:	4650      	mov	r0, sl
 800e0d0:	b1eb      	cbz	r3, 800e10e <_strtod_l+0x8ee>
 800e0d2:	4a2d      	ldr	r2, [pc, #180]	; (800e188 <_strtod_l+0x968>)
 800e0d4:	403a      	ands	r2, r7
 800e0d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e0da:	f04f 31ff 	mov.w	r1, #4294967295
 800e0de:	d819      	bhi.n	800e114 <_strtod_l+0x8f4>
 800e0e0:	0d12      	lsrs	r2, r2, #20
 800e0e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ea:	4298      	cmp	r0, r3
 800e0ec:	d117      	bne.n	800e11e <_strtod_l+0x8fe>
 800e0ee:	4b29      	ldr	r3, [pc, #164]	; (800e194 <_strtod_l+0x974>)
 800e0f0:	429f      	cmp	r7, r3
 800e0f2:	d102      	bne.n	800e0fa <_strtod_l+0x8da>
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	f43f addf 	beq.w	800dcb8 <_strtod_l+0x498>
 800e0fa:	4b23      	ldr	r3, [pc, #140]	; (800e188 <_strtod_l+0x968>)
 800e0fc:	403b      	ands	r3, r7
 800e0fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e102:	f04f 0a00 	mov.w	sl, #0
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1a0      	bne.n	800e04e <_strtod_l+0x82e>
 800e10c:	e5de      	b.n	800dccc <_strtod_l+0x4ac>
 800e10e:	f04f 33ff 	mov.w	r3, #4294967295
 800e112:	e7ea      	b.n	800e0ea <_strtod_l+0x8ca>
 800e114:	460b      	mov	r3, r1
 800e116:	e7e8      	b.n	800e0ea <_strtod_l+0x8ca>
 800e118:	ea53 030a 	orrs.w	r3, r3, sl
 800e11c:	d088      	beq.n	800e030 <_strtod_l+0x810>
 800e11e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e120:	b1db      	cbz	r3, 800e15a <_strtod_l+0x93a>
 800e122:	423b      	tst	r3, r7
 800e124:	d0ef      	beq.n	800e106 <_strtod_l+0x8e6>
 800e126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e128:	9a04      	ldr	r2, [sp, #16]
 800e12a:	4650      	mov	r0, sl
 800e12c:	4659      	mov	r1, fp
 800e12e:	b1c3      	cbz	r3, 800e162 <_strtod_l+0x942>
 800e130:	f7ff fb58 	bl	800d7e4 <sulp>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e13c:	f7f2 f8a6 	bl	800028c <__adddf3>
 800e140:	4682      	mov	sl, r0
 800e142:	468b      	mov	fp, r1
 800e144:	e7df      	b.n	800e106 <_strtod_l+0x8e6>
 800e146:	4013      	ands	r3, r2
 800e148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e14c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e154:	f04f 3aff 	mov.w	sl, #4294967295
 800e158:	e7d5      	b.n	800e106 <_strtod_l+0x8e6>
 800e15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e15c:	ea13 0f0a 	tst.w	r3, sl
 800e160:	e7e0      	b.n	800e124 <_strtod_l+0x904>
 800e162:	f7ff fb3f 	bl	800d7e4 <sulp>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e16e:	f7f2 f88b 	bl	8000288 <__aeabi_dsub>
 800e172:	2200      	movs	r2, #0
 800e174:	2300      	movs	r3, #0
 800e176:	4682      	mov	sl, r0
 800e178:	468b      	mov	fp, r1
 800e17a:	f7f2 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d0c1      	beq.n	800e106 <_strtod_l+0x8e6>
 800e182:	e60e      	b.n	800dda2 <_strtod_l+0x582>
 800e184:	fffffc02 	.word	0xfffffc02
 800e188:	7ff00000 	.word	0x7ff00000
 800e18c:	39500000 	.word	0x39500000
 800e190:	000fffff 	.word	0x000fffff
 800e194:	7fefffff 	.word	0x7fefffff
 800e198:	08011350 	.word	0x08011350
 800e19c:	4631      	mov	r1, r6
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f001 ffb2 	bl	8010108 <__ratio>
 800e1a4:	ec59 8b10 	vmov	r8, r9, d0
 800e1a8:	ee10 0a10 	vmov	r0, s0
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1b2:	4649      	mov	r1, r9
 800e1b4:	f7f2 fc9c 	bl	8000af0 <__aeabi_dcmple>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d07c      	beq.n	800e2b6 <_strtod_l+0xa96>
 800e1bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d04c      	beq.n	800e25c <_strtod_l+0xa3c>
 800e1c2:	4b95      	ldr	r3, [pc, #596]	; (800e418 <_strtod_l+0xbf8>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e1ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e418 <_strtod_l+0xbf8>
 800e1ce:	f04f 0800 	mov.w	r8, #0
 800e1d2:	4b92      	ldr	r3, [pc, #584]	; (800e41c <_strtod_l+0xbfc>)
 800e1d4:	403b      	ands	r3, r7
 800e1d6:	9311      	str	r3, [sp, #68]	; 0x44
 800e1d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e1da:	4b91      	ldr	r3, [pc, #580]	; (800e420 <_strtod_l+0xc00>)
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	f040 80b2 	bne.w	800e346 <_strtod_l+0xb26>
 800e1e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e1ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e1ee:	ec4b ab10 	vmov	d0, sl, fp
 800e1f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e1f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e1fa:	f001 fead 	bl	800ff58 <__ulp>
 800e1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e202:	ec53 2b10 	vmov	r2, r3, d0
 800e206:	f7f2 f9f7 	bl	80005f8 <__aeabi_dmul>
 800e20a:	4652      	mov	r2, sl
 800e20c:	465b      	mov	r3, fp
 800e20e:	f7f2 f83d 	bl	800028c <__adddf3>
 800e212:	460b      	mov	r3, r1
 800e214:	4981      	ldr	r1, [pc, #516]	; (800e41c <_strtod_l+0xbfc>)
 800e216:	4a83      	ldr	r2, [pc, #524]	; (800e424 <_strtod_l+0xc04>)
 800e218:	4019      	ands	r1, r3
 800e21a:	4291      	cmp	r1, r2
 800e21c:	4682      	mov	sl, r0
 800e21e:	d95e      	bls.n	800e2de <_strtod_l+0xabe>
 800e220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e222:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e226:	4293      	cmp	r3, r2
 800e228:	d103      	bne.n	800e232 <_strtod_l+0xa12>
 800e22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22c:	3301      	adds	r3, #1
 800e22e:	f43f ad43 	beq.w	800dcb8 <_strtod_l+0x498>
 800e232:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e430 <_strtod_l+0xc10>
 800e236:	f04f 3aff 	mov.w	sl, #4294967295
 800e23a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e23c:	4620      	mov	r0, r4
 800e23e:	f001 fb5f 	bl	800f900 <_Bfree>
 800e242:	9907      	ldr	r1, [sp, #28]
 800e244:	4620      	mov	r0, r4
 800e246:	f001 fb5b 	bl	800f900 <_Bfree>
 800e24a:	4631      	mov	r1, r6
 800e24c:	4620      	mov	r0, r4
 800e24e:	f001 fb57 	bl	800f900 <_Bfree>
 800e252:	4629      	mov	r1, r5
 800e254:	4620      	mov	r0, r4
 800e256:	f001 fb53 	bl	800f900 <_Bfree>
 800e25a:	e613      	b.n	800de84 <_strtod_l+0x664>
 800e25c:	f1ba 0f00 	cmp.w	sl, #0
 800e260:	d11b      	bne.n	800e29a <_strtod_l+0xa7a>
 800e262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e266:	b9f3      	cbnz	r3, 800e2a6 <_strtod_l+0xa86>
 800e268:	4b6b      	ldr	r3, [pc, #428]	; (800e418 <_strtod_l+0xbf8>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	4640      	mov	r0, r8
 800e26e:	4649      	mov	r1, r9
 800e270:	f7f2 fc34 	bl	8000adc <__aeabi_dcmplt>
 800e274:	b9d0      	cbnz	r0, 800e2ac <_strtod_l+0xa8c>
 800e276:	4640      	mov	r0, r8
 800e278:	4649      	mov	r1, r9
 800e27a:	4b6b      	ldr	r3, [pc, #428]	; (800e428 <_strtod_l+0xc08>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	4680      	mov	r8, r0
 800e284:	4689      	mov	r9, r1
 800e286:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e28a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e28e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e290:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e294:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e298:	e79b      	b.n	800e1d2 <_strtod_l+0x9b2>
 800e29a:	f1ba 0f01 	cmp.w	sl, #1
 800e29e:	d102      	bne.n	800e2a6 <_strtod_l+0xa86>
 800e2a0:	2f00      	cmp	r7, #0
 800e2a2:	f43f ad7e 	beq.w	800dda2 <_strtod_l+0x582>
 800e2a6:	4b61      	ldr	r3, [pc, #388]	; (800e42c <_strtod_l+0xc0c>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	e78c      	b.n	800e1c6 <_strtod_l+0x9a6>
 800e2ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e428 <_strtod_l+0xc08>
 800e2b0:	f04f 0800 	mov.w	r8, #0
 800e2b4:	e7e7      	b.n	800e286 <_strtod_l+0xa66>
 800e2b6:	4b5c      	ldr	r3, [pc, #368]	; (800e428 <_strtod_l+0xc08>)
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f7f2 f99b 	bl	80005f8 <__aeabi_dmul>
 800e2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	4689      	mov	r9, r1
 800e2c8:	b933      	cbnz	r3, 800e2d8 <_strtod_l+0xab8>
 800e2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ce:	9012      	str	r0, [sp, #72]	; 0x48
 800e2d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e2d6:	e7dd      	b.n	800e294 <_strtod_l+0xa74>
 800e2d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e2dc:	e7f9      	b.n	800e2d2 <_strtod_l+0xab2>
 800e2de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1a8      	bne.n	800e23a <_strtod_l+0xa1a>
 800e2e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2ee:	0d1b      	lsrs	r3, r3, #20
 800e2f0:	051b      	lsls	r3, r3, #20
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d1a1      	bne.n	800e23a <_strtod_l+0xa1a>
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	f7f2 fcdd 	bl	8000cb8 <__aeabi_d2lz>
 800e2fe:	f7f2 f94d 	bl	800059c <__aeabi_l2d>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4640      	mov	r0, r8
 800e308:	4649      	mov	r1, r9
 800e30a:	f7f1 ffbd 	bl	8000288 <__aeabi_dsub>
 800e30e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e314:	ea43 030a 	orr.w	r3, r3, sl
 800e318:	4313      	orrs	r3, r2
 800e31a:	4680      	mov	r8, r0
 800e31c:	4689      	mov	r9, r1
 800e31e:	d053      	beq.n	800e3c8 <_strtod_l+0xba8>
 800e320:	a335      	add	r3, pc, #212	; (adr r3, 800e3f8 <_strtod_l+0xbd8>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	f7f2 fbd9 	bl	8000adc <__aeabi_dcmplt>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f47f acce 	bne.w	800dccc <_strtod_l+0x4ac>
 800e330:	a333      	add	r3, pc, #204	; (adr r3, 800e400 <_strtod_l+0xbe0>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	4640      	mov	r0, r8
 800e338:	4649      	mov	r1, r9
 800e33a:	f7f2 fbed 	bl	8000b18 <__aeabi_dcmpgt>
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f af7b 	beq.w	800e23a <_strtod_l+0xa1a>
 800e344:	e4c2      	b.n	800dccc <_strtod_l+0x4ac>
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	b333      	cbz	r3, 800e398 <_strtod_l+0xb78>
 800e34a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e350:	d822      	bhi.n	800e398 <_strtod_l+0xb78>
 800e352:	a32d      	add	r3, pc, #180	; (adr r3, 800e408 <_strtod_l+0xbe8>)
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f2 fbc8 	bl	8000af0 <__aeabi_dcmple>
 800e360:	b1a0      	cbz	r0, 800e38c <_strtod_l+0xb6c>
 800e362:	4649      	mov	r1, r9
 800e364:	4640      	mov	r0, r8
 800e366:	f7f2 fc1f 	bl	8000ba8 <__aeabi_d2uiz>
 800e36a:	2801      	cmp	r0, #1
 800e36c:	bf38      	it	cc
 800e36e:	2001      	movcc	r0, #1
 800e370:	f7f2 f8c8 	bl	8000504 <__aeabi_ui2d>
 800e374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e376:	4680      	mov	r8, r0
 800e378:	4689      	mov	r9, r1
 800e37a:	bb13      	cbnz	r3, 800e3c2 <_strtod_l+0xba2>
 800e37c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e380:	9014      	str	r0, [sp, #80]	; 0x50
 800e382:	9315      	str	r3, [sp, #84]	; 0x54
 800e384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e388:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e38e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e394:	1a9b      	subs	r3, r3, r2
 800e396:	930d      	str	r3, [sp, #52]	; 0x34
 800e398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e39c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e3a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e3a4:	f001 fdd8 	bl	800ff58 <__ulp>
 800e3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e3ac:	ec53 2b10 	vmov	r2, r3, d0
 800e3b0:	f7f2 f922 	bl	80005f8 <__aeabi_dmul>
 800e3b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e3b8:	f7f1 ff68 	bl	800028c <__adddf3>
 800e3bc:	4682      	mov	sl, r0
 800e3be:	468b      	mov	fp, r1
 800e3c0:	e78f      	b.n	800e2e2 <_strtod_l+0xac2>
 800e3c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e3c6:	e7dd      	b.n	800e384 <_strtod_l+0xb64>
 800e3c8:	a311      	add	r3, pc, #68	; (adr r3, 800e410 <_strtod_l+0xbf0>)
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	f7f2 fb85 	bl	8000adc <__aeabi_dcmplt>
 800e3d2:	e7b4      	b.n	800e33e <_strtod_l+0xb1e>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	930e      	str	r3, [sp, #56]	; 0x38
 800e3d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e3da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	f7ff ba65 	b.w	800d8ac <_strtod_l+0x8c>
 800e3e2:	2b65      	cmp	r3, #101	; 0x65
 800e3e4:	f43f ab5d 	beq.w	800daa2 <_strtod_l+0x282>
 800e3e8:	2b45      	cmp	r3, #69	; 0x45
 800e3ea:	f43f ab5a 	beq.w	800daa2 <_strtod_l+0x282>
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f7ff bb92 	b.w	800db18 <_strtod_l+0x2f8>
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	94a03595 	.word	0x94a03595
 800e3fc:	3fdfffff 	.word	0x3fdfffff
 800e400:	35afe535 	.word	0x35afe535
 800e404:	3fe00000 	.word	0x3fe00000
 800e408:	ffc00000 	.word	0xffc00000
 800e40c:	41dfffff 	.word	0x41dfffff
 800e410:	94a03595 	.word	0x94a03595
 800e414:	3fcfffff 	.word	0x3fcfffff
 800e418:	3ff00000 	.word	0x3ff00000
 800e41c:	7ff00000 	.word	0x7ff00000
 800e420:	7fe00000 	.word	0x7fe00000
 800e424:	7c9fffff 	.word	0x7c9fffff
 800e428:	3fe00000 	.word	0x3fe00000
 800e42c:	bff00000 	.word	0xbff00000
 800e430:	7fefffff 	.word	0x7fefffff

0800e434 <strtod>:
 800e434:	460a      	mov	r2, r1
 800e436:	4601      	mov	r1, r0
 800e438:	4802      	ldr	r0, [pc, #8]	; (800e444 <strtod+0x10>)
 800e43a:	4b03      	ldr	r3, [pc, #12]	; (800e448 <strtod+0x14>)
 800e43c:	6800      	ldr	r0, [r0, #0]
 800e43e:	f7ff b9ef 	b.w	800d820 <_strtod_l>
 800e442:	bf00      	nop
 800e444:	20000540 	.word	0x20000540
 800e448:	200005a8 	.word	0x200005a8

0800e44c <quorem>:
 800e44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	6903      	ldr	r3, [r0, #16]
 800e452:	690c      	ldr	r4, [r1, #16]
 800e454:	42a3      	cmp	r3, r4
 800e456:	4607      	mov	r7, r0
 800e458:	f2c0 8081 	blt.w	800e55e <quorem+0x112>
 800e45c:	3c01      	subs	r4, #1
 800e45e:	f101 0814 	add.w	r8, r1, #20
 800e462:	f100 0514 	add.w	r5, r0, #20
 800e466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e46a:	9301      	str	r3, [sp, #4]
 800e46c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e474:	3301      	adds	r3, #1
 800e476:	429a      	cmp	r2, r3
 800e478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e47c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e480:	fbb2 f6f3 	udiv	r6, r2, r3
 800e484:	d331      	bcc.n	800e4ea <quorem+0x9e>
 800e486:	f04f 0e00 	mov.w	lr, #0
 800e48a:	4640      	mov	r0, r8
 800e48c:	46ac      	mov	ip, r5
 800e48e:	46f2      	mov	sl, lr
 800e490:	f850 2b04 	ldr.w	r2, [r0], #4
 800e494:	b293      	uxth	r3, r2
 800e496:	fb06 e303 	mla	r3, r6, r3, lr
 800e49a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800e4a4:	0c12      	lsrs	r2, r2, #16
 800e4a6:	f8dc a000 	ldr.w	sl, [ip]
 800e4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800e4ae:	fa13 f38a 	uxtah	r3, r3, sl
 800e4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4b6:	fa1f fa82 	uxth.w	sl, r2
 800e4ba:	f8dc 2000 	ldr.w	r2, [ip]
 800e4be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e4c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4cc:	4581      	cmp	r9, r0
 800e4ce:	f84c 3b04 	str.w	r3, [ip], #4
 800e4d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4d6:	d2db      	bcs.n	800e490 <quorem+0x44>
 800e4d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4dc:	b92b      	cbnz	r3, 800e4ea <quorem+0x9e>
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	3b04      	subs	r3, #4
 800e4e2:	429d      	cmp	r5, r3
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	d32e      	bcc.n	800e546 <quorem+0xfa>
 800e4e8:	613c      	str	r4, [r7, #16]
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	f001 fc90 	bl	800fe10 <__mcmp>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	db24      	blt.n	800e53e <quorem+0xf2>
 800e4f4:	3601      	adds	r6, #1
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f04f 0c00 	mov.w	ip, #0
 800e4fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e500:	f8d0 e000 	ldr.w	lr, [r0]
 800e504:	b293      	uxth	r3, r2
 800e506:	ebac 0303 	sub.w	r3, ip, r3
 800e50a:	0c12      	lsrs	r2, r2, #16
 800e50c:	fa13 f38e 	uxtah	r3, r3, lr
 800e510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e518:	b29b      	uxth	r3, r3
 800e51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e51e:	45c1      	cmp	r9, r8
 800e520:	f840 3b04 	str.w	r3, [r0], #4
 800e524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e528:	d2e8      	bcs.n	800e4fc <quorem+0xb0>
 800e52a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e532:	b922      	cbnz	r2, 800e53e <quorem+0xf2>
 800e534:	3b04      	subs	r3, #4
 800e536:	429d      	cmp	r5, r3
 800e538:	461a      	mov	r2, r3
 800e53a:	d30a      	bcc.n	800e552 <quorem+0x106>
 800e53c:	613c      	str	r4, [r7, #16]
 800e53e:	4630      	mov	r0, r6
 800e540:	b003      	add	sp, #12
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	6812      	ldr	r2, [r2, #0]
 800e548:	3b04      	subs	r3, #4
 800e54a:	2a00      	cmp	r2, #0
 800e54c:	d1cc      	bne.n	800e4e8 <quorem+0x9c>
 800e54e:	3c01      	subs	r4, #1
 800e550:	e7c7      	b.n	800e4e2 <quorem+0x96>
 800e552:	6812      	ldr	r2, [r2, #0]
 800e554:	3b04      	subs	r3, #4
 800e556:	2a00      	cmp	r2, #0
 800e558:	d1f0      	bne.n	800e53c <quorem+0xf0>
 800e55a:	3c01      	subs	r4, #1
 800e55c:	e7eb      	b.n	800e536 <quorem+0xea>
 800e55e:	2000      	movs	r0, #0
 800e560:	e7ee      	b.n	800e540 <quorem+0xf4>
 800e562:	0000      	movs	r0, r0
 800e564:	0000      	movs	r0, r0
	...

0800e568 <_dtoa_r>:
 800e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56c:	ed2d 8b02 	vpush	{d8}
 800e570:	ec57 6b10 	vmov	r6, r7, d0
 800e574:	b095      	sub	sp, #84	; 0x54
 800e576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e57c:	9105      	str	r1, [sp, #20]
 800e57e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e582:	4604      	mov	r4, r0
 800e584:	9209      	str	r2, [sp, #36]	; 0x24
 800e586:	930f      	str	r3, [sp, #60]	; 0x3c
 800e588:	b975      	cbnz	r5, 800e5a8 <_dtoa_r+0x40>
 800e58a:	2010      	movs	r0, #16
 800e58c:	f7fe fbbc 	bl	800cd08 <malloc>
 800e590:	4602      	mov	r2, r0
 800e592:	6260      	str	r0, [r4, #36]	; 0x24
 800e594:	b920      	cbnz	r0, 800e5a0 <_dtoa_r+0x38>
 800e596:	4bb2      	ldr	r3, [pc, #712]	; (800e860 <_dtoa_r+0x2f8>)
 800e598:	21ea      	movs	r1, #234	; 0xea
 800e59a:	48b2      	ldr	r0, [pc, #712]	; (800e864 <_dtoa_r+0x2fc>)
 800e59c:	f001 ffae 	bl	80104fc <__assert_func>
 800e5a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5a4:	6005      	str	r5, [r0, #0]
 800e5a6:	60c5      	str	r5, [r0, #12]
 800e5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5aa:	6819      	ldr	r1, [r3, #0]
 800e5ac:	b151      	cbz	r1, 800e5c4 <_dtoa_r+0x5c>
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	604a      	str	r2, [r1, #4]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4093      	lsls	r3, r2
 800e5b6:	608b      	str	r3, [r1, #8]
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f001 f9a1 	bl	800f900 <_Bfree>
 800e5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	1e3b      	subs	r3, r7, #0
 800e5c6:	bfb9      	ittee	lt
 800e5c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e5cc:	9303      	strlt	r3, [sp, #12]
 800e5ce:	2300      	movge	r3, #0
 800e5d0:	f8c8 3000 	strge.w	r3, [r8]
 800e5d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e5d8:	4ba3      	ldr	r3, [pc, #652]	; (800e868 <_dtoa_r+0x300>)
 800e5da:	bfbc      	itt	lt
 800e5dc:	2201      	movlt	r2, #1
 800e5de:	f8c8 2000 	strlt.w	r2, [r8]
 800e5e2:	ea33 0309 	bics.w	r3, r3, r9
 800e5e6:	d11b      	bne.n	800e620 <_dtoa_r+0xb8>
 800e5e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5f4:	4333      	orrs	r3, r6
 800e5f6:	f000 857a 	beq.w	800f0ee <_dtoa_r+0xb86>
 800e5fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5fc:	b963      	cbnz	r3, 800e618 <_dtoa_r+0xb0>
 800e5fe:	4b9b      	ldr	r3, [pc, #620]	; (800e86c <_dtoa_r+0x304>)
 800e600:	e024      	b.n	800e64c <_dtoa_r+0xe4>
 800e602:	4b9b      	ldr	r3, [pc, #620]	; (800e870 <_dtoa_r+0x308>)
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	3308      	adds	r3, #8
 800e608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e60a:	6013      	str	r3, [r2, #0]
 800e60c:	9800      	ldr	r0, [sp, #0]
 800e60e:	b015      	add	sp, #84	; 0x54
 800e610:	ecbd 8b02 	vpop	{d8}
 800e614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e618:	4b94      	ldr	r3, [pc, #592]	; (800e86c <_dtoa_r+0x304>)
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	3303      	adds	r3, #3
 800e61e:	e7f3      	b.n	800e608 <_dtoa_r+0xa0>
 800e620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e624:	2200      	movs	r2, #0
 800e626:	ec51 0b17 	vmov	r0, r1, d7
 800e62a:	2300      	movs	r3, #0
 800e62c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e630:	f7f2 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e634:	4680      	mov	r8, r0
 800e636:	b158      	cbz	r0, 800e650 <_dtoa_r+0xe8>
 800e638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e63a:	2301      	movs	r3, #1
 800e63c:	6013      	str	r3, [r2, #0]
 800e63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e640:	2b00      	cmp	r3, #0
 800e642:	f000 8551 	beq.w	800f0e8 <_dtoa_r+0xb80>
 800e646:	488b      	ldr	r0, [pc, #556]	; (800e874 <_dtoa_r+0x30c>)
 800e648:	6018      	str	r0, [r3, #0]
 800e64a:	1e43      	subs	r3, r0, #1
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	e7dd      	b.n	800e60c <_dtoa_r+0xa4>
 800e650:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e654:	aa12      	add	r2, sp, #72	; 0x48
 800e656:	a913      	add	r1, sp, #76	; 0x4c
 800e658:	4620      	mov	r0, r4
 800e65a:	f001 fcf9 	bl	8010050 <__d2b>
 800e65e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e662:	4683      	mov	fp, r0
 800e664:	2d00      	cmp	r5, #0
 800e666:	d07c      	beq.n	800e762 <_dtoa_r+0x1fa>
 800e668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e66a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e672:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e676:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e682:	4b7d      	ldr	r3, [pc, #500]	; (800e878 <_dtoa_r+0x310>)
 800e684:	2200      	movs	r2, #0
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	f7f1 fdfd 	bl	8000288 <__aeabi_dsub>
 800e68e:	a36e      	add	r3, pc, #440	; (adr r3, 800e848 <_dtoa_r+0x2e0>)
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f7f1 ffb0 	bl	80005f8 <__aeabi_dmul>
 800e698:	a36d      	add	r3, pc, #436	; (adr r3, 800e850 <_dtoa_r+0x2e8>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f7f1 fdf5 	bl	800028c <__adddf3>
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	460f      	mov	r7, r1
 800e6a8:	f7f1 ff3c 	bl	8000524 <__aeabi_i2d>
 800e6ac:	a36a      	add	r3, pc, #424	; (adr r3, 800e858 <_dtoa_r+0x2f0>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	f7f1 ffa1 	bl	80005f8 <__aeabi_dmul>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	4639      	mov	r1, r7
 800e6be:	f7f1 fde5 	bl	800028c <__adddf3>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460f      	mov	r7, r1
 800e6c6:	f7f2 fa47 	bl	8000b58 <__aeabi_d2iz>
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4682      	mov	sl, r0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	f7f2 fa02 	bl	8000adc <__aeabi_dcmplt>
 800e6d8:	b148      	cbz	r0, 800e6ee <_dtoa_r+0x186>
 800e6da:	4650      	mov	r0, sl
 800e6dc:	f7f1 ff22 	bl	8000524 <__aeabi_i2d>
 800e6e0:	4632      	mov	r2, r6
 800e6e2:	463b      	mov	r3, r7
 800e6e4:	f7f2 f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6e8:	b908      	cbnz	r0, 800e6ee <_dtoa_r+0x186>
 800e6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6ee:	f1ba 0f16 	cmp.w	sl, #22
 800e6f2:	d854      	bhi.n	800e79e <_dtoa_r+0x236>
 800e6f4:	4b61      	ldr	r3, [pc, #388]	; (800e87c <_dtoa_r+0x314>)
 800e6f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e702:	f7f2 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800e706:	2800      	cmp	r0, #0
 800e708:	d04b      	beq.n	800e7a2 <_dtoa_r+0x23a>
 800e70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e70e:	2300      	movs	r3, #0
 800e710:	930e      	str	r3, [sp, #56]	; 0x38
 800e712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e714:	1b5d      	subs	r5, r3, r5
 800e716:	1e6b      	subs	r3, r5, #1
 800e718:	9304      	str	r3, [sp, #16]
 800e71a:	bf43      	ittte	mi
 800e71c:	2300      	movmi	r3, #0
 800e71e:	f1c5 0801 	rsbmi	r8, r5, #1
 800e722:	9304      	strmi	r3, [sp, #16]
 800e724:	f04f 0800 	movpl.w	r8, #0
 800e728:	f1ba 0f00 	cmp.w	sl, #0
 800e72c:	db3b      	blt.n	800e7a6 <_dtoa_r+0x23e>
 800e72e:	9b04      	ldr	r3, [sp, #16]
 800e730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e734:	4453      	add	r3, sl
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	2300      	movs	r3, #0
 800e73a:	9306      	str	r3, [sp, #24]
 800e73c:	9b05      	ldr	r3, [sp, #20]
 800e73e:	2b09      	cmp	r3, #9
 800e740:	d869      	bhi.n	800e816 <_dtoa_r+0x2ae>
 800e742:	2b05      	cmp	r3, #5
 800e744:	bfc4      	itt	gt
 800e746:	3b04      	subgt	r3, #4
 800e748:	9305      	strgt	r3, [sp, #20]
 800e74a:	9b05      	ldr	r3, [sp, #20]
 800e74c:	f1a3 0302 	sub.w	r3, r3, #2
 800e750:	bfcc      	ite	gt
 800e752:	2500      	movgt	r5, #0
 800e754:	2501      	movle	r5, #1
 800e756:	2b03      	cmp	r3, #3
 800e758:	d869      	bhi.n	800e82e <_dtoa_r+0x2c6>
 800e75a:	e8df f003 	tbb	[pc, r3]
 800e75e:	4e2c      	.short	0x4e2c
 800e760:	5a4c      	.short	0x5a4c
 800e762:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e766:	441d      	add	r5, r3
 800e768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e76c:	2b20      	cmp	r3, #32
 800e76e:	bfc1      	itttt	gt
 800e770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e774:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e778:	fa09 f303 	lslgt.w	r3, r9, r3
 800e77c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e780:	bfda      	itte	le
 800e782:	f1c3 0320 	rsble	r3, r3, #32
 800e786:	fa06 f003 	lslle.w	r0, r6, r3
 800e78a:	4318      	orrgt	r0, r3
 800e78c:	f7f1 feba 	bl	8000504 <__aeabi_ui2d>
 800e790:	2301      	movs	r3, #1
 800e792:	4606      	mov	r6, r0
 800e794:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e798:	3d01      	subs	r5, #1
 800e79a:	9310      	str	r3, [sp, #64]	; 0x40
 800e79c:	e771      	b.n	800e682 <_dtoa_r+0x11a>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e7b6      	b.n	800e710 <_dtoa_r+0x1a8>
 800e7a2:	900e      	str	r0, [sp, #56]	; 0x38
 800e7a4:	e7b5      	b.n	800e712 <_dtoa_r+0x1aa>
 800e7a6:	f1ca 0300 	rsb	r3, sl, #0
 800e7aa:	9306      	str	r3, [sp, #24]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	eba8 080a 	sub.w	r8, r8, sl
 800e7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e7b4:	e7c2      	b.n	800e73c <_dtoa_r+0x1d4>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	9308      	str	r3, [sp, #32]
 800e7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dc39      	bgt.n	800e834 <_dtoa_r+0x2cc>
 800e7c0:	f04f 0901 	mov.w	r9, #1
 800e7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7c8:	464b      	mov	r3, r9
 800e7ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e7ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	6042      	str	r2, [r0, #4]
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	f102 0614 	add.w	r6, r2, #20
 800e7da:	429e      	cmp	r6, r3
 800e7dc:	6841      	ldr	r1, [r0, #4]
 800e7de:	d92f      	bls.n	800e840 <_dtoa_r+0x2d8>
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f001 f84d 	bl	800f880 <_Balloc>
 800e7e6:	9000      	str	r0, [sp, #0]
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d14b      	bne.n	800e884 <_dtoa_r+0x31c>
 800e7ec:	4b24      	ldr	r3, [pc, #144]	; (800e880 <_dtoa_r+0x318>)
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e7f4:	e6d1      	b.n	800e59a <_dtoa_r+0x32>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e7de      	b.n	800e7b8 <_dtoa_r+0x250>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	9308      	str	r3, [sp, #32]
 800e7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e800:	eb0a 0903 	add.w	r9, sl, r3
 800e804:	f109 0301 	add.w	r3, r9, #1
 800e808:	2b01      	cmp	r3, #1
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	bfb8      	it	lt
 800e80e:	2301      	movlt	r3, #1
 800e810:	e7dd      	b.n	800e7ce <_dtoa_r+0x266>
 800e812:	2301      	movs	r3, #1
 800e814:	e7f2      	b.n	800e7fc <_dtoa_r+0x294>
 800e816:	2501      	movs	r5, #1
 800e818:	2300      	movs	r3, #0
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	9508      	str	r5, [sp, #32]
 800e81e:	f04f 39ff 	mov.w	r9, #4294967295
 800e822:	2200      	movs	r2, #0
 800e824:	f8cd 9004 	str.w	r9, [sp, #4]
 800e828:	2312      	movs	r3, #18
 800e82a:	9209      	str	r2, [sp, #36]	; 0x24
 800e82c:	e7cf      	b.n	800e7ce <_dtoa_r+0x266>
 800e82e:	2301      	movs	r3, #1
 800e830:	9308      	str	r3, [sp, #32]
 800e832:	e7f4      	b.n	800e81e <_dtoa_r+0x2b6>
 800e834:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e838:	f8cd 9004 	str.w	r9, [sp, #4]
 800e83c:	464b      	mov	r3, r9
 800e83e:	e7c6      	b.n	800e7ce <_dtoa_r+0x266>
 800e840:	3101      	adds	r1, #1
 800e842:	6041      	str	r1, [r0, #4]
 800e844:	0052      	lsls	r2, r2, #1
 800e846:	e7c6      	b.n	800e7d6 <_dtoa_r+0x26e>
 800e848:	636f4361 	.word	0x636f4361
 800e84c:	3fd287a7 	.word	0x3fd287a7
 800e850:	8b60c8b3 	.word	0x8b60c8b3
 800e854:	3fc68a28 	.word	0x3fc68a28
 800e858:	509f79fb 	.word	0x509f79fb
 800e85c:	3fd34413 	.word	0x3fd34413
 800e860:	08011385 	.word	0x08011385
 800e864:	0801139c 	.word	0x0801139c
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	08011381 	.word	0x08011381
 800e870:	08011378 	.word	0x08011378
 800e874:	08011305 	.word	0x08011305
 800e878:	3ff80000 	.word	0x3ff80000
 800e87c:	08011518 	.word	0x08011518
 800e880:	080113fb 	.word	0x080113fb
 800e884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e886:	9a00      	ldr	r2, [sp, #0]
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	9b01      	ldr	r3, [sp, #4]
 800e88c:	2b0e      	cmp	r3, #14
 800e88e:	f200 80ad 	bhi.w	800e9ec <_dtoa_r+0x484>
 800e892:	2d00      	cmp	r5, #0
 800e894:	f000 80aa 	beq.w	800e9ec <_dtoa_r+0x484>
 800e898:	f1ba 0f00 	cmp.w	sl, #0
 800e89c:	dd36      	ble.n	800e90c <_dtoa_r+0x3a4>
 800e89e:	4ac3      	ldr	r2, [pc, #780]	; (800ebac <_dtoa_r+0x644>)
 800e8a0:	f00a 030f 	and.w	r3, sl, #15
 800e8a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8a8:	ed93 7b00 	vldr	d7, [r3]
 800e8ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e8b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e8b4:	eeb0 8a47 	vmov.f32	s16, s14
 800e8b8:	eef0 8a67 	vmov.f32	s17, s15
 800e8bc:	d016      	beq.n	800e8ec <_dtoa_r+0x384>
 800e8be:	4bbc      	ldr	r3, [pc, #752]	; (800ebb0 <_dtoa_r+0x648>)
 800e8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8c8:	f7f1 ffc0 	bl	800084c <__aeabi_ddiv>
 800e8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8d0:	f007 070f 	and.w	r7, r7, #15
 800e8d4:	2503      	movs	r5, #3
 800e8d6:	4eb6      	ldr	r6, [pc, #728]	; (800ebb0 <_dtoa_r+0x648>)
 800e8d8:	b957      	cbnz	r7, 800e8f0 <_dtoa_r+0x388>
 800e8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8de:	ec53 2b18 	vmov	r2, r3, d8
 800e8e2:	f7f1 ffb3 	bl	800084c <__aeabi_ddiv>
 800e8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8ea:	e029      	b.n	800e940 <_dtoa_r+0x3d8>
 800e8ec:	2502      	movs	r5, #2
 800e8ee:	e7f2      	b.n	800e8d6 <_dtoa_r+0x36e>
 800e8f0:	07f9      	lsls	r1, r7, #31
 800e8f2:	d508      	bpl.n	800e906 <_dtoa_r+0x39e>
 800e8f4:	ec51 0b18 	vmov	r0, r1, d8
 800e8f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8fc:	f7f1 fe7c 	bl	80005f8 <__aeabi_dmul>
 800e900:	ec41 0b18 	vmov	d8, r0, r1
 800e904:	3501      	adds	r5, #1
 800e906:	107f      	asrs	r7, r7, #1
 800e908:	3608      	adds	r6, #8
 800e90a:	e7e5      	b.n	800e8d8 <_dtoa_r+0x370>
 800e90c:	f000 80a6 	beq.w	800ea5c <_dtoa_r+0x4f4>
 800e910:	f1ca 0600 	rsb	r6, sl, #0
 800e914:	4ba5      	ldr	r3, [pc, #660]	; (800ebac <_dtoa_r+0x644>)
 800e916:	4fa6      	ldr	r7, [pc, #664]	; (800ebb0 <_dtoa_r+0x648>)
 800e918:	f006 020f 	and.w	r2, r6, #15
 800e91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e924:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e928:	f7f1 fe66 	bl	80005f8 <__aeabi_dmul>
 800e92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e930:	1136      	asrs	r6, r6, #4
 800e932:	2300      	movs	r3, #0
 800e934:	2502      	movs	r5, #2
 800e936:	2e00      	cmp	r6, #0
 800e938:	f040 8085 	bne.w	800ea46 <_dtoa_r+0x4de>
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1d2      	bne.n	800e8e6 <_dtoa_r+0x37e>
 800e940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e942:	2b00      	cmp	r3, #0
 800e944:	f000 808c 	beq.w	800ea60 <_dtoa_r+0x4f8>
 800e948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e94c:	4b99      	ldr	r3, [pc, #612]	; (800ebb4 <_dtoa_r+0x64c>)
 800e94e:	2200      	movs	r2, #0
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f2 f8c2 	bl	8000adc <__aeabi_dcmplt>
 800e958:	2800      	cmp	r0, #0
 800e95a:	f000 8081 	beq.w	800ea60 <_dtoa_r+0x4f8>
 800e95e:	9b01      	ldr	r3, [sp, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d07d      	beq.n	800ea60 <_dtoa_r+0x4f8>
 800e964:	f1b9 0f00 	cmp.w	r9, #0
 800e968:	dd3c      	ble.n	800e9e4 <_dtoa_r+0x47c>
 800e96a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e96e:	9307      	str	r3, [sp, #28]
 800e970:	2200      	movs	r2, #0
 800e972:	4b91      	ldr	r3, [pc, #580]	; (800ebb8 <_dtoa_r+0x650>)
 800e974:	4630      	mov	r0, r6
 800e976:	4639      	mov	r1, r7
 800e978:	f7f1 fe3e 	bl	80005f8 <__aeabi_dmul>
 800e97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e980:	3501      	adds	r5, #1
 800e982:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7f1 fdca 	bl	8000524 <__aeabi_i2d>
 800e990:	4632      	mov	r2, r6
 800e992:	463b      	mov	r3, r7
 800e994:	f7f1 fe30 	bl	80005f8 <__aeabi_dmul>
 800e998:	4b88      	ldr	r3, [pc, #544]	; (800ebbc <_dtoa_r+0x654>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	f7f1 fc76 	bl	800028c <__adddf3>
 800e9a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9a8:	9303      	str	r3, [sp, #12]
 800e9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d15c      	bne.n	800ea6a <_dtoa_r+0x502>
 800e9b0:	4b83      	ldr	r3, [pc, #524]	; (800ebc0 <_dtoa_r+0x658>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	f7f1 fc66 	bl	8000288 <__aeabi_dsub>
 800e9bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	460f      	mov	r7, r1
 800e9c4:	f7f2 f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	f040 8296 	bne.w	800eefa <_dtoa_r+0x992>
 800e9ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9d8:	4639      	mov	r1, r7
 800e9da:	f7f2 f87f 	bl	8000adc <__aeabi_dcmplt>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f040 8288 	bne.w	800eef4 <_dtoa_r+0x98c>
 800e9e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f2c0 8158 	blt.w	800eca4 <_dtoa_r+0x73c>
 800e9f4:	f1ba 0f0e 	cmp.w	sl, #14
 800e9f8:	f300 8154 	bgt.w	800eca4 <_dtoa_r+0x73c>
 800e9fc:	4b6b      	ldr	r3, [pc, #428]	; (800ebac <_dtoa_r+0x644>)
 800e9fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ea02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f280 80e3 	bge.w	800ebd4 <_dtoa_r+0x66c>
 800ea0e:	9b01      	ldr	r3, [sp, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f300 80df 	bgt.w	800ebd4 <_dtoa_r+0x66c>
 800ea16:	f040 826d 	bne.w	800eef4 <_dtoa_r+0x98c>
 800ea1a:	4b69      	ldr	r3, [pc, #420]	; (800ebc0 <_dtoa_r+0x658>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	4640      	mov	r0, r8
 800ea20:	4649      	mov	r1, r9
 800ea22:	f7f1 fde9 	bl	80005f8 <__aeabi_dmul>
 800ea26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea2a:	f7f2 f86b 	bl	8000b04 <__aeabi_dcmpge>
 800ea2e:	9e01      	ldr	r6, [sp, #4]
 800ea30:	4637      	mov	r7, r6
 800ea32:	2800      	cmp	r0, #0
 800ea34:	f040 8243 	bne.w	800eebe <_dtoa_r+0x956>
 800ea38:	9d00      	ldr	r5, [sp, #0]
 800ea3a:	2331      	movs	r3, #49	; 0x31
 800ea3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ea40:	f10a 0a01 	add.w	sl, sl, #1
 800ea44:	e23f      	b.n	800eec6 <_dtoa_r+0x95e>
 800ea46:	07f2      	lsls	r2, r6, #31
 800ea48:	d505      	bpl.n	800ea56 <_dtoa_r+0x4ee>
 800ea4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea4e:	f7f1 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ea52:	3501      	adds	r5, #1
 800ea54:	2301      	movs	r3, #1
 800ea56:	1076      	asrs	r6, r6, #1
 800ea58:	3708      	adds	r7, #8
 800ea5a:	e76c      	b.n	800e936 <_dtoa_r+0x3ce>
 800ea5c:	2502      	movs	r5, #2
 800ea5e:	e76f      	b.n	800e940 <_dtoa_r+0x3d8>
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	f8cd a01c 	str.w	sl, [sp, #28]
 800ea66:	930c      	str	r3, [sp, #48]	; 0x30
 800ea68:	e78d      	b.n	800e986 <_dtoa_r+0x41e>
 800ea6a:	9900      	ldr	r1, [sp, #0]
 800ea6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea70:	4b4e      	ldr	r3, [pc, #312]	; (800ebac <_dtoa_r+0x644>)
 800ea72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea76:	4401      	add	r1, r0
 800ea78:	9102      	str	r1, [sp, #8]
 800ea7a:	9908      	ldr	r1, [sp, #32]
 800ea7c:	eeb0 8a47 	vmov.f32	s16, s14
 800ea80:	eef0 8a67 	vmov.f32	s17, s15
 800ea84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	d045      	beq.n	800eb1c <_dtoa_r+0x5b4>
 800ea90:	494c      	ldr	r1, [pc, #304]	; (800ebc4 <_dtoa_r+0x65c>)
 800ea92:	2000      	movs	r0, #0
 800ea94:	f7f1 feda 	bl	800084c <__aeabi_ddiv>
 800ea98:	ec53 2b18 	vmov	r2, r3, d8
 800ea9c:	f7f1 fbf4 	bl	8000288 <__aeabi_dsub>
 800eaa0:	9d00      	ldr	r5, [sp, #0]
 800eaa2:	ec41 0b18 	vmov	d8, r0, r1
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7f2 f855 	bl	8000b58 <__aeabi_d2iz>
 800eaae:	900c      	str	r0, [sp, #48]	; 0x30
 800eab0:	f7f1 fd38 	bl	8000524 <__aeabi_i2d>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f1 fbe4 	bl	8000288 <__aeabi_dsub>
 800eac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eac2:	3330      	adds	r3, #48	; 0x30
 800eac4:	f805 3b01 	strb.w	r3, [r5], #1
 800eac8:	ec53 2b18 	vmov	r2, r3, d8
 800eacc:	4606      	mov	r6, r0
 800eace:	460f      	mov	r7, r1
 800ead0:	f7f2 f804 	bl	8000adc <__aeabi_dcmplt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d165      	bne.n	800eba4 <_dtoa_r+0x63c>
 800ead8:	4632      	mov	r2, r6
 800eada:	463b      	mov	r3, r7
 800eadc:	4935      	ldr	r1, [pc, #212]	; (800ebb4 <_dtoa_r+0x64c>)
 800eade:	2000      	movs	r0, #0
 800eae0:	f7f1 fbd2 	bl	8000288 <__aeabi_dsub>
 800eae4:	ec53 2b18 	vmov	r2, r3, d8
 800eae8:	f7f1 fff8 	bl	8000adc <__aeabi_dcmplt>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f040 80b9 	bne.w	800ec64 <_dtoa_r+0x6fc>
 800eaf2:	9b02      	ldr	r3, [sp, #8]
 800eaf4:	429d      	cmp	r5, r3
 800eaf6:	f43f af75 	beq.w	800e9e4 <_dtoa_r+0x47c>
 800eafa:	4b2f      	ldr	r3, [pc, #188]	; (800ebb8 <_dtoa_r+0x650>)
 800eafc:	ec51 0b18 	vmov	r0, r1, d8
 800eb00:	2200      	movs	r2, #0
 800eb02:	f7f1 fd79 	bl	80005f8 <__aeabi_dmul>
 800eb06:	4b2c      	ldr	r3, [pc, #176]	; (800ebb8 <_dtoa_r+0x650>)
 800eb08:	ec41 0b18 	vmov	d8, r0, r1
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4630      	mov	r0, r6
 800eb10:	4639      	mov	r1, r7
 800eb12:	f7f1 fd71 	bl	80005f8 <__aeabi_dmul>
 800eb16:	4606      	mov	r6, r0
 800eb18:	460f      	mov	r7, r1
 800eb1a:	e7c4      	b.n	800eaa6 <_dtoa_r+0x53e>
 800eb1c:	ec51 0b17 	vmov	r0, r1, d7
 800eb20:	f7f1 fd6a 	bl	80005f8 <__aeabi_dmul>
 800eb24:	9b02      	ldr	r3, [sp, #8]
 800eb26:	9d00      	ldr	r5, [sp, #0]
 800eb28:	930c      	str	r3, [sp, #48]	; 0x30
 800eb2a:	ec41 0b18 	vmov	d8, r0, r1
 800eb2e:	4639      	mov	r1, r7
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7f2 f811 	bl	8000b58 <__aeabi_d2iz>
 800eb36:	9011      	str	r0, [sp, #68]	; 0x44
 800eb38:	f7f1 fcf4 	bl	8000524 <__aeabi_i2d>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	460b      	mov	r3, r1
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 fba0 	bl	8000288 <__aeabi_dsub>
 800eb48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb4a:	3330      	adds	r3, #48	; 0x30
 800eb4c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb50:	9b02      	ldr	r3, [sp, #8]
 800eb52:	429d      	cmp	r5, r3
 800eb54:	4606      	mov	r6, r0
 800eb56:	460f      	mov	r7, r1
 800eb58:	f04f 0200 	mov.w	r2, #0
 800eb5c:	d134      	bne.n	800ebc8 <_dtoa_r+0x660>
 800eb5e:	4b19      	ldr	r3, [pc, #100]	; (800ebc4 <_dtoa_r+0x65c>)
 800eb60:	ec51 0b18 	vmov	r0, r1, d8
 800eb64:	f7f1 fb92 	bl	800028c <__adddf3>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	4639      	mov	r1, r7
 800eb70:	f7f1 ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d175      	bne.n	800ec64 <_dtoa_r+0x6fc>
 800eb78:	ec53 2b18 	vmov	r2, r3, d8
 800eb7c:	4911      	ldr	r1, [pc, #68]	; (800ebc4 <_dtoa_r+0x65c>)
 800eb7e:	2000      	movs	r0, #0
 800eb80:	f7f1 fb82 	bl	8000288 <__aeabi_dsub>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4630      	mov	r0, r6
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	f7f1 ffa6 	bl	8000adc <__aeabi_dcmplt>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	f43f af27 	beq.w	800e9e4 <_dtoa_r+0x47c>
 800eb96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb98:	1e6b      	subs	r3, r5, #1
 800eb9a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eba0:	2b30      	cmp	r3, #48	; 0x30
 800eba2:	d0f8      	beq.n	800eb96 <_dtoa_r+0x62e>
 800eba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eba8:	e04a      	b.n	800ec40 <_dtoa_r+0x6d8>
 800ebaa:	bf00      	nop
 800ebac:	08011518 	.word	0x08011518
 800ebb0:	080114f0 	.word	0x080114f0
 800ebb4:	3ff00000 	.word	0x3ff00000
 800ebb8:	40240000 	.word	0x40240000
 800ebbc:	401c0000 	.word	0x401c0000
 800ebc0:	40140000 	.word	0x40140000
 800ebc4:	3fe00000 	.word	0x3fe00000
 800ebc8:	4baf      	ldr	r3, [pc, #700]	; (800ee88 <_dtoa_r+0x920>)
 800ebca:	f7f1 fd15 	bl	80005f8 <__aeabi_dmul>
 800ebce:	4606      	mov	r6, r0
 800ebd0:	460f      	mov	r7, r1
 800ebd2:	e7ac      	b.n	800eb2e <_dtoa_r+0x5c6>
 800ebd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ebd8:	9d00      	ldr	r5, [sp, #0]
 800ebda:	4642      	mov	r2, r8
 800ebdc:	464b      	mov	r3, r9
 800ebde:	4630      	mov	r0, r6
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	f7f1 fe33 	bl	800084c <__aeabi_ddiv>
 800ebe6:	f7f1 ffb7 	bl	8000b58 <__aeabi_d2iz>
 800ebea:	9002      	str	r0, [sp, #8]
 800ebec:	f7f1 fc9a 	bl	8000524 <__aeabi_i2d>
 800ebf0:	4642      	mov	r2, r8
 800ebf2:	464b      	mov	r3, r9
 800ebf4:	f7f1 fd00 	bl	80005f8 <__aeabi_dmul>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7f1 fb42 	bl	8000288 <__aeabi_dsub>
 800ec04:	9e02      	ldr	r6, [sp, #8]
 800ec06:	9f01      	ldr	r7, [sp, #4]
 800ec08:	3630      	adds	r6, #48	; 0x30
 800ec0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ec0e:	9e00      	ldr	r6, [sp, #0]
 800ec10:	1bae      	subs	r6, r5, r6
 800ec12:	42b7      	cmp	r7, r6
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	d137      	bne.n	800ec8a <_dtoa_r+0x722>
 800ec1a:	f7f1 fb37 	bl	800028c <__adddf3>
 800ec1e:	4642      	mov	r2, r8
 800ec20:	464b      	mov	r3, r9
 800ec22:	4606      	mov	r6, r0
 800ec24:	460f      	mov	r7, r1
 800ec26:	f7f1 ff77 	bl	8000b18 <__aeabi_dcmpgt>
 800ec2a:	b9c8      	cbnz	r0, 800ec60 <_dtoa_r+0x6f8>
 800ec2c:	4642      	mov	r2, r8
 800ec2e:	464b      	mov	r3, r9
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec38:	b110      	cbz	r0, 800ec40 <_dtoa_r+0x6d8>
 800ec3a:	9b02      	ldr	r3, [sp, #8]
 800ec3c:	07d9      	lsls	r1, r3, #31
 800ec3e:	d40f      	bmi.n	800ec60 <_dtoa_r+0x6f8>
 800ec40:	4620      	mov	r0, r4
 800ec42:	4659      	mov	r1, fp
 800ec44:	f000 fe5c 	bl	800f900 <_Bfree>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	702b      	strb	r3, [r5, #0]
 800ec4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec4e:	f10a 0001 	add.w	r0, sl, #1
 800ec52:	6018      	str	r0, [r3, #0]
 800ec54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f43f acd8 	beq.w	800e60c <_dtoa_r+0xa4>
 800ec5c:	601d      	str	r5, [r3, #0]
 800ec5e:	e4d5      	b.n	800e60c <_dtoa_r+0xa4>
 800ec60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec64:	462b      	mov	r3, r5
 800ec66:	461d      	mov	r5, r3
 800ec68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec6c:	2a39      	cmp	r2, #57	; 0x39
 800ec6e:	d108      	bne.n	800ec82 <_dtoa_r+0x71a>
 800ec70:	9a00      	ldr	r2, [sp, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d1f7      	bne.n	800ec66 <_dtoa_r+0x6fe>
 800ec76:	9a07      	ldr	r2, [sp, #28]
 800ec78:	9900      	ldr	r1, [sp, #0]
 800ec7a:	3201      	adds	r2, #1
 800ec7c:	9207      	str	r2, [sp, #28]
 800ec7e:	2230      	movs	r2, #48	; 0x30
 800ec80:	700a      	strb	r2, [r1, #0]
 800ec82:	781a      	ldrb	r2, [r3, #0]
 800ec84:	3201      	adds	r2, #1
 800ec86:	701a      	strb	r2, [r3, #0]
 800ec88:	e78c      	b.n	800eba4 <_dtoa_r+0x63c>
 800ec8a:	4b7f      	ldr	r3, [pc, #508]	; (800ee88 <_dtoa_r+0x920>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f7f1 fcb3 	bl	80005f8 <__aeabi_dmul>
 800ec92:	2200      	movs	r2, #0
 800ec94:	2300      	movs	r3, #0
 800ec96:	4606      	mov	r6, r0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	f7f1 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d09b      	beq.n	800ebda <_dtoa_r+0x672>
 800eca2:	e7cd      	b.n	800ec40 <_dtoa_r+0x6d8>
 800eca4:	9a08      	ldr	r2, [sp, #32]
 800eca6:	2a00      	cmp	r2, #0
 800eca8:	f000 80c4 	beq.w	800ee34 <_dtoa_r+0x8cc>
 800ecac:	9a05      	ldr	r2, [sp, #20]
 800ecae:	2a01      	cmp	r2, #1
 800ecb0:	f300 80a8 	bgt.w	800ee04 <_dtoa_r+0x89c>
 800ecb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	f000 80a0 	beq.w	800edfc <_dtoa_r+0x894>
 800ecbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ecc0:	9e06      	ldr	r6, [sp, #24]
 800ecc2:	4645      	mov	r5, r8
 800ecc4:	9a04      	ldr	r2, [sp, #16]
 800ecc6:	2101      	movs	r1, #1
 800ecc8:	441a      	add	r2, r3
 800ecca:	4620      	mov	r0, r4
 800eccc:	4498      	add	r8, r3
 800ecce:	9204      	str	r2, [sp, #16]
 800ecd0:	f000 ff1c 	bl	800fb0c <__i2b>
 800ecd4:	4607      	mov	r7, r0
 800ecd6:	2d00      	cmp	r5, #0
 800ecd8:	dd0b      	ble.n	800ecf2 <_dtoa_r+0x78a>
 800ecda:	9b04      	ldr	r3, [sp, #16]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd08      	ble.n	800ecf2 <_dtoa_r+0x78a>
 800ece0:	42ab      	cmp	r3, r5
 800ece2:	9a04      	ldr	r2, [sp, #16]
 800ece4:	bfa8      	it	ge
 800ece6:	462b      	movge	r3, r5
 800ece8:	eba8 0803 	sub.w	r8, r8, r3
 800ecec:	1aed      	subs	r5, r5, r3
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	9b06      	ldr	r3, [sp, #24]
 800ecf4:	b1fb      	cbz	r3, 800ed36 <_dtoa_r+0x7ce>
 800ecf6:	9b08      	ldr	r3, [sp, #32]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f000 809f 	beq.w	800ee3c <_dtoa_r+0x8d4>
 800ecfe:	2e00      	cmp	r6, #0
 800ed00:	dd11      	ble.n	800ed26 <_dtoa_r+0x7be>
 800ed02:	4639      	mov	r1, r7
 800ed04:	4632      	mov	r2, r6
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 ffbc 	bl	800fc84 <__pow5mult>
 800ed0c:	465a      	mov	r2, fp
 800ed0e:	4601      	mov	r1, r0
 800ed10:	4607      	mov	r7, r0
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 ff10 	bl	800fb38 <__multiply>
 800ed18:	4659      	mov	r1, fp
 800ed1a:	9007      	str	r0, [sp, #28]
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fdef 	bl	800f900 <_Bfree>
 800ed22:	9b07      	ldr	r3, [sp, #28]
 800ed24:	469b      	mov	fp, r3
 800ed26:	9b06      	ldr	r3, [sp, #24]
 800ed28:	1b9a      	subs	r2, r3, r6
 800ed2a:	d004      	beq.n	800ed36 <_dtoa_r+0x7ce>
 800ed2c:	4659      	mov	r1, fp
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 ffa8 	bl	800fc84 <__pow5mult>
 800ed34:	4683      	mov	fp, r0
 800ed36:	2101      	movs	r1, #1
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 fee7 	bl	800fb0c <__i2b>
 800ed3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	4606      	mov	r6, r0
 800ed44:	dd7c      	ble.n	800ee40 <_dtoa_r+0x8d8>
 800ed46:	461a      	mov	r2, r3
 800ed48:	4601      	mov	r1, r0
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f000 ff9a 	bl	800fc84 <__pow5mult>
 800ed50:	9b05      	ldr	r3, [sp, #20]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	4606      	mov	r6, r0
 800ed56:	dd76      	ble.n	800ee46 <_dtoa_r+0x8de>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9306      	str	r3, [sp, #24]
 800ed5c:	6933      	ldr	r3, [r6, #16]
 800ed5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed62:	6918      	ldr	r0, [r3, #16]
 800ed64:	f000 fe82 	bl	800fa6c <__hi0bits>
 800ed68:	f1c0 0020 	rsb	r0, r0, #32
 800ed6c:	9b04      	ldr	r3, [sp, #16]
 800ed6e:	4418      	add	r0, r3
 800ed70:	f010 001f 	ands.w	r0, r0, #31
 800ed74:	f000 8086 	beq.w	800ee84 <_dtoa_r+0x91c>
 800ed78:	f1c0 0320 	rsb	r3, r0, #32
 800ed7c:	2b04      	cmp	r3, #4
 800ed7e:	dd7f      	ble.n	800ee80 <_dtoa_r+0x918>
 800ed80:	f1c0 001c 	rsb	r0, r0, #28
 800ed84:	9b04      	ldr	r3, [sp, #16]
 800ed86:	4403      	add	r3, r0
 800ed88:	4480      	add	r8, r0
 800ed8a:	4405      	add	r5, r0
 800ed8c:	9304      	str	r3, [sp, #16]
 800ed8e:	f1b8 0f00 	cmp.w	r8, #0
 800ed92:	dd05      	ble.n	800eda0 <_dtoa_r+0x838>
 800ed94:	4659      	mov	r1, fp
 800ed96:	4642      	mov	r2, r8
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f000 ffcd 	bl	800fd38 <__lshift>
 800ed9e:	4683      	mov	fp, r0
 800eda0:	9b04      	ldr	r3, [sp, #16]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dd05      	ble.n	800edb2 <_dtoa_r+0x84a>
 800eda6:	4631      	mov	r1, r6
 800eda8:	461a      	mov	r2, r3
 800edaa:	4620      	mov	r0, r4
 800edac:	f000 ffc4 	bl	800fd38 <__lshift>
 800edb0:	4606      	mov	r6, r0
 800edb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d069      	beq.n	800ee8c <_dtoa_r+0x924>
 800edb8:	4631      	mov	r1, r6
 800edba:	4658      	mov	r0, fp
 800edbc:	f001 f828 	bl	800fe10 <__mcmp>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	da63      	bge.n	800ee8c <_dtoa_r+0x924>
 800edc4:	2300      	movs	r3, #0
 800edc6:	4659      	mov	r1, fp
 800edc8:	220a      	movs	r2, #10
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fdba 	bl	800f944 <__multadd>
 800edd0:	9b08      	ldr	r3, [sp, #32]
 800edd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edd6:	4683      	mov	fp, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 818f 	beq.w	800f0fc <_dtoa_r+0xb94>
 800edde:	4639      	mov	r1, r7
 800ede0:	2300      	movs	r3, #0
 800ede2:	220a      	movs	r2, #10
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 fdad 	bl	800f944 <__multadd>
 800edea:	f1b9 0f00 	cmp.w	r9, #0
 800edee:	4607      	mov	r7, r0
 800edf0:	f300 808e 	bgt.w	800ef10 <_dtoa_r+0x9a8>
 800edf4:	9b05      	ldr	r3, [sp, #20]
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	dc50      	bgt.n	800ee9c <_dtoa_r+0x934>
 800edfa:	e089      	b.n	800ef10 <_dtoa_r+0x9a8>
 800edfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee02:	e75d      	b.n	800ecc0 <_dtoa_r+0x758>
 800ee04:	9b01      	ldr	r3, [sp, #4]
 800ee06:	1e5e      	subs	r6, r3, #1
 800ee08:	9b06      	ldr	r3, [sp, #24]
 800ee0a:	42b3      	cmp	r3, r6
 800ee0c:	bfbf      	itttt	lt
 800ee0e:	9b06      	ldrlt	r3, [sp, #24]
 800ee10:	9606      	strlt	r6, [sp, #24]
 800ee12:	1af2      	sublt	r2, r6, r3
 800ee14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ee16:	bfb6      	itet	lt
 800ee18:	189b      	addlt	r3, r3, r2
 800ee1a:	1b9e      	subge	r6, r3, r6
 800ee1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ee1e:	9b01      	ldr	r3, [sp, #4]
 800ee20:	bfb8      	it	lt
 800ee22:	2600      	movlt	r6, #0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb5      	itete	lt
 800ee28:	eba8 0503 	sublt.w	r5, r8, r3
 800ee2c:	9b01      	ldrge	r3, [sp, #4]
 800ee2e:	2300      	movlt	r3, #0
 800ee30:	4645      	movge	r5, r8
 800ee32:	e747      	b.n	800ecc4 <_dtoa_r+0x75c>
 800ee34:	9e06      	ldr	r6, [sp, #24]
 800ee36:	9f08      	ldr	r7, [sp, #32]
 800ee38:	4645      	mov	r5, r8
 800ee3a:	e74c      	b.n	800ecd6 <_dtoa_r+0x76e>
 800ee3c:	9a06      	ldr	r2, [sp, #24]
 800ee3e:	e775      	b.n	800ed2c <_dtoa_r+0x7c4>
 800ee40:	9b05      	ldr	r3, [sp, #20]
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	dc18      	bgt.n	800ee78 <_dtoa_r+0x910>
 800ee46:	9b02      	ldr	r3, [sp, #8]
 800ee48:	b9b3      	cbnz	r3, 800ee78 <_dtoa_r+0x910>
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee50:	b9a3      	cbnz	r3, 800ee7c <_dtoa_r+0x914>
 800ee52:	9b03      	ldr	r3, [sp, #12]
 800ee54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee58:	0d1b      	lsrs	r3, r3, #20
 800ee5a:	051b      	lsls	r3, r3, #20
 800ee5c:	b12b      	cbz	r3, 800ee6a <_dtoa_r+0x902>
 800ee5e:	9b04      	ldr	r3, [sp, #16]
 800ee60:	3301      	adds	r3, #1
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	f108 0801 	add.w	r8, r8, #1
 800ee68:	2301      	movs	r3, #1
 800ee6a:	9306      	str	r3, [sp, #24]
 800ee6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f47f af74 	bne.w	800ed5c <_dtoa_r+0x7f4>
 800ee74:	2001      	movs	r0, #1
 800ee76:	e779      	b.n	800ed6c <_dtoa_r+0x804>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e7f6      	b.n	800ee6a <_dtoa_r+0x902>
 800ee7c:	9b02      	ldr	r3, [sp, #8]
 800ee7e:	e7f4      	b.n	800ee6a <_dtoa_r+0x902>
 800ee80:	d085      	beq.n	800ed8e <_dtoa_r+0x826>
 800ee82:	4618      	mov	r0, r3
 800ee84:	301c      	adds	r0, #28
 800ee86:	e77d      	b.n	800ed84 <_dtoa_r+0x81c>
 800ee88:	40240000 	.word	0x40240000
 800ee8c:	9b01      	ldr	r3, [sp, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dc38      	bgt.n	800ef04 <_dtoa_r+0x99c>
 800ee92:	9b05      	ldr	r3, [sp, #20]
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	dd35      	ble.n	800ef04 <_dtoa_r+0x99c>
 800ee98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ee9c:	f1b9 0f00 	cmp.w	r9, #0
 800eea0:	d10d      	bne.n	800eebe <_dtoa_r+0x956>
 800eea2:	4631      	mov	r1, r6
 800eea4:	464b      	mov	r3, r9
 800eea6:	2205      	movs	r2, #5
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f000 fd4b 	bl	800f944 <__multadd>
 800eeae:	4601      	mov	r1, r0
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	4658      	mov	r0, fp
 800eeb4:	f000 ffac 	bl	800fe10 <__mcmp>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	f73f adbd 	bgt.w	800ea38 <_dtoa_r+0x4d0>
 800eebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec0:	9d00      	ldr	r5, [sp, #0]
 800eec2:	ea6f 0a03 	mvn.w	sl, r3
 800eec6:	f04f 0800 	mov.w	r8, #0
 800eeca:	4631      	mov	r1, r6
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fd17 	bl	800f900 <_Bfree>
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	f43f aeb4 	beq.w	800ec40 <_dtoa_r+0x6d8>
 800eed8:	f1b8 0f00 	cmp.w	r8, #0
 800eedc:	d005      	beq.n	800eeea <_dtoa_r+0x982>
 800eede:	45b8      	cmp	r8, r7
 800eee0:	d003      	beq.n	800eeea <_dtoa_r+0x982>
 800eee2:	4641      	mov	r1, r8
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fd0b 	bl	800f900 <_Bfree>
 800eeea:	4639      	mov	r1, r7
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 fd07 	bl	800f900 <_Bfree>
 800eef2:	e6a5      	b.n	800ec40 <_dtoa_r+0x6d8>
 800eef4:	2600      	movs	r6, #0
 800eef6:	4637      	mov	r7, r6
 800eef8:	e7e1      	b.n	800eebe <_dtoa_r+0x956>
 800eefa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eefc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ef00:	4637      	mov	r7, r6
 800ef02:	e599      	b.n	800ea38 <_dtoa_r+0x4d0>
 800ef04:	9b08      	ldr	r3, [sp, #32]
 800ef06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 80fd 	beq.w	800f10a <_dtoa_r+0xba2>
 800ef10:	2d00      	cmp	r5, #0
 800ef12:	dd05      	ble.n	800ef20 <_dtoa_r+0x9b8>
 800ef14:	4639      	mov	r1, r7
 800ef16:	462a      	mov	r2, r5
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 ff0d 	bl	800fd38 <__lshift>
 800ef1e:	4607      	mov	r7, r0
 800ef20:	9b06      	ldr	r3, [sp, #24]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d05c      	beq.n	800efe0 <_dtoa_r+0xa78>
 800ef26:	6879      	ldr	r1, [r7, #4]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 fca9 	bl	800f880 <_Balloc>
 800ef2e:	4605      	mov	r5, r0
 800ef30:	b928      	cbnz	r0, 800ef3e <_dtoa_r+0x9d6>
 800ef32:	4b80      	ldr	r3, [pc, #512]	; (800f134 <_dtoa_r+0xbcc>)
 800ef34:	4602      	mov	r2, r0
 800ef36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef3a:	f7ff bb2e 	b.w	800e59a <_dtoa_r+0x32>
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	3202      	adds	r2, #2
 800ef42:	0092      	lsls	r2, r2, #2
 800ef44:	f107 010c 	add.w	r1, r7, #12
 800ef48:	300c      	adds	r0, #12
 800ef4a:	f000 fc7f 	bl	800f84c <memcpy>
 800ef4e:	2201      	movs	r2, #1
 800ef50:	4629      	mov	r1, r5
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fef0 	bl	800fd38 <__lshift>
 800ef58:	9b00      	ldr	r3, [sp, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	9b00      	ldr	r3, [sp, #0]
 800ef60:	444b      	add	r3, r9
 800ef62:	9307      	str	r3, [sp, #28]
 800ef64:	9b02      	ldr	r3, [sp, #8]
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	46b8      	mov	r8, r7
 800ef6c:	9306      	str	r3, [sp, #24]
 800ef6e:	4607      	mov	r7, r0
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	4631      	mov	r1, r6
 800ef74:	3b01      	subs	r3, #1
 800ef76:	4658      	mov	r0, fp
 800ef78:	9302      	str	r3, [sp, #8]
 800ef7a:	f7ff fa67 	bl	800e44c <quorem>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	3330      	adds	r3, #48	; 0x30
 800ef82:	9004      	str	r0, [sp, #16]
 800ef84:	4641      	mov	r1, r8
 800ef86:	4658      	mov	r0, fp
 800ef88:	9308      	str	r3, [sp, #32]
 800ef8a:	f000 ff41 	bl	800fe10 <__mcmp>
 800ef8e:	463a      	mov	r2, r7
 800ef90:	4681      	mov	r9, r0
 800ef92:	4631      	mov	r1, r6
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 ff57 	bl	800fe48 <__mdiff>
 800ef9a:	68c2      	ldr	r2, [r0, #12]
 800ef9c:	9b08      	ldr	r3, [sp, #32]
 800ef9e:	4605      	mov	r5, r0
 800efa0:	bb02      	cbnz	r2, 800efe4 <_dtoa_r+0xa7c>
 800efa2:	4601      	mov	r1, r0
 800efa4:	4658      	mov	r0, fp
 800efa6:	f000 ff33 	bl	800fe10 <__mcmp>
 800efaa:	9b08      	ldr	r3, [sp, #32]
 800efac:	4602      	mov	r2, r0
 800efae:	4629      	mov	r1, r5
 800efb0:	4620      	mov	r0, r4
 800efb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800efb6:	f000 fca3 	bl	800f900 <_Bfree>
 800efba:	9b05      	ldr	r3, [sp, #20]
 800efbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efbe:	9d01      	ldr	r5, [sp, #4]
 800efc0:	ea43 0102 	orr.w	r1, r3, r2
 800efc4:	9b06      	ldr	r3, [sp, #24]
 800efc6:	430b      	orrs	r3, r1
 800efc8:	9b08      	ldr	r3, [sp, #32]
 800efca:	d10d      	bne.n	800efe8 <_dtoa_r+0xa80>
 800efcc:	2b39      	cmp	r3, #57	; 0x39
 800efce:	d029      	beq.n	800f024 <_dtoa_r+0xabc>
 800efd0:	f1b9 0f00 	cmp.w	r9, #0
 800efd4:	dd01      	ble.n	800efda <_dtoa_r+0xa72>
 800efd6:	9b04      	ldr	r3, [sp, #16]
 800efd8:	3331      	adds	r3, #49	; 0x31
 800efda:	9a02      	ldr	r2, [sp, #8]
 800efdc:	7013      	strb	r3, [r2, #0]
 800efde:	e774      	b.n	800eeca <_dtoa_r+0x962>
 800efe0:	4638      	mov	r0, r7
 800efe2:	e7b9      	b.n	800ef58 <_dtoa_r+0x9f0>
 800efe4:	2201      	movs	r2, #1
 800efe6:	e7e2      	b.n	800efae <_dtoa_r+0xa46>
 800efe8:	f1b9 0f00 	cmp.w	r9, #0
 800efec:	db06      	blt.n	800effc <_dtoa_r+0xa94>
 800efee:	9905      	ldr	r1, [sp, #20]
 800eff0:	ea41 0909 	orr.w	r9, r1, r9
 800eff4:	9906      	ldr	r1, [sp, #24]
 800eff6:	ea59 0101 	orrs.w	r1, r9, r1
 800effa:	d120      	bne.n	800f03e <_dtoa_r+0xad6>
 800effc:	2a00      	cmp	r2, #0
 800effe:	ddec      	ble.n	800efda <_dtoa_r+0xa72>
 800f000:	4659      	mov	r1, fp
 800f002:	2201      	movs	r2, #1
 800f004:	4620      	mov	r0, r4
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	f000 fe96 	bl	800fd38 <__lshift>
 800f00c:	4631      	mov	r1, r6
 800f00e:	4683      	mov	fp, r0
 800f010:	f000 fefe 	bl	800fe10 <__mcmp>
 800f014:	2800      	cmp	r0, #0
 800f016:	9b01      	ldr	r3, [sp, #4]
 800f018:	dc02      	bgt.n	800f020 <_dtoa_r+0xab8>
 800f01a:	d1de      	bne.n	800efda <_dtoa_r+0xa72>
 800f01c:	07da      	lsls	r2, r3, #31
 800f01e:	d5dc      	bpl.n	800efda <_dtoa_r+0xa72>
 800f020:	2b39      	cmp	r3, #57	; 0x39
 800f022:	d1d8      	bne.n	800efd6 <_dtoa_r+0xa6e>
 800f024:	9a02      	ldr	r2, [sp, #8]
 800f026:	2339      	movs	r3, #57	; 0x39
 800f028:	7013      	strb	r3, [r2, #0]
 800f02a:	462b      	mov	r3, r5
 800f02c:	461d      	mov	r5, r3
 800f02e:	3b01      	subs	r3, #1
 800f030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f034:	2a39      	cmp	r2, #57	; 0x39
 800f036:	d050      	beq.n	800f0da <_dtoa_r+0xb72>
 800f038:	3201      	adds	r2, #1
 800f03a:	701a      	strb	r2, [r3, #0]
 800f03c:	e745      	b.n	800eeca <_dtoa_r+0x962>
 800f03e:	2a00      	cmp	r2, #0
 800f040:	dd03      	ble.n	800f04a <_dtoa_r+0xae2>
 800f042:	2b39      	cmp	r3, #57	; 0x39
 800f044:	d0ee      	beq.n	800f024 <_dtoa_r+0xabc>
 800f046:	3301      	adds	r3, #1
 800f048:	e7c7      	b.n	800efda <_dtoa_r+0xa72>
 800f04a:	9a01      	ldr	r2, [sp, #4]
 800f04c:	9907      	ldr	r1, [sp, #28]
 800f04e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f052:	428a      	cmp	r2, r1
 800f054:	d02a      	beq.n	800f0ac <_dtoa_r+0xb44>
 800f056:	4659      	mov	r1, fp
 800f058:	2300      	movs	r3, #0
 800f05a:	220a      	movs	r2, #10
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 fc71 	bl	800f944 <__multadd>
 800f062:	45b8      	cmp	r8, r7
 800f064:	4683      	mov	fp, r0
 800f066:	f04f 0300 	mov.w	r3, #0
 800f06a:	f04f 020a 	mov.w	r2, #10
 800f06e:	4641      	mov	r1, r8
 800f070:	4620      	mov	r0, r4
 800f072:	d107      	bne.n	800f084 <_dtoa_r+0xb1c>
 800f074:	f000 fc66 	bl	800f944 <__multadd>
 800f078:	4680      	mov	r8, r0
 800f07a:	4607      	mov	r7, r0
 800f07c:	9b01      	ldr	r3, [sp, #4]
 800f07e:	3301      	adds	r3, #1
 800f080:	9301      	str	r3, [sp, #4]
 800f082:	e775      	b.n	800ef70 <_dtoa_r+0xa08>
 800f084:	f000 fc5e 	bl	800f944 <__multadd>
 800f088:	4639      	mov	r1, r7
 800f08a:	4680      	mov	r8, r0
 800f08c:	2300      	movs	r3, #0
 800f08e:	220a      	movs	r2, #10
 800f090:	4620      	mov	r0, r4
 800f092:	f000 fc57 	bl	800f944 <__multadd>
 800f096:	4607      	mov	r7, r0
 800f098:	e7f0      	b.n	800f07c <_dtoa_r+0xb14>
 800f09a:	f1b9 0f00 	cmp.w	r9, #0
 800f09e:	9a00      	ldr	r2, [sp, #0]
 800f0a0:	bfcc      	ite	gt
 800f0a2:	464d      	movgt	r5, r9
 800f0a4:	2501      	movle	r5, #1
 800f0a6:	4415      	add	r5, r2
 800f0a8:	f04f 0800 	mov.w	r8, #0
 800f0ac:	4659      	mov	r1, fp
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	f000 fe40 	bl	800fd38 <__lshift>
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4683      	mov	fp, r0
 800f0bc:	f000 fea8 	bl	800fe10 <__mcmp>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	dcb2      	bgt.n	800f02a <_dtoa_r+0xac2>
 800f0c4:	d102      	bne.n	800f0cc <_dtoa_r+0xb64>
 800f0c6:	9b01      	ldr	r3, [sp, #4]
 800f0c8:	07db      	lsls	r3, r3, #31
 800f0ca:	d4ae      	bmi.n	800f02a <_dtoa_r+0xac2>
 800f0cc:	462b      	mov	r3, r5
 800f0ce:	461d      	mov	r5, r3
 800f0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0d4:	2a30      	cmp	r2, #48	; 0x30
 800f0d6:	d0fa      	beq.n	800f0ce <_dtoa_r+0xb66>
 800f0d8:	e6f7      	b.n	800eeca <_dtoa_r+0x962>
 800f0da:	9a00      	ldr	r2, [sp, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d1a5      	bne.n	800f02c <_dtoa_r+0xac4>
 800f0e0:	f10a 0a01 	add.w	sl, sl, #1
 800f0e4:	2331      	movs	r3, #49	; 0x31
 800f0e6:	e779      	b.n	800efdc <_dtoa_r+0xa74>
 800f0e8:	4b13      	ldr	r3, [pc, #76]	; (800f138 <_dtoa_r+0xbd0>)
 800f0ea:	f7ff baaf 	b.w	800e64c <_dtoa_r+0xe4>
 800f0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f47f aa86 	bne.w	800e602 <_dtoa_r+0x9a>
 800f0f6:	4b11      	ldr	r3, [pc, #68]	; (800f13c <_dtoa_r+0xbd4>)
 800f0f8:	f7ff baa8 	b.w	800e64c <_dtoa_r+0xe4>
 800f0fc:	f1b9 0f00 	cmp.w	r9, #0
 800f100:	dc03      	bgt.n	800f10a <_dtoa_r+0xba2>
 800f102:	9b05      	ldr	r3, [sp, #20]
 800f104:	2b02      	cmp	r3, #2
 800f106:	f73f aec9 	bgt.w	800ee9c <_dtoa_r+0x934>
 800f10a:	9d00      	ldr	r5, [sp, #0]
 800f10c:	4631      	mov	r1, r6
 800f10e:	4658      	mov	r0, fp
 800f110:	f7ff f99c 	bl	800e44c <quorem>
 800f114:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f118:	f805 3b01 	strb.w	r3, [r5], #1
 800f11c:	9a00      	ldr	r2, [sp, #0]
 800f11e:	1aaa      	subs	r2, r5, r2
 800f120:	4591      	cmp	r9, r2
 800f122:	ddba      	ble.n	800f09a <_dtoa_r+0xb32>
 800f124:	4659      	mov	r1, fp
 800f126:	2300      	movs	r3, #0
 800f128:	220a      	movs	r2, #10
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 fc0a 	bl	800f944 <__multadd>
 800f130:	4683      	mov	fp, r0
 800f132:	e7eb      	b.n	800f10c <_dtoa_r+0xba4>
 800f134:	080113fb 	.word	0x080113fb
 800f138:	08011304 	.word	0x08011304
 800f13c:	08011378 	.word	0x08011378

0800f140 <rshift>:
 800f140:	6903      	ldr	r3, [r0, #16]
 800f142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f14a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f14e:	f100 0414 	add.w	r4, r0, #20
 800f152:	dd45      	ble.n	800f1e0 <rshift+0xa0>
 800f154:	f011 011f 	ands.w	r1, r1, #31
 800f158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f15c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f160:	d10c      	bne.n	800f17c <rshift+0x3c>
 800f162:	f100 0710 	add.w	r7, r0, #16
 800f166:	4629      	mov	r1, r5
 800f168:	42b1      	cmp	r1, r6
 800f16a:	d334      	bcc.n	800f1d6 <rshift+0x96>
 800f16c:	1a9b      	subs	r3, r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	1eea      	subs	r2, r5, #3
 800f172:	4296      	cmp	r6, r2
 800f174:	bf38      	it	cc
 800f176:	2300      	movcc	r3, #0
 800f178:	4423      	add	r3, r4
 800f17a:	e015      	b.n	800f1a8 <rshift+0x68>
 800f17c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f180:	f1c1 0820 	rsb	r8, r1, #32
 800f184:	40cf      	lsrs	r7, r1
 800f186:	f105 0e04 	add.w	lr, r5, #4
 800f18a:	46a1      	mov	r9, r4
 800f18c:	4576      	cmp	r6, lr
 800f18e:	46f4      	mov	ip, lr
 800f190:	d815      	bhi.n	800f1be <rshift+0x7e>
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	009a      	lsls	r2, r3, #2
 800f196:	3a04      	subs	r2, #4
 800f198:	3501      	adds	r5, #1
 800f19a:	42ae      	cmp	r6, r5
 800f19c:	bf38      	it	cc
 800f19e:	2200      	movcc	r2, #0
 800f1a0:	18a3      	adds	r3, r4, r2
 800f1a2:	50a7      	str	r7, [r4, r2]
 800f1a4:	b107      	cbz	r7, 800f1a8 <rshift+0x68>
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	1b1a      	subs	r2, r3, r4
 800f1aa:	42a3      	cmp	r3, r4
 800f1ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f1b0:	bf08      	it	eq
 800f1b2:	2300      	moveq	r3, #0
 800f1b4:	6102      	str	r2, [r0, #16]
 800f1b6:	bf08      	it	eq
 800f1b8:	6143      	streq	r3, [r0, #20]
 800f1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1be:	f8dc c000 	ldr.w	ip, [ip]
 800f1c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800f1c6:	ea4c 0707 	orr.w	r7, ip, r7
 800f1ca:	f849 7b04 	str.w	r7, [r9], #4
 800f1ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f1d2:	40cf      	lsrs	r7, r1
 800f1d4:	e7da      	b.n	800f18c <rshift+0x4c>
 800f1d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800f1da:	f847 cf04 	str.w	ip, [r7, #4]!
 800f1de:	e7c3      	b.n	800f168 <rshift+0x28>
 800f1e0:	4623      	mov	r3, r4
 800f1e2:	e7e1      	b.n	800f1a8 <rshift+0x68>

0800f1e4 <__hexdig_fun>:
 800f1e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f1e8:	2b09      	cmp	r3, #9
 800f1ea:	d802      	bhi.n	800f1f2 <__hexdig_fun+0xe>
 800f1ec:	3820      	subs	r0, #32
 800f1ee:	b2c0      	uxtb	r0, r0
 800f1f0:	4770      	bx	lr
 800f1f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f1f6:	2b05      	cmp	r3, #5
 800f1f8:	d801      	bhi.n	800f1fe <__hexdig_fun+0x1a>
 800f1fa:	3847      	subs	r0, #71	; 0x47
 800f1fc:	e7f7      	b.n	800f1ee <__hexdig_fun+0xa>
 800f1fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f202:	2b05      	cmp	r3, #5
 800f204:	d801      	bhi.n	800f20a <__hexdig_fun+0x26>
 800f206:	3827      	subs	r0, #39	; 0x27
 800f208:	e7f1      	b.n	800f1ee <__hexdig_fun+0xa>
 800f20a:	2000      	movs	r0, #0
 800f20c:	4770      	bx	lr
	...

0800f210 <__gethex>:
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	ed2d 8b02 	vpush	{d8}
 800f218:	b089      	sub	sp, #36	; 0x24
 800f21a:	ee08 0a10 	vmov	s16, r0
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	4bbc      	ldr	r3, [pc, #752]	; (800f514 <__gethex+0x304>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	9301      	str	r3, [sp, #4]
 800f226:	4618      	mov	r0, r3
 800f228:	468b      	mov	fp, r1
 800f22a:	4690      	mov	r8, r2
 800f22c:	f7f0 ffd0 	bl	80001d0 <strlen>
 800f230:	9b01      	ldr	r3, [sp, #4]
 800f232:	f8db 2000 	ldr.w	r2, [fp]
 800f236:	4403      	add	r3, r0
 800f238:	4682      	mov	sl, r0
 800f23a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f23e:	9305      	str	r3, [sp, #20]
 800f240:	1c93      	adds	r3, r2, #2
 800f242:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f246:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f24a:	32fe      	adds	r2, #254	; 0xfe
 800f24c:	18d1      	adds	r1, r2, r3
 800f24e:	461f      	mov	r7, r3
 800f250:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f254:	9100      	str	r1, [sp, #0]
 800f256:	2830      	cmp	r0, #48	; 0x30
 800f258:	d0f8      	beq.n	800f24c <__gethex+0x3c>
 800f25a:	f7ff ffc3 	bl	800f1e4 <__hexdig_fun>
 800f25e:	4604      	mov	r4, r0
 800f260:	2800      	cmp	r0, #0
 800f262:	d13a      	bne.n	800f2da <__gethex+0xca>
 800f264:	9901      	ldr	r1, [sp, #4]
 800f266:	4652      	mov	r2, sl
 800f268:	4638      	mov	r0, r7
 800f26a:	f7fe faa9 	bl	800d7c0 <strncmp>
 800f26e:	4605      	mov	r5, r0
 800f270:	2800      	cmp	r0, #0
 800f272:	d168      	bne.n	800f346 <__gethex+0x136>
 800f274:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f278:	eb07 060a 	add.w	r6, r7, sl
 800f27c:	f7ff ffb2 	bl	800f1e4 <__hexdig_fun>
 800f280:	2800      	cmp	r0, #0
 800f282:	d062      	beq.n	800f34a <__gethex+0x13a>
 800f284:	4633      	mov	r3, r6
 800f286:	7818      	ldrb	r0, [r3, #0]
 800f288:	2830      	cmp	r0, #48	; 0x30
 800f28a:	461f      	mov	r7, r3
 800f28c:	f103 0301 	add.w	r3, r3, #1
 800f290:	d0f9      	beq.n	800f286 <__gethex+0x76>
 800f292:	f7ff ffa7 	bl	800f1e4 <__hexdig_fun>
 800f296:	2301      	movs	r3, #1
 800f298:	fab0 f480 	clz	r4, r0
 800f29c:	0964      	lsrs	r4, r4, #5
 800f29e:	4635      	mov	r5, r6
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	4616      	mov	r6, r2
 800f2a6:	3201      	adds	r2, #1
 800f2a8:	7830      	ldrb	r0, [r6, #0]
 800f2aa:	f7ff ff9b 	bl	800f1e4 <__hexdig_fun>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d1f8      	bne.n	800f2a4 <__gethex+0x94>
 800f2b2:	9901      	ldr	r1, [sp, #4]
 800f2b4:	4652      	mov	r2, sl
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7fe fa82 	bl	800d7c0 <strncmp>
 800f2bc:	b980      	cbnz	r0, 800f2e0 <__gethex+0xd0>
 800f2be:	b94d      	cbnz	r5, 800f2d4 <__gethex+0xc4>
 800f2c0:	eb06 050a 	add.w	r5, r6, sl
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	4616      	mov	r6, r2
 800f2c8:	3201      	adds	r2, #1
 800f2ca:	7830      	ldrb	r0, [r6, #0]
 800f2cc:	f7ff ff8a 	bl	800f1e4 <__hexdig_fun>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d1f8      	bne.n	800f2c6 <__gethex+0xb6>
 800f2d4:	1bad      	subs	r5, r5, r6
 800f2d6:	00ad      	lsls	r5, r5, #2
 800f2d8:	e004      	b.n	800f2e4 <__gethex+0xd4>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	4625      	mov	r5, r4
 800f2de:	e7e0      	b.n	800f2a2 <__gethex+0x92>
 800f2e0:	2d00      	cmp	r5, #0
 800f2e2:	d1f7      	bne.n	800f2d4 <__gethex+0xc4>
 800f2e4:	7833      	ldrb	r3, [r6, #0]
 800f2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2ea:	2b50      	cmp	r3, #80	; 0x50
 800f2ec:	d13b      	bne.n	800f366 <__gethex+0x156>
 800f2ee:	7873      	ldrb	r3, [r6, #1]
 800f2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800f2f2:	d02c      	beq.n	800f34e <__gethex+0x13e>
 800f2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800f2f6:	d02e      	beq.n	800f356 <__gethex+0x146>
 800f2f8:	1c71      	adds	r1, r6, #1
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	7808      	ldrb	r0, [r1, #0]
 800f300:	f7ff ff70 	bl	800f1e4 <__hexdig_fun>
 800f304:	1e43      	subs	r3, r0, #1
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b18      	cmp	r3, #24
 800f30a:	d82c      	bhi.n	800f366 <__gethex+0x156>
 800f30c:	f1a0 0210 	sub.w	r2, r0, #16
 800f310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f314:	f7ff ff66 	bl	800f1e4 <__hexdig_fun>
 800f318:	1e43      	subs	r3, r0, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2b18      	cmp	r3, #24
 800f31e:	d91d      	bls.n	800f35c <__gethex+0x14c>
 800f320:	f1b9 0f00 	cmp.w	r9, #0
 800f324:	d000      	beq.n	800f328 <__gethex+0x118>
 800f326:	4252      	negs	r2, r2
 800f328:	4415      	add	r5, r2
 800f32a:	f8cb 1000 	str.w	r1, [fp]
 800f32e:	b1e4      	cbz	r4, 800f36a <__gethex+0x15a>
 800f330:	9b00      	ldr	r3, [sp, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	bf14      	ite	ne
 800f336:	2700      	movne	r7, #0
 800f338:	2706      	moveq	r7, #6
 800f33a:	4638      	mov	r0, r7
 800f33c:	b009      	add	sp, #36	; 0x24
 800f33e:	ecbd 8b02 	vpop	{d8}
 800f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f346:	463e      	mov	r6, r7
 800f348:	4625      	mov	r5, r4
 800f34a:	2401      	movs	r4, #1
 800f34c:	e7ca      	b.n	800f2e4 <__gethex+0xd4>
 800f34e:	f04f 0900 	mov.w	r9, #0
 800f352:	1cb1      	adds	r1, r6, #2
 800f354:	e7d3      	b.n	800f2fe <__gethex+0xee>
 800f356:	f04f 0901 	mov.w	r9, #1
 800f35a:	e7fa      	b.n	800f352 <__gethex+0x142>
 800f35c:	230a      	movs	r3, #10
 800f35e:	fb03 0202 	mla	r2, r3, r2, r0
 800f362:	3a10      	subs	r2, #16
 800f364:	e7d4      	b.n	800f310 <__gethex+0x100>
 800f366:	4631      	mov	r1, r6
 800f368:	e7df      	b.n	800f32a <__gethex+0x11a>
 800f36a:	1bf3      	subs	r3, r6, r7
 800f36c:	3b01      	subs	r3, #1
 800f36e:	4621      	mov	r1, r4
 800f370:	2b07      	cmp	r3, #7
 800f372:	dc0b      	bgt.n	800f38c <__gethex+0x17c>
 800f374:	ee18 0a10 	vmov	r0, s16
 800f378:	f000 fa82 	bl	800f880 <_Balloc>
 800f37c:	4604      	mov	r4, r0
 800f37e:	b940      	cbnz	r0, 800f392 <__gethex+0x182>
 800f380:	4b65      	ldr	r3, [pc, #404]	; (800f518 <__gethex+0x308>)
 800f382:	4602      	mov	r2, r0
 800f384:	21de      	movs	r1, #222	; 0xde
 800f386:	4865      	ldr	r0, [pc, #404]	; (800f51c <__gethex+0x30c>)
 800f388:	f001 f8b8 	bl	80104fc <__assert_func>
 800f38c:	3101      	adds	r1, #1
 800f38e:	105b      	asrs	r3, r3, #1
 800f390:	e7ee      	b.n	800f370 <__gethex+0x160>
 800f392:	f100 0914 	add.w	r9, r0, #20
 800f396:	f04f 0b00 	mov.w	fp, #0
 800f39a:	f1ca 0301 	rsb	r3, sl, #1
 800f39e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3a2:	f8cd b000 	str.w	fp, [sp]
 800f3a6:	9306      	str	r3, [sp, #24]
 800f3a8:	42b7      	cmp	r7, r6
 800f3aa:	d340      	bcc.n	800f42e <__gethex+0x21e>
 800f3ac:	9802      	ldr	r0, [sp, #8]
 800f3ae:	9b00      	ldr	r3, [sp, #0]
 800f3b0:	f840 3b04 	str.w	r3, [r0], #4
 800f3b4:	eba0 0009 	sub.w	r0, r0, r9
 800f3b8:	1080      	asrs	r0, r0, #2
 800f3ba:	0146      	lsls	r6, r0, #5
 800f3bc:	6120      	str	r0, [r4, #16]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fb54 	bl	800fa6c <__hi0bits>
 800f3c4:	1a30      	subs	r0, r6, r0
 800f3c6:	f8d8 6000 	ldr.w	r6, [r8]
 800f3ca:	42b0      	cmp	r0, r6
 800f3cc:	dd63      	ble.n	800f496 <__gethex+0x286>
 800f3ce:	1b87      	subs	r7, r0, r6
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 feee 	bl	80101b4 <__any_on>
 800f3d8:	4682      	mov	sl, r0
 800f3da:	b1a8      	cbz	r0, 800f408 <__gethex+0x1f8>
 800f3dc:	1e7b      	subs	r3, r7, #1
 800f3de:	1159      	asrs	r1, r3, #5
 800f3e0:	f003 021f 	and.w	r2, r3, #31
 800f3e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f3e8:	f04f 0a01 	mov.w	sl, #1
 800f3ec:	fa0a f202 	lsl.w	r2, sl, r2
 800f3f0:	420a      	tst	r2, r1
 800f3f2:	d009      	beq.n	800f408 <__gethex+0x1f8>
 800f3f4:	4553      	cmp	r3, sl
 800f3f6:	dd05      	ble.n	800f404 <__gethex+0x1f4>
 800f3f8:	1eb9      	subs	r1, r7, #2
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 feda 	bl	80101b4 <__any_on>
 800f400:	2800      	cmp	r0, #0
 800f402:	d145      	bne.n	800f490 <__gethex+0x280>
 800f404:	f04f 0a02 	mov.w	sl, #2
 800f408:	4639      	mov	r1, r7
 800f40a:	4620      	mov	r0, r4
 800f40c:	f7ff fe98 	bl	800f140 <rshift>
 800f410:	443d      	add	r5, r7
 800f412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f416:	42ab      	cmp	r3, r5
 800f418:	da4c      	bge.n	800f4b4 <__gethex+0x2a4>
 800f41a:	ee18 0a10 	vmov	r0, s16
 800f41e:	4621      	mov	r1, r4
 800f420:	f000 fa6e 	bl	800f900 <_Bfree>
 800f424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f426:	2300      	movs	r3, #0
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	27a3      	movs	r7, #163	; 0xa3
 800f42c:	e785      	b.n	800f33a <__gethex+0x12a>
 800f42e:	1e73      	subs	r3, r6, #1
 800f430:	9a05      	ldr	r2, [sp, #20]
 800f432:	9303      	str	r3, [sp, #12]
 800f434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f438:	4293      	cmp	r3, r2
 800f43a:	d019      	beq.n	800f470 <__gethex+0x260>
 800f43c:	f1bb 0f20 	cmp.w	fp, #32
 800f440:	d107      	bne.n	800f452 <__gethex+0x242>
 800f442:	9b02      	ldr	r3, [sp, #8]
 800f444:	9a00      	ldr	r2, [sp, #0]
 800f446:	f843 2b04 	str.w	r2, [r3], #4
 800f44a:	9302      	str	r3, [sp, #8]
 800f44c:	2300      	movs	r3, #0
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	469b      	mov	fp, r3
 800f452:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f456:	f7ff fec5 	bl	800f1e4 <__hexdig_fun>
 800f45a:	9b00      	ldr	r3, [sp, #0]
 800f45c:	f000 000f 	and.w	r0, r0, #15
 800f460:	fa00 f00b 	lsl.w	r0, r0, fp
 800f464:	4303      	orrs	r3, r0
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	f10b 0b04 	add.w	fp, fp, #4
 800f46c:	9b03      	ldr	r3, [sp, #12]
 800f46e:	e00d      	b.n	800f48c <__gethex+0x27c>
 800f470:	9b03      	ldr	r3, [sp, #12]
 800f472:	9a06      	ldr	r2, [sp, #24]
 800f474:	4413      	add	r3, r2
 800f476:	42bb      	cmp	r3, r7
 800f478:	d3e0      	bcc.n	800f43c <__gethex+0x22c>
 800f47a:	4618      	mov	r0, r3
 800f47c:	9901      	ldr	r1, [sp, #4]
 800f47e:	9307      	str	r3, [sp, #28]
 800f480:	4652      	mov	r2, sl
 800f482:	f7fe f99d 	bl	800d7c0 <strncmp>
 800f486:	9b07      	ldr	r3, [sp, #28]
 800f488:	2800      	cmp	r0, #0
 800f48a:	d1d7      	bne.n	800f43c <__gethex+0x22c>
 800f48c:	461e      	mov	r6, r3
 800f48e:	e78b      	b.n	800f3a8 <__gethex+0x198>
 800f490:	f04f 0a03 	mov.w	sl, #3
 800f494:	e7b8      	b.n	800f408 <__gethex+0x1f8>
 800f496:	da0a      	bge.n	800f4ae <__gethex+0x29e>
 800f498:	1a37      	subs	r7, r6, r0
 800f49a:	4621      	mov	r1, r4
 800f49c:	ee18 0a10 	vmov	r0, s16
 800f4a0:	463a      	mov	r2, r7
 800f4a2:	f000 fc49 	bl	800fd38 <__lshift>
 800f4a6:	1bed      	subs	r5, r5, r7
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	f100 0914 	add.w	r9, r0, #20
 800f4ae:	f04f 0a00 	mov.w	sl, #0
 800f4b2:	e7ae      	b.n	800f412 <__gethex+0x202>
 800f4b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f4b8:	42a8      	cmp	r0, r5
 800f4ba:	dd72      	ble.n	800f5a2 <__gethex+0x392>
 800f4bc:	1b45      	subs	r5, r0, r5
 800f4be:	42ae      	cmp	r6, r5
 800f4c0:	dc36      	bgt.n	800f530 <__gethex+0x320>
 800f4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d02a      	beq.n	800f520 <__gethex+0x310>
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	d02c      	beq.n	800f528 <__gethex+0x318>
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d115      	bne.n	800f4fe <__gethex+0x2ee>
 800f4d2:	42ae      	cmp	r6, r5
 800f4d4:	d113      	bne.n	800f4fe <__gethex+0x2ee>
 800f4d6:	2e01      	cmp	r6, #1
 800f4d8:	d10b      	bne.n	800f4f2 <__gethex+0x2e2>
 800f4da:	9a04      	ldr	r2, [sp, #16]
 800f4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4e0:	6013      	str	r3, [r2, #0]
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	6123      	str	r3, [r4, #16]
 800f4e6:	f8c9 3000 	str.w	r3, [r9]
 800f4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4ec:	2762      	movs	r7, #98	; 0x62
 800f4ee:	601c      	str	r4, [r3, #0]
 800f4f0:	e723      	b.n	800f33a <__gethex+0x12a>
 800f4f2:	1e71      	subs	r1, r6, #1
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fe5d 	bl	80101b4 <__any_on>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d1ed      	bne.n	800f4da <__gethex+0x2ca>
 800f4fe:	ee18 0a10 	vmov	r0, s16
 800f502:	4621      	mov	r1, r4
 800f504:	f000 f9fc 	bl	800f900 <_Bfree>
 800f508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f50a:	2300      	movs	r3, #0
 800f50c:	6013      	str	r3, [r2, #0]
 800f50e:	2750      	movs	r7, #80	; 0x50
 800f510:	e713      	b.n	800f33a <__gethex+0x12a>
 800f512:	bf00      	nop
 800f514:	08011478 	.word	0x08011478
 800f518:	080113fb 	.word	0x080113fb
 800f51c:	0801140c 	.word	0x0801140c
 800f520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1eb      	bne.n	800f4fe <__gethex+0x2ee>
 800f526:	e7d8      	b.n	800f4da <__gethex+0x2ca>
 800f528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d1d5      	bne.n	800f4da <__gethex+0x2ca>
 800f52e:	e7e6      	b.n	800f4fe <__gethex+0x2ee>
 800f530:	1e6f      	subs	r7, r5, #1
 800f532:	f1ba 0f00 	cmp.w	sl, #0
 800f536:	d131      	bne.n	800f59c <__gethex+0x38c>
 800f538:	b127      	cbz	r7, 800f544 <__gethex+0x334>
 800f53a:	4639      	mov	r1, r7
 800f53c:	4620      	mov	r0, r4
 800f53e:	f000 fe39 	bl	80101b4 <__any_on>
 800f542:	4682      	mov	sl, r0
 800f544:	117b      	asrs	r3, r7, #5
 800f546:	2101      	movs	r1, #1
 800f548:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f54c:	f007 071f 	and.w	r7, r7, #31
 800f550:	fa01 f707 	lsl.w	r7, r1, r7
 800f554:	421f      	tst	r7, r3
 800f556:	4629      	mov	r1, r5
 800f558:	4620      	mov	r0, r4
 800f55a:	bf18      	it	ne
 800f55c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f560:	1b76      	subs	r6, r6, r5
 800f562:	f7ff fded 	bl	800f140 <rshift>
 800f566:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f56a:	2702      	movs	r7, #2
 800f56c:	f1ba 0f00 	cmp.w	sl, #0
 800f570:	d048      	beq.n	800f604 <__gethex+0x3f4>
 800f572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f576:	2b02      	cmp	r3, #2
 800f578:	d015      	beq.n	800f5a6 <__gethex+0x396>
 800f57a:	2b03      	cmp	r3, #3
 800f57c:	d017      	beq.n	800f5ae <__gethex+0x39e>
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d109      	bne.n	800f596 <__gethex+0x386>
 800f582:	f01a 0f02 	tst.w	sl, #2
 800f586:	d006      	beq.n	800f596 <__gethex+0x386>
 800f588:	f8d9 0000 	ldr.w	r0, [r9]
 800f58c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f590:	f01a 0f01 	tst.w	sl, #1
 800f594:	d10e      	bne.n	800f5b4 <__gethex+0x3a4>
 800f596:	f047 0710 	orr.w	r7, r7, #16
 800f59a:	e033      	b.n	800f604 <__gethex+0x3f4>
 800f59c:	f04f 0a01 	mov.w	sl, #1
 800f5a0:	e7d0      	b.n	800f544 <__gethex+0x334>
 800f5a2:	2701      	movs	r7, #1
 800f5a4:	e7e2      	b.n	800f56c <__gethex+0x35c>
 800f5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5a8:	f1c3 0301 	rsb	r3, r3, #1
 800f5ac:	9315      	str	r3, [sp, #84]	; 0x54
 800f5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0f0      	beq.n	800f596 <__gethex+0x386>
 800f5b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5b8:	f104 0314 	add.w	r3, r4, #20
 800f5bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5c4:	f04f 0c00 	mov.w	ip, #0
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f5d2:	d01c      	beq.n	800f60e <__gethex+0x3fe>
 800f5d4:	3201      	adds	r2, #1
 800f5d6:	6002      	str	r2, [r0, #0]
 800f5d8:	2f02      	cmp	r7, #2
 800f5da:	f104 0314 	add.w	r3, r4, #20
 800f5de:	d13f      	bne.n	800f660 <__gethex+0x450>
 800f5e0:	f8d8 2000 	ldr.w	r2, [r8]
 800f5e4:	3a01      	subs	r2, #1
 800f5e6:	42b2      	cmp	r2, r6
 800f5e8:	d10a      	bne.n	800f600 <__gethex+0x3f0>
 800f5ea:	1171      	asrs	r1, r6, #5
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5f2:	f006 061f 	and.w	r6, r6, #31
 800f5f6:	fa02 f606 	lsl.w	r6, r2, r6
 800f5fa:	421e      	tst	r6, r3
 800f5fc:	bf18      	it	ne
 800f5fe:	4617      	movne	r7, r2
 800f600:	f047 0720 	orr.w	r7, r7, #32
 800f604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f606:	601c      	str	r4, [r3, #0]
 800f608:	9b04      	ldr	r3, [sp, #16]
 800f60a:	601d      	str	r5, [r3, #0]
 800f60c:	e695      	b.n	800f33a <__gethex+0x12a>
 800f60e:	4299      	cmp	r1, r3
 800f610:	f843 cc04 	str.w	ip, [r3, #-4]
 800f614:	d8d8      	bhi.n	800f5c8 <__gethex+0x3b8>
 800f616:	68a3      	ldr	r3, [r4, #8]
 800f618:	459b      	cmp	fp, r3
 800f61a:	db19      	blt.n	800f650 <__gethex+0x440>
 800f61c:	6861      	ldr	r1, [r4, #4]
 800f61e:	ee18 0a10 	vmov	r0, s16
 800f622:	3101      	adds	r1, #1
 800f624:	f000 f92c 	bl	800f880 <_Balloc>
 800f628:	4681      	mov	r9, r0
 800f62a:	b918      	cbnz	r0, 800f634 <__gethex+0x424>
 800f62c:	4b1a      	ldr	r3, [pc, #104]	; (800f698 <__gethex+0x488>)
 800f62e:	4602      	mov	r2, r0
 800f630:	2184      	movs	r1, #132	; 0x84
 800f632:	e6a8      	b.n	800f386 <__gethex+0x176>
 800f634:	6922      	ldr	r2, [r4, #16]
 800f636:	3202      	adds	r2, #2
 800f638:	f104 010c 	add.w	r1, r4, #12
 800f63c:	0092      	lsls	r2, r2, #2
 800f63e:	300c      	adds	r0, #12
 800f640:	f000 f904 	bl	800f84c <memcpy>
 800f644:	4621      	mov	r1, r4
 800f646:	ee18 0a10 	vmov	r0, s16
 800f64a:	f000 f959 	bl	800f900 <_Bfree>
 800f64e:	464c      	mov	r4, r9
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f658:	6122      	str	r2, [r4, #16]
 800f65a:	2201      	movs	r2, #1
 800f65c:	615a      	str	r2, [r3, #20]
 800f65e:	e7bb      	b.n	800f5d8 <__gethex+0x3c8>
 800f660:	6922      	ldr	r2, [r4, #16]
 800f662:	455a      	cmp	r2, fp
 800f664:	dd0b      	ble.n	800f67e <__gethex+0x46e>
 800f666:	2101      	movs	r1, #1
 800f668:	4620      	mov	r0, r4
 800f66a:	f7ff fd69 	bl	800f140 <rshift>
 800f66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f672:	3501      	adds	r5, #1
 800f674:	42ab      	cmp	r3, r5
 800f676:	f6ff aed0 	blt.w	800f41a <__gethex+0x20a>
 800f67a:	2701      	movs	r7, #1
 800f67c:	e7c0      	b.n	800f600 <__gethex+0x3f0>
 800f67e:	f016 061f 	ands.w	r6, r6, #31
 800f682:	d0fa      	beq.n	800f67a <__gethex+0x46a>
 800f684:	449a      	add	sl, r3
 800f686:	f1c6 0620 	rsb	r6, r6, #32
 800f68a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f68e:	f000 f9ed 	bl	800fa6c <__hi0bits>
 800f692:	42b0      	cmp	r0, r6
 800f694:	dbe7      	blt.n	800f666 <__gethex+0x456>
 800f696:	e7f0      	b.n	800f67a <__gethex+0x46a>
 800f698:	080113fb 	.word	0x080113fb

0800f69c <L_shift>:
 800f69c:	f1c2 0208 	rsb	r2, r2, #8
 800f6a0:	0092      	lsls	r2, r2, #2
 800f6a2:	b570      	push	{r4, r5, r6, lr}
 800f6a4:	f1c2 0620 	rsb	r6, r2, #32
 800f6a8:	6843      	ldr	r3, [r0, #4]
 800f6aa:	6804      	ldr	r4, [r0, #0]
 800f6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800f6b0:	432c      	orrs	r4, r5
 800f6b2:	40d3      	lsrs	r3, r2
 800f6b4:	6004      	str	r4, [r0, #0]
 800f6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6ba:	4288      	cmp	r0, r1
 800f6bc:	d3f4      	bcc.n	800f6a8 <L_shift+0xc>
 800f6be:	bd70      	pop	{r4, r5, r6, pc}

0800f6c0 <__match>:
 800f6c0:	b530      	push	{r4, r5, lr}
 800f6c2:	6803      	ldr	r3, [r0, #0]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6ca:	b914      	cbnz	r4, 800f6d2 <__match+0x12>
 800f6cc:	6003      	str	r3, [r0, #0]
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	bd30      	pop	{r4, r5, pc}
 800f6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f6da:	2d19      	cmp	r5, #25
 800f6dc:	bf98      	it	ls
 800f6de:	3220      	addls	r2, #32
 800f6e0:	42a2      	cmp	r2, r4
 800f6e2:	d0f0      	beq.n	800f6c6 <__match+0x6>
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	e7f3      	b.n	800f6d0 <__match+0x10>

0800f6e8 <__hexnan>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	680b      	ldr	r3, [r1, #0]
 800f6ee:	6801      	ldr	r1, [r0, #0]
 800f6f0:	115e      	asrs	r6, r3, #5
 800f6f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6f6:	f013 031f 	ands.w	r3, r3, #31
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	bf18      	it	ne
 800f6fe:	3604      	addne	r6, #4
 800f700:	2500      	movs	r5, #0
 800f702:	1f37      	subs	r7, r6, #4
 800f704:	4682      	mov	sl, r0
 800f706:	4690      	mov	r8, r2
 800f708:	9301      	str	r3, [sp, #4]
 800f70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f70e:	46b9      	mov	r9, r7
 800f710:	463c      	mov	r4, r7
 800f712:	9502      	str	r5, [sp, #8]
 800f714:	46ab      	mov	fp, r5
 800f716:	784a      	ldrb	r2, [r1, #1]
 800f718:	1c4b      	adds	r3, r1, #1
 800f71a:	9303      	str	r3, [sp, #12]
 800f71c:	b342      	cbz	r2, 800f770 <__hexnan+0x88>
 800f71e:	4610      	mov	r0, r2
 800f720:	9105      	str	r1, [sp, #20]
 800f722:	9204      	str	r2, [sp, #16]
 800f724:	f7ff fd5e 	bl	800f1e4 <__hexdig_fun>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d14f      	bne.n	800f7cc <__hexnan+0xe4>
 800f72c:	9a04      	ldr	r2, [sp, #16]
 800f72e:	9905      	ldr	r1, [sp, #20]
 800f730:	2a20      	cmp	r2, #32
 800f732:	d818      	bhi.n	800f766 <__hexnan+0x7e>
 800f734:	9b02      	ldr	r3, [sp, #8]
 800f736:	459b      	cmp	fp, r3
 800f738:	dd13      	ble.n	800f762 <__hexnan+0x7a>
 800f73a:	454c      	cmp	r4, r9
 800f73c:	d206      	bcs.n	800f74c <__hexnan+0x64>
 800f73e:	2d07      	cmp	r5, #7
 800f740:	dc04      	bgt.n	800f74c <__hexnan+0x64>
 800f742:	462a      	mov	r2, r5
 800f744:	4649      	mov	r1, r9
 800f746:	4620      	mov	r0, r4
 800f748:	f7ff ffa8 	bl	800f69c <L_shift>
 800f74c:	4544      	cmp	r4, r8
 800f74e:	d950      	bls.n	800f7f2 <__hexnan+0x10a>
 800f750:	2300      	movs	r3, #0
 800f752:	f1a4 0904 	sub.w	r9, r4, #4
 800f756:	f844 3c04 	str.w	r3, [r4, #-4]
 800f75a:	f8cd b008 	str.w	fp, [sp, #8]
 800f75e:	464c      	mov	r4, r9
 800f760:	461d      	mov	r5, r3
 800f762:	9903      	ldr	r1, [sp, #12]
 800f764:	e7d7      	b.n	800f716 <__hexnan+0x2e>
 800f766:	2a29      	cmp	r2, #41	; 0x29
 800f768:	d156      	bne.n	800f818 <__hexnan+0x130>
 800f76a:	3102      	adds	r1, #2
 800f76c:	f8ca 1000 	str.w	r1, [sl]
 800f770:	f1bb 0f00 	cmp.w	fp, #0
 800f774:	d050      	beq.n	800f818 <__hexnan+0x130>
 800f776:	454c      	cmp	r4, r9
 800f778:	d206      	bcs.n	800f788 <__hexnan+0xa0>
 800f77a:	2d07      	cmp	r5, #7
 800f77c:	dc04      	bgt.n	800f788 <__hexnan+0xa0>
 800f77e:	462a      	mov	r2, r5
 800f780:	4649      	mov	r1, r9
 800f782:	4620      	mov	r0, r4
 800f784:	f7ff ff8a 	bl	800f69c <L_shift>
 800f788:	4544      	cmp	r4, r8
 800f78a:	d934      	bls.n	800f7f6 <__hexnan+0x10e>
 800f78c:	f1a8 0204 	sub.w	r2, r8, #4
 800f790:	4623      	mov	r3, r4
 800f792:	f853 1b04 	ldr.w	r1, [r3], #4
 800f796:	f842 1f04 	str.w	r1, [r2, #4]!
 800f79a:	429f      	cmp	r7, r3
 800f79c:	d2f9      	bcs.n	800f792 <__hexnan+0xaa>
 800f79e:	1b3b      	subs	r3, r7, r4
 800f7a0:	f023 0303 	bic.w	r3, r3, #3
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	3401      	adds	r4, #1
 800f7a8:	3e03      	subs	r6, #3
 800f7aa:	42b4      	cmp	r4, r6
 800f7ac:	bf88      	it	hi
 800f7ae:	2304      	movhi	r3, #4
 800f7b0:	4443      	add	r3, r8
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f843 2b04 	str.w	r2, [r3], #4
 800f7b8:	429f      	cmp	r7, r3
 800f7ba:	d2fb      	bcs.n	800f7b4 <__hexnan+0xcc>
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	b91b      	cbnz	r3, 800f7c8 <__hexnan+0xe0>
 800f7c0:	4547      	cmp	r7, r8
 800f7c2:	d127      	bne.n	800f814 <__hexnan+0x12c>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	603b      	str	r3, [r7, #0]
 800f7c8:	2005      	movs	r0, #5
 800f7ca:	e026      	b.n	800f81a <__hexnan+0x132>
 800f7cc:	3501      	adds	r5, #1
 800f7ce:	2d08      	cmp	r5, #8
 800f7d0:	f10b 0b01 	add.w	fp, fp, #1
 800f7d4:	dd06      	ble.n	800f7e4 <__hexnan+0xfc>
 800f7d6:	4544      	cmp	r4, r8
 800f7d8:	d9c3      	bls.n	800f762 <__hexnan+0x7a>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7e0:	2501      	movs	r5, #1
 800f7e2:	3c04      	subs	r4, #4
 800f7e4:	6822      	ldr	r2, [r4, #0]
 800f7e6:	f000 000f 	and.w	r0, r0, #15
 800f7ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f7ee:	6022      	str	r2, [r4, #0]
 800f7f0:	e7b7      	b.n	800f762 <__hexnan+0x7a>
 800f7f2:	2508      	movs	r5, #8
 800f7f4:	e7b5      	b.n	800f762 <__hexnan+0x7a>
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d0df      	beq.n	800f7bc <__hexnan+0xd4>
 800f7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f800:	f1c3 0320 	rsb	r3, r3, #32
 800f804:	fa22 f303 	lsr.w	r3, r2, r3
 800f808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f80c:	401a      	ands	r2, r3
 800f80e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f812:	e7d3      	b.n	800f7bc <__hexnan+0xd4>
 800f814:	3f04      	subs	r7, #4
 800f816:	e7d1      	b.n	800f7bc <__hexnan+0xd4>
 800f818:	2004      	movs	r0, #4
 800f81a:	b007      	add	sp, #28
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f820 <_localeconv_r>:
 800f820:	4800      	ldr	r0, [pc, #0]	; (800f824 <_localeconv_r+0x4>)
 800f822:	4770      	bx	lr
 800f824:	20000698 	.word	0x20000698

0800f828 <__ascii_mbtowc>:
 800f828:	b082      	sub	sp, #8
 800f82a:	b901      	cbnz	r1, 800f82e <__ascii_mbtowc+0x6>
 800f82c:	a901      	add	r1, sp, #4
 800f82e:	b142      	cbz	r2, 800f842 <__ascii_mbtowc+0x1a>
 800f830:	b14b      	cbz	r3, 800f846 <__ascii_mbtowc+0x1e>
 800f832:	7813      	ldrb	r3, [r2, #0]
 800f834:	600b      	str	r3, [r1, #0]
 800f836:	7812      	ldrb	r2, [r2, #0]
 800f838:	1e10      	subs	r0, r2, #0
 800f83a:	bf18      	it	ne
 800f83c:	2001      	movne	r0, #1
 800f83e:	b002      	add	sp, #8
 800f840:	4770      	bx	lr
 800f842:	4610      	mov	r0, r2
 800f844:	e7fb      	b.n	800f83e <__ascii_mbtowc+0x16>
 800f846:	f06f 0001 	mvn.w	r0, #1
 800f84a:	e7f8      	b.n	800f83e <__ascii_mbtowc+0x16>

0800f84c <memcpy>:
 800f84c:	440a      	add	r2, r1
 800f84e:	4291      	cmp	r1, r2
 800f850:	f100 33ff 	add.w	r3, r0, #4294967295
 800f854:	d100      	bne.n	800f858 <memcpy+0xc>
 800f856:	4770      	bx	lr
 800f858:	b510      	push	{r4, lr}
 800f85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f862:	4291      	cmp	r1, r2
 800f864:	d1f9      	bne.n	800f85a <memcpy+0xe>
 800f866:	bd10      	pop	{r4, pc}

0800f868 <__malloc_lock>:
 800f868:	4801      	ldr	r0, [pc, #4]	; (800f870 <__malloc_lock+0x8>)
 800f86a:	f000 be78 	b.w	801055e <__retarget_lock_acquire_recursive>
 800f86e:	bf00      	nop
 800f870:	20002470 	.word	0x20002470

0800f874 <__malloc_unlock>:
 800f874:	4801      	ldr	r0, [pc, #4]	; (800f87c <__malloc_unlock+0x8>)
 800f876:	f000 be73 	b.w	8010560 <__retarget_lock_release_recursive>
 800f87a:	bf00      	nop
 800f87c:	20002470 	.word	0x20002470

0800f880 <_Balloc>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f884:	4604      	mov	r4, r0
 800f886:	460d      	mov	r5, r1
 800f888:	b976      	cbnz	r6, 800f8a8 <_Balloc+0x28>
 800f88a:	2010      	movs	r0, #16
 800f88c:	f7fd fa3c 	bl	800cd08 <malloc>
 800f890:	4602      	mov	r2, r0
 800f892:	6260      	str	r0, [r4, #36]	; 0x24
 800f894:	b920      	cbnz	r0, 800f8a0 <_Balloc+0x20>
 800f896:	4b18      	ldr	r3, [pc, #96]	; (800f8f8 <_Balloc+0x78>)
 800f898:	4818      	ldr	r0, [pc, #96]	; (800f8fc <_Balloc+0x7c>)
 800f89a:	2166      	movs	r1, #102	; 0x66
 800f89c:	f000 fe2e 	bl	80104fc <__assert_func>
 800f8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a4:	6006      	str	r6, [r0, #0]
 800f8a6:	60c6      	str	r6, [r0, #12]
 800f8a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8aa:	68f3      	ldr	r3, [r6, #12]
 800f8ac:	b183      	cbz	r3, 800f8d0 <_Balloc+0x50>
 800f8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8b6:	b9b8      	cbnz	r0, 800f8e8 <_Balloc+0x68>
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f8be:	1d72      	adds	r2, r6, #5
 800f8c0:	0092      	lsls	r2, r2, #2
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 fc97 	bl	80101f6 <_calloc_r>
 800f8c8:	b160      	cbz	r0, 800f8e4 <_Balloc+0x64>
 800f8ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8ce:	e00e      	b.n	800f8ee <_Balloc+0x6e>
 800f8d0:	2221      	movs	r2, #33	; 0x21
 800f8d2:	2104      	movs	r1, #4
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f000 fc8e 	bl	80101f6 <_calloc_r>
 800f8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8dc:	60f0      	str	r0, [r6, #12]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e4      	bne.n	800f8ae <_Balloc+0x2e>
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
 800f8e8:	6802      	ldr	r2, [r0, #0]
 800f8ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8f4:	e7f7      	b.n	800f8e6 <_Balloc+0x66>
 800f8f6:	bf00      	nop
 800f8f8:	08011385 	.word	0x08011385
 800f8fc:	0801148c 	.word	0x0801148c

0800f900 <_Bfree>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f904:	4605      	mov	r5, r0
 800f906:	460c      	mov	r4, r1
 800f908:	b976      	cbnz	r6, 800f928 <_Bfree+0x28>
 800f90a:	2010      	movs	r0, #16
 800f90c:	f7fd f9fc 	bl	800cd08 <malloc>
 800f910:	4602      	mov	r2, r0
 800f912:	6268      	str	r0, [r5, #36]	; 0x24
 800f914:	b920      	cbnz	r0, 800f920 <_Bfree+0x20>
 800f916:	4b09      	ldr	r3, [pc, #36]	; (800f93c <_Bfree+0x3c>)
 800f918:	4809      	ldr	r0, [pc, #36]	; (800f940 <_Bfree+0x40>)
 800f91a:	218a      	movs	r1, #138	; 0x8a
 800f91c:	f000 fdee 	bl	80104fc <__assert_func>
 800f920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f924:	6006      	str	r6, [r0, #0]
 800f926:	60c6      	str	r6, [r0, #12]
 800f928:	b13c      	cbz	r4, 800f93a <_Bfree+0x3a>
 800f92a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f92c:	6862      	ldr	r2, [r4, #4]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f934:	6021      	str	r1, [r4, #0]
 800f936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f93a:	bd70      	pop	{r4, r5, r6, pc}
 800f93c:	08011385 	.word	0x08011385
 800f940:	0801148c 	.word	0x0801148c

0800f944 <__multadd>:
 800f944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	690e      	ldr	r6, [r1, #16]
 800f94a:	4607      	mov	r7, r0
 800f94c:	4698      	mov	r8, r3
 800f94e:	460c      	mov	r4, r1
 800f950:	f101 0014 	add.w	r0, r1, #20
 800f954:	2300      	movs	r3, #0
 800f956:	6805      	ldr	r5, [r0, #0]
 800f958:	b2a9      	uxth	r1, r5
 800f95a:	fb02 8101 	mla	r1, r2, r1, r8
 800f95e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f962:	0c2d      	lsrs	r5, r5, #16
 800f964:	fb02 c505 	mla	r5, r2, r5, ip
 800f968:	b289      	uxth	r1, r1
 800f96a:	3301      	adds	r3, #1
 800f96c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f970:	429e      	cmp	r6, r3
 800f972:	f840 1b04 	str.w	r1, [r0], #4
 800f976:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f97a:	dcec      	bgt.n	800f956 <__multadd+0x12>
 800f97c:	f1b8 0f00 	cmp.w	r8, #0
 800f980:	d022      	beq.n	800f9c8 <__multadd+0x84>
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	42b3      	cmp	r3, r6
 800f986:	dc19      	bgt.n	800f9bc <__multadd+0x78>
 800f988:	6861      	ldr	r1, [r4, #4]
 800f98a:	4638      	mov	r0, r7
 800f98c:	3101      	adds	r1, #1
 800f98e:	f7ff ff77 	bl	800f880 <_Balloc>
 800f992:	4605      	mov	r5, r0
 800f994:	b928      	cbnz	r0, 800f9a2 <__multadd+0x5e>
 800f996:	4602      	mov	r2, r0
 800f998:	4b0d      	ldr	r3, [pc, #52]	; (800f9d0 <__multadd+0x8c>)
 800f99a:	480e      	ldr	r0, [pc, #56]	; (800f9d4 <__multadd+0x90>)
 800f99c:	21b5      	movs	r1, #181	; 0xb5
 800f99e:	f000 fdad 	bl	80104fc <__assert_func>
 800f9a2:	6922      	ldr	r2, [r4, #16]
 800f9a4:	3202      	adds	r2, #2
 800f9a6:	f104 010c 	add.w	r1, r4, #12
 800f9aa:	0092      	lsls	r2, r2, #2
 800f9ac:	300c      	adds	r0, #12
 800f9ae:	f7ff ff4d 	bl	800f84c <memcpy>
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4638      	mov	r0, r7
 800f9b6:	f7ff ffa3 	bl	800f900 <_Bfree>
 800f9ba:	462c      	mov	r4, r5
 800f9bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f9c0:	3601      	adds	r6, #1
 800f9c2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f9c6:	6126      	str	r6, [r4, #16]
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ce:	bf00      	nop
 800f9d0:	080113fb 	.word	0x080113fb
 800f9d4:	0801148c 	.word	0x0801148c

0800f9d8 <__s2b>:
 800f9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9dc:	460c      	mov	r4, r1
 800f9de:	4615      	mov	r5, r2
 800f9e0:	461f      	mov	r7, r3
 800f9e2:	2209      	movs	r2, #9
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	db09      	blt.n	800fa08 <__s2b+0x30>
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7ff ff43 	bl	800f880 <_Balloc>
 800f9fa:	b940      	cbnz	r0, 800fa0e <__s2b+0x36>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	4b19      	ldr	r3, [pc, #100]	; (800fa64 <__s2b+0x8c>)
 800fa00:	4819      	ldr	r0, [pc, #100]	; (800fa68 <__s2b+0x90>)
 800fa02:	21ce      	movs	r1, #206	; 0xce
 800fa04:	f000 fd7a 	bl	80104fc <__assert_func>
 800fa08:	0052      	lsls	r2, r2, #1
 800fa0a:	3101      	adds	r1, #1
 800fa0c:	e7f0      	b.n	800f9f0 <__s2b+0x18>
 800fa0e:	9b08      	ldr	r3, [sp, #32]
 800fa10:	6143      	str	r3, [r0, #20]
 800fa12:	2d09      	cmp	r5, #9
 800fa14:	f04f 0301 	mov.w	r3, #1
 800fa18:	6103      	str	r3, [r0, #16]
 800fa1a:	dd16      	ble.n	800fa4a <__s2b+0x72>
 800fa1c:	f104 0909 	add.w	r9, r4, #9
 800fa20:	46c8      	mov	r8, r9
 800fa22:	442c      	add	r4, r5
 800fa24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa28:	4601      	mov	r1, r0
 800fa2a:	3b30      	subs	r3, #48	; 0x30
 800fa2c:	220a      	movs	r2, #10
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f7ff ff88 	bl	800f944 <__multadd>
 800fa34:	45a0      	cmp	r8, r4
 800fa36:	d1f5      	bne.n	800fa24 <__s2b+0x4c>
 800fa38:	f1a5 0408 	sub.w	r4, r5, #8
 800fa3c:	444c      	add	r4, r9
 800fa3e:	1b2d      	subs	r5, r5, r4
 800fa40:	1963      	adds	r3, r4, r5
 800fa42:	42bb      	cmp	r3, r7
 800fa44:	db04      	blt.n	800fa50 <__s2b+0x78>
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	340a      	adds	r4, #10
 800fa4c:	2509      	movs	r5, #9
 800fa4e:	e7f6      	b.n	800fa3e <__s2b+0x66>
 800fa50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa54:	4601      	mov	r1, r0
 800fa56:	3b30      	subs	r3, #48	; 0x30
 800fa58:	220a      	movs	r2, #10
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7ff ff72 	bl	800f944 <__multadd>
 800fa60:	e7ee      	b.n	800fa40 <__s2b+0x68>
 800fa62:	bf00      	nop
 800fa64:	080113fb 	.word	0x080113fb
 800fa68:	0801148c 	.word	0x0801148c

0800fa6c <__hi0bits>:
 800fa6c:	0c03      	lsrs	r3, r0, #16
 800fa6e:	041b      	lsls	r3, r3, #16
 800fa70:	b9d3      	cbnz	r3, 800faa8 <__hi0bits+0x3c>
 800fa72:	0400      	lsls	r0, r0, #16
 800fa74:	2310      	movs	r3, #16
 800fa76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fa7a:	bf04      	itt	eq
 800fa7c:	0200      	lsleq	r0, r0, #8
 800fa7e:	3308      	addeq	r3, #8
 800fa80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fa84:	bf04      	itt	eq
 800fa86:	0100      	lsleq	r0, r0, #4
 800fa88:	3304      	addeq	r3, #4
 800fa8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fa8e:	bf04      	itt	eq
 800fa90:	0080      	lsleq	r0, r0, #2
 800fa92:	3302      	addeq	r3, #2
 800fa94:	2800      	cmp	r0, #0
 800fa96:	db05      	blt.n	800faa4 <__hi0bits+0x38>
 800fa98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa9c:	f103 0301 	add.w	r3, r3, #1
 800faa0:	bf08      	it	eq
 800faa2:	2320      	moveq	r3, #32
 800faa4:	4618      	mov	r0, r3
 800faa6:	4770      	bx	lr
 800faa8:	2300      	movs	r3, #0
 800faaa:	e7e4      	b.n	800fa76 <__hi0bits+0xa>

0800faac <__lo0bits>:
 800faac:	6803      	ldr	r3, [r0, #0]
 800faae:	f013 0207 	ands.w	r2, r3, #7
 800fab2:	4601      	mov	r1, r0
 800fab4:	d00b      	beq.n	800face <__lo0bits+0x22>
 800fab6:	07da      	lsls	r2, r3, #31
 800fab8:	d424      	bmi.n	800fb04 <__lo0bits+0x58>
 800faba:	0798      	lsls	r0, r3, #30
 800fabc:	bf49      	itett	mi
 800fabe:	085b      	lsrmi	r3, r3, #1
 800fac0:	089b      	lsrpl	r3, r3, #2
 800fac2:	2001      	movmi	r0, #1
 800fac4:	600b      	strmi	r3, [r1, #0]
 800fac6:	bf5c      	itt	pl
 800fac8:	600b      	strpl	r3, [r1, #0]
 800faca:	2002      	movpl	r0, #2
 800facc:	4770      	bx	lr
 800face:	b298      	uxth	r0, r3
 800fad0:	b9b0      	cbnz	r0, 800fb00 <__lo0bits+0x54>
 800fad2:	0c1b      	lsrs	r3, r3, #16
 800fad4:	2010      	movs	r0, #16
 800fad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fada:	bf04      	itt	eq
 800fadc:	0a1b      	lsreq	r3, r3, #8
 800fade:	3008      	addeq	r0, #8
 800fae0:	071a      	lsls	r2, r3, #28
 800fae2:	bf04      	itt	eq
 800fae4:	091b      	lsreq	r3, r3, #4
 800fae6:	3004      	addeq	r0, #4
 800fae8:	079a      	lsls	r2, r3, #30
 800faea:	bf04      	itt	eq
 800faec:	089b      	lsreq	r3, r3, #2
 800faee:	3002      	addeq	r0, #2
 800faf0:	07da      	lsls	r2, r3, #31
 800faf2:	d403      	bmi.n	800fafc <__lo0bits+0x50>
 800faf4:	085b      	lsrs	r3, r3, #1
 800faf6:	f100 0001 	add.w	r0, r0, #1
 800fafa:	d005      	beq.n	800fb08 <__lo0bits+0x5c>
 800fafc:	600b      	str	r3, [r1, #0]
 800fafe:	4770      	bx	lr
 800fb00:	4610      	mov	r0, r2
 800fb02:	e7e8      	b.n	800fad6 <__lo0bits+0x2a>
 800fb04:	2000      	movs	r0, #0
 800fb06:	4770      	bx	lr
 800fb08:	2020      	movs	r0, #32
 800fb0a:	4770      	bx	lr

0800fb0c <__i2b>:
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	460c      	mov	r4, r1
 800fb10:	2101      	movs	r1, #1
 800fb12:	f7ff feb5 	bl	800f880 <_Balloc>
 800fb16:	4602      	mov	r2, r0
 800fb18:	b928      	cbnz	r0, 800fb26 <__i2b+0x1a>
 800fb1a:	4b05      	ldr	r3, [pc, #20]	; (800fb30 <__i2b+0x24>)
 800fb1c:	4805      	ldr	r0, [pc, #20]	; (800fb34 <__i2b+0x28>)
 800fb1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb22:	f000 fceb 	bl	80104fc <__assert_func>
 800fb26:	2301      	movs	r3, #1
 800fb28:	6144      	str	r4, [r0, #20]
 800fb2a:	6103      	str	r3, [r0, #16]
 800fb2c:	bd10      	pop	{r4, pc}
 800fb2e:	bf00      	nop
 800fb30:	080113fb 	.word	0x080113fb
 800fb34:	0801148c 	.word	0x0801148c

0800fb38 <__multiply>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	690a      	ldr	r2, [r1, #16]
 800fb40:	6923      	ldr	r3, [r4, #16]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	bfb8      	it	lt
 800fb46:	460b      	movlt	r3, r1
 800fb48:	460d      	mov	r5, r1
 800fb4a:	bfbc      	itt	lt
 800fb4c:	4625      	movlt	r5, r4
 800fb4e:	461c      	movlt	r4, r3
 800fb50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fb54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb58:	68ab      	ldr	r3, [r5, #8]
 800fb5a:	6869      	ldr	r1, [r5, #4]
 800fb5c:	eb0a 0709 	add.w	r7, sl, r9
 800fb60:	42bb      	cmp	r3, r7
 800fb62:	b085      	sub	sp, #20
 800fb64:	bfb8      	it	lt
 800fb66:	3101      	addlt	r1, #1
 800fb68:	f7ff fe8a 	bl	800f880 <_Balloc>
 800fb6c:	b930      	cbnz	r0, 800fb7c <__multiply+0x44>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	4b42      	ldr	r3, [pc, #264]	; (800fc7c <__multiply+0x144>)
 800fb72:	4843      	ldr	r0, [pc, #268]	; (800fc80 <__multiply+0x148>)
 800fb74:	f240 115d 	movw	r1, #349	; 0x15d
 800fb78:	f000 fcc0 	bl	80104fc <__assert_func>
 800fb7c:	f100 0614 	add.w	r6, r0, #20
 800fb80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fb84:	4633      	mov	r3, r6
 800fb86:	2200      	movs	r2, #0
 800fb88:	4543      	cmp	r3, r8
 800fb8a:	d31e      	bcc.n	800fbca <__multiply+0x92>
 800fb8c:	f105 0c14 	add.w	ip, r5, #20
 800fb90:	f104 0314 	add.w	r3, r4, #20
 800fb94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fb98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fb9c:	9202      	str	r2, [sp, #8]
 800fb9e:	ebac 0205 	sub.w	r2, ip, r5
 800fba2:	3a15      	subs	r2, #21
 800fba4:	f022 0203 	bic.w	r2, r2, #3
 800fba8:	3204      	adds	r2, #4
 800fbaa:	f105 0115 	add.w	r1, r5, #21
 800fbae:	458c      	cmp	ip, r1
 800fbb0:	bf38      	it	cc
 800fbb2:	2204      	movcc	r2, #4
 800fbb4:	9201      	str	r2, [sp, #4]
 800fbb6:	9a02      	ldr	r2, [sp, #8]
 800fbb8:	9303      	str	r3, [sp, #12]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d808      	bhi.n	800fbd0 <__multiply+0x98>
 800fbbe:	2f00      	cmp	r7, #0
 800fbc0:	dc55      	bgt.n	800fc6e <__multiply+0x136>
 800fbc2:	6107      	str	r7, [r0, #16]
 800fbc4:	b005      	add	sp, #20
 800fbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbca:	f843 2b04 	str.w	r2, [r3], #4
 800fbce:	e7db      	b.n	800fb88 <__multiply+0x50>
 800fbd0:	f8b3 a000 	ldrh.w	sl, [r3]
 800fbd4:	f1ba 0f00 	cmp.w	sl, #0
 800fbd8:	d020      	beq.n	800fc1c <__multiply+0xe4>
 800fbda:	f105 0e14 	add.w	lr, r5, #20
 800fbde:	46b1      	mov	r9, r6
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fbe6:	f8d9 b000 	ldr.w	fp, [r9]
 800fbea:	b2a1      	uxth	r1, r4
 800fbec:	fa1f fb8b 	uxth.w	fp, fp
 800fbf0:	fb0a b101 	mla	r1, sl, r1, fp
 800fbf4:	4411      	add	r1, r2
 800fbf6:	f8d9 2000 	ldr.w	r2, [r9]
 800fbfa:	0c24      	lsrs	r4, r4, #16
 800fbfc:	0c12      	lsrs	r2, r2, #16
 800fbfe:	fb0a 2404 	mla	r4, sl, r4, r2
 800fc02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fc06:	b289      	uxth	r1, r1
 800fc08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fc0c:	45f4      	cmp	ip, lr
 800fc0e:	f849 1b04 	str.w	r1, [r9], #4
 800fc12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fc16:	d8e4      	bhi.n	800fbe2 <__multiply+0xaa>
 800fc18:	9901      	ldr	r1, [sp, #4]
 800fc1a:	5072      	str	r2, [r6, r1]
 800fc1c:	9a03      	ldr	r2, [sp, #12]
 800fc1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc22:	3304      	adds	r3, #4
 800fc24:	f1b9 0f00 	cmp.w	r9, #0
 800fc28:	d01f      	beq.n	800fc6a <__multiply+0x132>
 800fc2a:	6834      	ldr	r4, [r6, #0]
 800fc2c:	f105 0114 	add.w	r1, r5, #20
 800fc30:	46b6      	mov	lr, r6
 800fc32:	f04f 0a00 	mov.w	sl, #0
 800fc36:	880a      	ldrh	r2, [r1, #0]
 800fc38:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fc3c:	fb09 b202 	mla	r2, r9, r2, fp
 800fc40:	4492      	add	sl, r2
 800fc42:	b2a4      	uxth	r4, r4
 800fc44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fc48:	f84e 4b04 	str.w	r4, [lr], #4
 800fc4c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fc50:	f8be 2000 	ldrh.w	r2, [lr]
 800fc54:	0c24      	lsrs	r4, r4, #16
 800fc56:	fb09 2404 	mla	r4, r9, r4, r2
 800fc5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fc5e:	458c      	cmp	ip, r1
 800fc60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc64:	d8e7      	bhi.n	800fc36 <__multiply+0xfe>
 800fc66:	9a01      	ldr	r2, [sp, #4]
 800fc68:	50b4      	str	r4, [r6, r2]
 800fc6a:	3604      	adds	r6, #4
 800fc6c:	e7a3      	b.n	800fbb6 <__multiply+0x7e>
 800fc6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1a5      	bne.n	800fbc2 <__multiply+0x8a>
 800fc76:	3f01      	subs	r7, #1
 800fc78:	e7a1      	b.n	800fbbe <__multiply+0x86>
 800fc7a:	bf00      	nop
 800fc7c:	080113fb 	.word	0x080113fb
 800fc80:	0801148c 	.word	0x0801148c

0800fc84 <__pow5mult>:
 800fc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc88:	4615      	mov	r5, r2
 800fc8a:	f012 0203 	ands.w	r2, r2, #3
 800fc8e:	4606      	mov	r6, r0
 800fc90:	460f      	mov	r7, r1
 800fc92:	d007      	beq.n	800fca4 <__pow5mult+0x20>
 800fc94:	4c25      	ldr	r4, [pc, #148]	; (800fd2c <__pow5mult+0xa8>)
 800fc96:	3a01      	subs	r2, #1
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc9e:	f7ff fe51 	bl	800f944 <__multadd>
 800fca2:	4607      	mov	r7, r0
 800fca4:	10ad      	asrs	r5, r5, #2
 800fca6:	d03d      	beq.n	800fd24 <__pow5mult+0xa0>
 800fca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fcaa:	b97c      	cbnz	r4, 800fccc <__pow5mult+0x48>
 800fcac:	2010      	movs	r0, #16
 800fcae:	f7fd f82b 	bl	800cd08 <malloc>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	6270      	str	r0, [r6, #36]	; 0x24
 800fcb6:	b928      	cbnz	r0, 800fcc4 <__pow5mult+0x40>
 800fcb8:	4b1d      	ldr	r3, [pc, #116]	; (800fd30 <__pow5mult+0xac>)
 800fcba:	481e      	ldr	r0, [pc, #120]	; (800fd34 <__pow5mult+0xb0>)
 800fcbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fcc0:	f000 fc1c 	bl	80104fc <__assert_func>
 800fcc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcc8:	6004      	str	r4, [r0, #0]
 800fcca:	60c4      	str	r4, [r0, #12]
 800fccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fcd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcd4:	b94c      	cbnz	r4, 800fcea <__pow5mult+0x66>
 800fcd6:	f240 2171 	movw	r1, #625	; 0x271
 800fcda:	4630      	mov	r0, r6
 800fcdc:	f7ff ff16 	bl	800fb0c <__i2b>
 800fce0:	2300      	movs	r3, #0
 800fce2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fce6:	4604      	mov	r4, r0
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	f04f 0900 	mov.w	r9, #0
 800fcee:	07eb      	lsls	r3, r5, #31
 800fcf0:	d50a      	bpl.n	800fd08 <__pow5mult+0x84>
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4622      	mov	r2, r4
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	f7ff ff1e 	bl	800fb38 <__multiply>
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	4680      	mov	r8, r0
 800fd00:	4630      	mov	r0, r6
 800fd02:	f7ff fdfd 	bl	800f900 <_Bfree>
 800fd06:	4647      	mov	r7, r8
 800fd08:	106d      	asrs	r5, r5, #1
 800fd0a:	d00b      	beq.n	800fd24 <__pow5mult+0xa0>
 800fd0c:	6820      	ldr	r0, [r4, #0]
 800fd0e:	b938      	cbnz	r0, 800fd20 <__pow5mult+0x9c>
 800fd10:	4622      	mov	r2, r4
 800fd12:	4621      	mov	r1, r4
 800fd14:	4630      	mov	r0, r6
 800fd16:	f7ff ff0f 	bl	800fb38 <__multiply>
 800fd1a:	6020      	str	r0, [r4, #0]
 800fd1c:	f8c0 9000 	str.w	r9, [r0]
 800fd20:	4604      	mov	r4, r0
 800fd22:	e7e4      	b.n	800fcee <__pow5mult+0x6a>
 800fd24:	4638      	mov	r0, r7
 800fd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd2a:	bf00      	nop
 800fd2c:	080115e0 	.word	0x080115e0
 800fd30:	08011385 	.word	0x08011385
 800fd34:	0801148c 	.word	0x0801148c

0800fd38 <__lshift>:
 800fd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	6849      	ldr	r1, [r1, #4]
 800fd40:	6923      	ldr	r3, [r4, #16]
 800fd42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	4607      	mov	r7, r0
 800fd4a:	4691      	mov	r9, r2
 800fd4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd50:	f108 0601 	add.w	r6, r8, #1
 800fd54:	42b3      	cmp	r3, r6
 800fd56:	db0b      	blt.n	800fd70 <__lshift+0x38>
 800fd58:	4638      	mov	r0, r7
 800fd5a:	f7ff fd91 	bl	800f880 <_Balloc>
 800fd5e:	4605      	mov	r5, r0
 800fd60:	b948      	cbnz	r0, 800fd76 <__lshift+0x3e>
 800fd62:	4602      	mov	r2, r0
 800fd64:	4b28      	ldr	r3, [pc, #160]	; (800fe08 <__lshift+0xd0>)
 800fd66:	4829      	ldr	r0, [pc, #164]	; (800fe0c <__lshift+0xd4>)
 800fd68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fd6c:	f000 fbc6 	bl	80104fc <__assert_func>
 800fd70:	3101      	adds	r1, #1
 800fd72:	005b      	lsls	r3, r3, #1
 800fd74:	e7ee      	b.n	800fd54 <__lshift+0x1c>
 800fd76:	2300      	movs	r3, #0
 800fd78:	f100 0114 	add.w	r1, r0, #20
 800fd7c:	f100 0210 	add.w	r2, r0, #16
 800fd80:	4618      	mov	r0, r3
 800fd82:	4553      	cmp	r3, sl
 800fd84:	db33      	blt.n	800fdee <__lshift+0xb6>
 800fd86:	6920      	ldr	r0, [r4, #16]
 800fd88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd8c:	f104 0314 	add.w	r3, r4, #20
 800fd90:	f019 091f 	ands.w	r9, r9, #31
 800fd94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd9c:	d02b      	beq.n	800fdf6 <__lshift+0xbe>
 800fd9e:	f1c9 0e20 	rsb	lr, r9, #32
 800fda2:	468a      	mov	sl, r1
 800fda4:	2200      	movs	r2, #0
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	fa00 f009 	lsl.w	r0, r0, r9
 800fdac:	4302      	orrs	r2, r0
 800fdae:	f84a 2b04 	str.w	r2, [sl], #4
 800fdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdb6:	459c      	cmp	ip, r3
 800fdb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdbc:	d8f3      	bhi.n	800fda6 <__lshift+0x6e>
 800fdbe:	ebac 0304 	sub.w	r3, ip, r4
 800fdc2:	3b15      	subs	r3, #21
 800fdc4:	f023 0303 	bic.w	r3, r3, #3
 800fdc8:	3304      	adds	r3, #4
 800fdca:	f104 0015 	add.w	r0, r4, #21
 800fdce:	4584      	cmp	ip, r0
 800fdd0:	bf38      	it	cc
 800fdd2:	2304      	movcc	r3, #4
 800fdd4:	50ca      	str	r2, [r1, r3]
 800fdd6:	b10a      	cbz	r2, 800fddc <__lshift+0xa4>
 800fdd8:	f108 0602 	add.w	r6, r8, #2
 800fddc:	3e01      	subs	r6, #1
 800fdde:	4638      	mov	r0, r7
 800fde0:	612e      	str	r6, [r5, #16]
 800fde2:	4621      	mov	r1, r4
 800fde4:	f7ff fd8c 	bl	800f900 <_Bfree>
 800fde8:	4628      	mov	r0, r5
 800fdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdee:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	e7c5      	b.n	800fd82 <__lshift+0x4a>
 800fdf6:	3904      	subs	r1, #4
 800fdf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe00:	459c      	cmp	ip, r3
 800fe02:	d8f9      	bhi.n	800fdf8 <__lshift+0xc0>
 800fe04:	e7ea      	b.n	800fddc <__lshift+0xa4>
 800fe06:	bf00      	nop
 800fe08:	080113fb 	.word	0x080113fb
 800fe0c:	0801148c 	.word	0x0801148c

0800fe10 <__mcmp>:
 800fe10:	b530      	push	{r4, r5, lr}
 800fe12:	6902      	ldr	r2, [r0, #16]
 800fe14:	690c      	ldr	r4, [r1, #16]
 800fe16:	1b12      	subs	r2, r2, r4
 800fe18:	d10e      	bne.n	800fe38 <__mcmp+0x28>
 800fe1a:	f100 0314 	add.w	r3, r0, #20
 800fe1e:	3114      	adds	r1, #20
 800fe20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe30:	42a5      	cmp	r5, r4
 800fe32:	d003      	beq.n	800fe3c <__mcmp+0x2c>
 800fe34:	d305      	bcc.n	800fe42 <__mcmp+0x32>
 800fe36:	2201      	movs	r2, #1
 800fe38:	4610      	mov	r0, r2
 800fe3a:	bd30      	pop	{r4, r5, pc}
 800fe3c:	4283      	cmp	r3, r0
 800fe3e:	d3f3      	bcc.n	800fe28 <__mcmp+0x18>
 800fe40:	e7fa      	b.n	800fe38 <__mcmp+0x28>
 800fe42:	f04f 32ff 	mov.w	r2, #4294967295
 800fe46:	e7f7      	b.n	800fe38 <__mcmp+0x28>

0800fe48 <__mdiff>:
 800fe48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	460c      	mov	r4, r1
 800fe4e:	4606      	mov	r6, r0
 800fe50:	4611      	mov	r1, r2
 800fe52:	4620      	mov	r0, r4
 800fe54:	4617      	mov	r7, r2
 800fe56:	f7ff ffdb 	bl	800fe10 <__mcmp>
 800fe5a:	1e05      	subs	r5, r0, #0
 800fe5c:	d110      	bne.n	800fe80 <__mdiff+0x38>
 800fe5e:	4629      	mov	r1, r5
 800fe60:	4630      	mov	r0, r6
 800fe62:	f7ff fd0d 	bl	800f880 <_Balloc>
 800fe66:	b930      	cbnz	r0, 800fe76 <__mdiff+0x2e>
 800fe68:	4b39      	ldr	r3, [pc, #228]	; (800ff50 <__mdiff+0x108>)
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	f240 2132 	movw	r1, #562	; 0x232
 800fe70:	4838      	ldr	r0, [pc, #224]	; (800ff54 <__mdiff+0x10c>)
 800fe72:	f000 fb43 	bl	80104fc <__assert_func>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe80:	bfa4      	itt	ge
 800fe82:	463b      	movge	r3, r7
 800fe84:	4627      	movge	r7, r4
 800fe86:	4630      	mov	r0, r6
 800fe88:	6879      	ldr	r1, [r7, #4]
 800fe8a:	bfa6      	itte	ge
 800fe8c:	461c      	movge	r4, r3
 800fe8e:	2500      	movge	r5, #0
 800fe90:	2501      	movlt	r5, #1
 800fe92:	f7ff fcf5 	bl	800f880 <_Balloc>
 800fe96:	b920      	cbnz	r0, 800fea2 <__mdiff+0x5a>
 800fe98:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <__mdiff+0x108>)
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fea0:	e7e6      	b.n	800fe70 <__mdiff+0x28>
 800fea2:	693e      	ldr	r6, [r7, #16]
 800fea4:	60c5      	str	r5, [r0, #12]
 800fea6:	6925      	ldr	r5, [r4, #16]
 800fea8:	f107 0114 	add.w	r1, r7, #20
 800feac:	f104 0914 	add.w	r9, r4, #20
 800feb0:	f100 0e14 	add.w	lr, r0, #20
 800feb4:	f107 0210 	add.w	r2, r7, #16
 800feb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800febc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fec0:	46f2      	mov	sl, lr
 800fec2:	2700      	movs	r7, #0
 800fec4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fecc:	fa1f f883 	uxth.w	r8, r3
 800fed0:	fa17 f78b 	uxtah	r7, r7, fp
 800fed4:	0c1b      	lsrs	r3, r3, #16
 800fed6:	eba7 0808 	sub.w	r8, r7, r8
 800feda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fee2:	fa1f f888 	uxth.w	r8, r8
 800fee6:	141f      	asrs	r7, r3, #16
 800fee8:	454d      	cmp	r5, r9
 800feea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800feee:	f84a 3b04 	str.w	r3, [sl], #4
 800fef2:	d8e7      	bhi.n	800fec4 <__mdiff+0x7c>
 800fef4:	1b2b      	subs	r3, r5, r4
 800fef6:	3b15      	subs	r3, #21
 800fef8:	f023 0303 	bic.w	r3, r3, #3
 800fefc:	3304      	adds	r3, #4
 800fefe:	3415      	adds	r4, #21
 800ff00:	42a5      	cmp	r5, r4
 800ff02:	bf38      	it	cc
 800ff04:	2304      	movcc	r3, #4
 800ff06:	4419      	add	r1, r3
 800ff08:	4473      	add	r3, lr
 800ff0a:	469e      	mov	lr, r3
 800ff0c:	460d      	mov	r5, r1
 800ff0e:	4565      	cmp	r5, ip
 800ff10:	d30e      	bcc.n	800ff30 <__mdiff+0xe8>
 800ff12:	f10c 0203 	add.w	r2, ip, #3
 800ff16:	1a52      	subs	r2, r2, r1
 800ff18:	f022 0203 	bic.w	r2, r2, #3
 800ff1c:	3903      	subs	r1, #3
 800ff1e:	458c      	cmp	ip, r1
 800ff20:	bf38      	it	cc
 800ff22:	2200      	movcc	r2, #0
 800ff24:	441a      	add	r2, r3
 800ff26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff2a:	b17b      	cbz	r3, 800ff4c <__mdiff+0x104>
 800ff2c:	6106      	str	r6, [r0, #16]
 800ff2e:	e7a5      	b.n	800fe7c <__mdiff+0x34>
 800ff30:	f855 8b04 	ldr.w	r8, [r5], #4
 800ff34:	fa17 f488 	uxtah	r4, r7, r8
 800ff38:	1422      	asrs	r2, r4, #16
 800ff3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ff3e:	b2a4      	uxth	r4, r4
 800ff40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ff44:	f84e 4b04 	str.w	r4, [lr], #4
 800ff48:	1417      	asrs	r7, r2, #16
 800ff4a:	e7e0      	b.n	800ff0e <__mdiff+0xc6>
 800ff4c:	3e01      	subs	r6, #1
 800ff4e:	e7ea      	b.n	800ff26 <__mdiff+0xde>
 800ff50:	080113fb 	.word	0x080113fb
 800ff54:	0801148c 	.word	0x0801148c

0800ff58 <__ulp>:
 800ff58:	b082      	sub	sp, #8
 800ff5a:	ed8d 0b00 	vstr	d0, [sp]
 800ff5e:	9b01      	ldr	r3, [sp, #4]
 800ff60:	4912      	ldr	r1, [pc, #72]	; (800ffac <__ulp+0x54>)
 800ff62:	4019      	ands	r1, r3
 800ff64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ff68:	2900      	cmp	r1, #0
 800ff6a:	dd05      	ble.n	800ff78 <__ulp+0x20>
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	ec43 2b10 	vmov	d0, r2, r3
 800ff74:	b002      	add	sp, #8
 800ff76:	4770      	bx	lr
 800ff78:	4249      	negs	r1, r1
 800ff7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ff7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ff82:	f04f 0200 	mov.w	r2, #0
 800ff86:	f04f 0300 	mov.w	r3, #0
 800ff8a:	da04      	bge.n	800ff96 <__ulp+0x3e>
 800ff8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff90:	fa41 f300 	asr.w	r3, r1, r0
 800ff94:	e7ec      	b.n	800ff70 <__ulp+0x18>
 800ff96:	f1a0 0114 	sub.w	r1, r0, #20
 800ff9a:	291e      	cmp	r1, #30
 800ff9c:	bfda      	itte	le
 800ff9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ffa2:	fa20 f101 	lsrle.w	r1, r0, r1
 800ffa6:	2101      	movgt	r1, #1
 800ffa8:	460a      	mov	r2, r1
 800ffaa:	e7e1      	b.n	800ff70 <__ulp+0x18>
 800ffac:	7ff00000 	.word	0x7ff00000

0800ffb0 <__b2d>:
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb2:	6905      	ldr	r5, [r0, #16]
 800ffb4:	f100 0714 	add.w	r7, r0, #20
 800ffb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ffbc:	1f2e      	subs	r6, r5, #4
 800ffbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f7ff fd52 	bl	800fa6c <__hi0bits>
 800ffc8:	f1c0 0320 	rsb	r3, r0, #32
 800ffcc:	280a      	cmp	r0, #10
 800ffce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801004c <__b2d+0x9c>
 800ffd2:	600b      	str	r3, [r1, #0]
 800ffd4:	dc14      	bgt.n	8010000 <__b2d+0x50>
 800ffd6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ffda:	fa24 f10e 	lsr.w	r1, r4, lr
 800ffde:	42b7      	cmp	r7, r6
 800ffe0:	ea41 030c 	orr.w	r3, r1, ip
 800ffe4:	bf34      	ite	cc
 800ffe6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ffea:	2100      	movcs	r1, #0
 800ffec:	3015      	adds	r0, #21
 800ffee:	fa04 f000 	lsl.w	r0, r4, r0
 800fff2:	fa21 f10e 	lsr.w	r1, r1, lr
 800fff6:	ea40 0201 	orr.w	r2, r0, r1
 800fffa:	ec43 2b10 	vmov	d0, r2, r3
 800fffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010000:	42b7      	cmp	r7, r6
 8010002:	bf3a      	itte	cc
 8010004:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010008:	f1a5 0608 	subcc.w	r6, r5, #8
 801000c:	2100      	movcs	r1, #0
 801000e:	380b      	subs	r0, #11
 8010010:	d017      	beq.n	8010042 <__b2d+0x92>
 8010012:	f1c0 0c20 	rsb	ip, r0, #32
 8010016:	fa04 f500 	lsl.w	r5, r4, r0
 801001a:	42be      	cmp	r6, r7
 801001c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010020:	ea45 0504 	orr.w	r5, r5, r4
 8010024:	bf8c      	ite	hi
 8010026:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801002a:	2400      	movls	r4, #0
 801002c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010030:	fa01 f000 	lsl.w	r0, r1, r0
 8010034:	fa24 f40c 	lsr.w	r4, r4, ip
 8010038:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801003c:	ea40 0204 	orr.w	r2, r0, r4
 8010040:	e7db      	b.n	800fffa <__b2d+0x4a>
 8010042:	ea44 030c 	orr.w	r3, r4, ip
 8010046:	460a      	mov	r2, r1
 8010048:	e7d7      	b.n	800fffa <__b2d+0x4a>
 801004a:	bf00      	nop
 801004c:	3ff00000 	.word	0x3ff00000

08010050 <__d2b>:
 8010050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010054:	4689      	mov	r9, r1
 8010056:	2101      	movs	r1, #1
 8010058:	ec57 6b10 	vmov	r6, r7, d0
 801005c:	4690      	mov	r8, r2
 801005e:	f7ff fc0f 	bl	800f880 <_Balloc>
 8010062:	4604      	mov	r4, r0
 8010064:	b930      	cbnz	r0, 8010074 <__d2b+0x24>
 8010066:	4602      	mov	r2, r0
 8010068:	4b25      	ldr	r3, [pc, #148]	; (8010100 <__d2b+0xb0>)
 801006a:	4826      	ldr	r0, [pc, #152]	; (8010104 <__d2b+0xb4>)
 801006c:	f240 310a 	movw	r1, #778	; 0x30a
 8010070:	f000 fa44 	bl	80104fc <__assert_func>
 8010074:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801007c:	bb35      	cbnz	r5, 80100cc <__d2b+0x7c>
 801007e:	2e00      	cmp	r6, #0
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	d028      	beq.n	80100d6 <__d2b+0x86>
 8010084:	4668      	mov	r0, sp
 8010086:	9600      	str	r6, [sp, #0]
 8010088:	f7ff fd10 	bl	800faac <__lo0bits>
 801008c:	9900      	ldr	r1, [sp, #0]
 801008e:	b300      	cbz	r0, 80100d2 <__d2b+0x82>
 8010090:	9a01      	ldr	r2, [sp, #4]
 8010092:	f1c0 0320 	rsb	r3, r0, #32
 8010096:	fa02 f303 	lsl.w	r3, r2, r3
 801009a:	430b      	orrs	r3, r1
 801009c:	40c2      	lsrs	r2, r0
 801009e:	6163      	str	r3, [r4, #20]
 80100a0:	9201      	str	r2, [sp, #4]
 80100a2:	9b01      	ldr	r3, [sp, #4]
 80100a4:	61a3      	str	r3, [r4, #24]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	bf14      	ite	ne
 80100aa:	2202      	movne	r2, #2
 80100ac:	2201      	moveq	r2, #1
 80100ae:	6122      	str	r2, [r4, #16]
 80100b0:	b1d5      	cbz	r5, 80100e8 <__d2b+0x98>
 80100b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80100b6:	4405      	add	r5, r0
 80100b8:	f8c9 5000 	str.w	r5, [r9]
 80100bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80100c0:	f8c8 0000 	str.w	r0, [r8]
 80100c4:	4620      	mov	r0, r4
 80100c6:	b003      	add	sp, #12
 80100c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100d0:	e7d5      	b.n	801007e <__d2b+0x2e>
 80100d2:	6161      	str	r1, [r4, #20]
 80100d4:	e7e5      	b.n	80100a2 <__d2b+0x52>
 80100d6:	a801      	add	r0, sp, #4
 80100d8:	f7ff fce8 	bl	800faac <__lo0bits>
 80100dc:	9b01      	ldr	r3, [sp, #4]
 80100de:	6163      	str	r3, [r4, #20]
 80100e0:	2201      	movs	r2, #1
 80100e2:	6122      	str	r2, [r4, #16]
 80100e4:	3020      	adds	r0, #32
 80100e6:	e7e3      	b.n	80100b0 <__d2b+0x60>
 80100e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100f0:	f8c9 0000 	str.w	r0, [r9]
 80100f4:	6918      	ldr	r0, [r3, #16]
 80100f6:	f7ff fcb9 	bl	800fa6c <__hi0bits>
 80100fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100fe:	e7df      	b.n	80100c0 <__d2b+0x70>
 8010100:	080113fb 	.word	0x080113fb
 8010104:	0801148c 	.word	0x0801148c

08010108 <__ratio>:
 8010108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010c:	4688      	mov	r8, r1
 801010e:	4669      	mov	r1, sp
 8010110:	4681      	mov	r9, r0
 8010112:	f7ff ff4d 	bl	800ffb0 <__b2d>
 8010116:	a901      	add	r1, sp, #4
 8010118:	4640      	mov	r0, r8
 801011a:	ec55 4b10 	vmov	r4, r5, d0
 801011e:	f7ff ff47 	bl	800ffb0 <__b2d>
 8010122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010126:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801012a:	eba3 0c02 	sub.w	ip, r3, r2
 801012e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010138:	ec51 0b10 	vmov	r0, r1, d0
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfd6      	itet	le
 8010140:	460a      	movle	r2, r1
 8010142:	462a      	movgt	r2, r5
 8010144:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010148:	468b      	mov	fp, r1
 801014a:	462f      	mov	r7, r5
 801014c:	bfd4      	ite	le
 801014e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010152:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010156:	4620      	mov	r0, r4
 8010158:	ee10 2a10 	vmov	r2, s0
 801015c:	465b      	mov	r3, fp
 801015e:	4639      	mov	r1, r7
 8010160:	f7f0 fb74 	bl	800084c <__aeabi_ddiv>
 8010164:	ec41 0b10 	vmov	d0, r0, r1
 8010168:	b003      	add	sp, #12
 801016a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801016e <__copybits>:
 801016e:	3901      	subs	r1, #1
 8010170:	b570      	push	{r4, r5, r6, lr}
 8010172:	1149      	asrs	r1, r1, #5
 8010174:	6914      	ldr	r4, [r2, #16]
 8010176:	3101      	adds	r1, #1
 8010178:	f102 0314 	add.w	r3, r2, #20
 801017c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010180:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010184:	1f05      	subs	r5, r0, #4
 8010186:	42a3      	cmp	r3, r4
 8010188:	d30c      	bcc.n	80101a4 <__copybits+0x36>
 801018a:	1aa3      	subs	r3, r4, r2
 801018c:	3b11      	subs	r3, #17
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	3211      	adds	r2, #17
 8010194:	42a2      	cmp	r2, r4
 8010196:	bf88      	it	hi
 8010198:	2300      	movhi	r3, #0
 801019a:	4418      	add	r0, r3
 801019c:	2300      	movs	r3, #0
 801019e:	4288      	cmp	r0, r1
 80101a0:	d305      	bcc.n	80101ae <__copybits+0x40>
 80101a2:	bd70      	pop	{r4, r5, r6, pc}
 80101a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80101a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80101ac:	e7eb      	b.n	8010186 <__copybits+0x18>
 80101ae:	f840 3b04 	str.w	r3, [r0], #4
 80101b2:	e7f4      	b.n	801019e <__copybits+0x30>

080101b4 <__any_on>:
 80101b4:	f100 0214 	add.w	r2, r0, #20
 80101b8:	6900      	ldr	r0, [r0, #16]
 80101ba:	114b      	asrs	r3, r1, #5
 80101bc:	4298      	cmp	r0, r3
 80101be:	b510      	push	{r4, lr}
 80101c0:	db11      	blt.n	80101e6 <__any_on+0x32>
 80101c2:	dd0a      	ble.n	80101da <__any_on+0x26>
 80101c4:	f011 011f 	ands.w	r1, r1, #31
 80101c8:	d007      	beq.n	80101da <__any_on+0x26>
 80101ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101ce:	fa24 f001 	lsr.w	r0, r4, r1
 80101d2:	fa00 f101 	lsl.w	r1, r0, r1
 80101d6:	428c      	cmp	r4, r1
 80101d8:	d10b      	bne.n	80101f2 <__any_on+0x3e>
 80101da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101de:	4293      	cmp	r3, r2
 80101e0:	d803      	bhi.n	80101ea <__any_on+0x36>
 80101e2:	2000      	movs	r0, #0
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	4603      	mov	r3, r0
 80101e8:	e7f7      	b.n	80101da <__any_on+0x26>
 80101ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ee:	2900      	cmp	r1, #0
 80101f0:	d0f5      	beq.n	80101de <__any_on+0x2a>
 80101f2:	2001      	movs	r0, #1
 80101f4:	e7f6      	b.n	80101e4 <__any_on+0x30>

080101f6 <_calloc_r>:
 80101f6:	b513      	push	{r0, r1, r4, lr}
 80101f8:	434a      	muls	r2, r1
 80101fa:	4611      	mov	r1, r2
 80101fc:	9201      	str	r2, [sp, #4]
 80101fe:	f7fc fdeb 	bl	800cdd8 <_malloc_r>
 8010202:	4604      	mov	r4, r0
 8010204:	b118      	cbz	r0, 801020e <_calloc_r+0x18>
 8010206:	9a01      	ldr	r2, [sp, #4]
 8010208:	2100      	movs	r1, #0
 801020a:	f7fc fd8d 	bl	800cd28 <memset>
 801020e:	4620      	mov	r0, r4
 8010210:	b002      	add	sp, #8
 8010212:	bd10      	pop	{r4, pc}

08010214 <__ssputs_r>:
 8010214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	688e      	ldr	r6, [r1, #8]
 801021a:	429e      	cmp	r6, r3
 801021c:	4682      	mov	sl, r0
 801021e:	460c      	mov	r4, r1
 8010220:	4690      	mov	r8, r2
 8010222:	461f      	mov	r7, r3
 8010224:	d838      	bhi.n	8010298 <__ssputs_r+0x84>
 8010226:	898a      	ldrh	r2, [r1, #12]
 8010228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801022c:	d032      	beq.n	8010294 <__ssputs_r+0x80>
 801022e:	6825      	ldr	r5, [r4, #0]
 8010230:	6909      	ldr	r1, [r1, #16]
 8010232:	eba5 0901 	sub.w	r9, r5, r1
 8010236:	6965      	ldr	r5, [r4, #20]
 8010238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801023c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010240:	3301      	adds	r3, #1
 8010242:	444b      	add	r3, r9
 8010244:	106d      	asrs	r5, r5, #1
 8010246:	429d      	cmp	r5, r3
 8010248:	bf38      	it	cc
 801024a:	461d      	movcc	r5, r3
 801024c:	0553      	lsls	r3, r2, #21
 801024e:	d531      	bpl.n	80102b4 <__ssputs_r+0xa0>
 8010250:	4629      	mov	r1, r5
 8010252:	f7fc fdc1 	bl	800cdd8 <_malloc_r>
 8010256:	4606      	mov	r6, r0
 8010258:	b950      	cbnz	r0, 8010270 <__ssputs_r+0x5c>
 801025a:	230c      	movs	r3, #12
 801025c:	f8ca 3000 	str.w	r3, [sl]
 8010260:	89a3      	ldrh	r3, [r4, #12]
 8010262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010266:	81a3      	strh	r3, [r4, #12]
 8010268:	f04f 30ff 	mov.w	r0, #4294967295
 801026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010270:	6921      	ldr	r1, [r4, #16]
 8010272:	464a      	mov	r2, r9
 8010274:	f7ff faea 	bl	800f84c <memcpy>
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801027e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010282:	81a3      	strh	r3, [r4, #12]
 8010284:	6126      	str	r6, [r4, #16]
 8010286:	6165      	str	r5, [r4, #20]
 8010288:	444e      	add	r6, r9
 801028a:	eba5 0509 	sub.w	r5, r5, r9
 801028e:	6026      	str	r6, [r4, #0]
 8010290:	60a5      	str	r5, [r4, #8]
 8010292:	463e      	mov	r6, r7
 8010294:	42be      	cmp	r6, r7
 8010296:	d900      	bls.n	801029a <__ssputs_r+0x86>
 8010298:	463e      	mov	r6, r7
 801029a:	4632      	mov	r2, r6
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	4641      	mov	r1, r8
 80102a0:	f000 f95f 	bl	8010562 <memmove>
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	6822      	ldr	r2, [r4, #0]
 80102a8:	1b9b      	subs	r3, r3, r6
 80102aa:	4432      	add	r2, r6
 80102ac:	60a3      	str	r3, [r4, #8]
 80102ae:	6022      	str	r2, [r4, #0]
 80102b0:	2000      	movs	r0, #0
 80102b2:	e7db      	b.n	801026c <__ssputs_r+0x58>
 80102b4:	462a      	mov	r2, r5
 80102b6:	f000 f96e 	bl	8010596 <_realloc_r>
 80102ba:	4606      	mov	r6, r0
 80102bc:	2800      	cmp	r0, #0
 80102be:	d1e1      	bne.n	8010284 <__ssputs_r+0x70>
 80102c0:	6921      	ldr	r1, [r4, #16]
 80102c2:	4650      	mov	r0, sl
 80102c4:	f7fc fd38 	bl	800cd38 <_free_r>
 80102c8:	e7c7      	b.n	801025a <__ssputs_r+0x46>
	...

080102cc <_svfiprintf_r>:
 80102cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d0:	4698      	mov	r8, r3
 80102d2:	898b      	ldrh	r3, [r1, #12]
 80102d4:	061b      	lsls	r3, r3, #24
 80102d6:	b09d      	sub	sp, #116	; 0x74
 80102d8:	4607      	mov	r7, r0
 80102da:	460d      	mov	r5, r1
 80102dc:	4614      	mov	r4, r2
 80102de:	d50e      	bpl.n	80102fe <_svfiprintf_r+0x32>
 80102e0:	690b      	ldr	r3, [r1, #16]
 80102e2:	b963      	cbnz	r3, 80102fe <_svfiprintf_r+0x32>
 80102e4:	2140      	movs	r1, #64	; 0x40
 80102e6:	f7fc fd77 	bl	800cdd8 <_malloc_r>
 80102ea:	6028      	str	r0, [r5, #0]
 80102ec:	6128      	str	r0, [r5, #16]
 80102ee:	b920      	cbnz	r0, 80102fa <_svfiprintf_r+0x2e>
 80102f0:	230c      	movs	r3, #12
 80102f2:	603b      	str	r3, [r7, #0]
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295
 80102f8:	e0d1      	b.n	801049e <_svfiprintf_r+0x1d2>
 80102fa:	2340      	movs	r3, #64	; 0x40
 80102fc:	616b      	str	r3, [r5, #20]
 80102fe:	2300      	movs	r3, #0
 8010300:	9309      	str	r3, [sp, #36]	; 0x24
 8010302:	2320      	movs	r3, #32
 8010304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010308:	f8cd 800c 	str.w	r8, [sp, #12]
 801030c:	2330      	movs	r3, #48	; 0x30
 801030e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104b8 <_svfiprintf_r+0x1ec>
 8010312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010316:	f04f 0901 	mov.w	r9, #1
 801031a:	4623      	mov	r3, r4
 801031c:	469a      	mov	sl, r3
 801031e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010322:	b10a      	cbz	r2, 8010328 <_svfiprintf_r+0x5c>
 8010324:	2a25      	cmp	r2, #37	; 0x25
 8010326:	d1f9      	bne.n	801031c <_svfiprintf_r+0x50>
 8010328:	ebba 0b04 	subs.w	fp, sl, r4
 801032c:	d00b      	beq.n	8010346 <_svfiprintf_r+0x7a>
 801032e:	465b      	mov	r3, fp
 8010330:	4622      	mov	r2, r4
 8010332:	4629      	mov	r1, r5
 8010334:	4638      	mov	r0, r7
 8010336:	f7ff ff6d 	bl	8010214 <__ssputs_r>
 801033a:	3001      	adds	r0, #1
 801033c:	f000 80aa 	beq.w	8010494 <_svfiprintf_r+0x1c8>
 8010340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010342:	445a      	add	r2, fp
 8010344:	9209      	str	r2, [sp, #36]	; 0x24
 8010346:	f89a 3000 	ldrb.w	r3, [sl]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 80a2 	beq.w	8010494 <_svfiprintf_r+0x1c8>
 8010350:	2300      	movs	r3, #0
 8010352:	f04f 32ff 	mov.w	r2, #4294967295
 8010356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801035a:	f10a 0a01 	add.w	sl, sl, #1
 801035e:	9304      	str	r3, [sp, #16]
 8010360:	9307      	str	r3, [sp, #28]
 8010362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010366:	931a      	str	r3, [sp, #104]	; 0x68
 8010368:	4654      	mov	r4, sl
 801036a:	2205      	movs	r2, #5
 801036c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010370:	4851      	ldr	r0, [pc, #324]	; (80104b8 <_svfiprintf_r+0x1ec>)
 8010372:	f7ef ff35 	bl	80001e0 <memchr>
 8010376:	9a04      	ldr	r2, [sp, #16]
 8010378:	b9d8      	cbnz	r0, 80103b2 <_svfiprintf_r+0xe6>
 801037a:	06d0      	lsls	r0, r2, #27
 801037c:	bf44      	itt	mi
 801037e:	2320      	movmi	r3, #32
 8010380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010384:	0711      	lsls	r1, r2, #28
 8010386:	bf44      	itt	mi
 8010388:	232b      	movmi	r3, #43	; 0x2b
 801038a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801038e:	f89a 3000 	ldrb.w	r3, [sl]
 8010392:	2b2a      	cmp	r3, #42	; 0x2a
 8010394:	d015      	beq.n	80103c2 <_svfiprintf_r+0xf6>
 8010396:	9a07      	ldr	r2, [sp, #28]
 8010398:	4654      	mov	r4, sl
 801039a:	2000      	movs	r0, #0
 801039c:	f04f 0c0a 	mov.w	ip, #10
 80103a0:	4621      	mov	r1, r4
 80103a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103a6:	3b30      	subs	r3, #48	; 0x30
 80103a8:	2b09      	cmp	r3, #9
 80103aa:	d94e      	bls.n	801044a <_svfiprintf_r+0x17e>
 80103ac:	b1b0      	cbz	r0, 80103dc <_svfiprintf_r+0x110>
 80103ae:	9207      	str	r2, [sp, #28]
 80103b0:	e014      	b.n	80103dc <_svfiprintf_r+0x110>
 80103b2:	eba0 0308 	sub.w	r3, r0, r8
 80103b6:	fa09 f303 	lsl.w	r3, r9, r3
 80103ba:	4313      	orrs	r3, r2
 80103bc:	9304      	str	r3, [sp, #16]
 80103be:	46a2      	mov	sl, r4
 80103c0:	e7d2      	b.n	8010368 <_svfiprintf_r+0x9c>
 80103c2:	9b03      	ldr	r3, [sp, #12]
 80103c4:	1d19      	adds	r1, r3, #4
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	9103      	str	r1, [sp, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	bfbb      	ittet	lt
 80103ce:	425b      	neglt	r3, r3
 80103d0:	f042 0202 	orrlt.w	r2, r2, #2
 80103d4:	9307      	strge	r3, [sp, #28]
 80103d6:	9307      	strlt	r3, [sp, #28]
 80103d8:	bfb8      	it	lt
 80103da:	9204      	strlt	r2, [sp, #16]
 80103dc:	7823      	ldrb	r3, [r4, #0]
 80103de:	2b2e      	cmp	r3, #46	; 0x2e
 80103e0:	d10c      	bne.n	80103fc <_svfiprintf_r+0x130>
 80103e2:	7863      	ldrb	r3, [r4, #1]
 80103e4:	2b2a      	cmp	r3, #42	; 0x2a
 80103e6:	d135      	bne.n	8010454 <_svfiprintf_r+0x188>
 80103e8:	9b03      	ldr	r3, [sp, #12]
 80103ea:	1d1a      	adds	r2, r3, #4
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	9203      	str	r2, [sp, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bfb8      	it	lt
 80103f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80103f8:	3402      	adds	r4, #2
 80103fa:	9305      	str	r3, [sp, #20]
 80103fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104c8 <_svfiprintf_r+0x1fc>
 8010400:	7821      	ldrb	r1, [r4, #0]
 8010402:	2203      	movs	r2, #3
 8010404:	4650      	mov	r0, sl
 8010406:	f7ef feeb 	bl	80001e0 <memchr>
 801040a:	b140      	cbz	r0, 801041e <_svfiprintf_r+0x152>
 801040c:	2340      	movs	r3, #64	; 0x40
 801040e:	eba0 000a 	sub.w	r0, r0, sl
 8010412:	fa03 f000 	lsl.w	r0, r3, r0
 8010416:	9b04      	ldr	r3, [sp, #16]
 8010418:	4303      	orrs	r3, r0
 801041a:	3401      	adds	r4, #1
 801041c:	9304      	str	r3, [sp, #16]
 801041e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010422:	4826      	ldr	r0, [pc, #152]	; (80104bc <_svfiprintf_r+0x1f0>)
 8010424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010428:	2206      	movs	r2, #6
 801042a:	f7ef fed9 	bl	80001e0 <memchr>
 801042e:	2800      	cmp	r0, #0
 8010430:	d038      	beq.n	80104a4 <_svfiprintf_r+0x1d8>
 8010432:	4b23      	ldr	r3, [pc, #140]	; (80104c0 <_svfiprintf_r+0x1f4>)
 8010434:	bb1b      	cbnz	r3, 801047e <_svfiprintf_r+0x1b2>
 8010436:	9b03      	ldr	r3, [sp, #12]
 8010438:	3307      	adds	r3, #7
 801043a:	f023 0307 	bic.w	r3, r3, #7
 801043e:	3308      	adds	r3, #8
 8010440:	9303      	str	r3, [sp, #12]
 8010442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010444:	4433      	add	r3, r6
 8010446:	9309      	str	r3, [sp, #36]	; 0x24
 8010448:	e767      	b.n	801031a <_svfiprintf_r+0x4e>
 801044a:	fb0c 3202 	mla	r2, ip, r2, r3
 801044e:	460c      	mov	r4, r1
 8010450:	2001      	movs	r0, #1
 8010452:	e7a5      	b.n	80103a0 <_svfiprintf_r+0xd4>
 8010454:	2300      	movs	r3, #0
 8010456:	3401      	adds	r4, #1
 8010458:	9305      	str	r3, [sp, #20]
 801045a:	4619      	mov	r1, r3
 801045c:	f04f 0c0a 	mov.w	ip, #10
 8010460:	4620      	mov	r0, r4
 8010462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010466:	3a30      	subs	r2, #48	; 0x30
 8010468:	2a09      	cmp	r2, #9
 801046a:	d903      	bls.n	8010474 <_svfiprintf_r+0x1a8>
 801046c:	2b00      	cmp	r3, #0
 801046e:	d0c5      	beq.n	80103fc <_svfiprintf_r+0x130>
 8010470:	9105      	str	r1, [sp, #20]
 8010472:	e7c3      	b.n	80103fc <_svfiprintf_r+0x130>
 8010474:	fb0c 2101 	mla	r1, ip, r1, r2
 8010478:	4604      	mov	r4, r0
 801047a:	2301      	movs	r3, #1
 801047c:	e7f0      	b.n	8010460 <_svfiprintf_r+0x194>
 801047e:	ab03      	add	r3, sp, #12
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	462a      	mov	r2, r5
 8010484:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <_svfiprintf_r+0x1f8>)
 8010486:	a904      	add	r1, sp, #16
 8010488:	4638      	mov	r0, r7
 801048a:	f7fc fd9f 	bl	800cfcc <_printf_float>
 801048e:	1c42      	adds	r2, r0, #1
 8010490:	4606      	mov	r6, r0
 8010492:	d1d6      	bne.n	8010442 <_svfiprintf_r+0x176>
 8010494:	89ab      	ldrh	r3, [r5, #12]
 8010496:	065b      	lsls	r3, r3, #25
 8010498:	f53f af2c 	bmi.w	80102f4 <_svfiprintf_r+0x28>
 801049c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801049e:	b01d      	add	sp, #116	; 0x74
 80104a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a4:	ab03      	add	r3, sp, #12
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	462a      	mov	r2, r5
 80104aa:	4b06      	ldr	r3, [pc, #24]	; (80104c4 <_svfiprintf_r+0x1f8>)
 80104ac:	a904      	add	r1, sp, #16
 80104ae:	4638      	mov	r0, r7
 80104b0:	f7fd f830 	bl	800d514 <_printf_i>
 80104b4:	e7eb      	b.n	801048e <_svfiprintf_r+0x1c2>
 80104b6:	bf00      	nop
 80104b8:	080115ec 	.word	0x080115ec
 80104bc:	080115f6 	.word	0x080115f6
 80104c0:	0800cfcd 	.word	0x0800cfcd
 80104c4:	08010215 	.word	0x08010215
 80104c8:	080115f2 	.word	0x080115f2
 80104cc:	00000000 	.word	0x00000000

080104d0 <nan>:
 80104d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80104d8 <nan+0x8>
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	00000000 	.word	0x00000000
 80104dc:	7ff80000 	.word	0x7ff80000

080104e0 <__ascii_wctomb>:
 80104e0:	b149      	cbz	r1, 80104f6 <__ascii_wctomb+0x16>
 80104e2:	2aff      	cmp	r2, #255	; 0xff
 80104e4:	bf85      	ittet	hi
 80104e6:	238a      	movhi	r3, #138	; 0x8a
 80104e8:	6003      	strhi	r3, [r0, #0]
 80104ea:	700a      	strbls	r2, [r1, #0]
 80104ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80104f0:	bf98      	it	ls
 80104f2:	2001      	movls	r0, #1
 80104f4:	4770      	bx	lr
 80104f6:	4608      	mov	r0, r1
 80104f8:	4770      	bx	lr
	...

080104fc <__assert_func>:
 80104fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104fe:	4614      	mov	r4, r2
 8010500:	461a      	mov	r2, r3
 8010502:	4b09      	ldr	r3, [pc, #36]	; (8010528 <__assert_func+0x2c>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4605      	mov	r5, r0
 8010508:	68d8      	ldr	r0, [r3, #12]
 801050a:	b14c      	cbz	r4, 8010520 <__assert_func+0x24>
 801050c:	4b07      	ldr	r3, [pc, #28]	; (801052c <__assert_func+0x30>)
 801050e:	9100      	str	r1, [sp, #0]
 8010510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010514:	4906      	ldr	r1, [pc, #24]	; (8010530 <__assert_func+0x34>)
 8010516:	462b      	mov	r3, r5
 8010518:	f000 f80e 	bl	8010538 <fiprintf>
 801051c:	f000 fa7a 	bl	8010a14 <abort>
 8010520:	4b04      	ldr	r3, [pc, #16]	; (8010534 <__assert_func+0x38>)
 8010522:	461c      	mov	r4, r3
 8010524:	e7f3      	b.n	801050e <__assert_func+0x12>
 8010526:	bf00      	nop
 8010528:	20000540 	.word	0x20000540
 801052c:	080115fd 	.word	0x080115fd
 8010530:	0801160a 	.word	0x0801160a
 8010534:	08011638 	.word	0x08011638

08010538 <fiprintf>:
 8010538:	b40e      	push	{r1, r2, r3}
 801053a:	b503      	push	{r0, r1, lr}
 801053c:	4601      	mov	r1, r0
 801053e:	ab03      	add	r3, sp, #12
 8010540:	4805      	ldr	r0, [pc, #20]	; (8010558 <fiprintf+0x20>)
 8010542:	f853 2b04 	ldr.w	r2, [r3], #4
 8010546:	6800      	ldr	r0, [r0, #0]
 8010548:	9301      	str	r3, [sp, #4]
 801054a:	f000 f873 	bl	8010634 <_vfiprintf_r>
 801054e:	b002      	add	sp, #8
 8010550:	f85d eb04 	ldr.w	lr, [sp], #4
 8010554:	b003      	add	sp, #12
 8010556:	4770      	bx	lr
 8010558:	20000540 	.word	0x20000540

0801055c <__retarget_lock_init_recursive>:
 801055c:	4770      	bx	lr

0801055e <__retarget_lock_acquire_recursive>:
 801055e:	4770      	bx	lr

08010560 <__retarget_lock_release_recursive>:
 8010560:	4770      	bx	lr

08010562 <memmove>:
 8010562:	4288      	cmp	r0, r1
 8010564:	b510      	push	{r4, lr}
 8010566:	eb01 0402 	add.w	r4, r1, r2
 801056a:	d902      	bls.n	8010572 <memmove+0x10>
 801056c:	4284      	cmp	r4, r0
 801056e:	4623      	mov	r3, r4
 8010570:	d807      	bhi.n	8010582 <memmove+0x20>
 8010572:	1e43      	subs	r3, r0, #1
 8010574:	42a1      	cmp	r1, r4
 8010576:	d008      	beq.n	801058a <memmove+0x28>
 8010578:	f811 2b01 	ldrb.w	r2, [r1], #1
 801057c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010580:	e7f8      	b.n	8010574 <memmove+0x12>
 8010582:	4402      	add	r2, r0
 8010584:	4601      	mov	r1, r0
 8010586:	428a      	cmp	r2, r1
 8010588:	d100      	bne.n	801058c <memmove+0x2a>
 801058a:	bd10      	pop	{r4, pc}
 801058c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010590:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010594:	e7f7      	b.n	8010586 <memmove+0x24>

08010596 <_realloc_r>:
 8010596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010598:	4607      	mov	r7, r0
 801059a:	4614      	mov	r4, r2
 801059c:	460e      	mov	r6, r1
 801059e:	b921      	cbnz	r1, 80105aa <_realloc_r+0x14>
 80105a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80105a4:	4611      	mov	r1, r2
 80105a6:	f7fc bc17 	b.w	800cdd8 <_malloc_r>
 80105aa:	b922      	cbnz	r2, 80105b6 <_realloc_r+0x20>
 80105ac:	f7fc fbc4 	bl	800cd38 <_free_r>
 80105b0:	4625      	mov	r5, r4
 80105b2:	4628      	mov	r0, r5
 80105b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105b6:	f000 fc51 	bl	8010e5c <_malloc_usable_size_r>
 80105ba:	42a0      	cmp	r0, r4
 80105bc:	d20f      	bcs.n	80105de <_realloc_r+0x48>
 80105be:	4621      	mov	r1, r4
 80105c0:	4638      	mov	r0, r7
 80105c2:	f7fc fc09 	bl	800cdd8 <_malloc_r>
 80105c6:	4605      	mov	r5, r0
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d0f2      	beq.n	80105b2 <_realloc_r+0x1c>
 80105cc:	4631      	mov	r1, r6
 80105ce:	4622      	mov	r2, r4
 80105d0:	f7ff f93c 	bl	800f84c <memcpy>
 80105d4:	4631      	mov	r1, r6
 80105d6:	4638      	mov	r0, r7
 80105d8:	f7fc fbae 	bl	800cd38 <_free_r>
 80105dc:	e7e9      	b.n	80105b2 <_realloc_r+0x1c>
 80105de:	4635      	mov	r5, r6
 80105e0:	e7e7      	b.n	80105b2 <_realloc_r+0x1c>

080105e2 <__sfputc_r>:
 80105e2:	6893      	ldr	r3, [r2, #8]
 80105e4:	3b01      	subs	r3, #1
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	b410      	push	{r4}
 80105ea:	6093      	str	r3, [r2, #8]
 80105ec:	da08      	bge.n	8010600 <__sfputc_r+0x1e>
 80105ee:	6994      	ldr	r4, [r2, #24]
 80105f0:	42a3      	cmp	r3, r4
 80105f2:	db01      	blt.n	80105f8 <__sfputc_r+0x16>
 80105f4:	290a      	cmp	r1, #10
 80105f6:	d103      	bne.n	8010600 <__sfputc_r+0x1e>
 80105f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105fc:	f000 b94a 	b.w	8010894 <__swbuf_r>
 8010600:	6813      	ldr	r3, [r2, #0]
 8010602:	1c58      	adds	r0, r3, #1
 8010604:	6010      	str	r0, [r2, #0]
 8010606:	7019      	strb	r1, [r3, #0]
 8010608:	4608      	mov	r0, r1
 801060a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801060e:	4770      	bx	lr

08010610 <__sfputs_r>:
 8010610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010612:	4606      	mov	r6, r0
 8010614:	460f      	mov	r7, r1
 8010616:	4614      	mov	r4, r2
 8010618:	18d5      	adds	r5, r2, r3
 801061a:	42ac      	cmp	r4, r5
 801061c:	d101      	bne.n	8010622 <__sfputs_r+0x12>
 801061e:	2000      	movs	r0, #0
 8010620:	e007      	b.n	8010632 <__sfputs_r+0x22>
 8010622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010626:	463a      	mov	r2, r7
 8010628:	4630      	mov	r0, r6
 801062a:	f7ff ffda 	bl	80105e2 <__sfputc_r>
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	d1f3      	bne.n	801061a <__sfputs_r+0xa>
 8010632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010634 <_vfiprintf_r>:
 8010634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010638:	460d      	mov	r5, r1
 801063a:	b09d      	sub	sp, #116	; 0x74
 801063c:	4614      	mov	r4, r2
 801063e:	4698      	mov	r8, r3
 8010640:	4606      	mov	r6, r0
 8010642:	b118      	cbz	r0, 801064c <_vfiprintf_r+0x18>
 8010644:	6983      	ldr	r3, [r0, #24]
 8010646:	b90b      	cbnz	r3, 801064c <_vfiprintf_r+0x18>
 8010648:	f000 fb06 	bl	8010c58 <__sinit>
 801064c:	4b89      	ldr	r3, [pc, #548]	; (8010874 <_vfiprintf_r+0x240>)
 801064e:	429d      	cmp	r5, r3
 8010650:	d11b      	bne.n	801068a <_vfiprintf_r+0x56>
 8010652:	6875      	ldr	r5, [r6, #4]
 8010654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010656:	07d9      	lsls	r1, r3, #31
 8010658:	d405      	bmi.n	8010666 <_vfiprintf_r+0x32>
 801065a:	89ab      	ldrh	r3, [r5, #12]
 801065c:	059a      	lsls	r2, r3, #22
 801065e:	d402      	bmi.n	8010666 <_vfiprintf_r+0x32>
 8010660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010662:	f7ff ff7c 	bl	801055e <__retarget_lock_acquire_recursive>
 8010666:	89ab      	ldrh	r3, [r5, #12]
 8010668:	071b      	lsls	r3, r3, #28
 801066a:	d501      	bpl.n	8010670 <_vfiprintf_r+0x3c>
 801066c:	692b      	ldr	r3, [r5, #16]
 801066e:	b9eb      	cbnz	r3, 80106ac <_vfiprintf_r+0x78>
 8010670:	4629      	mov	r1, r5
 8010672:	4630      	mov	r0, r6
 8010674:	f000 f960 	bl	8010938 <__swsetup_r>
 8010678:	b1c0      	cbz	r0, 80106ac <_vfiprintf_r+0x78>
 801067a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801067c:	07dc      	lsls	r4, r3, #31
 801067e:	d50e      	bpl.n	801069e <_vfiprintf_r+0x6a>
 8010680:	f04f 30ff 	mov.w	r0, #4294967295
 8010684:	b01d      	add	sp, #116	; 0x74
 8010686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068a:	4b7b      	ldr	r3, [pc, #492]	; (8010878 <_vfiprintf_r+0x244>)
 801068c:	429d      	cmp	r5, r3
 801068e:	d101      	bne.n	8010694 <_vfiprintf_r+0x60>
 8010690:	68b5      	ldr	r5, [r6, #8]
 8010692:	e7df      	b.n	8010654 <_vfiprintf_r+0x20>
 8010694:	4b79      	ldr	r3, [pc, #484]	; (801087c <_vfiprintf_r+0x248>)
 8010696:	429d      	cmp	r5, r3
 8010698:	bf08      	it	eq
 801069a:	68f5      	ldreq	r5, [r6, #12]
 801069c:	e7da      	b.n	8010654 <_vfiprintf_r+0x20>
 801069e:	89ab      	ldrh	r3, [r5, #12]
 80106a0:	0598      	lsls	r0, r3, #22
 80106a2:	d4ed      	bmi.n	8010680 <_vfiprintf_r+0x4c>
 80106a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106a6:	f7ff ff5b 	bl	8010560 <__retarget_lock_release_recursive>
 80106aa:	e7e9      	b.n	8010680 <_vfiprintf_r+0x4c>
 80106ac:	2300      	movs	r3, #0
 80106ae:	9309      	str	r3, [sp, #36]	; 0x24
 80106b0:	2320      	movs	r3, #32
 80106b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80106ba:	2330      	movs	r3, #48	; 0x30
 80106bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010880 <_vfiprintf_r+0x24c>
 80106c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106c4:	f04f 0901 	mov.w	r9, #1
 80106c8:	4623      	mov	r3, r4
 80106ca:	469a      	mov	sl, r3
 80106cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106d0:	b10a      	cbz	r2, 80106d6 <_vfiprintf_r+0xa2>
 80106d2:	2a25      	cmp	r2, #37	; 0x25
 80106d4:	d1f9      	bne.n	80106ca <_vfiprintf_r+0x96>
 80106d6:	ebba 0b04 	subs.w	fp, sl, r4
 80106da:	d00b      	beq.n	80106f4 <_vfiprintf_r+0xc0>
 80106dc:	465b      	mov	r3, fp
 80106de:	4622      	mov	r2, r4
 80106e0:	4629      	mov	r1, r5
 80106e2:	4630      	mov	r0, r6
 80106e4:	f7ff ff94 	bl	8010610 <__sfputs_r>
 80106e8:	3001      	adds	r0, #1
 80106ea:	f000 80aa 	beq.w	8010842 <_vfiprintf_r+0x20e>
 80106ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106f0:	445a      	add	r2, fp
 80106f2:	9209      	str	r2, [sp, #36]	; 0x24
 80106f4:	f89a 3000 	ldrb.w	r3, [sl]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 80a2 	beq.w	8010842 <_vfiprintf_r+0x20e>
 80106fe:	2300      	movs	r3, #0
 8010700:	f04f 32ff 	mov.w	r2, #4294967295
 8010704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010708:	f10a 0a01 	add.w	sl, sl, #1
 801070c:	9304      	str	r3, [sp, #16]
 801070e:	9307      	str	r3, [sp, #28]
 8010710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010714:	931a      	str	r3, [sp, #104]	; 0x68
 8010716:	4654      	mov	r4, sl
 8010718:	2205      	movs	r2, #5
 801071a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071e:	4858      	ldr	r0, [pc, #352]	; (8010880 <_vfiprintf_r+0x24c>)
 8010720:	f7ef fd5e 	bl	80001e0 <memchr>
 8010724:	9a04      	ldr	r2, [sp, #16]
 8010726:	b9d8      	cbnz	r0, 8010760 <_vfiprintf_r+0x12c>
 8010728:	06d1      	lsls	r1, r2, #27
 801072a:	bf44      	itt	mi
 801072c:	2320      	movmi	r3, #32
 801072e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010732:	0713      	lsls	r3, r2, #28
 8010734:	bf44      	itt	mi
 8010736:	232b      	movmi	r3, #43	; 0x2b
 8010738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801073c:	f89a 3000 	ldrb.w	r3, [sl]
 8010740:	2b2a      	cmp	r3, #42	; 0x2a
 8010742:	d015      	beq.n	8010770 <_vfiprintf_r+0x13c>
 8010744:	9a07      	ldr	r2, [sp, #28]
 8010746:	4654      	mov	r4, sl
 8010748:	2000      	movs	r0, #0
 801074a:	f04f 0c0a 	mov.w	ip, #10
 801074e:	4621      	mov	r1, r4
 8010750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010754:	3b30      	subs	r3, #48	; 0x30
 8010756:	2b09      	cmp	r3, #9
 8010758:	d94e      	bls.n	80107f8 <_vfiprintf_r+0x1c4>
 801075a:	b1b0      	cbz	r0, 801078a <_vfiprintf_r+0x156>
 801075c:	9207      	str	r2, [sp, #28]
 801075e:	e014      	b.n	801078a <_vfiprintf_r+0x156>
 8010760:	eba0 0308 	sub.w	r3, r0, r8
 8010764:	fa09 f303 	lsl.w	r3, r9, r3
 8010768:	4313      	orrs	r3, r2
 801076a:	9304      	str	r3, [sp, #16]
 801076c:	46a2      	mov	sl, r4
 801076e:	e7d2      	b.n	8010716 <_vfiprintf_r+0xe2>
 8010770:	9b03      	ldr	r3, [sp, #12]
 8010772:	1d19      	adds	r1, r3, #4
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	9103      	str	r1, [sp, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	bfbb      	ittet	lt
 801077c:	425b      	neglt	r3, r3
 801077e:	f042 0202 	orrlt.w	r2, r2, #2
 8010782:	9307      	strge	r3, [sp, #28]
 8010784:	9307      	strlt	r3, [sp, #28]
 8010786:	bfb8      	it	lt
 8010788:	9204      	strlt	r2, [sp, #16]
 801078a:	7823      	ldrb	r3, [r4, #0]
 801078c:	2b2e      	cmp	r3, #46	; 0x2e
 801078e:	d10c      	bne.n	80107aa <_vfiprintf_r+0x176>
 8010790:	7863      	ldrb	r3, [r4, #1]
 8010792:	2b2a      	cmp	r3, #42	; 0x2a
 8010794:	d135      	bne.n	8010802 <_vfiprintf_r+0x1ce>
 8010796:	9b03      	ldr	r3, [sp, #12]
 8010798:	1d1a      	adds	r2, r3, #4
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	9203      	str	r2, [sp, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	bfb8      	it	lt
 80107a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80107a6:	3402      	adds	r4, #2
 80107a8:	9305      	str	r3, [sp, #20]
 80107aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010890 <_vfiprintf_r+0x25c>
 80107ae:	7821      	ldrb	r1, [r4, #0]
 80107b0:	2203      	movs	r2, #3
 80107b2:	4650      	mov	r0, sl
 80107b4:	f7ef fd14 	bl	80001e0 <memchr>
 80107b8:	b140      	cbz	r0, 80107cc <_vfiprintf_r+0x198>
 80107ba:	2340      	movs	r3, #64	; 0x40
 80107bc:	eba0 000a 	sub.w	r0, r0, sl
 80107c0:	fa03 f000 	lsl.w	r0, r3, r0
 80107c4:	9b04      	ldr	r3, [sp, #16]
 80107c6:	4303      	orrs	r3, r0
 80107c8:	3401      	adds	r4, #1
 80107ca:	9304      	str	r3, [sp, #16]
 80107cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107d0:	482c      	ldr	r0, [pc, #176]	; (8010884 <_vfiprintf_r+0x250>)
 80107d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107d6:	2206      	movs	r2, #6
 80107d8:	f7ef fd02 	bl	80001e0 <memchr>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d03f      	beq.n	8010860 <_vfiprintf_r+0x22c>
 80107e0:	4b29      	ldr	r3, [pc, #164]	; (8010888 <_vfiprintf_r+0x254>)
 80107e2:	bb1b      	cbnz	r3, 801082c <_vfiprintf_r+0x1f8>
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	3307      	adds	r3, #7
 80107e8:	f023 0307 	bic.w	r3, r3, #7
 80107ec:	3308      	adds	r3, #8
 80107ee:	9303      	str	r3, [sp, #12]
 80107f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f2:	443b      	add	r3, r7
 80107f4:	9309      	str	r3, [sp, #36]	; 0x24
 80107f6:	e767      	b.n	80106c8 <_vfiprintf_r+0x94>
 80107f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80107fc:	460c      	mov	r4, r1
 80107fe:	2001      	movs	r0, #1
 8010800:	e7a5      	b.n	801074e <_vfiprintf_r+0x11a>
 8010802:	2300      	movs	r3, #0
 8010804:	3401      	adds	r4, #1
 8010806:	9305      	str	r3, [sp, #20]
 8010808:	4619      	mov	r1, r3
 801080a:	f04f 0c0a 	mov.w	ip, #10
 801080e:	4620      	mov	r0, r4
 8010810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010814:	3a30      	subs	r2, #48	; 0x30
 8010816:	2a09      	cmp	r2, #9
 8010818:	d903      	bls.n	8010822 <_vfiprintf_r+0x1ee>
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0c5      	beq.n	80107aa <_vfiprintf_r+0x176>
 801081e:	9105      	str	r1, [sp, #20]
 8010820:	e7c3      	b.n	80107aa <_vfiprintf_r+0x176>
 8010822:	fb0c 2101 	mla	r1, ip, r1, r2
 8010826:	4604      	mov	r4, r0
 8010828:	2301      	movs	r3, #1
 801082a:	e7f0      	b.n	801080e <_vfiprintf_r+0x1da>
 801082c:	ab03      	add	r3, sp, #12
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	462a      	mov	r2, r5
 8010832:	4b16      	ldr	r3, [pc, #88]	; (801088c <_vfiprintf_r+0x258>)
 8010834:	a904      	add	r1, sp, #16
 8010836:	4630      	mov	r0, r6
 8010838:	f7fc fbc8 	bl	800cfcc <_printf_float>
 801083c:	4607      	mov	r7, r0
 801083e:	1c78      	adds	r0, r7, #1
 8010840:	d1d6      	bne.n	80107f0 <_vfiprintf_r+0x1bc>
 8010842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010844:	07d9      	lsls	r1, r3, #31
 8010846:	d405      	bmi.n	8010854 <_vfiprintf_r+0x220>
 8010848:	89ab      	ldrh	r3, [r5, #12]
 801084a:	059a      	lsls	r2, r3, #22
 801084c:	d402      	bmi.n	8010854 <_vfiprintf_r+0x220>
 801084e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010850:	f7ff fe86 	bl	8010560 <__retarget_lock_release_recursive>
 8010854:	89ab      	ldrh	r3, [r5, #12]
 8010856:	065b      	lsls	r3, r3, #25
 8010858:	f53f af12 	bmi.w	8010680 <_vfiprintf_r+0x4c>
 801085c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801085e:	e711      	b.n	8010684 <_vfiprintf_r+0x50>
 8010860:	ab03      	add	r3, sp, #12
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	462a      	mov	r2, r5
 8010866:	4b09      	ldr	r3, [pc, #36]	; (801088c <_vfiprintf_r+0x258>)
 8010868:	a904      	add	r1, sp, #16
 801086a:	4630      	mov	r0, r6
 801086c:	f7fc fe52 	bl	800d514 <_printf_i>
 8010870:	e7e4      	b.n	801083c <_vfiprintf_r+0x208>
 8010872:	bf00      	nop
 8010874:	0801175c 	.word	0x0801175c
 8010878:	0801177c 	.word	0x0801177c
 801087c:	0801173c 	.word	0x0801173c
 8010880:	080115ec 	.word	0x080115ec
 8010884:	080115f6 	.word	0x080115f6
 8010888:	0800cfcd 	.word	0x0800cfcd
 801088c:	08010611 	.word	0x08010611
 8010890:	080115f2 	.word	0x080115f2

08010894 <__swbuf_r>:
 8010894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010896:	460e      	mov	r6, r1
 8010898:	4614      	mov	r4, r2
 801089a:	4605      	mov	r5, r0
 801089c:	b118      	cbz	r0, 80108a6 <__swbuf_r+0x12>
 801089e:	6983      	ldr	r3, [r0, #24]
 80108a0:	b90b      	cbnz	r3, 80108a6 <__swbuf_r+0x12>
 80108a2:	f000 f9d9 	bl	8010c58 <__sinit>
 80108a6:	4b21      	ldr	r3, [pc, #132]	; (801092c <__swbuf_r+0x98>)
 80108a8:	429c      	cmp	r4, r3
 80108aa:	d12b      	bne.n	8010904 <__swbuf_r+0x70>
 80108ac:	686c      	ldr	r4, [r5, #4]
 80108ae:	69a3      	ldr	r3, [r4, #24]
 80108b0:	60a3      	str	r3, [r4, #8]
 80108b2:	89a3      	ldrh	r3, [r4, #12]
 80108b4:	071a      	lsls	r2, r3, #28
 80108b6:	d52f      	bpl.n	8010918 <__swbuf_r+0x84>
 80108b8:	6923      	ldr	r3, [r4, #16]
 80108ba:	b36b      	cbz	r3, 8010918 <__swbuf_r+0x84>
 80108bc:	6923      	ldr	r3, [r4, #16]
 80108be:	6820      	ldr	r0, [r4, #0]
 80108c0:	1ac0      	subs	r0, r0, r3
 80108c2:	6963      	ldr	r3, [r4, #20]
 80108c4:	b2f6      	uxtb	r6, r6
 80108c6:	4283      	cmp	r3, r0
 80108c8:	4637      	mov	r7, r6
 80108ca:	dc04      	bgt.n	80108d6 <__swbuf_r+0x42>
 80108cc:	4621      	mov	r1, r4
 80108ce:	4628      	mov	r0, r5
 80108d0:	f000 f92e 	bl	8010b30 <_fflush_r>
 80108d4:	bb30      	cbnz	r0, 8010924 <__swbuf_r+0x90>
 80108d6:	68a3      	ldr	r3, [r4, #8]
 80108d8:	3b01      	subs	r3, #1
 80108da:	60a3      	str	r3, [r4, #8]
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	6022      	str	r2, [r4, #0]
 80108e2:	701e      	strb	r6, [r3, #0]
 80108e4:	6963      	ldr	r3, [r4, #20]
 80108e6:	3001      	adds	r0, #1
 80108e8:	4283      	cmp	r3, r0
 80108ea:	d004      	beq.n	80108f6 <__swbuf_r+0x62>
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	07db      	lsls	r3, r3, #31
 80108f0:	d506      	bpl.n	8010900 <__swbuf_r+0x6c>
 80108f2:	2e0a      	cmp	r6, #10
 80108f4:	d104      	bne.n	8010900 <__swbuf_r+0x6c>
 80108f6:	4621      	mov	r1, r4
 80108f8:	4628      	mov	r0, r5
 80108fa:	f000 f919 	bl	8010b30 <_fflush_r>
 80108fe:	b988      	cbnz	r0, 8010924 <__swbuf_r+0x90>
 8010900:	4638      	mov	r0, r7
 8010902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010904:	4b0a      	ldr	r3, [pc, #40]	; (8010930 <__swbuf_r+0x9c>)
 8010906:	429c      	cmp	r4, r3
 8010908:	d101      	bne.n	801090e <__swbuf_r+0x7a>
 801090a:	68ac      	ldr	r4, [r5, #8]
 801090c:	e7cf      	b.n	80108ae <__swbuf_r+0x1a>
 801090e:	4b09      	ldr	r3, [pc, #36]	; (8010934 <__swbuf_r+0xa0>)
 8010910:	429c      	cmp	r4, r3
 8010912:	bf08      	it	eq
 8010914:	68ec      	ldreq	r4, [r5, #12]
 8010916:	e7ca      	b.n	80108ae <__swbuf_r+0x1a>
 8010918:	4621      	mov	r1, r4
 801091a:	4628      	mov	r0, r5
 801091c:	f000 f80c 	bl	8010938 <__swsetup_r>
 8010920:	2800      	cmp	r0, #0
 8010922:	d0cb      	beq.n	80108bc <__swbuf_r+0x28>
 8010924:	f04f 37ff 	mov.w	r7, #4294967295
 8010928:	e7ea      	b.n	8010900 <__swbuf_r+0x6c>
 801092a:	bf00      	nop
 801092c:	0801175c 	.word	0x0801175c
 8010930:	0801177c 	.word	0x0801177c
 8010934:	0801173c 	.word	0x0801173c

08010938 <__swsetup_r>:
 8010938:	4b32      	ldr	r3, [pc, #200]	; (8010a04 <__swsetup_r+0xcc>)
 801093a:	b570      	push	{r4, r5, r6, lr}
 801093c:	681d      	ldr	r5, [r3, #0]
 801093e:	4606      	mov	r6, r0
 8010940:	460c      	mov	r4, r1
 8010942:	b125      	cbz	r5, 801094e <__swsetup_r+0x16>
 8010944:	69ab      	ldr	r3, [r5, #24]
 8010946:	b913      	cbnz	r3, 801094e <__swsetup_r+0x16>
 8010948:	4628      	mov	r0, r5
 801094a:	f000 f985 	bl	8010c58 <__sinit>
 801094e:	4b2e      	ldr	r3, [pc, #184]	; (8010a08 <__swsetup_r+0xd0>)
 8010950:	429c      	cmp	r4, r3
 8010952:	d10f      	bne.n	8010974 <__swsetup_r+0x3c>
 8010954:	686c      	ldr	r4, [r5, #4]
 8010956:	89a3      	ldrh	r3, [r4, #12]
 8010958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801095c:	0719      	lsls	r1, r3, #28
 801095e:	d42c      	bmi.n	80109ba <__swsetup_r+0x82>
 8010960:	06dd      	lsls	r5, r3, #27
 8010962:	d411      	bmi.n	8010988 <__swsetup_r+0x50>
 8010964:	2309      	movs	r3, #9
 8010966:	6033      	str	r3, [r6, #0]
 8010968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801096c:	81a3      	strh	r3, [r4, #12]
 801096e:	f04f 30ff 	mov.w	r0, #4294967295
 8010972:	e03e      	b.n	80109f2 <__swsetup_r+0xba>
 8010974:	4b25      	ldr	r3, [pc, #148]	; (8010a0c <__swsetup_r+0xd4>)
 8010976:	429c      	cmp	r4, r3
 8010978:	d101      	bne.n	801097e <__swsetup_r+0x46>
 801097a:	68ac      	ldr	r4, [r5, #8]
 801097c:	e7eb      	b.n	8010956 <__swsetup_r+0x1e>
 801097e:	4b24      	ldr	r3, [pc, #144]	; (8010a10 <__swsetup_r+0xd8>)
 8010980:	429c      	cmp	r4, r3
 8010982:	bf08      	it	eq
 8010984:	68ec      	ldreq	r4, [r5, #12]
 8010986:	e7e6      	b.n	8010956 <__swsetup_r+0x1e>
 8010988:	0758      	lsls	r0, r3, #29
 801098a:	d512      	bpl.n	80109b2 <__swsetup_r+0x7a>
 801098c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801098e:	b141      	cbz	r1, 80109a2 <__swsetup_r+0x6a>
 8010990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010994:	4299      	cmp	r1, r3
 8010996:	d002      	beq.n	801099e <__swsetup_r+0x66>
 8010998:	4630      	mov	r0, r6
 801099a:	f7fc f9cd 	bl	800cd38 <_free_r>
 801099e:	2300      	movs	r3, #0
 80109a0:	6363      	str	r3, [r4, #52]	; 0x34
 80109a2:	89a3      	ldrh	r3, [r4, #12]
 80109a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109a8:	81a3      	strh	r3, [r4, #12]
 80109aa:	2300      	movs	r3, #0
 80109ac:	6063      	str	r3, [r4, #4]
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	f043 0308 	orr.w	r3, r3, #8
 80109b8:	81a3      	strh	r3, [r4, #12]
 80109ba:	6923      	ldr	r3, [r4, #16]
 80109bc:	b94b      	cbnz	r3, 80109d2 <__swsetup_r+0x9a>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109c8:	d003      	beq.n	80109d2 <__swsetup_r+0x9a>
 80109ca:	4621      	mov	r1, r4
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 fa05 	bl	8010ddc <__smakebuf_r>
 80109d2:	89a0      	ldrh	r0, [r4, #12]
 80109d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109d8:	f010 0301 	ands.w	r3, r0, #1
 80109dc:	d00a      	beq.n	80109f4 <__swsetup_r+0xbc>
 80109de:	2300      	movs	r3, #0
 80109e0:	60a3      	str	r3, [r4, #8]
 80109e2:	6963      	ldr	r3, [r4, #20]
 80109e4:	425b      	negs	r3, r3
 80109e6:	61a3      	str	r3, [r4, #24]
 80109e8:	6923      	ldr	r3, [r4, #16]
 80109ea:	b943      	cbnz	r3, 80109fe <__swsetup_r+0xc6>
 80109ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109f0:	d1ba      	bne.n	8010968 <__swsetup_r+0x30>
 80109f2:	bd70      	pop	{r4, r5, r6, pc}
 80109f4:	0781      	lsls	r1, r0, #30
 80109f6:	bf58      	it	pl
 80109f8:	6963      	ldrpl	r3, [r4, #20]
 80109fa:	60a3      	str	r3, [r4, #8]
 80109fc:	e7f4      	b.n	80109e8 <__swsetup_r+0xb0>
 80109fe:	2000      	movs	r0, #0
 8010a00:	e7f7      	b.n	80109f2 <__swsetup_r+0xba>
 8010a02:	bf00      	nop
 8010a04:	20000540 	.word	0x20000540
 8010a08:	0801175c 	.word	0x0801175c
 8010a0c:	0801177c 	.word	0x0801177c
 8010a10:	0801173c 	.word	0x0801173c

08010a14 <abort>:
 8010a14:	b508      	push	{r3, lr}
 8010a16:	2006      	movs	r0, #6
 8010a18:	f000 fa50 	bl	8010ebc <raise>
 8010a1c:	2001      	movs	r0, #1
 8010a1e:	f7f2 ff99 	bl	8003954 <_exit>
	...

08010a24 <__sflush_r>:
 8010a24:	898a      	ldrh	r2, [r1, #12]
 8010a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2a:	4605      	mov	r5, r0
 8010a2c:	0710      	lsls	r0, r2, #28
 8010a2e:	460c      	mov	r4, r1
 8010a30:	d458      	bmi.n	8010ae4 <__sflush_r+0xc0>
 8010a32:	684b      	ldr	r3, [r1, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	dc05      	bgt.n	8010a44 <__sflush_r+0x20>
 8010a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	dc02      	bgt.n	8010a44 <__sflush_r+0x20>
 8010a3e:	2000      	movs	r0, #0
 8010a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a46:	2e00      	cmp	r6, #0
 8010a48:	d0f9      	beq.n	8010a3e <__sflush_r+0x1a>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a50:	682f      	ldr	r7, [r5, #0]
 8010a52:	602b      	str	r3, [r5, #0]
 8010a54:	d032      	beq.n	8010abc <__sflush_r+0x98>
 8010a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	075a      	lsls	r2, r3, #29
 8010a5c:	d505      	bpl.n	8010a6a <__sflush_r+0x46>
 8010a5e:	6863      	ldr	r3, [r4, #4]
 8010a60:	1ac0      	subs	r0, r0, r3
 8010a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a64:	b10b      	cbz	r3, 8010a6a <__sflush_r+0x46>
 8010a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a68:	1ac0      	subs	r0, r0, r3
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a70:	6a21      	ldr	r1, [r4, #32]
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b0      	blx	r6
 8010a76:	1c43      	adds	r3, r0, #1
 8010a78:	89a3      	ldrh	r3, [r4, #12]
 8010a7a:	d106      	bne.n	8010a8a <__sflush_r+0x66>
 8010a7c:	6829      	ldr	r1, [r5, #0]
 8010a7e:	291d      	cmp	r1, #29
 8010a80:	d82c      	bhi.n	8010adc <__sflush_r+0xb8>
 8010a82:	4a2a      	ldr	r2, [pc, #168]	; (8010b2c <__sflush_r+0x108>)
 8010a84:	40ca      	lsrs	r2, r1
 8010a86:	07d6      	lsls	r6, r2, #31
 8010a88:	d528      	bpl.n	8010adc <__sflush_r+0xb8>
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	6062      	str	r2, [r4, #4]
 8010a8e:	04d9      	lsls	r1, r3, #19
 8010a90:	6922      	ldr	r2, [r4, #16]
 8010a92:	6022      	str	r2, [r4, #0]
 8010a94:	d504      	bpl.n	8010aa0 <__sflush_r+0x7c>
 8010a96:	1c42      	adds	r2, r0, #1
 8010a98:	d101      	bne.n	8010a9e <__sflush_r+0x7a>
 8010a9a:	682b      	ldr	r3, [r5, #0]
 8010a9c:	b903      	cbnz	r3, 8010aa0 <__sflush_r+0x7c>
 8010a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8010aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010aa2:	602f      	str	r7, [r5, #0]
 8010aa4:	2900      	cmp	r1, #0
 8010aa6:	d0ca      	beq.n	8010a3e <__sflush_r+0x1a>
 8010aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aac:	4299      	cmp	r1, r3
 8010aae:	d002      	beq.n	8010ab6 <__sflush_r+0x92>
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f7fc f941 	bl	800cd38 <_free_r>
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8010aba:	e7c1      	b.n	8010a40 <__sflush_r+0x1c>
 8010abc:	6a21      	ldr	r1, [r4, #32]
 8010abe:	2301      	movs	r3, #1
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	47b0      	blx	r6
 8010ac4:	1c41      	adds	r1, r0, #1
 8010ac6:	d1c7      	bne.n	8010a58 <__sflush_r+0x34>
 8010ac8:	682b      	ldr	r3, [r5, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d0c4      	beq.n	8010a58 <__sflush_r+0x34>
 8010ace:	2b1d      	cmp	r3, #29
 8010ad0:	d001      	beq.n	8010ad6 <__sflush_r+0xb2>
 8010ad2:	2b16      	cmp	r3, #22
 8010ad4:	d101      	bne.n	8010ada <__sflush_r+0xb6>
 8010ad6:	602f      	str	r7, [r5, #0]
 8010ad8:	e7b1      	b.n	8010a3e <__sflush_r+0x1a>
 8010ada:	89a3      	ldrh	r3, [r4, #12]
 8010adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ae0:	81a3      	strh	r3, [r4, #12]
 8010ae2:	e7ad      	b.n	8010a40 <__sflush_r+0x1c>
 8010ae4:	690f      	ldr	r7, [r1, #16]
 8010ae6:	2f00      	cmp	r7, #0
 8010ae8:	d0a9      	beq.n	8010a3e <__sflush_r+0x1a>
 8010aea:	0793      	lsls	r3, r2, #30
 8010aec:	680e      	ldr	r6, [r1, #0]
 8010aee:	bf08      	it	eq
 8010af0:	694b      	ldreq	r3, [r1, #20]
 8010af2:	600f      	str	r7, [r1, #0]
 8010af4:	bf18      	it	ne
 8010af6:	2300      	movne	r3, #0
 8010af8:	eba6 0807 	sub.w	r8, r6, r7
 8010afc:	608b      	str	r3, [r1, #8]
 8010afe:	f1b8 0f00 	cmp.w	r8, #0
 8010b02:	dd9c      	ble.n	8010a3e <__sflush_r+0x1a>
 8010b04:	6a21      	ldr	r1, [r4, #32]
 8010b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b08:	4643      	mov	r3, r8
 8010b0a:	463a      	mov	r2, r7
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	47b0      	blx	r6
 8010b10:	2800      	cmp	r0, #0
 8010b12:	dc06      	bgt.n	8010b22 <__sflush_r+0xfe>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b1a:	81a3      	strh	r3, [r4, #12]
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b20:	e78e      	b.n	8010a40 <__sflush_r+0x1c>
 8010b22:	4407      	add	r7, r0
 8010b24:	eba8 0800 	sub.w	r8, r8, r0
 8010b28:	e7e9      	b.n	8010afe <__sflush_r+0xda>
 8010b2a:	bf00      	nop
 8010b2c:	20400001 	.word	0x20400001

08010b30 <_fflush_r>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	690b      	ldr	r3, [r1, #16]
 8010b34:	4605      	mov	r5, r0
 8010b36:	460c      	mov	r4, r1
 8010b38:	b913      	cbnz	r3, 8010b40 <_fflush_r+0x10>
 8010b3a:	2500      	movs	r5, #0
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	b118      	cbz	r0, 8010b4a <_fflush_r+0x1a>
 8010b42:	6983      	ldr	r3, [r0, #24]
 8010b44:	b90b      	cbnz	r3, 8010b4a <_fflush_r+0x1a>
 8010b46:	f000 f887 	bl	8010c58 <__sinit>
 8010b4a:	4b14      	ldr	r3, [pc, #80]	; (8010b9c <_fflush_r+0x6c>)
 8010b4c:	429c      	cmp	r4, r3
 8010b4e:	d11b      	bne.n	8010b88 <_fflush_r+0x58>
 8010b50:	686c      	ldr	r4, [r5, #4]
 8010b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d0ef      	beq.n	8010b3a <_fflush_r+0xa>
 8010b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b5c:	07d0      	lsls	r0, r2, #31
 8010b5e:	d404      	bmi.n	8010b6a <_fflush_r+0x3a>
 8010b60:	0599      	lsls	r1, r3, #22
 8010b62:	d402      	bmi.n	8010b6a <_fflush_r+0x3a>
 8010b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b66:	f7ff fcfa 	bl	801055e <__retarget_lock_acquire_recursive>
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	4621      	mov	r1, r4
 8010b6e:	f7ff ff59 	bl	8010a24 <__sflush_r>
 8010b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b74:	07da      	lsls	r2, r3, #31
 8010b76:	4605      	mov	r5, r0
 8010b78:	d4e0      	bmi.n	8010b3c <_fflush_r+0xc>
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	059b      	lsls	r3, r3, #22
 8010b7e:	d4dd      	bmi.n	8010b3c <_fflush_r+0xc>
 8010b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b82:	f7ff fced 	bl	8010560 <__retarget_lock_release_recursive>
 8010b86:	e7d9      	b.n	8010b3c <_fflush_r+0xc>
 8010b88:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <_fflush_r+0x70>)
 8010b8a:	429c      	cmp	r4, r3
 8010b8c:	d101      	bne.n	8010b92 <_fflush_r+0x62>
 8010b8e:	68ac      	ldr	r4, [r5, #8]
 8010b90:	e7df      	b.n	8010b52 <_fflush_r+0x22>
 8010b92:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <_fflush_r+0x74>)
 8010b94:	429c      	cmp	r4, r3
 8010b96:	bf08      	it	eq
 8010b98:	68ec      	ldreq	r4, [r5, #12]
 8010b9a:	e7da      	b.n	8010b52 <_fflush_r+0x22>
 8010b9c:	0801175c 	.word	0x0801175c
 8010ba0:	0801177c 	.word	0x0801177c
 8010ba4:	0801173c 	.word	0x0801173c

08010ba8 <std>:
 8010ba8:	2300      	movs	r3, #0
 8010baa:	b510      	push	{r4, lr}
 8010bac:	4604      	mov	r4, r0
 8010bae:	e9c0 3300 	strd	r3, r3, [r0]
 8010bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bb6:	6083      	str	r3, [r0, #8]
 8010bb8:	8181      	strh	r1, [r0, #12]
 8010bba:	6643      	str	r3, [r0, #100]	; 0x64
 8010bbc:	81c2      	strh	r2, [r0, #14]
 8010bbe:	6183      	str	r3, [r0, #24]
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	2208      	movs	r2, #8
 8010bc4:	305c      	adds	r0, #92	; 0x5c
 8010bc6:	f7fc f8af 	bl	800cd28 <memset>
 8010bca:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <std+0x38>)
 8010bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <std+0x3c>)
 8010bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010bd2:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <std+0x40>)
 8010bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010bd6:	4b05      	ldr	r3, [pc, #20]	; (8010bec <std+0x44>)
 8010bd8:	6224      	str	r4, [r4, #32]
 8010bda:	6323      	str	r3, [r4, #48]	; 0x30
 8010bdc:	bd10      	pop	{r4, pc}
 8010bde:	bf00      	nop
 8010be0:	08010ef5 	.word	0x08010ef5
 8010be4:	08010f17 	.word	0x08010f17
 8010be8:	08010f4f 	.word	0x08010f4f
 8010bec:	08010f73 	.word	0x08010f73

08010bf0 <_cleanup_r>:
 8010bf0:	4901      	ldr	r1, [pc, #4]	; (8010bf8 <_cleanup_r+0x8>)
 8010bf2:	f000 b8af 	b.w	8010d54 <_fwalk_reent>
 8010bf6:	bf00      	nop
 8010bf8:	08010b31 	.word	0x08010b31

08010bfc <__sfmoreglue>:
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	1e4a      	subs	r2, r1, #1
 8010c00:	2568      	movs	r5, #104	; 0x68
 8010c02:	4355      	muls	r5, r2
 8010c04:	460e      	mov	r6, r1
 8010c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c0a:	f7fc f8e5 	bl	800cdd8 <_malloc_r>
 8010c0e:	4604      	mov	r4, r0
 8010c10:	b140      	cbz	r0, 8010c24 <__sfmoreglue+0x28>
 8010c12:	2100      	movs	r1, #0
 8010c14:	e9c0 1600 	strd	r1, r6, [r0]
 8010c18:	300c      	adds	r0, #12
 8010c1a:	60a0      	str	r0, [r4, #8]
 8010c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c20:	f7fc f882 	bl	800cd28 <memset>
 8010c24:	4620      	mov	r0, r4
 8010c26:	bd70      	pop	{r4, r5, r6, pc}

08010c28 <__sfp_lock_acquire>:
 8010c28:	4801      	ldr	r0, [pc, #4]	; (8010c30 <__sfp_lock_acquire+0x8>)
 8010c2a:	f7ff bc98 	b.w	801055e <__retarget_lock_acquire_recursive>
 8010c2e:	bf00      	nop
 8010c30:	20002474 	.word	0x20002474

08010c34 <__sfp_lock_release>:
 8010c34:	4801      	ldr	r0, [pc, #4]	; (8010c3c <__sfp_lock_release+0x8>)
 8010c36:	f7ff bc93 	b.w	8010560 <__retarget_lock_release_recursive>
 8010c3a:	bf00      	nop
 8010c3c:	20002474 	.word	0x20002474

08010c40 <__sinit_lock_acquire>:
 8010c40:	4801      	ldr	r0, [pc, #4]	; (8010c48 <__sinit_lock_acquire+0x8>)
 8010c42:	f7ff bc8c 	b.w	801055e <__retarget_lock_acquire_recursive>
 8010c46:	bf00      	nop
 8010c48:	2000246f 	.word	0x2000246f

08010c4c <__sinit_lock_release>:
 8010c4c:	4801      	ldr	r0, [pc, #4]	; (8010c54 <__sinit_lock_release+0x8>)
 8010c4e:	f7ff bc87 	b.w	8010560 <__retarget_lock_release_recursive>
 8010c52:	bf00      	nop
 8010c54:	2000246f 	.word	0x2000246f

08010c58 <__sinit>:
 8010c58:	b510      	push	{r4, lr}
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	f7ff fff0 	bl	8010c40 <__sinit_lock_acquire>
 8010c60:	69a3      	ldr	r3, [r4, #24]
 8010c62:	b11b      	cbz	r3, 8010c6c <__sinit+0x14>
 8010c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c68:	f7ff bff0 	b.w	8010c4c <__sinit_lock_release>
 8010c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c70:	6523      	str	r3, [r4, #80]	; 0x50
 8010c72:	4b13      	ldr	r3, [pc, #76]	; (8010cc0 <__sinit+0x68>)
 8010c74:	4a13      	ldr	r2, [pc, #76]	; (8010cc4 <__sinit+0x6c>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c7a:	42a3      	cmp	r3, r4
 8010c7c:	bf04      	itt	eq
 8010c7e:	2301      	moveq	r3, #1
 8010c80:	61a3      	streq	r3, [r4, #24]
 8010c82:	4620      	mov	r0, r4
 8010c84:	f000 f820 	bl	8010cc8 <__sfp>
 8010c88:	6060      	str	r0, [r4, #4]
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 f81c 	bl	8010cc8 <__sfp>
 8010c90:	60a0      	str	r0, [r4, #8]
 8010c92:	4620      	mov	r0, r4
 8010c94:	f000 f818 	bl	8010cc8 <__sfp>
 8010c98:	2200      	movs	r2, #0
 8010c9a:	60e0      	str	r0, [r4, #12]
 8010c9c:	2104      	movs	r1, #4
 8010c9e:	6860      	ldr	r0, [r4, #4]
 8010ca0:	f7ff ff82 	bl	8010ba8 <std>
 8010ca4:	68a0      	ldr	r0, [r4, #8]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	2109      	movs	r1, #9
 8010caa:	f7ff ff7d 	bl	8010ba8 <std>
 8010cae:	68e0      	ldr	r0, [r4, #12]
 8010cb0:	2202      	movs	r2, #2
 8010cb2:	2112      	movs	r1, #18
 8010cb4:	f7ff ff78 	bl	8010ba8 <std>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	61a3      	str	r3, [r4, #24]
 8010cbc:	e7d2      	b.n	8010c64 <__sinit+0xc>
 8010cbe:	bf00      	nop
 8010cc0:	080112f0 	.word	0x080112f0
 8010cc4:	08010bf1 	.word	0x08010bf1

08010cc8 <__sfp>:
 8010cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cca:	4607      	mov	r7, r0
 8010ccc:	f7ff ffac 	bl	8010c28 <__sfp_lock_acquire>
 8010cd0:	4b1e      	ldr	r3, [pc, #120]	; (8010d4c <__sfp+0x84>)
 8010cd2:	681e      	ldr	r6, [r3, #0]
 8010cd4:	69b3      	ldr	r3, [r6, #24]
 8010cd6:	b913      	cbnz	r3, 8010cde <__sfp+0x16>
 8010cd8:	4630      	mov	r0, r6
 8010cda:	f7ff ffbd 	bl	8010c58 <__sinit>
 8010cde:	3648      	adds	r6, #72	; 0x48
 8010ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	d503      	bpl.n	8010cf0 <__sfp+0x28>
 8010ce8:	6833      	ldr	r3, [r6, #0]
 8010cea:	b30b      	cbz	r3, 8010d30 <__sfp+0x68>
 8010cec:	6836      	ldr	r6, [r6, #0]
 8010cee:	e7f7      	b.n	8010ce0 <__sfp+0x18>
 8010cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010cf4:	b9d5      	cbnz	r5, 8010d2c <__sfp+0x64>
 8010cf6:	4b16      	ldr	r3, [pc, #88]	; (8010d50 <__sfp+0x88>)
 8010cf8:	60e3      	str	r3, [r4, #12]
 8010cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8010d00:	f7ff fc2c 	bl	801055c <__retarget_lock_init_recursive>
 8010d04:	f7ff ff96 	bl	8010c34 <__sfp_lock_release>
 8010d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d10:	6025      	str	r5, [r4, #0]
 8010d12:	61a5      	str	r5, [r4, #24]
 8010d14:	2208      	movs	r2, #8
 8010d16:	4629      	mov	r1, r5
 8010d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d1c:	f7fc f804 	bl	800cd28 <memset>
 8010d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d28:	4620      	mov	r0, r4
 8010d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2c:	3468      	adds	r4, #104	; 0x68
 8010d2e:	e7d9      	b.n	8010ce4 <__sfp+0x1c>
 8010d30:	2104      	movs	r1, #4
 8010d32:	4638      	mov	r0, r7
 8010d34:	f7ff ff62 	bl	8010bfc <__sfmoreglue>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	6030      	str	r0, [r6, #0]
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d1d5      	bne.n	8010cec <__sfp+0x24>
 8010d40:	f7ff ff78 	bl	8010c34 <__sfp_lock_release>
 8010d44:	230c      	movs	r3, #12
 8010d46:	603b      	str	r3, [r7, #0]
 8010d48:	e7ee      	b.n	8010d28 <__sfp+0x60>
 8010d4a:	bf00      	nop
 8010d4c:	080112f0 	.word	0x080112f0
 8010d50:	ffff0001 	.word	0xffff0001

08010d54 <_fwalk_reent>:
 8010d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d58:	4606      	mov	r6, r0
 8010d5a:	4688      	mov	r8, r1
 8010d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d60:	2700      	movs	r7, #0
 8010d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d66:	f1b9 0901 	subs.w	r9, r9, #1
 8010d6a:	d505      	bpl.n	8010d78 <_fwalk_reent+0x24>
 8010d6c:	6824      	ldr	r4, [r4, #0]
 8010d6e:	2c00      	cmp	r4, #0
 8010d70:	d1f7      	bne.n	8010d62 <_fwalk_reent+0xe>
 8010d72:	4638      	mov	r0, r7
 8010d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d78:	89ab      	ldrh	r3, [r5, #12]
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d907      	bls.n	8010d8e <_fwalk_reent+0x3a>
 8010d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d82:	3301      	adds	r3, #1
 8010d84:	d003      	beq.n	8010d8e <_fwalk_reent+0x3a>
 8010d86:	4629      	mov	r1, r5
 8010d88:	4630      	mov	r0, r6
 8010d8a:	47c0      	blx	r8
 8010d8c:	4307      	orrs	r7, r0
 8010d8e:	3568      	adds	r5, #104	; 0x68
 8010d90:	e7e9      	b.n	8010d66 <_fwalk_reent+0x12>

08010d92 <__swhatbuf_r>:
 8010d92:	b570      	push	{r4, r5, r6, lr}
 8010d94:	460e      	mov	r6, r1
 8010d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d9a:	2900      	cmp	r1, #0
 8010d9c:	b096      	sub	sp, #88	; 0x58
 8010d9e:	4614      	mov	r4, r2
 8010da0:	461d      	mov	r5, r3
 8010da2:	da07      	bge.n	8010db4 <__swhatbuf_r+0x22>
 8010da4:	2300      	movs	r3, #0
 8010da6:	602b      	str	r3, [r5, #0]
 8010da8:	89b3      	ldrh	r3, [r6, #12]
 8010daa:	061a      	lsls	r2, r3, #24
 8010dac:	d410      	bmi.n	8010dd0 <__swhatbuf_r+0x3e>
 8010dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010db2:	e00e      	b.n	8010dd2 <__swhatbuf_r+0x40>
 8010db4:	466a      	mov	r2, sp
 8010db6:	f000 f903 	bl	8010fc0 <_fstat_r>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	dbf2      	blt.n	8010da4 <__swhatbuf_r+0x12>
 8010dbe:	9a01      	ldr	r2, [sp, #4]
 8010dc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010dc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010dc8:	425a      	negs	r2, r3
 8010dca:	415a      	adcs	r2, r3
 8010dcc:	602a      	str	r2, [r5, #0]
 8010dce:	e7ee      	b.n	8010dae <__swhatbuf_r+0x1c>
 8010dd0:	2340      	movs	r3, #64	; 0x40
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	b016      	add	sp, #88	; 0x58
 8010dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ddc <__smakebuf_r>:
 8010ddc:	898b      	ldrh	r3, [r1, #12]
 8010dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010de0:	079d      	lsls	r5, r3, #30
 8010de2:	4606      	mov	r6, r0
 8010de4:	460c      	mov	r4, r1
 8010de6:	d507      	bpl.n	8010df8 <__smakebuf_r+0x1c>
 8010de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dec:	6023      	str	r3, [r4, #0]
 8010dee:	6123      	str	r3, [r4, #16]
 8010df0:	2301      	movs	r3, #1
 8010df2:	6163      	str	r3, [r4, #20]
 8010df4:	b002      	add	sp, #8
 8010df6:	bd70      	pop	{r4, r5, r6, pc}
 8010df8:	ab01      	add	r3, sp, #4
 8010dfa:	466a      	mov	r2, sp
 8010dfc:	f7ff ffc9 	bl	8010d92 <__swhatbuf_r>
 8010e00:	9900      	ldr	r1, [sp, #0]
 8010e02:	4605      	mov	r5, r0
 8010e04:	4630      	mov	r0, r6
 8010e06:	f7fb ffe7 	bl	800cdd8 <_malloc_r>
 8010e0a:	b948      	cbnz	r0, 8010e20 <__smakebuf_r+0x44>
 8010e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e10:	059a      	lsls	r2, r3, #22
 8010e12:	d4ef      	bmi.n	8010df4 <__smakebuf_r+0x18>
 8010e14:	f023 0303 	bic.w	r3, r3, #3
 8010e18:	f043 0302 	orr.w	r3, r3, #2
 8010e1c:	81a3      	strh	r3, [r4, #12]
 8010e1e:	e7e3      	b.n	8010de8 <__smakebuf_r+0xc>
 8010e20:	4b0d      	ldr	r3, [pc, #52]	; (8010e58 <__smakebuf_r+0x7c>)
 8010e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	6020      	str	r0, [r4, #0]
 8010e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e2c:	81a3      	strh	r3, [r4, #12]
 8010e2e:	9b00      	ldr	r3, [sp, #0]
 8010e30:	6163      	str	r3, [r4, #20]
 8010e32:	9b01      	ldr	r3, [sp, #4]
 8010e34:	6120      	str	r0, [r4, #16]
 8010e36:	b15b      	cbz	r3, 8010e50 <__smakebuf_r+0x74>
 8010e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e3c:	4630      	mov	r0, r6
 8010e3e:	f000 f8d1 	bl	8010fe4 <_isatty_r>
 8010e42:	b128      	cbz	r0, 8010e50 <__smakebuf_r+0x74>
 8010e44:	89a3      	ldrh	r3, [r4, #12]
 8010e46:	f023 0303 	bic.w	r3, r3, #3
 8010e4a:	f043 0301 	orr.w	r3, r3, #1
 8010e4e:	81a3      	strh	r3, [r4, #12]
 8010e50:	89a0      	ldrh	r0, [r4, #12]
 8010e52:	4305      	orrs	r5, r0
 8010e54:	81a5      	strh	r5, [r4, #12]
 8010e56:	e7cd      	b.n	8010df4 <__smakebuf_r+0x18>
 8010e58:	08010bf1 	.word	0x08010bf1

08010e5c <_malloc_usable_size_r>:
 8010e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e60:	1f18      	subs	r0, r3, #4
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	bfbc      	itt	lt
 8010e66:	580b      	ldrlt	r3, [r1, r0]
 8010e68:	18c0      	addlt	r0, r0, r3
 8010e6a:	4770      	bx	lr

08010e6c <_raise_r>:
 8010e6c:	291f      	cmp	r1, #31
 8010e6e:	b538      	push	{r3, r4, r5, lr}
 8010e70:	4604      	mov	r4, r0
 8010e72:	460d      	mov	r5, r1
 8010e74:	d904      	bls.n	8010e80 <_raise_r+0x14>
 8010e76:	2316      	movs	r3, #22
 8010e78:	6003      	str	r3, [r0, #0]
 8010e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7e:	bd38      	pop	{r3, r4, r5, pc}
 8010e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e82:	b112      	cbz	r2, 8010e8a <_raise_r+0x1e>
 8010e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e88:	b94b      	cbnz	r3, 8010e9e <_raise_r+0x32>
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f000 f830 	bl	8010ef0 <_getpid_r>
 8010e90:	462a      	mov	r2, r5
 8010e92:	4601      	mov	r1, r0
 8010e94:	4620      	mov	r0, r4
 8010e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e9a:	f000 b817 	b.w	8010ecc <_kill_r>
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d00a      	beq.n	8010eb8 <_raise_r+0x4c>
 8010ea2:	1c59      	adds	r1, r3, #1
 8010ea4:	d103      	bne.n	8010eae <_raise_r+0x42>
 8010ea6:	2316      	movs	r3, #22
 8010ea8:	6003      	str	r3, [r0, #0]
 8010eaa:	2001      	movs	r0, #1
 8010eac:	e7e7      	b.n	8010e7e <_raise_r+0x12>
 8010eae:	2400      	movs	r4, #0
 8010eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	4798      	blx	r3
 8010eb8:	2000      	movs	r0, #0
 8010eba:	e7e0      	b.n	8010e7e <_raise_r+0x12>

08010ebc <raise>:
 8010ebc:	4b02      	ldr	r3, [pc, #8]	; (8010ec8 <raise+0xc>)
 8010ebe:	4601      	mov	r1, r0
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	f7ff bfd3 	b.w	8010e6c <_raise_r>
 8010ec6:	bf00      	nop
 8010ec8:	20000540 	.word	0x20000540

08010ecc <_kill_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	; (8010eec <_kill_r+0x20>)
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	4608      	mov	r0, r1
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	602b      	str	r3, [r5, #0]
 8010eda:	f7f2 fd2b 	bl	8003934 <_kill>
 8010ede:	1c43      	adds	r3, r0, #1
 8010ee0:	d102      	bne.n	8010ee8 <_kill_r+0x1c>
 8010ee2:	682b      	ldr	r3, [r5, #0]
 8010ee4:	b103      	cbz	r3, 8010ee8 <_kill_r+0x1c>
 8010ee6:	6023      	str	r3, [r4, #0]
 8010ee8:	bd38      	pop	{r3, r4, r5, pc}
 8010eea:	bf00      	nop
 8010eec:	20002468 	.word	0x20002468

08010ef0 <_getpid_r>:
 8010ef0:	f7f2 bd18 	b.w	8003924 <_getpid>

08010ef4 <__sread>:
 8010ef4:	b510      	push	{r4, lr}
 8010ef6:	460c      	mov	r4, r1
 8010ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010efc:	f000 f894 	bl	8011028 <_read_r>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	bfab      	itete	ge
 8010f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f06:	89a3      	ldrhlt	r3, [r4, #12]
 8010f08:	181b      	addge	r3, r3, r0
 8010f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f0e:	bfac      	ite	ge
 8010f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f12:	81a3      	strhlt	r3, [r4, #12]
 8010f14:	bd10      	pop	{r4, pc}

08010f16 <__swrite>:
 8010f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1a:	461f      	mov	r7, r3
 8010f1c:	898b      	ldrh	r3, [r1, #12]
 8010f1e:	05db      	lsls	r3, r3, #23
 8010f20:	4605      	mov	r5, r0
 8010f22:	460c      	mov	r4, r1
 8010f24:	4616      	mov	r6, r2
 8010f26:	d505      	bpl.n	8010f34 <__swrite+0x1e>
 8010f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f000 f868 	bl	8011004 <_lseek_r>
 8010f34:	89a3      	ldrh	r3, [r4, #12]
 8010f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f3e:	81a3      	strh	r3, [r4, #12]
 8010f40:	4632      	mov	r2, r6
 8010f42:	463b      	mov	r3, r7
 8010f44:	4628      	mov	r0, r5
 8010f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f4a:	f000 b817 	b.w	8010f7c <_write_r>

08010f4e <__sseek>:
 8010f4e:	b510      	push	{r4, lr}
 8010f50:	460c      	mov	r4, r1
 8010f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f56:	f000 f855 	bl	8011004 <_lseek_r>
 8010f5a:	1c43      	adds	r3, r0, #1
 8010f5c:	89a3      	ldrh	r3, [r4, #12]
 8010f5e:	bf15      	itete	ne
 8010f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f6a:	81a3      	strheq	r3, [r4, #12]
 8010f6c:	bf18      	it	ne
 8010f6e:	81a3      	strhne	r3, [r4, #12]
 8010f70:	bd10      	pop	{r4, pc}

08010f72 <__sclose>:
 8010f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f76:	f000 b813 	b.w	8010fa0 <_close_r>
	...

08010f7c <_write_r>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	4d07      	ldr	r5, [pc, #28]	; (8010f9c <_write_r+0x20>)
 8010f80:	4604      	mov	r4, r0
 8010f82:	4608      	mov	r0, r1
 8010f84:	4611      	mov	r1, r2
 8010f86:	2200      	movs	r2, #0
 8010f88:	602a      	str	r2, [r5, #0]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	f7f2 fd09 	bl	80039a2 <_write>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d102      	bne.n	8010f9a <_write_r+0x1e>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	b103      	cbz	r3, 8010f9a <_write_r+0x1e>
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	20002468 	.word	0x20002468

08010fa0 <_close_r>:
 8010fa0:	b538      	push	{r3, r4, r5, lr}
 8010fa2:	4d06      	ldr	r5, [pc, #24]	; (8010fbc <_close_r+0x1c>)
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	4608      	mov	r0, r1
 8010faa:	602b      	str	r3, [r5, #0]
 8010fac:	f7f2 fd15 	bl	80039da <_close>
 8010fb0:	1c43      	adds	r3, r0, #1
 8010fb2:	d102      	bne.n	8010fba <_close_r+0x1a>
 8010fb4:	682b      	ldr	r3, [r5, #0]
 8010fb6:	b103      	cbz	r3, 8010fba <_close_r+0x1a>
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	bd38      	pop	{r3, r4, r5, pc}
 8010fbc:	20002468 	.word	0x20002468

08010fc0 <_fstat_r>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4d07      	ldr	r5, [pc, #28]	; (8010fe0 <_fstat_r+0x20>)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	4608      	mov	r0, r1
 8010fca:	4611      	mov	r1, r2
 8010fcc:	602b      	str	r3, [r5, #0]
 8010fce:	f7f2 fd10 	bl	80039f2 <_fstat>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	d102      	bne.n	8010fdc <_fstat_r+0x1c>
 8010fd6:	682b      	ldr	r3, [r5, #0]
 8010fd8:	b103      	cbz	r3, 8010fdc <_fstat_r+0x1c>
 8010fda:	6023      	str	r3, [r4, #0]
 8010fdc:	bd38      	pop	{r3, r4, r5, pc}
 8010fde:	bf00      	nop
 8010fe0:	20002468 	.word	0x20002468

08010fe4 <_isatty_r>:
 8010fe4:	b538      	push	{r3, r4, r5, lr}
 8010fe6:	4d06      	ldr	r5, [pc, #24]	; (8011000 <_isatty_r+0x1c>)
 8010fe8:	2300      	movs	r3, #0
 8010fea:	4604      	mov	r4, r0
 8010fec:	4608      	mov	r0, r1
 8010fee:	602b      	str	r3, [r5, #0]
 8010ff0:	f7f2 fd0f 	bl	8003a12 <_isatty>
 8010ff4:	1c43      	adds	r3, r0, #1
 8010ff6:	d102      	bne.n	8010ffe <_isatty_r+0x1a>
 8010ff8:	682b      	ldr	r3, [r5, #0]
 8010ffa:	b103      	cbz	r3, 8010ffe <_isatty_r+0x1a>
 8010ffc:	6023      	str	r3, [r4, #0]
 8010ffe:	bd38      	pop	{r3, r4, r5, pc}
 8011000:	20002468 	.word	0x20002468

08011004 <_lseek_r>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4d07      	ldr	r5, [pc, #28]	; (8011024 <_lseek_r+0x20>)
 8011008:	4604      	mov	r4, r0
 801100a:	4608      	mov	r0, r1
 801100c:	4611      	mov	r1, r2
 801100e:	2200      	movs	r2, #0
 8011010:	602a      	str	r2, [r5, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	f7f2 fd08 	bl	8003a28 <_lseek>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d102      	bne.n	8011022 <_lseek_r+0x1e>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	b103      	cbz	r3, 8011022 <_lseek_r+0x1e>
 8011020:	6023      	str	r3, [r4, #0]
 8011022:	bd38      	pop	{r3, r4, r5, pc}
 8011024:	20002468 	.word	0x20002468

08011028 <_read_r>:
 8011028:	b538      	push	{r3, r4, r5, lr}
 801102a:	4d07      	ldr	r5, [pc, #28]	; (8011048 <_read_r+0x20>)
 801102c:	4604      	mov	r4, r0
 801102e:	4608      	mov	r0, r1
 8011030:	4611      	mov	r1, r2
 8011032:	2200      	movs	r2, #0
 8011034:	602a      	str	r2, [r5, #0]
 8011036:	461a      	mov	r2, r3
 8011038:	f7f2 fc96 	bl	8003968 <_read>
 801103c:	1c43      	adds	r3, r0, #1
 801103e:	d102      	bne.n	8011046 <_read_r+0x1e>
 8011040:	682b      	ldr	r3, [r5, #0]
 8011042:	b103      	cbz	r3, 8011046 <_read_r+0x1e>
 8011044:	6023      	str	r3, [r4, #0]
 8011046:	bd38      	pop	{r3, r4, r5, pc}
 8011048:	20002468 	.word	0x20002468

0801104c <_init>:
 801104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104e:	bf00      	nop
 8011050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011052:	bc08      	pop	{r3}
 8011054:	469e      	mov	lr, r3
 8011056:	4770      	bx	lr

08011058 <_fini>:
 8011058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105a:	bf00      	nop
 801105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801105e:	bc08      	pop	{r3}
 8011060:	469e      	mov	lr, r3
 8011062:	4770      	bx	lr
