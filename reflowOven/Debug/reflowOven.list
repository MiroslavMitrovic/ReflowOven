
reflowOven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b974  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0802bb08  0802bb08  0001bb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c18c  0802c18c  00020644  2**0
                  CONTENTS
  4 .ARM          00000008  0802c18c  0802c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c194  0802c194  00020644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c194  0802c194  0001c194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c198  0802c198  0001c198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000644  20000000  0802c19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000644  0802c7e0  00020644  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  0802c7e0  0002198c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020644  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192bb  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b1  00000000  00000000  0003992f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003cee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000de13  00000000  00000000  0003f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005578  00000000  00000000  0004cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000524cb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005e70  00000000  00000000  00052520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000004e  00000000  00000000  00058390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000644 	.word	0x20000644
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0802baec 	.word	0x0802baec

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000648 	.word	0x20000648
 80201cc:	0802baec 	.word	0x0802baec

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_drsub>:
 8020280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020284:	e002      	b.n	802028c <__adddf3>
 8020286:	bf00      	nop

08020288 <__aeabi_dsub>:
 8020288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802028c <__adddf3>:
 802028c:	b530      	push	{r4, r5, lr}
 802028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020296:	ea94 0f05 	teq	r4, r5
 802029a:	bf08      	it	eq
 802029c:	ea90 0f02 	teqeq	r0, r2
 80202a0:	bf1f      	itttt	ne
 80202a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202b2:	f000 80e2 	beq.w	802047a <__adddf3+0x1ee>
 80202b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202be:	bfb8      	it	lt
 80202c0:	426d      	neglt	r5, r5
 80202c2:	dd0c      	ble.n	80202de <__adddf3+0x52>
 80202c4:	442c      	add	r4, r5
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	ea82 0000 	eor.w	r0, r2, r0
 80202d2:	ea83 0101 	eor.w	r1, r3, r1
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	2d36      	cmp	r5, #54	; 0x36
 80202e0:	bf88      	it	hi
 80202e2:	bd30      	pophi	{r4, r5, pc}
 80202e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80202f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202f4:	d002      	beq.n	80202fc <__adddf3+0x70>
 80202f6:	4240      	negs	r0, r0
 80202f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020308:	d002      	beq.n	8020310 <__adddf3+0x84>
 802030a:	4252      	negs	r2, r2
 802030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020310:	ea94 0f05 	teq	r4, r5
 8020314:	f000 80a7 	beq.w	8020466 <__adddf3+0x1da>
 8020318:	f1a4 0401 	sub.w	r4, r4, #1
 802031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020320:	db0d      	blt.n	802033e <__adddf3+0xb2>
 8020322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020326:	fa22 f205 	lsr.w	r2, r2, r5
 802032a:	1880      	adds	r0, r0, r2
 802032c:	f141 0100 	adc.w	r1, r1, #0
 8020330:	fa03 f20e 	lsl.w	r2, r3, lr
 8020334:	1880      	adds	r0, r0, r2
 8020336:	fa43 f305 	asr.w	r3, r3, r5
 802033a:	4159      	adcs	r1, r3
 802033c:	e00e      	b.n	802035c <__adddf3+0xd0>
 802033e:	f1a5 0520 	sub.w	r5, r5, #32
 8020342:	f10e 0e20 	add.w	lr, lr, #32
 8020346:	2a01      	cmp	r2, #1
 8020348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802034c:	bf28      	it	cs
 802034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020352:	fa43 f305 	asr.w	r3, r3, r5
 8020356:	18c0      	adds	r0, r0, r3
 8020358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020360:	d507      	bpl.n	8020372 <__adddf3+0xe6>
 8020362:	f04f 0e00 	mov.w	lr, #0
 8020366:	f1dc 0c00 	rsbs	ip, ip, #0
 802036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020376:	d31b      	bcc.n	80203b0 <__adddf3+0x124>
 8020378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802037c:	d30c      	bcc.n	8020398 <__adddf3+0x10c>
 802037e:	0849      	lsrs	r1, r1, #1
 8020380:	ea5f 0030 	movs.w	r0, r0, rrx
 8020384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020388:	f104 0401 	add.w	r4, r4, #1
 802038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020394:	f080 809a 	bcs.w	80204cc <__adddf3+0x240>
 8020398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802039c:	bf08      	it	eq
 802039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203a2:	f150 0000 	adcs.w	r0, r0, #0
 80203a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203aa:	ea41 0105 	orr.w	r1, r1, r5
 80203ae:	bd30      	pop	{r4, r5, pc}
 80203b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203b4:	4140      	adcs	r0, r0
 80203b6:	eb41 0101 	adc.w	r1, r1, r1
 80203ba:	3c01      	subs	r4, #1
 80203bc:	bf28      	it	cs
 80203be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203c2:	d2e9      	bcs.n	8020398 <__adddf3+0x10c>
 80203c4:	f091 0f00 	teq	r1, #0
 80203c8:	bf04      	itt	eq
 80203ca:	4601      	moveq	r1, r0
 80203cc:	2000      	moveq	r0, #0
 80203ce:	fab1 f381 	clz	r3, r1
 80203d2:	bf08      	it	eq
 80203d4:	3320      	addeq	r3, #32
 80203d6:	f1a3 030b 	sub.w	r3, r3, #11
 80203da:	f1b3 0220 	subs.w	r2, r3, #32
 80203de:	da0c      	bge.n	80203fa <__adddf3+0x16e>
 80203e0:	320c      	adds	r2, #12
 80203e2:	dd08      	ble.n	80203f6 <__adddf3+0x16a>
 80203e4:	f102 0c14 	add.w	ip, r2, #20
 80203e8:	f1c2 020c 	rsb	r2, r2, #12
 80203ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80203f0:	fa21 f102 	lsr.w	r1, r1, r2
 80203f4:	e00c      	b.n	8020410 <__adddf3+0x184>
 80203f6:	f102 0214 	add.w	r2, r2, #20
 80203fa:	bfd8      	it	le
 80203fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020400:	fa01 f102 	lsl.w	r1, r1, r2
 8020404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020408:	bfdc      	itt	le
 802040a:	ea41 010c 	orrle.w	r1, r1, ip
 802040e:	4090      	lslle	r0, r2
 8020410:	1ae4      	subs	r4, r4, r3
 8020412:	bfa2      	ittt	ge
 8020414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020418:	4329      	orrge	r1, r5
 802041a:	bd30      	popge	{r4, r5, pc}
 802041c:	ea6f 0404 	mvn.w	r4, r4
 8020420:	3c1f      	subs	r4, #31
 8020422:	da1c      	bge.n	802045e <__adddf3+0x1d2>
 8020424:	340c      	adds	r4, #12
 8020426:	dc0e      	bgt.n	8020446 <__adddf3+0x1ba>
 8020428:	f104 0414 	add.w	r4, r4, #20
 802042c:	f1c4 0220 	rsb	r2, r4, #32
 8020430:	fa20 f004 	lsr.w	r0, r0, r4
 8020434:	fa01 f302 	lsl.w	r3, r1, r2
 8020438:	ea40 0003 	orr.w	r0, r0, r3
 802043c:	fa21 f304 	lsr.w	r3, r1, r4
 8020440:	ea45 0103 	orr.w	r1, r5, r3
 8020444:	bd30      	pop	{r4, r5, pc}
 8020446:	f1c4 040c 	rsb	r4, r4, #12
 802044a:	f1c4 0220 	rsb	r2, r4, #32
 802044e:	fa20 f002 	lsr.w	r0, r0, r2
 8020452:	fa01 f304 	lsl.w	r3, r1, r4
 8020456:	ea40 0003 	orr.w	r0, r0, r3
 802045a:	4629      	mov	r1, r5
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	fa21 f004 	lsr.w	r0, r1, r4
 8020462:	4629      	mov	r1, r5
 8020464:	bd30      	pop	{r4, r5, pc}
 8020466:	f094 0f00 	teq	r4, #0
 802046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802046e:	bf06      	itte	eq
 8020470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020474:	3401      	addeq	r4, #1
 8020476:	3d01      	subne	r5, #1
 8020478:	e74e      	b.n	8020318 <__adddf3+0x8c>
 802047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802047e:	bf18      	it	ne
 8020480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020484:	d029      	beq.n	80204da <__adddf3+0x24e>
 8020486:	ea94 0f05 	teq	r4, r5
 802048a:	bf08      	it	eq
 802048c:	ea90 0f02 	teqeq	r0, r2
 8020490:	d005      	beq.n	802049e <__adddf3+0x212>
 8020492:	ea54 0c00 	orrs.w	ip, r4, r0
 8020496:	bf04      	itt	eq
 8020498:	4619      	moveq	r1, r3
 802049a:	4610      	moveq	r0, r2
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	ea91 0f03 	teq	r1, r3
 80204a2:	bf1e      	ittt	ne
 80204a4:	2100      	movne	r1, #0
 80204a6:	2000      	movne	r0, #0
 80204a8:	bd30      	popne	{r4, r5, pc}
 80204aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ae:	d105      	bne.n	80204bc <__adddf3+0x230>
 80204b0:	0040      	lsls	r0, r0, #1
 80204b2:	4149      	adcs	r1, r1
 80204b4:	bf28      	it	cs
 80204b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ba:	bd30      	pop	{r4, r5, pc}
 80204bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204c0:	bf3c      	itt	cc
 80204c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204c6:	bd30      	popcc	{r4, r5, pc}
 80204c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204d4:	f04f 0000 	mov.w	r0, #0
 80204d8:	bd30      	pop	{r4, r5, pc}
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf1a      	itte	ne
 80204e0:	4619      	movne	r1, r3
 80204e2:	4610      	movne	r0, r2
 80204e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204e8:	bf1c      	itt	ne
 80204ea:	460b      	movne	r3, r1
 80204ec:	4602      	movne	r2, r0
 80204ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204f2:	bf06      	itte	eq
 80204f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204f8:	ea91 0f03 	teqeq	r1, r3
 80204fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020500:	bd30      	pop	{r4, r5, pc}
 8020502:	bf00      	nop

08020504 <__aeabi_ui2d>:
 8020504:	f090 0f00 	teq	r0, #0
 8020508:	bf04      	itt	eq
 802050a:	2100      	moveq	r1, #0
 802050c:	4770      	bxeq	lr
 802050e:	b530      	push	{r4, r5, lr}
 8020510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020518:	f04f 0500 	mov.w	r5, #0
 802051c:	f04f 0100 	mov.w	r1, #0
 8020520:	e750      	b.n	80203c4 <__adddf3+0x138>
 8020522:	bf00      	nop

08020524 <__aeabi_i2d>:
 8020524:	f090 0f00 	teq	r0, #0
 8020528:	bf04      	itt	eq
 802052a:	2100      	moveq	r1, #0
 802052c:	4770      	bxeq	lr
 802052e:	b530      	push	{r4, r5, lr}
 8020530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802053c:	bf48      	it	mi
 802053e:	4240      	negmi	r0, r0
 8020540:	f04f 0100 	mov.w	r1, #0
 8020544:	e73e      	b.n	80203c4 <__adddf3+0x138>
 8020546:	bf00      	nop

08020548 <__aeabi_f2d>:
 8020548:	0042      	lsls	r2, r0, #1
 802054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020556:	bf1f      	itttt	ne
 8020558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020564:	4770      	bxne	lr
 8020566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802056a:	bf08      	it	eq
 802056c:	4770      	bxeq	lr
 802056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020572:	bf04      	itt	eq
 8020574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020578:	4770      	bxeq	lr
 802057a:	b530      	push	{r4, r5, lr}
 802057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020588:	e71c      	b.n	80203c4 <__adddf3+0x138>
 802058a:	bf00      	nop

0802058c <__aeabi_ul2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f04f 0500 	mov.w	r5, #0
 802059a:	e00a      	b.n	80205b2 <__aeabi_l2d+0x16>

0802059c <__aeabi_l2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205aa:	d502      	bpl.n	80205b2 <__aeabi_l2d+0x16>
 80205ac:	4240      	negs	r0, r0
 80205ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205be:	f43f aed8 	beq.w	8020372 <__adddf3+0xe6>
 80205c2:	f04f 0203 	mov.w	r2, #3
 80205c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ca:	bf18      	it	ne
 80205cc:	3203      	addne	r2, #3
 80205ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205d2:	bf18      	it	ne
 80205d4:	3203      	addne	r2, #3
 80205d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	fa00 fc03 	lsl.w	ip, r0, r3
 80205e2:	fa20 f002 	lsr.w	r0, r0, r2
 80205e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205ea:	ea40 000e 	orr.w	r0, r0, lr
 80205ee:	fa21 f102 	lsr.w	r1, r1, r2
 80205f2:	4414      	add	r4, r2
 80205f4:	e6bd      	b.n	8020372 <__adddf3+0xe6>
 80205f6:	bf00      	nop

080205f8 <__aeabi_dmul>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80205fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020606:	bf1d      	ittte	ne
 8020608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802060c:	ea94 0f0c 	teqne	r4, ip
 8020610:	ea95 0f0c 	teqne	r5, ip
 8020614:	f000 f8de 	bleq	80207d4 <__aeabi_dmul+0x1dc>
 8020618:	442c      	add	r4, r5
 802061a:	ea81 0603 	eor.w	r6, r1, r3
 802061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802062a:	bf18      	it	ne
 802062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020638:	d038      	beq.n	80206ac <__aeabi_dmul+0xb4>
 802063a:	fba0 ce02 	umull	ip, lr, r0, r2
 802063e:	f04f 0500 	mov.w	r5, #0
 8020642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802064e:	f04f 0600 	mov.w	r6, #0
 8020652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020656:	f09c 0f00 	teq	ip, #0
 802065a:	bf18      	it	ne
 802065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802066c:	d204      	bcs.n	8020678 <__aeabi_dmul+0x80>
 802066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020672:	416d      	adcs	r5, r5
 8020674:	eb46 0606 	adc.w	r6, r6, r6
 8020678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020690:	bf88      	it	hi
 8020692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020696:	d81e      	bhi.n	80206d6 <__aeabi_dmul+0xde>
 8020698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802069c:	bf08      	it	eq
 802069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206a2:	f150 0000 	adcs.w	r0, r0, #0
 80206a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206aa:	bd70      	pop	{r4, r5, r6, pc}
 80206ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206b0:	ea46 0101 	orr.w	r1, r6, r1
 80206b4:	ea40 0002 	orr.w	r0, r0, r2
 80206b8:	ea81 0103 	eor.w	r1, r1, r3
 80206bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206c0:	bfc2      	ittt	gt
 80206c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ca:	bd70      	popgt	{r4, r5, r6, pc}
 80206cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206d0:	f04f 0e00 	mov.w	lr, #0
 80206d4:	3c01      	subs	r4, #1
 80206d6:	f300 80ab 	bgt.w	8020830 <__aeabi_dmul+0x238>
 80206da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206de:	bfde      	ittt	le
 80206e0:	2000      	movle	r0, #0
 80206e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206e6:	bd70      	pople	{r4, r5, r6, pc}
 80206e8:	f1c4 0400 	rsb	r4, r4, #0
 80206ec:	3c20      	subs	r4, #32
 80206ee:	da35      	bge.n	802075c <__aeabi_dmul+0x164>
 80206f0:	340c      	adds	r4, #12
 80206f2:	dc1b      	bgt.n	802072c <__aeabi_dmul+0x134>
 80206f4:	f104 0414 	add.w	r4, r4, #20
 80206f8:	f1c4 0520 	rsb	r5, r4, #32
 80206fc:	fa00 f305 	lsl.w	r3, r0, r5
 8020700:	fa20 f004 	lsr.w	r0, r0, r4
 8020704:	fa01 f205 	lsl.w	r2, r1, r5
 8020708:	ea40 0002 	orr.w	r0, r0, r2
 802070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020718:	fa21 f604 	lsr.w	r6, r1, r4
 802071c:	eb42 0106 	adc.w	r1, r2, r6
 8020720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020724:	bf08      	it	eq
 8020726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f1c4 040c 	rsb	r4, r4, #12
 8020730:	f1c4 0520 	rsb	r5, r4, #32
 8020734:	fa00 f304 	lsl.w	r3, r0, r4
 8020738:	fa20 f005 	lsr.w	r0, r0, r5
 802073c:	fa01 f204 	lsl.w	r2, r1, r4
 8020740:	ea40 0002 	orr.w	r0, r0, r2
 8020744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802074c:	f141 0100 	adc.w	r1, r1, #0
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 0520 	rsb	r5, r4, #32
 8020760:	fa00 f205 	lsl.w	r2, r0, r5
 8020764:	ea4e 0e02 	orr.w	lr, lr, r2
 8020768:	fa20 f304 	lsr.w	r3, r0, r4
 802076c:	fa01 f205 	lsl.w	r2, r1, r5
 8020770:	ea43 0302 	orr.w	r3, r3, r2
 8020774:	fa21 f004 	lsr.w	r0, r1, r4
 8020778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802077c:	fa21 f204 	lsr.w	r2, r1, r4
 8020780:	ea20 0002 	bic.w	r0, r0, r2
 8020784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802078c:	bf08      	it	eq
 802078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	f094 0f00 	teq	r4, #0
 8020798:	d10f      	bne.n	80207ba <__aeabi_dmul+0x1c2>
 802079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802079e:	0040      	lsls	r0, r0, #1
 80207a0:	eb41 0101 	adc.w	r1, r1, r1
 80207a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207a8:	bf08      	it	eq
 80207aa:	3c01      	subeq	r4, #1
 80207ac:	d0f7      	beq.n	802079e <__aeabi_dmul+0x1a6>
 80207ae:	ea41 0106 	orr.w	r1, r1, r6
 80207b2:	f095 0f00 	teq	r5, #0
 80207b6:	bf18      	it	ne
 80207b8:	4770      	bxne	lr
 80207ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207be:	0052      	lsls	r2, r2, #1
 80207c0:	eb43 0303 	adc.w	r3, r3, r3
 80207c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207c8:	bf08      	it	eq
 80207ca:	3d01      	subeq	r5, #1
 80207cc:	d0f7      	beq.n	80207be <__aeabi_dmul+0x1c6>
 80207ce:	ea43 0306 	orr.w	r3, r3, r6
 80207d2:	4770      	bx	lr
 80207d4:	ea94 0f0c 	teq	r4, ip
 80207d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207dc:	bf18      	it	ne
 80207de:	ea95 0f0c 	teqne	r5, ip
 80207e2:	d00c      	beq.n	80207fe <__aeabi_dmul+0x206>
 80207e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207e8:	bf18      	it	ne
 80207ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207ee:	d1d1      	bne.n	8020794 <__aeabi_dmul+0x19c>
 80207f0:	ea81 0103 	eor.w	r1, r1, r3
 80207f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207f8:	f04f 0000 	mov.w	r0, #0
 80207fc:	bd70      	pop	{r4, r5, r6, pc}
 80207fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020802:	bf06      	itte	eq
 8020804:	4610      	moveq	r0, r2
 8020806:	4619      	moveq	r1, r3
 8020808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802080c:	d019      	beq.n	8020842 <__aeabi_dmul+0x24a>
 802080e:	ea94 0f0c 	teq	r4, ip
 8020812:	d102      	bne.n	802081a <__aeabi_dmul+0x222>
 8020814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020818:	d113      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802081a:	ea95 0f0c 	teq	r5, ip
 802081e:	d105      	bne.n	802082c <__aeabi_dmul+0x234>
 8020820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020824:	bf1c      	itt	ne
 8020826:	4610      	movne	r0, r2
 8020828:	4619      	movne	r1, r3
 802082a:	d10a      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802082c:	ea81 0103 	eor.w	r1, r1, r3
 8020830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	bd70      	pop	{r4, r5, r6, pc}
 8020842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802084a:	bd70      	pop	{r4, r5, r6, pc}

0802084c <__aeabi_ddiv>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802085a:	bf1d      	ittte	ne
 802085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020860:	ea94 0f0c 	teqne	r4, ip
 8020864:	ea95 0f0c 	teqne	r5, ip
 8020868:	f000 f8a7 	bleq	80209ba <__aeabi_ddiv+0x16e>
 802086c:	eba4 0405 	sub.w	r4, r4, r5
 8020870:	ea81 0e03 	eor.w	lr, r1, r3
 8020874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802087c:	f000 8088 	beq.w	8020990 <__aeabi_ddiv+0x144>
 8020880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208a4:	429d      	cmp	r5, r3
 80208a6:	bf08      	it	eq
 80208a8:	4296      	cmpeq	r6, r2
 80208aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208b2:	d202      	bcs.n	80208ba <__aeabi_ddiv+0x6e>
 80208b4:	085b      	lsrs	r3, r3, #1
 80208b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ba:	1ab6      	subs	r6, r6, r2
 80208bc:	eb65 0503 	sbc.w	r5, r5, r3
 80208c0:	085b      	lsrs	r3, r3, #1
 80208c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80208d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208d6:	bf22      	ittt	cs
 80208d8:	1ab6      	subcs	r6, r6, r2
 80208da:	4675      	movcs	r5, lr
 80208dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208ee:	bf22      	ittt	cs
 80208f0:	1ab6      	subcs	r6, r6, r2
 80208f2:	4675      	movcs	r5, lr
 80208f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208f8:	085b      	lsrs	r3, r3, #1
 80208fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020928:	ea55 0e06 	orrs.w	lr, r5, r6
 802092c:	d018      	beq.n	8020960 <__aeabi_ddiv+0x114>
 802092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802094a:	d1c0      	bne.n	80208ce <__aeabi_ddiv+0x82>
 802094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020950:	d10b      	bne.n	802096a <__aeabi_ddiv+0x11e>
 8020952:	ea41 0100 	orr.w	r1, r1, r0
 8020956:	f04f 0000 	mov.w	r0, #0
 802095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802095e:	e7b6      	b.n	80208ce <__aeabi_ddiv+0x82>
 8020960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020964:	bf04      	itt	eq
 8020966:	4301      	orreq	r1, r0
 8020968:	2000      	moveq	r0, #0
 802096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802096e:	bf88      	it	hi
 8020970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020974:	f63f aeaf 	bhi.w	80206d6 <__aeabi_dmul+0xde>
 8020978:	ebb5 0c03 	subs.w	ip, r5, r3
 802097c:	bf04      	itt	eq
 802097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020986:	f150 0000 	adcs.w	r0, r0, #0
 802098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802099c:	bfc2      	ittt	gt
 802099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209a6:	bd70      	popgt	{r4, r5, r6, pc}
 80209a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ac:	f04f 0e00 	mov.w	lr, #0
 80209b0:	3c01      	subs	r4, #1
 80209b2:	e690      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209b4:	ea45 0e06 	orr.w	lr, r5, r6
 80209b8:	e68d      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209be:	ea94 0f0c 	teq	r4, ip
 80209c2:	bf08      	it	eq
 80209c4:	ea95 0f0c 	teqeq	r5, ip
 80209c8:	f43f af3b 	beq.w	8020842 <__aeabi_dmul+0x24a>
 80209cc:	ea94 0f0c 	teq	r4, ip
 80209d0:	d10a      	bne.n	80209e8 <__aeabi_ddiv+0x19c>
 80209d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209d6:	f47f af34 	bne.w	8020842 <__aeabi_dmul+0x24a>
 80209da:	ea95 0f0c 	teq	r5, ip
 80209de:	f47f af25 	bne.w	802082c <__aeabi_dmul+0x234>
 80209e2:	4610      	mov	r0, r2
 80209e4:	4619      	mov	r1, r3
 80209e6:	e72c      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209e8:	ea95 0f0c 	teq	r5, ip
 80209ec:	d106      	bne.n	80209fc <__aeabi_ddiv+0x1b0>
 80209ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209f2:	f43f aefd 	beq.w	80207f0 <__aeabi_dmul+0x1f8>
 80209f6:	4610      	mov	r0, r2
 80209f8:	4619      	mov	r1, r3
 80209fa:	e722      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a00:	bf18      	it	ne
 8020a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a06:	f47f aec5 	bne.w	8020794 <__aeabi_dmul+0x19c>
 8020a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a0e:	f47f af0d 	bne.w	802082c <__aeabi_dmul+0x234>
 8020a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a16:	f47f aeeb 	bne.w	80207f0 <__aeabi_dmul+0x1f8>
 8020a1a:	e712      	b.n	8020842 <__aeabi_dmul+0x24a>

08020a1c <__gedf2>:
 8020a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a20:	e006      	b.n	8020a30 <__cmpdf2+0x4>
 8020a22:	bf00      	nop

08020a24 <__ledf2>:
 8020a24:	f04f 0c01 	mov.w	ip, #1
 8020a28:	e002      	b.n	8020a30 <__cmpdf2+0x4>
 8020a2a:	bf00      	nop

08020a2c <__cmpdf2>:
 8020a2c:	f04f 0c01 	mov.w	ip, #1
 8020a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a46:	d01b      	beq.n	8020a80 <__cmpdf2+0x54>
 8020a48:	b001      	add	sp, #4
 8020a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a4e:	bf0c      	ite	eq
 8020a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a54:	ea91 0f03 	teqne	r1, r3
 8020a58:	bf02      	ittt	eq
 8020a5a:	ea90 0f02 	teqeq	r0, r2
 8020a5e:	2000      	moveq	r0, #0
 8020a60:	4770      	bxeq	lr
 8020a62:	f110 0f00 	cmn.w	r0, #0
 8020a66:	ea91 0f03 	teq	r1, r3
 8020a6a:	bf58      	it	pl
 8020a6c:	4299      	cmppl	r1, r3
 8020a6e:	bf08      	it	eq
 8020a70:	4290      	cmpeq	r0, r2
 8020a72:	bf2c      	ite	cs
 8020a74:	17d8      	asrcs	r0, r3, #31
 8020a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020a7a:	f040 0001 	orr.w	r0, r0, #1
 8020a7e:	4770      	bx	lr
 8020a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a88:	d102      	bne.n	8020a90 <__cmpdf2+0x64>
 8020a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a8e:	d107      	bne.n	8020aa0 <__cmpdf2+0x74>
 8020a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a98:	d1d6      	bne.n	8020a48 <__cmpdf2+0x1c>
 8020a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a9e:	d0d3      	beq.n	8020a48 <__cmpdf2+0x1c>
 8020aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop

08020aa8 <__aeabi_cdrcmple>:
 8020aa8:	4684      	mov	ip, r0
 8020aaa:	4610      	mov	r0, r2
 8020aac:	4662      	mov	r2, ip
 8020aae:	468c      	mov	ip, r1
 8020ab0:	4619      	mov	r1, r3
 8020ab2:	4663      	mov	r3, ip
 8020ab4:	e000      	b.n	8020ab8 <__aeabi_cdcmpeq>
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_cdcmpeq>:
 8020ab8:	b501      	push	{r0, lr}
 8020aba:	f7ff ffb7 	bl	8020a2c <__cmpdf2>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	bf48      	it	mi
 8020ac2:	f110 0f00 	cmnmi.w	r0, #0
 8020ac6:	bd01      	pop	{r0, pc}

08020ac8 <__aeabi_dcmpeq>:
 8020ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020acc:	f7ff fff4 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ad0:	bf0c      	ite	eq
 8020ad2:	2001      	moveq	r0, #1
 8020ad4:	2000      	movne	r0, #0
 8020ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020ada:	bf00      	nop

08020adc <__aeabi_dcmplt>:
 8020adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ae0:	f7ff ffea 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ae4:	bf34      	ite	cc
 8020ae6:	2001      	movcc	r0, #1
 8020ae8:	2000      	movcs	r0, #0
 8020aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8020aee:	bf00      	nop

08020af0 <__aeabi_dcmple>:
 8020af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af4:	f7ff ffe0 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020af8:	bf94      	ite	ls
 8020afa:	2001      	movls	r0, #1
 8020afc:	2000      	movhi	r0, #0
 8020afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b02:	bf00      	nop

08020b04 <__aeabi_dcmpge>:
 8020b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b08:	f7ff ffce 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b0c:	bf94      	ite	ls
 8020b0e:	2001      	movls	r0, #1
 8020b10:	2000      	movhi	r0, #0
 8020b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b16:	bf00      	nop

08020b18 <__aeabi_dcmpgt>:
 8020b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b1c:	f7ff ffc4 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b20:	bf34      	ite	cc
 8020b22:	2001      	movcc	r0, #1
 8020b24:	2000      	movcs	r0, #0
 8020b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2a:	bf00      	nop

08020b2c <__aeabi_dcmpun>:
 8020b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b34:	d102      	bne.n	8020b3c <__aeabi_dcmpun+0x10>
 8020b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b3a:	d10a      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b44:	d102      	bne.n	8020b4c <__aeabi_dcmpun+0x20>
 8020b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b4a:	d102      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b4c:	f04f 0000 	mov.w	r0, #0
 8020b50:	4770      	bx	lr
 8020b52:	f04f 0001 	mov.w	r0, #1
 8020b56:	4770      	bx	lr

08020b58 <__aeabi_d2iz>:
 8020b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b60:	d215      	bcs.n	8020b8e <__aeabi_d2iz+0x36>
 8020b62:	d511      	bpl.n	8020b88 <__aeabi_d2iz+0x30>
 8020b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b6c:	d912      	bls.n	8020b94 <__aeabi_d2iz+0x3c>
 8020b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8020b82:	bf18      	it	ne
 8020b84:	4240      	negne	r0, r0
 8020b86:	4770      	bx	lr
 8020b88:	f04f 0000 	mov.w	r0, #0
 8020b8c:	4770      	bx	lr
 8020b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020b92:	d105      	bne.n	8020ba0 <__aeabi_d2iz+0x48>
 8020b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020b98:	bf08      	it	eq
 8020b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020b9e:	4770      	bx	lr
 8020ba0:	f04f 0000 	mov.w	r0, #0
 8020ba4:	4770      	bx	lr
 8020ba6:	bf00      	nop

08020ba8 <__aeabi_d2uiz>:
 8020ba8:	004a      	lsls	r2, r1, #1
 8020baa:	d211      	bcs.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bb0:	d211      	bcs.n	8020bd6 <__aeabi_d2uiz+0x2e>
 8020bb2:	d50d      	bpl.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bbc:	d40e      	bmi.n	8020bdc <__aeabi_d2uiz+0x34>
 8020bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bca:	fa23 f002 	lsr.w	r0, r3, r2
 8020bce:	4770      	bx	lr
 8020bd0:	f04f 0000 	mov.w	r0, #0
 8020bd4:	4770      	bx	lr
 8020bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bda:	d102      	bne.n	8020be2 <__aeabi_d2uiz+0x3a>
 8020bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8020be0:	4770      	bx	lr
 8020be2:	f04f 0000 	mov.w	r0, #0
 8020be6:	4770      	bx	lr

08020be8 <__aeabi_d2f>:
 8020be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020bf0:	bf24      	itt	cs
 8020bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020bfa:	d90d      	bls.n	8020c18 <__aeabi_d2f+0x30>
 8020bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c10:	bf08      	it	eq
 8020c12:	f020 0001 	biceq.w	r0, r0, #1
 8020c16:	4770      	bx	lr
 8020c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c1c:	d121      	bne.n	8020c62 <__aeabi_d2f+0x7a>
 8020c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c22:	bfbc      	itt	lt
 8020c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c28:	4770      	bxlt	lr
 8020c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c32:	f1c2 0218 	rsb	r2, r2, #24
 8020c36:	f1c2 0c20 	rsb	ip, r2, #32
 8020c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8020c42:	bf18      	it	ne
 8020c44:	f040 0001 	orrne.w	r0, r0, #1
 8020c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c54:	ea40 000c 	orr.w	r0, r0, ip
 8020c58:	fa23 f302 	lsr.w	r3, r3, r2
 8020c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c60:	e7cc      	b.n	8020bfc <__aeabi_d2f+0x14>
 8020c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020c66:	d107      	bne.n	8020c78 <__aeabi_d2f+0x90>
 8020c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020c6c:	bf1e      	ittt	ne
 8020c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020c76:	4770      	bxne	lr
 8020c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020c84:	4770      	bx	lr
 8020c86:	bf00      	nop

08020c88 <__aeabi_uldivmod>:
 8020c88:	b953      	cbnz	r3, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8a:	b94a      	cbnz	r2, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8c:	2900      	cmp	r1, #0
 8020c8e:	bf08      	it	eq
 8020c90:	2800      	cmpeq	r0, #0
 8020c92:	bf1c      	itt	ne
 8020c94:	f04f 31ff 	movne.w	r1, #4294967295
 8020c98:	f04f 30ff 	movne.w	r0, #4294967295
 8020c9c:	f000 b9a4 	b.w	8020fe8 <__aeabi_idiv0>
 8020ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ca8:	f000 f83c 	bl	8020d24 <__udivmoddi4>
 8020cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020cb4:	b004      	add	sp, #16
 8020cb6:	4770      	bx	lr

08020cb8 <__aeabi_d2lz>:
 8020cb8:	b538      	push	{r3, r4, r5, lr}
 8020cba:	2200      	movs	r2, #0
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	4604      	mov	r4, r0
 8020cc0:	460d      	mov	r5, r1
 8020cc2:	f7ff ff0b 	bl	8020adc <__aeabi_dcmplt>
 8020cc6:	b928      	cbnz	r0, 8020cd4 <__aeabi_d2lz+0x1c>
 8020cc8:	4620      	mov	r0, r4
 8020cca:	4629      	mov	r1, r5
 8020ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cd0:	f000 b80a 	b.w	8020ce8 <__aeabi_d2ulz>
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8020cda:	f000 f805 	bl	8020ce8 <__aeabi_d2ulz>
 8020cde:	4240      	negs	r0, r0
 8020ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020ce4:	bd38      	pop	{r3, r4, r5, pc}
 8020ce6:	bf00      	nop

08020ce8 <__aeabi_d2ulz>:
 8020ce8:	b5d0      	push	{r4, r6, r7, lr}
 8020cea:	4b0c      	ldr	r3, [pc, #48]	; (8020d1c <__aeabi_d2ulz+0x34>)
 8020cec:	2200      	movs	r2, #0
 8020cee:	4606      	mov	r6, r0
 8020cf0:	460f      	mov	r7, r1
 8020cf2:	f7ff fc81 	bl	80205f8 <__aeabi_dmul>
 8020cf6:	f7ff ff57 	bl	8020ba8 <__aeabi_d2uiz>
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	f7ff fc02 	bl	8020504 <__aeabi_ui2d>
 8020d00:	4b07      	ldr	r3, [pc, #28]	; (8020d20 <__aeabi_d2ulz+0x38>)
 8020d02:	2200      	movs	r2, #0
 8020d04:	f7ff fc78 	bl	80205f8 <__aeabi_dmul>
 8020d08:	4602      	mov	r2, r0
 8020d0a:	460b      	mov	r3, r1
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	4639      	mov	r1, r7
 8020d10:	f7ff faba 	bl	8020288 <__aeabi_dsub>
 8020d14:	f7ff ff48 	bl	8020ba8 <__aeabi_d2uiz>
 8020d18:	4621      	mov	r1, r4
 8020d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d1c:	3df00000 	.word	0x3df00000
 8020d20:	41f00000 	.word	0x41f00000

08020d24 <__udivmoddi4>:
 8020d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d28:	9d08      	ldr	r5, [sp, #32]
 8020d2a:	4604      	mov	r4, r0
 8020d2c:	468c      	mov	ip, r1
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f040 8083 	bne.w	8020e3a <__udivmoddi4+0x116>
 8020d34:	428a      	cmp	r2, r1
 8020d36:	4617      	mov	r7, r2
 8020d38:	d947      	bls.n	8020dca <__udivmoddi4+0xa6>
 8020d3a:	fab2 f282 	clz	r2, r2
 8020d3e:	b142      	cbz	r2, 8020d52 <__udivmoddi4+0x2e>
 8020d40:	f1c2 0020 	rsb	r0, r2, #32
 8020d44:	fa24 f000 	lsr.w	r0, r4, r0
 8020d48:	4091      	lsls	r1, r2
 8020d4a:	4097      	lsls	r7, r2
 8020d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8020d50:	4094      	lsls	r4, r2
 8020d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020d56:	0c23      	lsrs	r3, r4, #16
 8020d58:	fbbc f6f8 	udiv	r6, ip, r8
 8020d5c:	fa1f fe87 	uxth.w	lr, r7
 8020d60:	fb08 c116 	mls	r1, r8, r6, ip
 8020d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020d68:	fb06 f10e 	mul.w	r1, r6, lr
 8020d6c:	4299      	cmp	r1, r3
 8020d6e:	d909      	bls.n	8020d84 <__udivmoddi4+0x60>
 8020d70:	18fb      	adds	r3, r7, r3
 8020d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8020d76:	f080 8119 	bcs.w	8020fac <__udivmoddi4+0x288>
 8020d7a:	4299      	cmp	r1, r3
 8020d7c:	f240 8116 	bls.w	8020fac <__udivmoddi4+0x288>
 8020d80:	3e02      	subs	r6, #2
 8020d82:	443b      	add	r3, r7
 8020d84:	1a5b      	subs	r3, r3, r1
 8020d86:	b2a4      	uxth	r4, r4
 8020d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8020d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8020d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d98:	45a6      	cmp	lr, r4
 8020d9a:	d909      	bls.n	8020db0 <__udivmoddi4+0x8c>
 8020d9c:	193c      	adds	r4, r7, r4
 8020d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020da2:	f080 8105 	bcs.w	8020fb0 <__udivmoddi4+0x28c>
 8020da6:	45a6      	cmp	lr, r4
 8020da8:	f240 8102 	bls.w	8020fb0 <__udivmoddi4+0x28c>
 8020dac:	3802      	subs	r0, #2
 8020dae:	443c      	add	r4, r7
 8020db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020db4:	eba4 040e 	sub.w	r4, r4, lr
 8020db8:	2600      	movs	r6, #0
 8020dba:	b11d      	cbz	r5, 8020dc4 <__udivmoddi4+0xa0>
 8020dbc:	40d4      	lsrs	r4, r2
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8020dc4:	4631      	mov	r1, r6
 8020dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dca:	b902      	cbnz	r2, 8020dce <__udivmoddi4+0xaa>
 8020dcc:	deff      	udf	#255	; 0xff
 8020dce:	fab2 f282 	clz	r2, r2
 8020dd2:	2a00      	cmp	r2, #0
 8020dd4:	d150      	bne.n	8020e78 <__udivmoddi4+0x154>
 8020dd6:	1bcb      	subs	r3, r1, r7
 8020dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020ddc:	fa1f f887 	uxth.w	r8, r7
 8020de0:	2601      	movs	r6, #1
 8020de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8020de6:	0c21      	lsrs	r1, r4, #16
 8020de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8020dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020df0:	fb08 f30c 	mul.w	r3, r8, ip
 8020df4:	428b      	cmp	r3, r1
 8020df6:	d907      	bls.n	8020e08 <__udivmoddi4+0xe4>
 8020df8:	1879      	adds	r1, r7, r1
 8020dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020dfe:	d202      	bcs.n	8020e06 <__udivmoddi4+0xe2>
 8020e00:	428b      	cmp	r3, r1
 8020e02:	f200 80e9 	bhi.w	8020fd8 <__udivmoddi4+0x2b4>
 8020e06:	4684      	mov	ip, r0
 8020e08:	1ac9      	subs	r1, r1, r3
 8020e0a:	b2a3      	uxth	r3, r4
 8020e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8020e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8020e18:	fb08 f800 	mul.w	r8, r8, r0
 8020e1c:	45a0      	cmp	r8, r4
 8020e1e:	d907      	bls.n	8020e30 <__udivmoddi4+0x10c>
 8020e20:	193c      	adds	r4, r7, r4
 8020e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e26:	d202      	bcs.n	8020e2e <__udivmoddi4+0x10a>
 8020e28:	45a0      	cmp	r8, r4
 8020e2a:	f200 80d9 	bhi.w	8020fe0 <__udivmoddi4+0x2bc>
 8020e2e:	4618      	mov	r0, r3
 8020e30:	eba4 0408 	sub.w	r4, r4, r8
 8020e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020e38:	e7bf      	b.n	8020dba <__udivmoddi4+0x96>
 8020e3a:	428b      	cmp	r3, r1
 8020e3c:	d909      	bls.n	8020e52 <__udivmoddi4+0x12e>
 8020e3e:	2d00      	cmp	r5, #0
 8020e40:	f000 80b1 	beq.w	8020fa6 <__udivmoddi4+0x282>
 8020e44:	2600      	movs	r6, #0
 8020e46:	e9c5 0100 	strd	r0, r1, [r5]
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	4631      	mov	r1, r6
 8020e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e52:	fab3 f683 	clz	r6, r3
 8020e56:	2e00      	cmp	r6, #0
 8020e58:	d14a      	bne.n	8020ef0 <__udivmoddi4+0x1cc>
 8020e5a:	428b      	cmp	r3, r1
 8020e5c:	d302      	bcc.n	8020e64 <__udivmoddi4+0x140>
 8020e5e:	4282      	cmp	r2, r0
 8020e60:	f200 80b8 	bhi.w	8020fd4 <__udivmoddi4+0x2b0>
 8020e64:	1a84      	subs	r4, r0, r2
 8020e66:	eb61 0103 	sbc.w	r1, r1, r3
 8020e6a:	2001      	movs	r0, #1
 8020e6c:	468c      	mov	ip, r1
 8020e6e:	2d00      	cmp	r5, #0
 8020e70:	d0a8      	beq.n	8020dc4 <__udivmoddi4+0xa0>
 8020e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8020e76:	e7a5      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020e78:	f1c2 0320 	rsb	r3, r2, #32
 8020e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8020e80:	4097      	lsls	r7, r2
 8020e82:	fa01 f002 	lsl.w	r0, r1, r2
 8020e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020e8a:	40d9      	lsrs	r1, r3
 8020e8c:	4330      	orrs	r0, r6
 8020e8e:	0c03      	lsrs	r3, r0, #16
 8020e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8020e94:	fa1f f887 	uxth.w	r8, r7
 8020e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8020e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ea0:	fb06 f108 	mul.w	r1, r6, r8
 8020ea4:	4299      	cmp	r1, r3
 8020ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8020eaa:	d909      	bls.n	8020ec0 <__udivmoddi4+0x19c>
 8020eac:	18fb      	adds	r3, r7, r3
 8020eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8020eb2:	f080 808d 	bcs.w	8020fd0 <__udivmoddi4+0x2ac>
 8020eb6:	4299      	cmp	r1, r3
 8020eb8:	f240 808a 	bls.w	8020fd0 <__udivmoddi4+0x2ac>
 8020ebc:	3e02      	subs	r6, #2
 8020ebe:	443b      	add	r3, r7
 8020ec0:	1a5b      	subs	r3, r3, r1
 8020ec2:	b281      	uxth	r1, r0
 8020ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020ed0:	fb00 f308 	mul.w	r3, r0, r8
 8020ed4:	428b      	cmp	r3, r1
 8020ed6:	d907      	bls.n	8020ee8 <__udivmoddi4+0x1c4>
 8020ed8:	1879      	adds	r1, r7, r1
 8020eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8020ede:	d273      	bcs.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee0:	428b      	cmp	r3, r1
 8020ee2:	d971      	bls.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee4:	3802      	subs	r0, #2
 8020ee6:	4439      	add	r1, r7
 8020ee8:	1acb      	subs	r3, r1, r3
 8020eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020eee:	e778      	b.n	8020de2 <__udivmoddi4+0xbe>
 8020ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8020ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8020ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8020efc:	431c      	orrs	r4, r3
 8020efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8020f02:	fa01 f306 	lsl.w	r3, r1, r6
 8020f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8020f0e:	431f      	orrs	r7, r3
 8020f10:	0c3b      	lsrs	r3, r7, #16
 8020f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8020f16:	fa1f f884 	uxth.w	r8, r4
 8020f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8020f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020f22:	fb09 fa08 	mul.w	sl, r9, r8
 8020f26:	458a      	cmp	sl, r1
 8020f28:	fa02 f206 	lsl.w	r2, r2, r6
 8020f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8020f30:	d908      	bls.n	8020f44 <__udivmoddi4+0x220>
 8020f32:	1861      	adds	r1, r4, r1
 8020f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8020f38:	d248      	bcs.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3a:	458a      	cmp	sl, r1
 8020f3c:	d946      	bls.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8020f42:	4421      	add	r1, r4
 8020f44:	eba1 010a 	sub.w	r1, r1, sl
 8020f48:	b2bf      	uxth	r7, r7
 8020f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8020f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8020f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020f56:	fb00 f808 	mul.w	r8, r0, r8
 8020f5a:	45b8      	cmp	r8, r7
 8020f5c:	d907      	bls.n	8020f6e <__udivmoddi4+0x24a>
 8020f5e:	19e7      	adds	r7, r4, r7
 8020f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8020f64:	d22e      	bcs.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f66:	45b8      	cmp	r8, r7
 8020f68:	d92c      	bls.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f6a:	3802      	subs	r0, #2
 8020f6c:	4427      	add	r7, r4
 8020f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f72:	eba7 0708 	sub.w	r7, r7, r8
 8020f76:	fba0 8902 	umull	r8, r9, r0, r2
 8020f7a:	454f      	cmp	r7, r9
 8020f7c:	46c6      	mov	lr, r8
 8020f7e:	4649      	mov	r1, r9
 8020f80:	d31a      	bcc.n	8020fb8 <__udivmoddi4+0x294>
 8020f82:	d017      	beq.n	8020fb4 <__udivmoddi4+0x290>
 8020f84:	b15d      	cbz	r5, 8020f9e <__udivmoddi4+0x27a>
 8020f86:	ebb3 020e 	subs.w	r2, r3, lr
 8020f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8020f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020f92:	40f2      	lsrs	r2, r6
 8020f94:	ea4c 0202 	orr.w	r2, ip, r2
 8020f98:	40f7      	lsrs	r7, r6
 8020f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8020f9e:	2600      	movs	r6, #0
 8020fa0:	4631      	mov	r1, r6
 8020fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fa6:	462e      	mov	r6, r5
 8020fa8:	4628      	mov	r0, r5
 8020faa:	e70b      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020fac:	4606      	mov	r6, r0
 8020fae:	e6e9      	b.n	8020d84 <__udivmoddi4+0x60>
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	e6fd      	b.n	8020db0 <__udivmoddi4+0x8c>
 8020fb4:	4543      	cmp	r3, r8
 8020fb6:	d2e5      	bcs.n	8020f84 <__udivmoddi4+0x260>
 8020fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8020fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8020fc0:	3801      	subs	r0, #1
 8020fc2:	e7df      	b.n	8020f84 <__udivmoddi4+0x260>
 8020fc4:	4608      	mov	r0, r1
 8020fc6:	e7d2      	b.n	8020f6e <__udivmoddi4+0x24a>
 8020fc8:	4660      	mov	r0, ip
 8020fca:	e78d      	b.n	8020ee8 <__udivmoddi4+0x1c4>
 8020fcc:	4681      	mov	r9, r0
 8020fce:	e7b9      	b.n	8020f44 <__udivmoddi4+0x220>
 8020fd0:	4666      	mov	r6, ip
 8020fd2:	e775      	b.n	8020ec0 <__udivmoddi4+0x19c>
 8020fd4:	4630      	mov	r0, r6
 8020fd6:	e74a      	b.n	8020e6e <__udivmoddi4+0x14a>
 8020fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8020fdc:	4439      	add	r1, r7
 8020fde:	e713      	b.n	8020e08 <__udivmoddi4+0xe4>
 8020fe0:	3802      	subs	r0, #2
 8020fe2:	443c      	add	r4, r7
 8020fe4:	e724      	b.n	8020e30 <__udivmoddi4+0x10c>
 8020fe6:	bf00      	nop

08020fe8 <__aeabi_idiv0>:
 8020fe8:	4770      	bx	lr
 8020fea:	bf00      	nop

08020fec <buzz>:
   18, 18, 18, 18, 18, 18,
   10, 10, 10,
   10, 10, 10,
   3, 3, 3
 };
void buzz(long frequency, long length) {
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b086      	sub	sp, #24
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
 8020ff4:	6039      	str	r1, [r7, #0]

  long delayValue = 1000000 / frequency / 2; // calculate the delay value between transitions
 8020ff6:	4a1a      	ldr	r2, [pc, #104]	; (8021060 <buzz+0x74>)
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ffe:	0fda      	lsrs	r2, r3, #31
 8021000:	4413      	add	r3, r2
 8021002:	105b      	asrs	r3, r3, #1
 8021004:	613b      	str	r3, [r7, #16]
  //// 1 second's worth of microseconds, divided by the frequency, then split in half since
  //// there are two phases to each cycle
  long numCycles = frequency * length / 1000; // calculate the number of cycles for proper timing
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	683a      	ldr	r2, [r7, #0]
 802100a:	fb02 f303 	mul.w	r3, r2, r3
 802100e:	4a15      	ldr	r2, [pc, #84]	; (8021064 <buzz+0x78>)
 8021010:	fb82 1203 	smull	r1, r2, r2, r3
 8021014:	1192      	asrs	r2, r2, #6
 8021016:	17db      	asrs	r3, r3, #31
 8021018:	1ad3      	subs	r3, r2, r3
 802101a:	60fb      	str	r3, [r7, #12]
  //// multiply frequency, which is really cycles per second, by the number of seconds to
  //// get the total number of cycles to produce
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 802101c:	2300      	movs	r3, #0
 802101e:	617b      	str	r3, [r7, #20]
 8021020:	e014      	b.n	802104c <buzz+0x60>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_RESET);//(targetPin, HIGH); // write the buzzer pin high to push out the diaphram
 8021022:	2200      	movs	r2, #0
 8021024:	2120      	movs	r1, #32
 8021026:	4810      	ldr	r0, [pc, #64]	; (8021068 <buzz+0x7c>)
 8021028:	f003 fb64 	bl	80246f4 <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait for the calculated delay value
 802102c:	693b      	ldr	r3, [r7, #16]
 802102e:	4618      	mov	r0, r3
 8021030:	f001 fb24 	bl	802267c <delay_us>
    HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);//(targetPin, LOW); // write the buzzer pin low to pull back the diaphram
 8021034:	2201      	movs	r2, #1
 8021036:	2120      	movs	r1, #32
 8021038:	480b      	ldr	r0, [pc, #44]	; (8021068 <buzz+0x7c>)
 802103a:	f003 fb5b 	bl	80246f4 <HAL_GPIO_WritePin>
    delay_us(delayValue); // wait again or the calculated delay value
 802103e:	693b      	ldr	r3, [r7, #16]
 8021040:	4618      	mov	r0, r3
 8021042:	f001 fb1b 	bl	802267c <delay_us>
  for (long i = 0; i < numCycles; i++) { // for the calculated length of time...
 8021046:	697b      	ldr	r3, [r7, #20]
 8021048:	3301      	adds	r3, #1
 802104a:	617b      	str	r3, [r7, #20]
 802104c:	697a      	ldr	r2, [r7, #20]
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	429a      	cmp	r2, r3
 8021052:	dbe6      	blt.n	8021022 <buzz+0x36>
  }
  //digitalWrite(9, LOW);

}
 8021054:	bf00      	nop
 8021056:	bf00      	nop
 8021058:	3718      	adds	r7, #24
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
 802105e:	bf00      	nop
 8021060:	000f4240 	.word	0x000f4240
 8021064:	10624dd3 	.word	0x10624dd3
 8021068:	40020400 	.word	0x40020400
 802106c:	00000000 	.word	0x00000000

08021070 <sing>:
void sing(int s) {
 8021070:	b580      	push	{r7, lr}
 8021072:	b088      	sub	sp, #32
 8021074:	af00      	add	r7, sp, #0
 8021076:	6078      	str	r0, [r7, #4]
	// iterate over the notes of the melody:
	static uint8_t song;
	static uint16_t size;
	static uint32_t noteDuration;
	song=s;
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	b2da      	uxtb	r2, r3
 802107c:	4b42      	ldr	r3, [pc, #264]	; (8021188 <sing+0x118>)
 802107e:	701a      	strb	r2, [r3, #0]
	if (song == 2)
 8021080:	4b41      	ldr	r3, [pc, #260]	; (8021188 <sing+0x118>)
 8021082:	781b      	ldrb	r3, [r3, #0]
 8021084:	2b02      	cmp	r3, #2
 8021086:	d140      	bne.n	802110a <sing+0x9a>
	{
		//Serial.println(" 'Underworld Theme'");
		 size = sizeof(underworld_melody) / sizeof(int);
 8021088:	4b40      	ldr	r3, [pc, #256]	; (802118c <sing+0x11c>)
 802108a:	223a      	movs	r2, #58	; 0x3a
 802108c:	801a      	strh	r2, [r3, #0]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 802108e:	2300      	movs	r3, #0
 8021090:	61fb      	str	r3, [r7, #28]
 8021092:	e033      	b.n	80210fc <sing+0x8c>

			// to calculate the note duration, take one second
			// divided by the note type.
			//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
			noteDuration = 1000 / underworld_tempo[thisNote];
 8021094:	4a3e      	ldr	r2, [pc, #248]	; (8021190 <sing+0x120>)
 8021096:	69fb      	ldr	r3, [r7, #28]
 8021098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802109c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80210a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80210a4:	4a3b      	ldr	r2, [pc, #236]	; (8021194 <sing+0x124>)
 80210a6:	6013      	str	r3, [r2, #0]

			buzz(underworld_melody[thisNote], noteDuration);
 80210a8:	4a3b      	ldr	r2, [pc, #236]	; (8021198 <sing+0x128>)
 80210aa:	69fb      	ldr	r3, [r7, #28]
 80210ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80210b0:	461a      	mov	r2, r3
 80210b2:	4b38      	ldr	r3, [pc, #224]	; (8021194 <sing+0x124>)
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	4619      	mov	r1, r3
 80210b8:	4610      	mov	r0, r2
 80210ba:	f7ff ff97 	bl	8020fec <buzz>

			// to distinguish the notes, set a minimum time between them.
			// the note's duration + 30% seems to work well:
			int pauseBetweenNotes = noteDuration * 1.30;
 80210be:	4b35      	ldr	r3, [pc, #212]	; (8021194 <sing+0x124>)
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	4618      	mov	r0, r3
 80210c4:	f7ff fa1e 	bl	8020504 <__aeabi_ui2d>
 80210c8:	a32d      	add	r3, pc, #180	; (adr r3, 8021180 <sing+0x110>)
 80210ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210ce:	f7ff fa93 	bl	80205f8 <__aeabi_dmul>
 80210d2:	4602      	mov	r2, r0
 80210d4:	460b      	mov	r3, r1
 80210d6:	4610      	mov	r0, r2
 80210d8:	4619      	mov	r1, r3
 80210da:	f7ff fd3d 	bl	8020b58 <__aeabi_d2iz>
 80210de:	4603      	mov	r3, r0
 80210e0:	60bb      	str	r3, [r7, #8]
			HAL_Delay(pauseBetweenNotes);
 80210e2:	68bb      	ldr	r3, [r7, #8]
 80210e4:	4618      	mov	r0, r3
 80210e6:	f002 fcfb 	bl	8023ae0 <HAL_Delay>

			// stop the tone playing:
			buzz(0, noteDuration);
 80210ea:	4b2a      	ldr	r3, [pc, #168]	; (8021194 <sing+0x124>)
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	4619      	mov	r1, r3
 80210f0:	2000      	movs	r0, #0
 80210f2:	f7ff ff7b 	bl	8020fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 80210f6:	69fb      	ldr	r3, [r7, #28]
 80210f8:	3301      	adds	r3, #1
 80210fa:	61fb      	str	r3, [r7, #28]
 80210fc:	4b23      	ldr	r3, [pc, #140]	; (802118c <sing+0x11c>)
 80210fe:	881b      	ldrh	r3, [r3, #0]
 8021100:	461a      	mov	r2, r3
 8021102:	69fb      	ldr	r3, [r7, #28]
 8021104:	4293      	cmp	r3, r2
 8021106:	dbc5      	blt.n	8021094 <sing+0x24>
			// stop the tone playing:
			buzz(0, noteDuration);

		}
	}
}
 8021108:	e034      	b.n	8021174 <sing+0x104>
		int size = sizeof(melody) / sizeof(int);
 802110a:	2350      	movs	r3, #80	; 0x50
 802110c:	617b      	str	r3, [r7, #20]
		for (int thisNote = 0; thisNote < size; thisNote++) {
 802110e:	2300      	movs	r3, #0
 8021110:	61bb      	str	r3, [r7, #24]
 8021112:	e02b      	b.n	802116c <sing+0xfc>
			int noteDuration = 1000 / tempo[thisNote];
 8021114:	4a21      	ldr	r2, [pc, #132]	; (802119c <sing+0x12c>)
 8021116:	69bb      	ldr	r3, [r7, #24]
 8021118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021120:	fbb2 f3f3 	udiv	r3, r2, r3
 8021124:	613b      	str	r3, [r7, #16]
			buzz(melody[thisNote], noteDuration);
 8021126:	4a1e      	ldr	r2, [pc, #120]	; (80211a0 <sing+0x130>)
 8021128:	69bb      	ldr	r3, [r7, #24]
 802112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802112e:	6939      	ldr	r1, [r7, #16]
 8021130:	4618      	mov	r0, r3
 8021132:	f7ff ff5b 	bl	8020fec <buzz>
			int pauseBetweenNotes = noteDuration * 1.30;
 8021136:	6938      	ldr	r0, [r7, #16]
 8021138:	f7ff f9f4 	bl	8020524 <__aeabi_i2d>
 802113c:	a310      	add	r3, pc, #64	; (adr r3, 8021180 <sing+0x110>)
 802113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021142:	f7ff fa59 	bl	80205f8 <__aeabi_dmul>
 8021146:	4602      	mov	r2, r0
 8021148:	460b      	mov	r3, r1
 802114a:	4610      	mov	r0, r2
 802114c:	4619      	mov	r1, r3
 802114e:	f7ff fd03 	bl	8020b58 <__aeabi_d2iz>
 8021152:	4603      	mov	r3, r0
 8021154:	60fb      	str	r3, [r7, #12]
			HAL_Delay(pauseBetweenNotes);
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	4618      	mov	r0, r3
 802115a:	f002 fcc1 	bl	8023ae0 <HAL_Delay>
			buzz(0, noteDuration);
 802115e:	6939      	ldr	r1, [r7, #16]
 8021160:	2000      	movs	r0, #0
 8021162:	f7ff ff43 	bl	8020fec <buzz>
		for (int thisNote = 0; thisNote < size; thisNote++) {
 8021166:	69bb      	ldr	r3, [r7, #24]
 8021168:	3301      	adds	r3, #1
 802116a:	61bb      	str	r3, [r7, #24]
 802116c:	69ba      	ldr	r2, [r7, #24]
 802116e:	697b      	ldr	r3, [r7, #20]
 8021170:	429a      	cmp	r2, r3
 8021172:	dbcf      	blt.n	8021114 <sing+0xa4>
}
 8021174:	bf00      	nop
 8021176:	3720      	adds	r7, #32
 8021178:	46bd      	mov	sp, r7
 802117a:	bd80      	pop	{r7, pc}
 802117c:	f3af 8000 	nop.w
 8021180:	cccccccd 	.word	0xcccccccd
 8021184:	3ff4cccc 	.word	0x3ff4cccc
 8021188:	20000660 	.word	0x20000660
 802118c:	20000662 	.word	0x20000662
 8021190:	20000368 	.word	0x20000368
 8021194:	20000664 	.word	0x20000664
 8021198:	20000280 	.word	0x20000280
 802119c:	20000140 	.word	0x20000140
 80211a0:	20000000 	.word	0x20000000

080211a4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
uint32_t GetSector(uint32_t Address)
{
 80211a4:	b480      	push	{r7}
 80211a6:	b085      	sub	sp, #20
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80211ac:	2300      	movs	r3, #0
 80211ae:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	4a44      	ldr	r2, [pc, #272]	; (80212c4 <GetSector+0x120>)
 80211b4:	4293      	cmp	r3, r2
 80211b6:	d806      	bhi.n	80211c6 <GetSector+0x22>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80211be:	d302      	bcc.n	80211c6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80211c0:	2300      	movs	r3, #0
 80211c2:	60fb      	str	r3, [r7, #12]
 80211c4:	e077      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	4a3f      	ldr	r2, [pc, #252]	; (80212c8 <GetSector+0x124>)
 80211ca:	4293      	cmp	r3, r2
 80211cc:	d806      	bhi.n	80211dc <GetSector+0x38>
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	4a3e      	ldr	r2, [pc, #248]	; (80212cc <GetSector+0x128>)
 80211d2:	4293      	cmp	r3, r2
 80211d4:	d302      	bcc.n	80211dc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80211d6:	2301      	movs	r3, #1
 80211d8:	60fb      	str	r3, [r7, #12]
 80211da:	e06c      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	4a3c      	ldr	r2, [pc, #240]	; (80212d0 <GetSector+0x12c>)
 80211e0:	4293      	cmp	r3, r2
 80211e2:	d806      	bhi.n	80211f2 <GetSector+0x4e>
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	4a3b      	ldr	r2, [pc, #236]	; (80212d4 <GetSector+0x130>)
 80211e8:	4293      	cmp	r3, r2
 80211ea:	d302      	bcc.n	80211f2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80211ec:	2302      	movs	r3, #2
 80211ee:	60fb      	str	r3, [r7, #12]
 80211f0:	e061      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	4a38      	ldr	r2, [pc, #224]	; (80212d8 <GetSector+0x134>)
 80211f6:	4293      	cmp	r3, r2
 80211f8:	d206      	bcs.n	8021208 <GetSector+0x64>
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	4a37      	ldr	r2, [pc, #220]	; (80212dc <GetSector+0x138>)
 80211fe:	4293      	cmp	r3, r2
 8021200:	d302      	bcc.n	8021208 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8021202:	2303      	movs	r3, #3
 8021204:	60fb      	str	r3, [r7, #12]
 8021206:	e056      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	4a35      	ldr	r2, [pc, #212]	; (80212e0 <GetSector+0x13c>)
 802120c:	4293      	cmp	r3, r2
 802120e:	d206      	bcs.n	802121e <GetSector+0x7a>
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	4a31      	ldr	r2, [pc, #196]	; (80212d8 <GetSector+0x134>)
 8021214:	4293      	cmp	r3, r2
 8021216:	d902      	bls.n	802121e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8021218:	2304      	movs	r3, #4
 802121a:	60fb      	str	r3, [r7, #12]
 802121c:	e04b      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	4a30      	ldr	r2, [pc, #192]	; (80212e4 <GetSector+0x140>)
 8021222:	4293      	cmp	r3, r2
 8021224:	d206      	bcs.n	8021234 <GetSector+0x90>
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	4a2d      	ldr	r2, [pc, #180]	; (80212e0 <GetSector+0x13c>)
 802122a:	4293      	cmp	r3, r2
 802122c:	d902      	bls.n	8021234 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 802122e:	2305      	movs	r3, #5
 8021230:	60fb      	str	r3, [r7, #12]
 8021232:	e040      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	4a2c      	ldr	r2, [pc, #176]	; (80212e8 <GetSector+0x144>)
 8021238:	4293      	cmp	r3, r2
 802123a:	d206      	bcs.n	802124a <GetSector+0xa6>
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	4a29      	ldr	r2, [pc, #164]	; (80212e4 <GetSector+0x140>)
 8021240:	4293      	cmp	r3, r2
 8021242:	d902      	bls.n	802124a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8021244:	2306      	movs	r3, #6
 8021246:	60fb      	str	r3, [r7, #12]
 8021248:	e035      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	4a27      	ldr	r2, [pc, #156]	; (80212ec <GetSector+0x148>)
 802124e:	4293      	cmp	r3, r2
 8021250:	d206      	bcs.n	8021260 <GetSector+0xbc>
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	4a24      	ldr	r2, [pc, #144]	; (80212e8 <GetSector+0x144>)
 8021256:	4293      	cmp	r3, r2
 8021258:	d902      	bls.n	8021260 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 802125a:	2307      	movs	r3, #7
 802125c:	60fb      	str	r3, [r7, #12]
 802125e:	e02a      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	4a23      	ldr	r2, [pc, #140]	; (80212f0 <GetSector+0x14c>)
 8021264:	4293      	cmp	r3, r2
 8021266:	d206      	bcs.n	8021276 <GetSector+0xd2>
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	4a20      	ldr	r2, [pc, #128]	; (80212ec <GetSector+0x148>)
 802126c:	4293      	cmp	r3, r2
 802126e:	d902      	bls.n	8021276 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8021270:	2308      	movs	r3, #8
 8021272:	60fb      	str	r3, [r7, #12]
 8021274:	e01f      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	4a1e      	ldr	r2, [pc, #120]	; (80212f4 <GetSector+0x150>)
 802127a:	4293      	cmp	r3, r2
 802127c:	d206      	bcs.n	802128c <GetSector+0xe8>
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	4a1b      	ldr	r2, [pc, #108]	; (80212f0 <GetSector+0x14c>)
 8021282:	4293      	cmp	r3, r2
 8021284:	d902      	bls.n	802128c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8021286:	2309      	movs	r3, #9
 8021288:	60fb      	str	r3, [r7, #12]
 802128a:	e014      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	4a1a      	ldr	r2, [pc, #104]	; (80212f8 <GetSector+0x154>)
 8021290:	4293      	cmp	r3, r2
 8021292:	d806      	bhi.n	80212a2 <GetSector+0xfe>
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	4a17      	ldr	r2, [pc, #92]	; (80212f4 <GetSector+0x150>)
 8021298:	4293      	cmp	r3, r2
 802129a:	d902      	bls.n	80212a2 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 802129c:	230a      	movs	r3, #10
 802129e:	60fb      	str	r3, [r7, #12]
 80212a0:	e009      	b.n	80212b6 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	4a15      	ldr	r2, [pc, #84]	; (80212fc <GetSector+0x158>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d805      	bhi.n	80212b6 <GetSector+0x112>
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	4a14      	ldr	r2, [pc, #80]	; (8021300 <GetSector+0x15c>)
 80212ae:	4293      	cmp	r3, r2
 80212b0:	d901      	bls.n	80212b6 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80212b2:	230b      	movs	r3, #11
 80212b4:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80212b6:	68fb      	ldr	r3, [r7, #12]
}
 80212b8:	4618      	mov	r0, r3
 80212ba:	3714      	adds	r7, #20
 80212bc:	46bd      	mov	sp, r7
 80212be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c2:	4770      	bx	lr
 80212c4:	08003ffe 	.word	0x08003ffe
 80212c8:	08007ffe 	.word	0x08007ffe
 80212cc:	08004000 	.word	0x08004000
 80212d0:	0800bffe 	.word	0x0800bffe
 80212d4:	08008000 	.word	0x08008000
 80212d8:	0800ffff 	.word	0x0800ffff
 80212dc:	0800c000 	.word	0x0800c000
 80212e0:	0801ffff 	.word	0x0801ffff
 80212e4:	0803ffff 	.word	0x0803ffff
 80212e8:	0805ffff 	.word	0x0805ffff
 80212ec:	0807ffff 	.word	0x0807ffff
 80212f0:	0809ffff 	.word	0x0809ffff
 80212f4:	080bffff 	.word	0x080bffff
 80212f8:	080dfffe 	.word	0x080dfffe
 80212fc:	080ffffe 	.word	0x080ffffe
 8021300:	080dffff 	.word	0x080dffff

08021304 <Flash_Write_Data>:
  return sectorsize;
}*/


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, ReflowTemplate *DATA_32)
{
 8021304:	b580      	push	{r7, lr}
 8021306:	b088      	sub	sp, #32
 8021308:	af00      	add	r7, sp, #0
 802130a:	6078      	str	r0, [r7, #4]
 802130c:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	uint32_t *p_Record=(uint32_t* ) DATA_32;
 802130e:	683b      	ldr	r3, [r7, #0]
 8021310:	61fb      	str	r3, [r7, #28]
	/* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8021312:	f002 fdc3 	bl	8023e9c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8021316:	6878      	ldr	r0, [r7, #4]
 8021318:	f7ff ff44 	bl	80211a4 <GetSector>
 802131c:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + sizeof(ReflowTemplate);
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	3324      	adds	r3, #36	; 0x24
 8021322:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8021324:	6938      	ldr	r0, [r7, #16]
 8021326:	f7ff ff3d 	bl	80211a4 <GetSector>
 802132a:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 802132c:	4b20      	ldr	r3, [pc, #128]	; (80213b0 <Flash_Write_Data+0xac>)
 802132e:	2200      	movs	r2, #0
 8021330:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8021332:	4b1f      	ldr	r3, [pc, #124]	; (80213b0 <Flash_Write_Data+0xac>)
 8021334:	2202      	movs	r2, #2
 8021336:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8021338:	4a1d      	ldr	r2, [pc, #116]	; (80213b0 <Flash_Write_Data+0xac>)
 802133a:	697b      	ldr	r3, [r7, #20]
 802133c:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 802133e:	68fa      	ldr	r2, [r7, #12]
 8021340:	697b      	ldr	r3, [r7, #20]
 8021342:	1ad3      	subs	r3, r2, r3
 8021344:	3301      	adds	r3, #1
 8021346:	4a1a      	ldr	r2, [pc, #104]	; (80213b0 <Flash_Write_Data+0xac>)
 8021348:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 802134a:	f107 0308 	add.w	r3, r7, #8
 802134e:	4619      	mov	r1, r3
 8021350:	4817      	ldr	r0, [pc, #92]	; (80213b0 <Flash_Write_Data+0xac>)
 8021352:	f002 ff11 	bl	8024178 <HAL_FLASHEx_Erase>
 8021356:	4603      	mov	r3, r0
 8021358:	2b00      	cmp	r3, #0
 802135a:	d003      	beq.n	8021364 <Flash_Write_Data+0x60>
	  {
		  return HAL_FLASH_GetError ();
 802135c:	f002 fdd0 	bl	8023f00 <HAL_FLASH_GetError>
 8021360:	4603      	mov	r3, r0
 8021362:	e021      	b.n	80213a8 <Flash_Write_Data+0xa4>
	  }


	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 8021364:	2300      	movs	r3, #0
 8021366:	61bb      	str	r3, [r7, #24]
 8021368:	e018      	b.n	802139c <Flash_Write_Data+0x98>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, *p_Record) == HAL_OK)
 802136a:	69fb      	ldr	r3, [r7, #28]
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	461a      	mov	r2, r3
 8021370:	f04f 0300 	mov.w	r3, #0
 8021374:	6879      	ldr	r1, [r7, #4]
 8021376:	2002      	movs	r0, #2
 8021378:	f002 fd3c 	bl	8023df4 <HAL_FLASH_Program>
 802137c:	4603      	mov	r3, r0
 802137e:	2b00      	cmp	r3, #0
 8021380:	d003      	beq.n	802138a <Flash_Write_Data+0x86>
	    	 //Do nothing
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8021382:	f002 fdbd 	bl	8023f00 <HAL_FLASH_GetError>
 8021386:	4603      	mov	r3, r0
 8021388:	e00e      	b.n	80213a8 <Flash_Write_Data+0xa4>
	   for(int i=0;i<sizeof(ReflowTemplate);i=i+4,StartSectorAddress=StartSectorAddress+4, p_Record++)
 802138a:	69bb      	ldr	r3, [r7, #24]
 802138c:	3304      	adds	r3, #4
 802138e:	61bb      	str	r3, [r7, #24]
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	3304      	adds	r3, #4
 8021394:	607b      	str	r3, [r7, #4]
 8021396:	69fb      	ldr	r3, [r7, #28]
 8021398:	3304      	adds	r3, #4
 802139a:	61fb      	str	r3, [r7, #28]
 802139c:	69bb      	ldr	r3, [r7, #24]
 802139e:	2b23      	cmp	r3, #35	; 0x23
 80213a0:	d9e3      	bls.n	802136a <Flash_Write_Data+0x66>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 80213a2:	f002 fd9d 	bl	8023ee0 <HAL_FLASH_Lock>

	   return 0;
 80213a6:	2300      	movs	r3, #0
}
 80213a8:	4618      	mov	r0, r3
 80213aa:	3720      	adds	r7, #32
 80213ac:	46bd      	mov	sp, r7
 80213ae:	bd80      	pop	{r7, pc}
 80213b0:	20000668 	.word	0x20000668

080213b4 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartSectorAddress, __IO ReflowTemplate *DATA_32)
{
 80213b4:	b480      	push	{r7}
 80213b6:	b085      	sub	sp, #20
 80213b8:	af00      	add	r7, sp, #0
 80213ba:	6078      	str	r0, [r7, #4]
 80213bc:	6039      	str	r1, [r7, #0]
	uint32_t *p_Data=(uint32_t* ) DATA_32;
 80213be:	683b      	ldr	r3, [r7, #0]
 80213c0:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80213c2:	2300      	movs	r3, #0
 80213c4:	60bb      	str	r3, [r7, #8]
 80213c6:	e00c      	b.n	80213e2 <Flash_Read_Data+0x2e>
	{

		*p_Data = *(__IO uint32_t*)StartSectorAddress;
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	681a      	ldr	r2, [r3, #0]
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	601a      	str	r2, [r3, #0]
	for(int i=0; i<sizeof(ReflowTemplate);	i=i+4,	p_Data++,	StartSectorAddress=StartSectorAddress+4	)
 80213d0:	68bb      	ldr	r3, [r7, #8]
 80213d2:	3304      	adds	r3, #4
 80213d4:	60bb      	str	r3, [r7, #8]
 80213d6:	68fb      	ldr	r3, [r7, #12]
 80213d8:	3304      	adds	r3, #4
 80213da:	60fb      	str	r3, [r7, #12]
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	3304      	adds	r3, #4
 80213e0:	607b      	str	r3, [r7, #4]
 80213e2:	68bb      	ldr	r3, [r7, #8]
 80213e4:	2b23      	cmp	r3, #35	; 0x23
 80213e6:	d9ef      	bls.n	80213c8 <Flash_Read_Data+0x14>

	}
}
 80213e8:	bf00      	nop
 80213ea:	bf00      	nop
 80213ec:	3714      	adds	r7, #20
 80213ee:	46bd      	mov	sp, r7
 80213f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213f4:	4770      	bx	lr
	...

080213f8 <SaveParameters>:
FLAGS Flags;
uint8_t PIDFlag;



void SaveParameters(){
 80213f8:	b580      	push	{r7, lr}
 80213fa:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x080A0000, &ReflowParameters);
 80213fc:	4902      	ldr	r1, [pc, #8]	; (8021408 <SaveParameters+0x10>)
 80213fe:	4803      	ldr	r0, [pc, #12]	; (802140c <SaveParameters+0x14>)
 8021400:	f7ff ff80 	bl	8021304 <Flash_Write_Data>
}
 8021404:	bf00      	nop
 8021406:	bd80      	pop	{r7, pc}
 8021408:	200008dc 	.word	0x200008dc
 802140c:	080a0000 	.word	0x080a0000

08021410 <LoadParameters>:
void LoadParameters(){
 8021410:	b580      	push	{r7, lr}
 8021412:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x080A0000, &ReflowParameters);
 8021414:	4902      	ldr	r1, [pc, #8]	; (8021420 <LoadParameters+0x10>)
 8021416:	4803      	ldr	r0, [pc, #12]	; (8021424 <LoadParameters+0x14>)
 8021418:	f7ff ffcc 	bl	80213b4 <Flash_Read_Data>
}
 802141c:	bf00      	nop
 802141e:	bd80      	pop	{r7, pc}
 8021420:	200008dc 	.word	0x200008dc
 8021424:	080a0000 	.word	0x080a0000

08021428 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8021428:	b580      	push	{r7, lr}
 802142a:	b082      	sub	sp, #8
 802142c:	af00      	add	r7, sp, #0
 802142e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8021430:	2205      	movs	r2, #5
 8021432:	4905      	ldr	r1, [pc, #20]	; (8021448 <HAL_UART_RxCpltCallback+0x20>)
 8021434:	4805      	ldr	r0, [pc, #20]	; (802144c <HAL_UART_RxCpltCallback+0x24>)
 8021436:	f005 fb21 	bl	8026a7c <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 802143a:	4b05      	ldr	r3, [pc, #20]	; (8021450 <HAL_UART_RxCpltCallback+0x28>)
 802143c:	2201      	movs	r2, #1
 802143e:	701a      	strb	r2, [r3, #0]
}
 8021440:	bf00      	nop
 8021442:	3708      	adds	r7, #8
 8021444:	46bd      	mov	sp, r7
 8021446:	bd80      	pop	{r7, pc}
 8021448:	20000454 	.word	0x20000454
 802144c:	2000089c 	.word	0x2000089c
 8021450:	20000684 	.word	0x20000684

08021454 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string){
 8021454:	b580      	push	{r7, lr}
 8021456:	b090      	sub	sp, #64	; 0x40
 8021458:	af00      	add	r7, sp, #0
 802145a:	6078      	str	r0, [r7, #4]
 802145c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 802145e:	f107 0008 	add.w	r0, r7, #8
 8021462:	683b      	ldr	r3, [r7, #0]
 8021464:	687a      	ldr	r2, [r7, #4]
 8021466:	490b      	ldr	r1, [pc, #44]	; (8021494 <NEXTION_SendString+0x40>)
 8021468:	f006 fe1a 	bl	80280a0 <siprintf>
 802146c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 802146e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021470:	b29a      	uxth	r2, r3
 8021472:	f107 0108 	add.w	r1, r7, #8
 8021476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802147a:	4807      	ldr	r0, [pc, #28]	; (8021498 <NEXTION_SendString+0x44>)
 802147c:	f005 fa65 	bl	802694a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8021480:	2364      	movs	r3, #100	; 0x64
 8021482:	2203      	movs	r2, #3
 8021484:	4905      	ldr	r1, [pc, #20]	; (802149c <NEXTION_SendString+0x48>)
 8021486:	4804      	ldr	r0, [pc, #16]	; (8021498 <NEXTION_SendString+0x44>)
 8021488:	f005 fa5f 	bl	802694a <HAL_UART_Transmit>

}
 802148c:	bf00      	nop
 802148e:	3740      	adds	r7, #64	; 0x40
 8021490:	46bd      	mov	sp, r7
 8021492:	bd80      	pop	{r7, pc}
 8021494:	0802bb08 	.word	0x0802bb08
 8021498:	2000089c 	.word	0x2000089c
 802149c:	20000450 	.word	0x20000450

080214a0 <NEXTION_SendFloat>:

void NEXTION_SendFloat (char *ID, float32_t number){
 80214a0:	b580      	push	{r7, lr}
 80214a2:	b092      	sub	sp, #72	; 0x48
 80214a4:	af02      	add	r7, sp, #8
 80214a6:	6078      	str	r0, [r7, #4]
 80214a8:	ed87 0a00 	vstr	s0, [r7]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 80214ac:	6838      	ldr	r0, [r7, #0]
 80214ae:	f7ff f84b 	bl	8020548 <__aeabi_f2d>
 80214b2:	4602      	mov	r2, r0
 80214b4:	460b      	mov	r3, r1
 80214b6:	f107 0008 	add.w	r0, r7, #8
 80214ba:	e9cd 2300 	strd	r2, r3, [sp]
 80214be:	687a      	ldr	r2, [r7, #4]
 80214c0:	490b      	ldr	r1, [pc, #44]	; (80214f0 <NEXTION_SendFloat+0x50>)
 80214c2:	f006 fded 	bl	80280a0 <siprintf>
 80214c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80214c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80214ca:	b29a      	uxth	r2, r3
 80214cc:	f107 0108 	add.w	r1, r7, #8
 80214d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80214d4:	4807      	ldr	r0, [pc, #28]	; (80214f4 <NEXTION_SendFloat+0x54>)
 80214d6:	f005 fa38 	bl	802694a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80214da:	2364      	movs	r3, #100	; 0x64
 80214dc:	2203      	movs	r2, #3
 80214de:	4906      	ldr	r1, [pc, #24]	; (80214f8 <NEXTION_SendFloat+0x58>)
 80214e0:	4804      	ldr	r0, [pc, #16]	; (80214f4 <NEXTION_SendFloat+0x54>)
 80214e2:	f005 fa32 	bl	802694a <HAL_UART_Transmit>
}
 80214e6:	bf00      	nop
 80214e8:	3740      	adds	r7, #64	; 0x40
 80214ea:	46bd      	mov	sp, r7
 80214ec:	bd80      	pop	{r7, pc}
 80214ee:	bf00      	nop
 80214f0:	0802bb14 	.word	0x0802bb14
 80214f4:	2000089c 	.word	0x2000089c
 80214f8:	20000450 	.word	0x20000450

080214fc <NEXTION_SenduInt>:

void NEXTION_SenduInt (char *ID, uint32_t number){
 80214fc:	b580      	push	{r7, lr}
 80214fe:	b090      	sub	sp, #64	; 0x40
 8021500:	af00      	add	r7, sp, #0
 8021502:	6078      	str	r0, [r7, #4]
 8021504:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 8021506:	f107 0008 	add.w	r0, r7, #8
 802150a:	683b      	ldr	r3, [r7, #0]
 802150c:	687a      	ldr	r2, [r7, #4]
 802150e:	490b      	ldr	r1, [pc, #44]	; (802153c <NEXTION_SenduInt+0x40>)
 8021510:	f006 fdc6 	bl	80280a0 <siprintf>
 8021514:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8021516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021518:	b29a      	uxth	r2, r3
 802151a:	f107 0108 	add.w	r1, r7, #8
 802151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021522:	4807      	ldr	r0, [pc, #28]	; (8021540 <NEXTION_SenduInt+0x44>)
 8021524:	f005 fa11 	bl	802694a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8021528:	2364      	movs	r3, #100	; 0x64
 802152a:	2203      	movs	r2, #3
 802152c:	4905      	ldr	r1, [pc, #20]	; (8021544 <NEXTION_SenduInt+0x48>)
 802152e:	4804      	ldr	r0, [pc, #16]	; (8021540 <NEXTION_SenduInt+0x44>)
 8021530:	f005 fa0b 	bl	802694a <HAL_UART_Transmit>
}
 8021534:	bf00      	nop
 8021536:	3740      	adds	r7, #64	; 0x40
 8021538:	46bd      	mov	sp, r7
 802153a:	bd80      	pop	{r7, pc}
 802153c:	0802bb24 	.word	0x0802bb24
 8021540:	2000089c 	.word	0x2000089c
 8021544:	20000450 	.word	0x20000450

08021548 <NEXTION_CMD>:

void NEXTION_CMD (const char *string){
 8021548:	b580      	push	{r7, lr}
 802154a:	b082      	sub	sp, #8
 802154c:	af00      	add	r7, sp, #0
 802154e:	6078      	str	r0, [r7, #4]
//TODO MM modified strlen parameter to fit
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8021550:	6878      	ldr	r0, [r7, #4]
 8021552:	f7fe fe3d 	bl	80201d0 <strlen>
 8021556:	4603      	mov	r3, r0
 8021558:	b29a      	uxth	r2, r3
 802155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802155e:	6879      	ldr	r1, [r7, #4]
 8021560:	4806      	ldr	r0, [pc, #24]	; (802157c <NEXTION_CMD+0x34>)
 8021562:	f005 f9f2 	bl	802694a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8021566:	2364      	movs	r3, #100	; 0x64
 8021568:	2203      	movs	r2, #3
 802156a:	4905      	ldr	r1, [pc, #20]	; (8021580 <NEXTION_CMD+0x38>)
 802156c:	4803      	ldr	r0, [pc, #12]	; (802157c <NEXTION_CMD+0x34>)
 802156e:	f005 f9ec 	bl	802694a <HAL_UART_Transmit>
}
 8021572:	bf00      	nop
 8021574:	3708      	adds	r7, #8
 8021576:	46bd      	mov	sp, r7
 8021578:	bd80      	pop	{r7, pc}
 802157a:	bf00      	nop
 802157c:	2000089c 	.word	0x2000089c
 8021580:	20000450 	.word	0x20000450

08021584 <NextionDrawDot>:
	NEXTION_SendFloat("t4",ReflowParameters.secondHeatUpRate);
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}

void NextionDrawDot(uint32_t x, uint32_t y){
 8021584:	b580      	push	{r7, lr}
 8021586:	b090      	sub	sp, #64	; 0x40
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
 802158c:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,BLUE", x, y);
 802158e:	f107 0008 	add.w	r0, r7, #8
 8021592:	683b      	ldr	r3, [r7, #0]
 8021594:	687a      	ldr	r2, [r7, #4]
 8021596:	490b      	ldr	r1, [pc, #44]	; (80215c4 <NextionDrawDot+0x40>)
 8021598:	f006 fd82 	bl	80280a0 <siprintf>
 802159c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 802159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80215a0:	b29a      	uxth	r2, r3
 80215a2:	f107 0108 	add.w	r1, r7, #8
 80215a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80215aa:	4807      	ldr	r0, [pc, #28]	; (80215c8 <NextionDrawDot+0x44>)
 80215ac:	f005 f9cd 	bl	802694a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80215b0:	2364      	movs	r3, #100	; 0x64
 80215b2:	2203      	movs	r2, #3
 80215b4:	4905      	ldr	r1, [pc, #20]	; (80215cc <NextionDrawDot+0x48>)
 80215b6:	4804      	ldr	r0, [pc, #16]	; (80215c8 <NextionDrawDot+0x44>)
 80215b8:	f005 f9c7 	bl	802694a <HAL_UART_Transmit>
}
 80215bc:	bf00      	nop
 80215be:	3740      	adds	r7, #64	; 0x40
 80215c0:	46bd      	mov	sp, r7
 80215c2:	bd80      	pop	{r7, pc}
 80215c4:	0802bb4c 	.word	0x0802bb4c
 80215c8:	2000089c 	.word	0x2000089c
 80215cc:	20000450 	.word	0x20000450

080215d0 <NextionDrawTemp>:

void NextionDrawTemp(uint32_t x, uint32_t y){
 80215d0:	b580      	push	{r7, lr}
 80215d2:	b090      	sub	sp, #64	; 0x40
 80215d4:	af00      	add	r7, sp, #0
 80215d6:	6078      	str	r0, [r7, #4]
 80215d8:	6039      	str	r1, [r7, #0]

	uint8_t miki1;
	uint8_t miki2;
	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80215da:	f107 0008 	add.w	r0, r7, #8
 80215de:	683b      	ldr	r3, [r7, #0]
 80215e0:	687a      	ldr	r2, [r7, #4]
 80215e2:	490e      	ldr	r1, [pc, #56]	; (802161c <NextionDrawTemp+0x4c>)
 80215e4:	f006 fd5c 	bl	80280a0 <siprintf>
 80215e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	miki1=HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80215ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80215ec:	b29a      	uxth	r2, r3
 80215ee:	f107 0108 	add.w	r1, r7, #8
 80215f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80215f6:	480a      	ldr	r0, [pc, #40]	; (8021620 <NextionDrawTemp+0x50>)
 80215f8:	f005 f9a7 	bl	802694a <HAL_UART_Transmit>
 80215fc:	4603      	mov	r3, r0
 80215fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	miki2=HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8021602:	2364      	movs	r3, #100	; 0x64
 8021604:	2203      	movs	r2, #3
 8021606:	4907      	ldr	r1, [pc, #28]	; (8021624 <NextionDrawTemp+0x54>)
 8021608:	4805      	ldr	r0, [pc, #20]	; (8021620 <NextionDrawTemp+0x50>)
 802160a:	f005 f99e 	bl	802694a <HAL_UART_Transmit>
 802160e:	4603      	mov	r3, r0
 8021610:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
}
 8021614:	bf00      	nop
 8021616:	3740      	adds	r7, #64	; 0x40
 8021618:	46bd      	mov	sp, r7
 802161a:	bd80      	pop	{r7, pc}
 802161c:	0802bb60 	.word	0x0802bb60
 8021620:	2000089c 	.word	0x2000089c
 8021624:	20000450 	.word	0x20000450

08021628 <HandleKeyPad>:



float32_t HandleKeyPad(void) {
 8021628:	b580      	push	{r7, lr}
 802162a:	b082      	sub	sp, #8
 802162c:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 802162e:	2300      	movs	r3, #0
 8021630:	607b      	str	r3, [r7, #4]
 8021632:	e007      	b.n	8021644 <HandleKeyPad+0x1c>
		input[i] = 0;
 8021634:	4a2a      	ldr	r2, [pc, #168]	; (80216e0 <HandleKeyPad+0xb8>)
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	4413      	add	r3, r2
 802163a:	2200      	movs	r2, #0
 802163c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	3301      	adds	r3, #1
 8021642:	607b      	str	r3, [r7, #4]
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	2b13      	cmp	r3, #19
 8021648:	ddf4      	ble.n	8021634 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 802164a:	2300      	movs	r3, #0
 802164c:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 802164e:	4925      	ldr	r1, [pc, #148]	; (80216e4 <HandleKeyPad+0xbc>)
 8021650:	4825      	ldr	r0, [pc, #148]	; (80216e8 <HandleKeyPad+0xc0>)
 8021652:	f7ff feff 	bl	8021454 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 8021656:	4b25      	ldr	r3, [pc, #148]	; (80216ec <HandleKeyPad+0xc4>)
 8021658:	2200      	movs	r2, #0
 802165a:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 802165c:	e026      	b.n	80216ac <HandleKeyPad+0x84>
	{

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 802165e:	2205      	movs	r2, #5
 8021660:	4923      	ldr	r1, [pc, #140]	; (80216f0 <HandleKeyPad+0xc8>)
 8021662:	4824      	ldr	r0, [pc, #144]	; (80216f4 <HandleKeyPad+0xcc>)
 8021664:	f006 fd3c 	bl	80280e0 <strncmp>
 8021668:	4603      	mov	r3, r0
 802166a:	2b00      	cmp	r3, #0
 802166c:	d101      	bne.n	8021672 <HandleKeyPad+0x4a>
		{
			return 9999;
 802166e:	4b22      	ldr	r3, [pc, #136]	; (80216f8 <HandleKeyPad+0xd0>)
 8021670:	e02e      	b.n	80216d0 <HandleKeyPad+0xa8>
		}
		else
		{
			//do nothing.
		}
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8021672:	2205      	movs	r2, #5
 8021674:	4921      	ldr	r1, [pc, #132]	; (80216fc <HandleKeyPad+0xd4>)
 8021676:	481f      	ldr	r0, [pc, #124]	; (80216f4 <HandleKeyPad+0xcc>)
 8021678:	f006 fd32 	bl	80280e0 <strncmp>
 802167c:	4603      	mov	r3, r0
 802167e:	2b00      	cmp	r3, #0
 8021680:	d101      	bne.n	8021686 <HandleKeyPad+0x5e>
				return 8888;
 8021682:	4b1f      	ldr	r3, [pc, #124]	; (8021700 <HandleKeyPad+0xd8>)
 8021684:	e024      	b.n	80216d0 <HandleKeyPad+0xa8>
		{
			//do nothing
		}


		if (UART_Recieved_Flag == 1) {
 8021686:	4b19      	ldr	r3, [pc, #100]	; (80216ec <HandleKeyPad+0xc4>)
 8021688:	781b      	ldrb	r3, [r3, #0]
 802168a:	2b01      	cmp	r3, #1
 802168c:	d10e      	bne.n	80216ac <HandleKeyPad+0x84>
			input[index] = UART_Recieved_Data[4];
 802168e:	78fb      	ldrb	r3, [r7, #3]
 8021690:	4a18      	ldr	r2, [pc, #96]	; (80216f4 <HandleKeyPad+0xcc>)
 8021692:	7911      	ldrb	r1, [r2, #4]
 8021694:	4a12      	ldr	r2, [pc, #72]	; (80216e0 <HandleKeyPad+0xb8>)
 8021696:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8021698:	4b14      	ldr	r3, [pc, #80]	; (80216ec <HandleKeyPad+0xc4>)
 802169a:	2200      	movs	r2, #0
 802169c:	701a      	strb	r2, [r3, #0]
			index++;
 802169e:	78fb      	ldrb	r3, [r7, #3]
 80216a0:	3301      	adds	r3, #1
 80216a2:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 80216a4:	490e      	ldr	r1, [pc, #56]	; (80216e0 <HandleKeyPad+0xb8>)
 80216a6:	4810      	ldr	r0, [pc, #64]	; (80216e8 <HandleKeyPad+0xc0>)
 80216a8:	f7ff fed4 	bl	8021454 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0)
 80216ac:	2205      	movs	r2, #5
 80216ae:	4915      	ldr	r1, [pc, #84]	; (8021704 <HandleKeyPad+0xdc>)
 80216b0:	4810      	ldr	r0, [pc, #64]	; (80216f4 <HandleKeyPad+0xcc>)
 80216b2:	f006 fd15 	bl	80280e0 <strncmp>
 80216b6:	4603      	mov	r3, r0
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d1d0      	bne.n	802165e <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 80216bc:	4808      	ldr	r0, [pc, #32]	; (80216e0 <HandleKeyPad+0xb8>)
 80216be:	f006 f84f 	bl	8027760 <atof>
 80216c2:	ec53 2b10 	vmov	r2, r3, d0
 80216c6:	4610      	mov	r0, r2
 80216c8:	4619      	mov	r1, r3
 80216ca:	f7ff fa8d 	bl	8020be8 <__aeabi_d2f>
 80216ce:	4603      	mov	r3, r0
 80216d0:	ee07 3a90 	vmov	s15, r3
}
 80216d4:	eeb0 0a67 	vmov.f32	s0, s15
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}
 80216de:	bf00      	nop
 80216e0:	20000884 	.word	0x20000884
 80216e4:	0802bb74 	.word	0x0802bb74
 80216e8:	0802bb78 	.word	0x0802bb78
 80216ec:	20000684 	.word	0x20000684
 80216f0:	0802bb7c 	.word	0x0802bb7c
 80216f4:	20000454 	.word	0x20000454
 80216f8:	461c3c00 	.word	0x461c3c00
 80216fc:	0802bb84 	.word	0x0802bb84
 8021700:	460ae000 	.word	0x460ae000
 8021704:	0802bb8c 	.word	0x0802bb8c

08021708 <Update_Page_3>:


void Update_Page_3() {
 8021708:	b580      	push	{r7, lr}
 802170a:	b084      	sub	sp, #16
 802170c:	af00      	add	r7, sp, #0
	flagMiki=true;
 802170e:	4b24      	ldr	r3, [pc, #144]	; (80217a0 <Update_Page_3+0x98>)
 8021710:	2201      	movs	r2, #1
 8021712:	701a      	strb	r2, [r3, #0]
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 8021714:	4a23      	ldr	r2, [pc, #140]	; (80217a4 <Update_Page_3+0x9c>)
 8021716:	1d3b      	adds	r3, r7, #4
 8021718:	e892 0003 	ldmia.w	r2, {r0, r1}
 802171c:	6018      	str	r0, [r3, #0]
 802171e:	3304      	adds	r3, #4
 8021720:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8021722:	2300      	movs	r3, #0
 8021724:	60fb      	str	r3, [r7, #12]
 8021726:	e00b      	b.n	8021740 <Update_Page_3+0x38>
		UART_Recieved_Data[i]=defaultUart[i];
 8021728:	1d3a      	adds	r2, r7, #4
 802172a:	68fb      	ldr	r3, [r7, #12]
 802172c:	4413      	add	r3, r2
 802172e:	7819      	ldrb	r1, [r3, #0]
 8021730:	4a1d      	ldr	r2, [pc, #116]	; (80217a8 <Update_Page_3+0xa0>)
 8021732:	68fb      	ldr	r3, [r7, #12]
 8021734:	4413      	add	r3, r2
 8021736:	460a      	mov	r2, r1
 8021738:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 802173a:	68fb      	ldr	r3, [r7, #12]
 802173c:	3301      	adds	r3, #1
 802173e:	60fb      	str	r3, [r7, #12]
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	2b04      	cmp	r3, #4
 8021744:	ddf0      	ble.n	8021728 <Update_Page_3+0x20>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8021746:	4b19      	ldr	r3, [pc, #100]	; (80217ac <Update_Page_3+0xa4>)
 8021748:	edd3 7a03 	vldr	s15, [r3, #12]
 802174c:	eeb0 0a67 	vmov.f32	s0, s15
 8021750:	4817      	ldr	r0, [pc, #92]	; (80217b0 <Update_Page_3+0xa8>)
 8021752:	f7ff fea5 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 8021756:	4b15      	ldr	r3, [pc, #84]	; (80217ac <Update_Page_3+0xa4>)
 8021758:	695b      	ldr	r3, [r3, #20]
 802175a:	4619      	mov	r1, r3
 802175c:	4815      	ldr	r0, [pc, #84]	; (80217b4 <Update_Page_3+0xac>)
 802175e:	f7ff fecd 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8021762:	4b12      	ldr	r3, [pc, #72]	; (80217ac <Update_Page_3+0xa4>)
 8021764:	691b      	ldr	r3, [r3, #16]
 8021766:	4619      	mov	r1, r3
 8021768:	4813      	ldr	r0, [pc, #76]	; (80217b8 <Update_Page_3+0xb0>)
 802176a:	f7ff fec7 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 802176e:	4b0f      	ldr	r3, [pc, #60]	; (80217ac <Update_Page_3+0xa4>)
 8021770:	edd3 7a06 	vldr	s15, [r3, #24]
 8021774:	eeb0 0a67 	vmov.f32	s0, s15
 8021778:	4810      	ldr	r0, [pc, #64]	; (80217bc <Update_Page_3+0xb4>)
 802177a:	f7ff fe91 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 802177e:	4b0b      	ldr	r3, [pc, #44]	; (80217ac <Update_Page_3+0xa4>)
 8021780:	6a1b      	ldr	r3, [r3, #32]
 8021782:	4619      	mov	r1, r3
 8021784:	480e      	ldr	r0, [pc, #56]	; (80217c0 <Update_Page_3+0xb8>)
 8021786:	f7ff feb9 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 802178a:	4b08      	ldr	r3, [pc, #32]	; (80217ac <Update_Page_3+0xa4>)
 802178c:	69db      	ldr	r3, [r3, #28]
 802178e:	4619      	mov	r1, r3
 8021790:	480c      	ldr	r0, [pc, #48]	; (80217c4 <Update_Page_3+0xbc>)
 8021792:	f7ff feb3 	bl	80214fc <NEXTION_SenduInt>

}
 8021796:	bf00      	nop
 8021798:	3710      	adds	r7, #16
 802179a:	46bd      	mov	sp, r7
 802179c:	bd80      	pop	{r7, pc}
 802179e:	bf00      	nop
 80217a0:	20000900 	.word	0x20000900
 80217a4:	0802bb94 	.word	0x0802bb94
 80217a8:	20000454 	.word	0x20000454
 80217ac:	200008dc 	.word	0x200008dc
 80217b0:	0802bb78 	.word	0x0802bb78
 80217b4:	0802bb34 	.word	0x0802bb34
 80217b8:	0802bb38 	.word	0x0802bb38
 80217bc:	0802bb3c 	.word	0x0802bb3c
 80217c0:	0802bb40 	.word	0x0802bb40
 80217c4:	0802bb44 	.word	0x0802bb44

080217c8 <Update_Page_0>:

void Update_Page_0() {
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b088      	sub	sp, #32
 80217cc:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 80217ce:	4a3f      	ldr	r2, [pc, #252]	; (80218cc <Update_Page_0+0x104>)
 80217d0:	1d3b      	adds	r3, r7, #4
 80217d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80217d6:	6018      	str	r0, [r3, #0]
 80217d8:	3304      	adds	r3, #4
 80217da:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80217dc:	2300      	movs	r3, #0
 80217de:	61fb      	str	r3, [r7, #28]
 80217e0:	e00b      	b.n	80217fa <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80217e2:	1d3a      	adds	r2, r7, #4
 80217e4:	69fb      	ldr	r3, [r7, #28]
 80217e6:	4413      	add	r3, r2
 80217e8:	7819      	ldrb	r1, [r3, #0]
 80217ea:	4a39      	ldr	r2, [pc, #228]	; (80218d0 <Update_Page_0+0x108>)
 80217ec:	69fb      	ldr	r3, [r7, #28]
 80217ee:	4413      	add	r3, r2
 80217f0:	460a      	mov	r2, r1
 80217f2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80217f4:	69fb      	ldr	r3, [r7, #28]
 80217f6:	3301      	adds	r3, #1
 80217f8:	61fb      	str	r3, [r7, #28]
 80217fa:	69fb      	ldr	r3, [r7, #28]
 80217fc:	2b04      	cmp	r3, #4
 80217fe:	ddf0      	ble.n	80217e2 <Update_Page_0+0x1a>
	}

	float32_t dx =0.23; //275px / 400s //92px 400s
 8021800:	4b34      	ldr	r3, [pc, #208]	; (80218d4 <Update_Page_0+0x10c>)
 8021802:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8021804:	4b34      	ldr	r3, [pc, #208]	; (80218d8 <Update_Page_0+0x110>)
 8021806:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 28;
 8021808:	231c      	movs	r3, #28
 802180a:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 153; //151
 802180c:	2399      	movs	r3, #153	; 0x99
 802180e:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)
 8021810:	4b32      	ldr	r3, [pc, #200]	; (80218dc <Update_Page_0+0x114>)
 8021812:	781b      	ldrb	r3, [r3, #0]
 8021814:	2b01      	cmp	r3, #1
 8021816:	d120      	bne.n	802185a <Update_Page_0+0x92>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temperature)*dy));
 8021818:	4b31      	ldr	r3, [pc, #196]	; (80218e0 <Update_Page_0+0x118>)
 802181a:	881b      	ldrh	r3, [r3, #0]
 802181c:	ee07 3a90 	vmov	s15, r3
 8021820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8021824:	edd7 7a06 	vldr	s15, [r7, #24]
 8021828:	ee67 7a27 	vmul.f32	s15, s14, s15
 802182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021830:	ee17 2a90 	vmov	r2, s15
 8021834:	693b      	ldr	r3, [r7, #16]
 8021836:	441a      	add	r2, r3
 8021838:	4b2a      	ldr	r3, [pc, #168]	; (80218e4 <Update_Page_0+0x11c>)
 802183a:	ed93 7a00 	vldr	s14, [r3]
 802183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8021842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802184a:	ee17 1a90 	vmov	r1, s15
 802184e:	68fb      	ldr	r3, [r7, #12]
 8021850:	1a5b      	subs	r3, r3, r1
 8021852:	4619      	mov	r1, r3
 8021854:	4610      	mov	r0, r2
 8021856:	f7ff febb 	bl	80215d0 <NextionDrawTemp>



	NEXTION_SendFloat("t0", temperature);
 802185a:	4b22      	ldr	r3, [pc, #136]	; (80218e4 <Update_Page_0+0x11c>)
 802185c:	edd3 7a00 	vldr	s15, [r3]
 8021860:	eeb0 0a67 	vmov.f32	s0, s15
 8021864:	4820      	ldr	r0, [pc, #128]	; (80218e8 <Update_Page_0+0x120>)
 8021866:	f7ff fe1b 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 802186a:	4b20      	ldr	r3, [pc, #128]	; (80218ec <Update_Page_0+0x124>)
 802186c:	edd3 7a03 	vldr	s15, [r3, #12]
 8021870:	eeb0 0a67 	vmov.f32	s0, s15
 8021874:	481e      	ldr	r0, [pc, #120]	; (80218f0 <Update_Page_0+0x128>)
 8021876:	f7ff fe13 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 802187a:	4b1c      	ldr	r3, [pc, #112]	; (80218ec <Update_Page_0+0x124>)
 802187c:	695b      	ldr	r3, [r3, #20]
 802187e:	4619      	mov	r1, r3
 8021880:	481c      	ldr	r0, [pc, #112]	; (80218f4 <Update_Page_0+0x12c>)
 8021882:	f7ff fe3b 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8021886:	4b19      	ldr	r3, [pc, #100]	; (80218ec <Update_Page_0+0x124>)
 8021888:	691b      	ldr	r3, [r3, #16]
 802188a:	4619      	mov	r1, r3
 802188c:	481a      	ldr	r0, [pc, #104]	; (80218f8 <Update_Page_0+0x130>)
 802188e:	f7ff fe35 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8021892:	4b16      	ldr	r3, [pc, #88]	; (80218ec <Update_Page_0+0x124>)
 8021894:	edd3 7a06 	vldr	s15, [r3, #24]
 8021898:	eeb0 0a67 	vmov.f32	s0, s15
 802189c:	4817      	ldr	r0, [pc, #92]	; (80218fc <Update_Page_0+0x134>)
 802189e:	f7ff fdff 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 80218a2:	4b12      	ldr	r3, [pc, #72]	; (80218ec <Update_Page_0+0x124>)
 80218a4:	6a1b      	ldr	r3, [r3, #32]
 80218a6:	4619      	mov	r1, r3
 80218a8:	4815      	ldr	r0, [pc, #84]	; (8021900 <Update_Page_0+0x138>)
 80218aa:	f7ff fe27 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 80218ae:	4b0f      	ldr	r3, [pc, #60]	; (80218ec <Update_Page_0+0x124>)
 80218b0:	69db      	ldr	r3, [r3, #28]
 80218b2:	4619      	mov	r1, r3
 80218b4:	4813      	ldr	r0, [pc, #76]	; (8021904 <Update_Page_0+0x13c>)
 80218b6:	f7ff fe21 	bl	80214fc <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 80218ba:	4913      	ldr	r1, [pc, #76]	; (8021908 <Update_Page_0+0x140>)
 80218bc:	4813      	ldr	r0, [pc, #76]	; (802190c <Update_Page_0+0x144>)
 80218be:	f7ff fdc9 	bl	8021454 <NEXTION_SendString>

}
 80218c2:	bf00      	nop
 80218c4:	3720      	adds	r7, #32
 80218c6:	46bd      	mov	sp, r7
 80218c8:	bd80      	pop	{r7, pc}
 80218ca:	bf00      	nop
 80218cc:	0802bba0 	.word	0x0802bba0
 80218d0:	20000454 	.word	0x20000454
 80218d4:	3e6b851f 	.word	0x3e6b851f
 80218d8:	3f0bb98c 	.word	0x3f0bb98c
 80218dc:	2000067c 	.word	0x2000067c
 80218e0:	200006d4 	.word	0x200006d4
 80218e4:	20000694 	.word	0x20000694
 80218e8:	0802bb78 	.word	0x0802bb78
 80218ec:	200008dc 	.word	0x200008dc
 80218f0:	0802bb34 	.word	0x0802bb34
 80218f4:	0802bb3c 	.word	0x0802bb3c
 80218f8:	0802bb38 	.word	0x0802bb38
 80218fc:	0802bb40 	.word	0x0802bb40
 8021900:	0802bb48 	.word	0x0802bb48
 8021904:	0802bb44 	.word	0x0802bb44
 8021908:	20000930 	.word	0x20000930
 802190c:	0802bb9c 	.word	0x0802bb9c

08021910 <Update_Page_2>:

void Update_Page_2() {
 8021910:	b580      	push	{r7, lr}
 8021912:	b084      	sub	sp, #16
 8021914:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 8021916:	4a1a      	ldr	r2, [pc, #104]	; (8021980 <Update_Page_2+0x70>)
 8021918:	1d3b      	adds	r3, r7, #4
 802191a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802191e:	6018      	str	r0, [r3, #0]
 8021920:	3304      	adds	r3, #4
 8021922:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8021924:	2300      	movs	r3, #0
 8021926:	60fb      	str	r3, [r7, #12]
 8021928:	e00b      	b.n	8021942 <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 802192a:	1d3a      	adds	r2, r7, #4
 802192c:	68fb      	ldr	r3, [r7, #12]
 802192e:	4413      	add	r3, r2
 8021930:	7819      	ldrb	r1, [r3, #0]
 8021932:	4a14      	ldr	r2, [pc, #80]	; (8021984 <Update_Page_2+0x74>)
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	4413      	add	r3, r2
 8021938:	460a      	mov	r2, r1
 802193a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	3301      	adds	r3, #1
 8021940:	60fb      	str	r3, [r7, #12]
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	2b04      	cmp	r3, #4
 8021946:	ddf0      	ble.n	802192a <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8021948:	4b0f      	ldr	r3, [pc, #60]	; (8021988 <Update_Page_2+0x78>)
 802194a:	edd3 7a00 	vldr	s15, [r3]
 802194e:	eeb0 0a67 	vmov.f32	s0, s15
 8021952:	480e      	ldr	r0, [pc, #56]	; (802198c <Update_Page_2+0x7c>)
 8021954:	f7ff fda4 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 8021958:	4b0b      	ldr	r3, [pc, #44]	; (8021988 <Update_Page_2+0x78>)
 802195a:	edd3 7a01 	vldr	s15, [r3, #4]
 802195e:	eeb0 0a67 	vmov.f32	s0, s15
 8021962:	480b      	ldr	r0, [pc, #44]	; (8021990 <Update_Page_2+0x80>)
 8021964:	f7ff fd9c 	bl	80214a0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 8021968:	4b07      	ldr	r3, [pc, #28]	; (8021988 <Update_Page_2+0x78>)
 802196a:	edd3 7a02 	vldr	s15, [r3, #8]
 802196e:	eeb0 0a67 	vmov.f32	s0, s15
 8021972:	4808      	ldr	r0, [pc, #32]	; (8021994 <Update_Page_2+0x84>)
 8021974:	f7ff fd94 	bl	80214a0 <NEXTION_SendFloat>
}
 8021978:	bf00      	nop
 802197a:	3710      	adds	r7, #16
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}
 8021980:	0802bba8 	.word	0x0802bba8
 8021984:	20000454 	.word	0x20000454
 8021988:	200008dc 	.word	0x200008dc
 802198c:	0802bb78 	.word	0x0802bb78
 8021990:	0802bb34 	.word	0x0802bb34
 8021994:	0802bb38 	.word	0x0802bb38

08021998 <HandleGui>:



void HandleGui(){
 8021998:	b580      	push	{r7, lr}
 802199a:	b0a4      	sub	sp, #144	; 0x90
 802199c:	af00      	add	r7, sp, #0
	//###################ErrorCheck##########################
	if (-1==temperature)
 802199e:	4bc5      	ldr	r3, [pc, #788]	; (8021cb4 <HandleGui+0x31c>)
 80219a0:	edd3 7a00 	vldr	s15, [r3]
 80219a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80219a8:	eef4 7a47 	vcmp.f32	s15, s14
 80219ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219b0:	d102      	bne.n	80219b8 <HandleGui+0x20>
	{
		State=Error;
 80219b2:	4bc1      	ldr	r3, [pc, #772]	; (8021cb8 <HandleGui+0x320>)
 80219b4:	2206      	movs	r2, #6
 80219b6:	701a      	strb	r2, [r3, #0]
	}

	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 80219b8:	2205      	movs	r2, #5
 80219ba:	49c0      	ldr	r1, [pc, #768]	; (8021cbc <HandleGui+0x324>)
 80219bc:	48c0      	ldr	r0, [pc, #768]	; (8021cc0 <HandleGui+0x328>)
 80219be:	f006 fb8f 	bl	80280e0 <strncmp>
 80219c2:	4603      	mov	r3, r0
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d101      	bne.n	80219cc <HandleGui+0x34>
			Update_Page_0();
 80219c8:	f7ff fefe 	bl	80217c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80219cc:	2205      	movs	r2, #5
 80219ce:	49bd      	ldr	r1, [pc, #756]	; (8021cc4 <HandleGui+0x32c>)
 80219d0:	48bb      	ldr	r0, [pc, #748]	; (8021cc0 <HandleGui+0x328>)
 80219d2:	f006 fb85 	bl	80280e0 <strncmp>
 80219d6:	4603      	mov	r3, r0
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d101      	bne.n	80219e0 <HandleGui+0x48>
			Update_Page_3();
 80219dc:	f7ff fe94 	bl	8021708 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 80219e0:	2205      	movs	r2, #5
 80219e2:	49b9      	ldr	r1, [pc, #740]	; (8021cc8 <HandleGui+0x330>)
 80219e4:	48b6      	ldr	r0, [pc, #728]	; (8021cc0 <HandleGui+0x328>)
 80219e6:	f006 fb7b 	bl	80280e0 <strncmp>
 80219ea:	4603      	mov	r3, r0
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d103      	bne.n	80219f8 <HandleGui+0x60>
			startReflow();
 80219f0:	f000 fbca 	bl	8022188 <startReflow>
			Update_Page_0();
 80219f4:	f7ff fee8 	bl	80217c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80219f8:	2205      	movs	r2, #5
 80219fa:	49b4      	ldr	r1, [pc, #720]	; (8021ccc <HandleGui+0x334>)
 80219fc:	48b0      	ldr	r0, [pc, #704]	; (8021cc0 <HandleGui+0x328>)
 80219fe:	f006 fb6f 	bl	80280e0 <strncmp>
 8021a02:	4603      	mov	r3, r0
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d103      	bne.n	8021a10 <HandleGui+0x78>
			stopReflow();
 8021a08:	f000 fbec 	bl	80221e4 <stopReflow>
			Update_Page_0();
 8021a0c:	f7ff fedc 	bl	80217c8 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 8021a10:	2205      	movs	r2, #5
 8021a12:	49ac      	ldr	r1, [pc, #688]	; (8021cc4 <HandleGui+0x32c>)
 8021a14:	48aa      	ldr	r0, [pc, #680]	; (8021cc0 <HandleGui+0x328>)
 8021a16:	f006 fb63 	bl	80280e0 <strncmp>
 8021a1a:	4603      	mov	r3, r0
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d101      	bne.n	8021a24 <HandleGui+0x8c>
			Update_Page_3();
 8021a20:	f7ff fe72 	bl	8021708 <Update_Page_3>
	}


	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 8021a24:	2205      	movs	r2, #5
 8021a26:	49aa      	ldr	r1, [pc, #680]	; (8021cd0 <HandleGui+0x338>)
 8021a28:	48a5      	ldr	r0, [pc, #660]	; (8021cc0 <HandleGui+0x328>)
 8021a2a:	f006 fb59 	bl	80280e0 <strncmp>
 8021a2e:	4603      	mov	r3, r0
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d101      	bne.n	8021a38 <HandleGui+0xa0>
		Update_Page_2();
 8021a34:	f7ff ff6c 	bl	8021910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 8021a38:	2205      	movs	r2, #5
 8021a3a:	49a6      	ldr	r1, [pc, #664]	; (8021cd4 <HandleGui+0x33c>)
 8021a3c:	48a0      	ldr	r0, [pc, #640]	; (8021cc0 <HandleGui+0x328>)
 8021a3e:	f006 fb4f 	bl	80280e0 <strncmp>
 8021a42:	4603      	mov	r3, r0
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d154      	bne.n	8021af2 <HandleGui+0x15a>
			  float32_t Output =0;
 8021a48:	f04f 0300 	mov.w	r3, #0
 8021a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8021a50:	f7ff fdea 	bl	8021628 <HandleKeyPad>
 8021a54:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8021a58:	e024      	b.n	8021aa4 <HandleGui+0x10c>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021a5a:	4a9f      	ldr	r2, [pc, #636]	; (8021cd8 <HandleGui+0x340>)
 8021a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021a64:	6018      	str	r0, [r3, #0]
 8021a66:	3304      	adds	r3, #4
 8021a68:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021a70:	e010      	b.n	8021a94 <HandleGui+0xfc>
						UART_Recieved_Data[i]=defaultUart[i];
 8021a72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a7a:	4413      	add	r3, r2
 8021a7c:	7819      	ldrb	r1, [r3, #0]
 8021a7e:	4a90      	ldr	r2, [pc, #576]	; (8021cc0 <HandleGui+0x328>)
 8021a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a84:	4413      	add	r3, r2
 8021a86:	460a      	mov	r2, r1
 8021a88:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a8e:	3301      	adds	r3, #1
 8021a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8021a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a98:	2b04      	cmp	r3, #4
 8021a9a:	ddea      	ble.n	8021a72 <HandleGui+0xda>
					}
				  Output = HandleKeyPad();
 8021a9c:	f7ff fdc4 	bl	8021628 <HandleKeyPad>
 8021aa0:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8021aa4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8021aa8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8021cdc <HandleGui+0x344>
 8021aac:	eef4 7a47 	vcmp.f32	s15, s14
 8021ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ab4:	d0d1      	beq.n	8021a5a <HandleGui+0xc2>
			  }
			  if(Output == 8888){
 8021ab6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8021aba:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8021ce0 <HandleGui+0x348>
 8021abe:	eef4 7a47 	vcmp.f32	s15, s14
 8021ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ac6:	d103      	bne.n	8021ad0 <HandleGui+0x138>
				 Output = ReflowParameters.KP;
 8021ac8:	4b86      	ldr	r3, [pc, #536]	; (8021ce4 <HandleGui+0x34c>)
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }
	    ReflowParameters.KP = Output;
 8021ad0:	4a84      	ldr	r2, [pc, #528]	; (8021ce4 <HandleGui+0x34c>)
 8021ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021ad6:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8021ad8:	4b82      	ldr	r3, [pc, #520]	; (8021ce4 <HandleGui+0x34c>)
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	4a82      	ldr	r2, [pc, #520]	; (8021ce8 <HandleGui+0x350>)
 8021ade:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8021ae0:	2101      	movs	r1, #1
 8021ae2:	4881      	ldr	r0, [pc, #516]	; (8021ce8 <HandleGui+0x350>)
 8021ae4:	f000 fd94 	bl	8022610 <arm_pid_init_f32>
		Update_Page_2();
 8021ae8:	f7ff ff12 	bl	8021910 <Update_Page_2>
		NEXTION_CMD("page 2");
 8021aec:	487f      	ldr	r0, [pc, #508]	; (8021cec <HandleGui+0x354>)
 8021aee:	f7ff fd2b 	bl	8021548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 8021af2:	2205      	movs	r2, #5
 8021af4:	497e      	ldr	r1, [pc, #504]	; (8021cf0 <HandleGui+0x358>)
 8021af6:	4872      	ldr	r0, [pc, #456]	; (8021cc0 <HandleGui+0x328>)
 8021af8:	f006 faf2 	bl	80280e0 <strncmp>
 8021afc:	4603      	mov	r3, r0
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d154      	bne.n	8021bac <HandleGui+0x214>
			  float32_t Output =0;
 8021b02:	f04f 0300 	mov.w	r3, #0
 8021b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8021b0a:	f7ff fd8d 	bl	8021628 <HandleKeyPad>
 8021b0e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8021b12:	e024      	b.n	8021b5e <HandleGui+0x1c6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021b14:	4a70      	ldr	r2, [pc, #448]	; (8021cd8 <HandleGui+0x340>)
 8021b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021b1e:	6018      	str	r0, [r3, #0]
 8021b20:	3304      	adds	r3, #4
 8021b22:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021b24:	2300      	movs	r3, #0
 8021b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021b2a:	e010      	b.n	8021b4e <HandleGui+0x1b6>
						UART_Recieved_Data[i]=defaultUart[i];
 8021b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8021b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b34:	4413      	add	r3, r2
 8021b36:	7819      	ldrb	r1, [r3, #0]
 8021b38:	4a61      	ldr	r2, [pc, #388]	; (8021cc0 <HandleGui+0x328>)
 8021b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b3e:	4413      	add	r3, r2
 8021b40:	460a      	mov	r2, r1
 8021b42:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b48:	3301      	adds	r3, #1
 8021b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b52:	2b04      	cmp	r3, #4
 8021b54:	ddea      	ble.n	8021b2c <HandleGui+0x194>
					}
				  Output = HandleKeyPad();
 8021b56:	f7ff fd67 	bl	8021628 <HandleKeyPad>
 8021b5a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8021b5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8021b62:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8021cdc <HandleGui+0x344>
 8021b66:	eef4 7a47 	vcmp.f32	s15, s14
 8021b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b6e:	d0d1      	beq.n	8021b14 <HandleGui+0x17c>
			  }
			  if(Output == 8888){
 8021b70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8021b74:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8021ce0 <HandleGui+0x348>
 8021b78:	eef4 7a47 	vcmp.f32	s15, s14
 8021b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b80:	d103      	bne.n	8021b8a <HandleGui+0x1f2>
				 Output = ReflowParameters.Ki;
 8021b82:	4b58      	ldr	r3, [pc, #352]	; (8021ce4 <HandleGui+0x34c>)
 8021b84:	685b      	ldr	r3, [r3, #4]
 8021b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8021b8a:	4a56      	ldr	r2, [pc, #344]	; (8021ce4 <HandleGui+0x34c>)
 8021b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021b90:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8021b92:	4b54      	ldr	r3, [pc, #336]	; (8021ce4 <HandleGui+0x34c>)
 8021b94:	685b      	ldr	r3, [r3, #4]
 8021b96:	4a54      	ldr	r2, [pc, #336]	; (8021ce8 <HandleGui+0x350>)
 8021b98:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8021b9a:	2101      	movs	r1, #1
 8021b9c:	4852      	ldr	r0, [pc, #328]	; (8021ce8 <HandleGui+0x350>)
 8021b9e:	f000 fd37 	bl	8022610 <arm_pid_init_f32>
			Update_Page_2();
 8021ba2:	f7ff feb5 	bl	8021910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8021ba6:	4851      	ldr	r0, [pc, #324]	; (8021cec <HandleGui+0x354>)
 8021ba8:	f7ff fcce 	bl	8021548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8021bac:	2205      	movs	r2, #5
 8021bae:	4951      	ldr	r1, [pc, #324]	; (8021cf4 <HandleGui+0x35c>)
 8021bb0:	4843      	ldr	r0, [pc, #268]	; (8021cc0 <HandleGui+0x328>)
 8021bb2:	f006 fa95 	bl	80280e0 <strncmp>
 8021bb6:	4603      	mov	r3, r0
 8021bb8:	2b00      	cmp	r3, #0
 8021bba:	d14b      	bne.n	8021c54 <HandleGui+0x2bc>
			  float32_t Output =0;
 8021bbc:	f04f 0300 	mov.w	r3, #0
 8021bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8021bc2:	f7ff fd31 	bl	8021628 <HandleKeyPad>
 8021bc6:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8021bca:	e01e      	b.n	8021c0a <HandleGui+0x272>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021bcc:	4a42      	ldr	r2, [pc, #264]	; (8021cd8 <HandleGui+0x340>)
 8021bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021bd6:	6018      	str	r0, [r3, #0]
 8021bd8:	3304      	adds	r3, #4
 8021bda:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021bdc:	2300      	movs	r3, #0
 8021bde:	67bb      	str	r3, [r7, #120]	; 0x78
 8021be0:	e00c      	b.n	8021bfc <HandleGui+0x264>
						UART_Recieved_Data[i]=defaultUart[i];
 8021be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8021be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021be8:	4413      	add	r3, r2
 8021bea:	7819      	ldrb	r1, [r3, #0]
 8021bec:	4a34      	ldr	r2, [pc, #208]	; (8021cc0 <HandleGui+0x328>)
 8021bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021bf0:	4413      	add	r3, r2
 8021bf2:	460a      	mov	r2, r1
 8021bf4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021bf8:	3301      	adds	r3, #1
 8021bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8021bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021bfe:	2b04      	cmp	r3, #4
 8021c00:	ddef      	ble.n	8021be2 <HandleGui+0x24a>
					}
				  Output = HandleKeyPad();
 8021c02:	f7ff fd11 	bl	8021628 <HandleKeyPad>
 8021c06:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8021c0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8021c0e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8021cdc <HandleGui+0x344>
 8021c12:	eef4 7a47 	vcmp.f32	s15, s14
 8021c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c1a:	d0d7      	beq.n	8021bcc <HandleGui+0x234>
			  }
			  if(Output == 8888){
 8021c1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8021c20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8021ce0 <HandleGui+0x348>
 8021c24:	eef4 7a47 	vcmp.f32	s15, s14
 8021c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c2c:	d102      	bne.n	8021c34 <HandleGui+0x29c>
				 Output = ReflowParameters.KD;
 8021c2e:	4b2d      	ldr	r3, [pc, #180]	; (8021ce4 <HandleGui+0x34c>)
 8021c30:	689b      	ldr	r3, [r3, #8]
 8021c32:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8021c34:	4a2b      	ldr	r2, [pc, #172]	; (8021ce4 <HandleGui+0x34c>)
 8021c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021c38:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8021c3a:	4b2a      	ldr	r3, [pc, #168]	; (8021ce4 <HandleGui+0x34c>)
 8021c3c:	689b      	ldr	r3, [r3, #8]
 8021c3e:	4a2a      	ldr	r2, [pc, #168]	; (8021ce8 <HandleGui+0x350>)
 8021c40:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8021c42:	2101      	movs	r1, #1
 8021c44:	4828      	ldr	r0, [pc, #160]	; (8021ce8 <HandleGui+0x350>)
 8021c46:	f000 fce3 	bl	8022610 <arm_pid_init_f32>
			Update_Page_2();
 8021c4a:	f7ff fe61 	bl	8021910 <Update_Page_2>
			NEXTION_CMD("page 2");
 8021c4e:	4827      	ldr	r0, [pc, #156]	; (8021cec <HandleGui+0x354>)
 8021c50:	f7ff fc7a 	bl	8021548 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8021c54:	2205      	movs	r2, #5
 8021c56:	4928      	ldr	r1, [pc, #160]	; (8021cf8 <HandleGui+0x360>)
 8021c58:	4819      	ldr	r0, [pc, #100]	; (8021cc0 <HandleGui+0x328>)
 8021c5a:	f006 fa41 	bl	80280e0 <strncmp>
 8021c5e:	4603      	mov	r3, r0
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	d101      	bne.n	8021c68 <HandleGui+0x2d0>
			Update_Page_3();
 8021c64:	f7ff fd50 	bl	8021708 <Update_Page_3>



	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8021c68:	2205      	movs	r2, #5
 8021c6a:	4924      	ldr	r1, [pc, #144]	; (8021cfc <HandleGui+0x364>)
 8021c6c:	4814      	ldr	r0, [pc, #80]	; (8021cc0 <HandleGui+0x328>)
 8021c6e:	f006 fa37 	bl	80280e0 <strncmp>
 8021c72:	4603      	mov	r3, r0
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d101      	bne.n	8021c7c <HandleGui+0x2e4>
		Update_Page_3();
 8021c78:	f7ff fd46 	bl	8021708 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8021c7c:	2205      	movs	r2, #5
 8021c7e:	4920      	ldr	r1, [pc, #128]	; (8021d00 <HandleGui+0x368>)
 8021c80:	480f      	ldr	r0, [pc, #60]	; (8021cc0 <HandleGui+0x328>)
 8021c82:	f006 fa2d 	bl	80280e0 <strncmp>
 8021c86:	4603      	mov	r3, r0
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d17b      	bne.n	8021d84 <HandleGui+0x3ec>
			  float32_t Output =0;
 8021c8c:	f04f 0300 	mov.w	r3, #0
 8021c90:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8021c92:	f7ff fcc9 	bl	8021628 <HandleKeyPad>
 8021c96:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8021c9a:	e047      	b.n	8021d2c <HandleGui+0x394>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021c9c:	4a0e      	ldr	r2, [pc, #56]	; (8021cd8 <HandleGui+0x340>)
 8021c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8021ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021ca6:	6018      	str	r0, [r3, #0]
 8021ca8:	3304      	adds	r3, #4
 8021caa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021cac:	2300      	movs	r3, #0
 8021cae:	673b      	str	r3, [r7, #112]	; 0x70
 8021cb0:	e035      	b.n	8021d1e <HandleGui+0x386>
 8021cb2:	bf00      	nop
 8021cb4:	20000694 	.word	0x20000694
 8021cb8:	20000898 	.word	0x20000898
 8021cbc:	0802bbb0 	.word	0x0802bbb0
 8021cc0:	20000454 	.word	0x20000454
 8021cc4:	0802bbb8 	.word	0x0802bbb8
 8021cc8:	0802bbc0 	.word	0x0802bbc0
 8021ccc:	0802bbc8 	.word	0x0802bbc8
 8021cd0:	0802bbd0 	.word	0x0802bbd0
 8021cd4:	0802bbd8 	.word	0x0802bbd8
 8021cd8:	0802bc50 	.word	0x0802bc50
 8021cdc:	461c3c00 	.word	0x461c3c00
 8021ce0:	460ae000 	.word	0x460ae000
 8021ce4:	200008dc 	.word	0x200008dc
 8021ce8:	20000860 	.word	0x20000860
 8021cec:	0802bbe0 	.word	0x0802bbe0
 8021cf0:	0802bbe8 	.word	0x0802bbe8
 8021cf4:	0802bbf0 	.word	0x0802bbf0
 8021cf8:	0802bbf8 	.word	0x0802bbf8
 8021cfc:	0802bc00 	.word	0x0802bc00
 8021d00:	0802bc08 	.word	0x0802bc08
						UART_Recieved_Data[i]=defaultUart[i];
 8021d04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021d0a:	4413      	add	r3, r2
 8021d0c:	7819      	ldrb	r1, [r3, #0]
 8021d0e:	4ab2      	ldr	r2, [pc, #712]	; (8021fd8 <HandleGui+0x640>)
 8021d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021d12:	4413      	add	r3, r2
 8021d14:	460a      	mov	r2, r1
 8021d16:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021d1a:	3301      	adds	r3, #1
 8021d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8021d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021d20:	2b04      	cmp	r3, #4
 8021d22:	ddef      	ble.n	8021d04 <HandleGui+0x36c>
					}
				  Output = HandleKeyPad();
 8021d24:	f7ff fc80 	bl	8021628 <HandleKeyPad>
 8021d28:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8021d2c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8021d30:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8021fdc <HandleGui+0x644>
 8021d34:	eef4 7a47 	vcmp.f32	s15, s14
 8021d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d3c:	d0ae      	beq.n	8021c9c <HandleGui+0x304>
			  }
			  if(Output == 8888){
 8021d3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8021d42:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8021fe0 <HandleGui+0x648>
 8021d46:	eef4 7a47 	vcmp.f32	s15, s14
 8021d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d4e:	d102      	bne.n	8021d56 <HandleGui+0x3be>
				 Output = ReflowParameters.firstHeatUpRate;
 8021d50:	4ba4      	ldr	r3, [pc, #656]	; (8021fe4 <HandleGui+0x64c>)
 8021d52:	68db      	ldr	r3, [r3, #12]
 8021d54:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if(Output < 0.2)
 8021d56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8021d58:	f7fe fbf6 	bl	8020548 <__aeabi_f2d>
 8021d5c:	a39c      	add	r3, pc, #624	; (adr r3, 8021fd0 <HandleGui+0x638>)
 8021d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d62:	f7fe febb 	bl	8020adc <__aeabi_dcmplt>
 8021d66:	4603      	mov	r3, r0
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d001      	beq.n	8021d70 <HandleGui+0x3d8>
				  Output = 0.2;
 8021d6c:	4b9e      	ldr	r3, [pc, #632]	; (8021fe8 <HandleGui+0x650>)
 8021d6e:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8021d70:	4a9c      	ldr	r2, [pc, #624]	; (8021fe4 <HandleGui+0x64c>)
 8021d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021d74:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8021d76:	f7ff fcc7 	bl	8021708 <Update_Page_3>
		NEXTION_CMD("page 3");
 8021d7a:	489c      	ldr	r0, [pc, #624]	; (8021fec <HandleGui+0x654>)
 8021d7c:	f7ff fbe4 	bl	8021548 <NEXTION_CMD>
		calculateReflowCurve();
 8021d80:	f000 fade 	bl	8022340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8021d84:	2205      	movs	r2, #5
 8021d86:	499a      	ldr	r1, [pc, #616]	; (8021ff0 <HandleGui+0x658>)
 8021d88:	4893      	ldr	r0, [pc, #588]	; (8021fd8 <HandleGui+0x640>)
 8021d8a:	f006 f9a9 	bl	80280e0 <strncmp>
 8021d8e:	4603      	mov	r3, r0
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d14f      	bne.n	8021e34 <HandleGui+0x49c>
			  float32_t Output =0;
 8021d94:	f04f 0300 	mov.w	r3, #0
 8021d98:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8021d9a:	f7ff fc45 	bl	8021628 <HandleKeyPad>
 8021d9e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8021da2:	e01e      	b.n	8021de2 <HandleGui+0x44a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021da4:	4a93      	ldr	r2, [pc, #588]	; (8021ff4 <HandleGui+0x65c>)
 8021da6:	f107 0320 	add.w	r3, r7, #32
 8021daa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021dae:	6018      	str	r0, [r3, #0]
 8021db0:	3304      	adds	r3, #4
 8021db2:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021db4:	2300      	movs	r3, #0
 8021db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8021db8:	e00c      	b.n	8021dd4 <HandleGui+0x43c>
						UART_Recieved_Data[i]=defaultUart[i];
 8021dba:	f107 0220 	add.w	r2, r7, #32
 8021dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021dc0:	4413      	add	r3, r2
 8021dc2:	7819      	ldrb	r1, [r3, #0]
 8021dc4:	4a84      	ldr	r2, [pc, #528]	; (8021fd8 <HandleGui+0x640>)
 8021dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021dc8:	4413      	add	r3, r2
 8021dca:	460a      	mov	r2, r1
 8021dcc:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021dd0:	3301      	adds	r3, #1
 8021dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8021dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021dd6:	2b04      	cmp	r3, #4
 8021dd8:	ddef      	ble.n	8021dba <HandleGui+0x422>
					}
				  Output = HandleKeyPad();
 8021dda:	f7ff fc25 	bl	8021628 <HandleKeyPad>
 8021dde:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8021de2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8021de6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8021fdc <HandleGui+0x644>
 8021dea:	eef4 7a47 	vcmp.f32	s15, s14
 8021dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021df2:	d0d7      	beq.n	8021da4 <HandleGui+0x40c>
			  }
			  if(Output == 8888){
 8021df4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8021df8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8021fe0 <HandleGui+0x648>
 8021dfc:	eef4 7a47 	vcmp.f32	s15, s14
 8021e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e04:	d107      	bne.n	8021e16 <HandleGui+0x47e>
				 Output = ReflowParameters.SoakTime;
 8021e06:	4b77      	ldr	r3, [pc, #476]	; (8021fe4 <HandleGui+0x64c>)
 8021e08:	695b      	ldr	r3, [r3, #20]
 8021e0a:	ee07 3a90 	vmov	s15, r3
 8021e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e12:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			  }
			ReflowParameters.SoakTime = Output;
 8021e16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8021e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021e1e:	ee17 2a90 	vmov	r2, s15
 8021e22:	4b70      	ldr	r3, [pc, #448]	; (8021fe4 <HandleGui+0x64c>)
 8021e24:	615a      	str	r2, [r3, #20]
			Update_Page_3();
 8021e26:	f7ff fc6f 	bl	8021708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8021e2a:	4870      	ldr	r0, [pc, #448]	; (8021fec <HandleGui+0x654>)
 8021e2c:	f7ff fb8c 	bl	8021548 <NEXTION_CMD>
			calculateReflowCurve();
 8021e30:	f000 fa86 	bl	8022340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8021e34:	2205      	movs	r2, #5
 8021e36:	4970      	ldr	r1, [pc, #448]	; (8021ff8 <HandleGui+0x660>)
 8021e38:	4867      	ldr	r0, [pc, #412]	; (8021fd8 <HandleGui+0x640>)
 8021e3a:	f006 f951 	bl	80280e0 <strncmp>
 8021e3e:	4603      	mov	r3, r0
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d14f      	bne.n	8021ee4 <HandleGui+0x54c>
			  float32_t Output =0;
 8021e44:	f04f 0300 	mov.w	r3, #0
 8021e48:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8021e4a:	f7ff fbed 	bl	8021628 <HandleKeyPad>
 8021e4e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8021e52:	e01e      	b.n	8021e92 <HandleGui+0x4fa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021e54:	4a67      	ldr	r2, [pc, #412]	; (8021ff4 <HandleGui+0x65c>)
 8021e56:	f107 0318 	add.w	r3, r7, #24
 8021e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021e5e:	6018      	str	r0, [r3, #0]
 8021e60:	3304      	adds	r3, #4
 8021e62:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021e64:	2300      	movs	r3, #0
 8021e66:	663b      	str	r3, [r7, #96]	; 0x60
 8021e68:	e00c      	b.n	8021e84 <HandleGui+0x4ec>
						UART_Recieved_Data[i]=defaultUart[i];
 8021e6a:	f107 0218 	add.w	r2, r7, #24
 8021e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e70:	4413      	add	r3, r2
 8021e72:	7819      	ldrb	r1, [r3, #0]
 8021e74:	4a58      	ldr	r2, [pc, #352]	; (8021fd8 <HandleGui+0x640>)
 8021e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e78:	4413      	add	r3, r2
 8021e7a:	460a      	mov	r2, r1
 8021e7c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e80:	3301      	adds	r3, #1
 8021e82:	663b      	str	r3, [r7, #96]	; 0x60
 8021e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e86:	2b04      	cmp	r3, #4
 8021e88:	ddef      	ble.n	8021e6a <HandleGui+0x4d2>
					}
				  Output = HandleKeyPad();
 8021e8a:	f7ff fbcd 	bl	8021628 <HandleKeyPad>
 8021e8e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8021e92:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8021e96:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8021fdc <HandleGui+0x644>
 8021e9a:	eef4 7a47 	vcmp.f32	s15, s14
 8021e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ea2:	d0d7      	beq.n	8021e54 <HandleGui+0x4bc>
			  }
			  if(Output == 8888){
 8021ea4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8021ea8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8021fe0 <HandleGui+0x648>
 8021eac:	eef4 7a47 	vcmp.f32	s15, s14
 8021eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021eb4:	d107      	bne.n	8021ec6 <HandleGui+0x52e>
				 Output = ReflowParameters.SoakTempeture;
 8021eb6:	4b4b      	ldr	r3, [pc, #300]	; (8021fe4 <HandleGui+0x64c>)
 8021eb8:	691b      	ldr	r3, [r3, #16]
 8021eba:	ee07 3a90 	vmov	s15, r3
 8021ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ec2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			  }
			ReflowParameters.SoakTempeture = Output;
 8021ec6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8021eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021ece:	ee17 2a90 	vmov	r2, s15
 8021ed2:	4b44      	ldr	r3, [pc, #272]	; (8021fe4 <HandleGui+0x64c>)
 8021ed4:	611a      	str	r2, [r3, #16]
			Update_Page_3();
 8021ed6:	f7ff fc17 	bl	8021708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8021eda:	4844      	ldr	r0, [pc, #272]	; (8021fec <HandleGui+0x654>)
 8021edc:	f7ff fb34 	bl	8021548 <NEXTION_CMD>
			calculateReflowCurve();
 8021ee0:	f000 fa2e 	bl	8022340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8021ee4:	2205      	movs	r2, #5
 8021ee6:	4945      	ldr	r1, [pc, #276]	; (8021ffc <HandleGui+0x664>)
 8021ee8:	483b      	ldr	r0, [pc, #236]	; (8021fd8 <HandleGui+0x640>)
 8021eea:	f006 f8f9 	bl	80280e0 <strncmp>
 8021eee:	4603      	mov	r3, r0
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	d152      	bne.n	8021f9a <HandleGui+0x602>
			  float32_t Output =0;
 8021ef4:	f04f 0300 	mov.w	r3, #0
 8021ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8021efa:	f7ff fb95 	bl	8021628 <HandleKeyPad>
 8021efe:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8021f02:	e01e      	b.n	8021f42 <HandleGui+0x5aa>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021f04:	4a3b      	ldr	r2, [pc, #236]	; (8021ff4 <HandleGui+0x65c>)
 8021f06:	f107 0310 	add.w	r3, r7, #16
 8021f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021f0e:	6018      	str	r0, [r3, #0]
 8021f10:	3304      	adds	r3, #4
 8021f12:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021f14:	2300      	movs	r3, #0
 8021f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8021f18:	e00c      	b.n	8021f34 <HandleGui+0x59c>
						UART_Recieved_Data[i]=defaultUart[i];
 8021f1a:	f107 0210 	add.w	r2, r7, #16
 8021f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021f20:	4413      	add	r3, r2
 8021f22:	7819      	ldrb	r1, [r3, #0]
 8021f24:	4a2c      	ldr	r2, [pc, #176]	; (8021fd8 <HandleGui+0x640>)
 8021f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021f28:	4413      	add	r3, r2
 8021f2a:	460a      	mov	r2, r1
 8021f2c:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8021f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021f30:	3301      	adds	r3, #1
 8021f32:	65bb      	str	r3, [r7, #88]	; 0x58
 8021f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021f36:	2b04      	cmp	r3, #4
 8021f38:	ddef      	ble.n	8021f1a <HandleGui+0x582>
					}
				  Output = HandleKeyPad();
 8021f3a:	f7ff fb75 	bl	8021628 <HandleKeyPad>
 8021f3e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8021f42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8021f46:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8021fdc <HandleGui+0x644>
 8021f4a:	eef4 7a47 	vcmp.f32	s15, s14
 8021f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f52:	d0d7      	beq.n	8021f04 <HandleGui+0x56c>
			  }
			  if(Output == 8888){
 8021f54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8021f58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8021fe0 <HandleGui+0x648>
 8021f5c:	eef4 7a47 	vcmp.f32	s15, s14
 8021f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f64:	d102      	bne.n	8021f6c <HandleGui+0x5d4>
				 Output = ReflowParameters.secondHeatUpRate;
 8021f66:	4b1f      	ldr	r3, [pc, #124]	; (8021fe4 <HandleGui+0x64c>)
 8021f68:	699b      	ldr	r3, [r3, #24]
 8021f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }
			  if(Output < 0.2)
 8021f6c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8021f6e:	f7fe faeb 	bl	8020548 <__aeabi_f2d>
 8021f72:	a317      	add	r3, pc, #92	; (adr r3, 8021fd0 <HandleGui+0x638>)
 8021f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f78:	f7fe fdb0 	bl	8020adc <__aeabi_dcmplt>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	d001      	beq.n	8021f86 <HandleGui+0x5ee>
						  Output = 0.2;
 8021f82:	4b19      	ldr	r3, [pc, #100]	; (8021fe8 <HandleGui+0x650>)
 8021f84:	65fb      	str	r3, [r7, #92]	; 0x5c
			ReflowParameters.secondHeatUpRate = Output;
 8021f86:	4a17      	ldr	r2, [pc, #92]	; (8021fe4 <HandleGui+0x64c>)
 8021f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021f8a:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8021f8c:	f7ff fbbc 	bl	8021708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8021f90:	4816      	ldr	r0, [pc, #88]	; (8021fec <HandleGui+0x654>)
 8021f92:	f7ff fad9 	bl	8021548 <NEXTION_CMD>
			calculateReflowCurve();
 8021f96:	f000 f9d3 	bl	8022340 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8021f9a:	2205      	movs	r2, #5
 8021f9c:	4918      	ldr	r1, [pc, #96]	; (8022000 <HandleGui+0x668>)
 8021f9e:	480e      	ldr	r0, [pc, #56]	; (8021fd8 <HandleGui+0x640>)
 8021fa0:	f006 f89e 	bl	80280e0 <strncmp>
 8021fa4:	4603      	mov	r3, r0
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d169      	bne.n	802207e <HandleGui+0x6e6>
			  float32_t Output =0;
 8021faa:	f04f 0300 	mov.w	r3, #0
 8021fae:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8021fb0:	f7ff fb3a 	bl	8021628 <HandleKeyPad>
 8021fb4:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8021fb8:	e038      	b.n	802202c <HandleGui+0x694>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8021fba:	4a0e      	ldr	r2, [pc, #56]	; (8021ff4 <HandleGui+0x65c>)
 8021fbc:	f107 0308 	add.w	r3, r7, #8
 8021fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021fc4:	6018      	str	r0, [r3, #0]
 8021fc6:	3304      	adds	r3, #4
 8021fc8:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8021fca:	2300      	movs	r3, #0
 8021fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8021fce:	e026      	b.n	802201e <HandleGui+0x686>
 8021fd0:	9999999a 	.word	0x9999999a
 8021fd4:	3fc99999 	.word	0x3fc99999
 8021fd8:	20000454 	.word	0x20000454
 8021fdc:	461c3c00 	.word	0x461c3c00
 8021fe0:	460ae000 	.word	0x460ae000
 8021fe4:	200008dc 	.word	0x200008dc
 8021fe8:	3e4ccccd 	.word	0x3e4ccccd
 8021fec:	0802bc10 	.word	0x0802bc10
 8021ff0:	0802bc18 	.word	0x0802bc18
 8021ff4:	0802bc50 	.word	0x0802bc50
 8021ff8:	0802bc20 	.word	0x0802bc20
 8021ffc:	0802bc28 	.word	0x0802bc28
 8022000:	0802bc30 	.word	0x0802bc30
						UART_Recieved_Data[i]=defaultUart[i];
 8022004:	f107 0208 	add.w	r2, r7, #8
 8022008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802200a:	4413      	add	r3, r2
 802200c:	7819      	ldrb	r1, [r3, #0]
 802200e:	4a55      	ldr	r2, [pc, #340]	; (8022164 <HandleGui+0x7cc>)
 8022010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022012:	4413      	add	r3, r2
 8022014:	460a      	mov	r2, r1
 8022016:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8022018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802201a:	3301      	adds	r3, #1
 802201c:	653b      	str	r3, [r7, #80]	; 0x50
 802201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022020:	2b04      	cmp	r3, #4
 8022022:	ddef      	ble.n	8022004 <HandleGui+0x66c>
					}
				  Output = HandleKeyPad();
 8022024:	f7ff fb00 	bl	8021628 <HandleKeyPad>
 8022028:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			  while(Output == 9999){
 802202c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8022030:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8022168 <HandleGui+0x7d0>
 8022034:	eef4 7a47 	vcmp.f32	s15, s14
 8022038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802203c:	d0bd      	beq.n	8021fba <HandleGui+0x622>
			  }
			  if(Output == 8888){
 802203e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8022042:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 802216c <HandleGui+0x7d4>
 8022046:	eef4 7a47 	vcmp.f32	s15, s14
 802204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802204e:	d107      	bne.n	8022060 <HandleGui+0x6c8>
				 Output = ReflowParameters.ReflowTime;
 8022050:	4b47      	ldr	r3, [pc, #284]	; (8022170 <HandleGui+0x7d8>)
 8022052:	6a1b      	ldr	r3, [r3, #32]
 8022054:	ee07 3a90 	vmov	s15, r3
 8022058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802205c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			  }
			ReflowParameters.ReflowTime = Output;
 8022060:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8022064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022068:	ee17 2a90 	vmov	r2, s15
 802206c:	4b40      	ldr	r3, [pc, #256]	; (8022170 <HandleGui+0x7d8>)
 802206e:	621a      	str	r2, [r3, #32]
			Update_Page_3();
 8022070:	f7ff fb4a 	bl	8021708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8022074:	483f      	ldr	r0, [pc, #252]	; (8022174 <HandleGui+0x7dc>)
 8022076:	f7ff fa67 	bl	8021548 <NEXTION_CMD>
			calculateReflowCurve();
 802207a:	f000 f961 	bl	8022340 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 802207e:	2205      	movs	r2, #5
 8022080:	493d      	ldr	r1, [pc, #244]	; (8022178 <HandleGui+0x7e0>)
 8022082:	4838      	ldr	r0, [pc, #224]	; (8022164 <HandleGui+0x7cc>)
 8022084:	f006 f82c 	bl	80280e0 <strncmp>
 8022088:	4603      	mov	r3, r0
 802208a:	2b00      	cmp	r3, #0
 802208c:	d14d      	bne.n	802212a <HandleGui+0x792>
			  float32_t Output =0;
 802208e:	f04f 0300 	mov.w	r3, #0
 8022092:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8022094:	f7ff fac8 	bl	8021628 <HandleKeyPad>
 8022098:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 802209c:	e01c      	b.n	80220d8 <HandleGui+0x740>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 802209e:	4a37      	ldr	r2, [pc, #220]	; (802217c <HandleGui+0x7e4>)
 80220a0:	463b      	mov	r3, r7
 80220a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80220a6:	6018      	str	r0, [r3, #0]
 80220a8:	3304      	adds	r3, #4
 80220aa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80220ac:	2300      	movs	r3, #0
 80220ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80220b0:	e00b      	b.n	80220ca <HandleGui+0x732>
						UART_Recieved_Data[i]=defaultUart[i];
 80220b2:	463a      	mov	r2, r7
 80220b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80220b6:	4413      	add	r3, r2
 80220b8:	7819      	ldrb	r1, [r3, #0]
 80220ba:	4a2a      	ldr	r2, [pc, #168]	; (8022164 <HandleGui+0x7cc>)
 80220bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80220be:	4413      	add	r3, r2
 80220c0:	460a      	mov	r2, r1
 80220c2:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80220c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80220c6:	3301      	adds	r3, #1
 80220c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80220ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80220cc:	2b04      	cmp	r3, #4
 80220ce:	ddf0      	ble.n	80220b2 <HandleGui+0x71a>
					}
				  Output = HandleKeyPad();
 80220d0:	f7ff faaa 	bl	8021628 <HandleKeyPad>
 80220d4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 80220d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80220dc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8022168 <HandleGui+0x7d0>
 80220e0:	eef4 7a47 	vcmp.f32	s15, s14
 80220e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220e8:	d0d9      	beq.n	802209e <HandleGui+0x706>
			  }
			  if(Output == 8888){
 80220ea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80220ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802216c <HandleGui+0x7d4>
 80220f2:	eef4 7a47 	vcmp.f32	s15, s14
 80220f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220fa:	d107      	bne.n	802210c <HandleGui+0x774>
				 Output = ReflowParameters.ReflowTempeture;
 80220fc:	4b1c      	ldr	r3, [pc, #112]	; (8022170 <HandleGui+0x7d8>)
 80220fe:	69db      	ldr	r3, [r3, #28]
 8022100:	ee07 3a90 	vmov	s15, r3
 8022104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022108:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			  }
			ReflowParameters.ReflowTempeture = Output;
 802210c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8022110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022114:	ee17 2a90 	vmov	r2, s15
 8022118:	4b15      	ldr	r3, [pc, #84]	; (8022170 <HandleGui+0x7d8>)
 802211a:	61da      	str	r2, [r3, #28]
			Update_Page_3();
 802211c:	f7ff faf4 	bl	8021708 <Update_Page_3>
			NEXTION_CMD("page 3");
 8022120:	4814      	ldr	r0, [pc, #80]	; (8022174 <HandleGui+0x7dc>)
 8022122:	f7ff fa11 	bl	8021548 <NEXTION_CMD>
			calculateReflowCurve();
 8022126:	f000 f90b 	bl	8022340 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 802212a:	2205      	movs	r2, #5
 802212c:	4914      	ldr	r1, [pc, #80]	; (8022180 <HandleGui+0x7e8>)
 802212e:	480d      	ldr	r0, [pc, #52]	; (8022164 <HandleGui+0x7cc>)
 8022130:	f005 ffd6 	bl	80280e0 <strncmp>
 8022134:	4603      	mov	r3, r0
 8022136:	2b00      	cmp	r3, #0
 8022138:	d101      	bne.n	802213e <HandleGui+0x7a6>
			Update_Page_2();
 802213a:	f7ff fbe9 	bl	8021910 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 802213e:	2205      	movs	r2, #5
 8022140:	4910      	ldr	r1, [pc, #64]	; (8022184 <HandleGui+0x7ec>)
 8022142:	4808      	ldr	r0, [pc, #32]	; (8022164 <HandleGui+0x7cc>)
 8022144:	f005 ffcc 	bl	80280e0 <strncmp>
 8022148:	4603      	mov	r3, r0
 802214a:	2b00      	cmp	r3, #0
 802214c:	d105      	bne.n	802215a <HandleGui+0x7c2>
			Update_Page_0();
 802214e:	f7ff fb3b 	bl	80217c8 <Update_Page_0>
			Draw_Reflow_Curve();
 8022152:	f000 f871 	bl	8022238 <Draw_Reflow_Curve>
			SaveParameters();
 8022156:	f7ff f94f 	bl	80213f8 <SaveParameters>
//	NEXTION_SenduInt("t1",ReflowParameters.SoakTime );
//	NEXTION_SenduInt("t2",ReflowParameters.SoakTempeture );
//	NEXTION_SendFloat("t3",ReflowParameters.secondHeatUpRate );
//	NEXTION_SenduInt("t4",ReflowParameters.ReflowTime );
//	NEXTION_SenduInt("t5",ReflowParameters.ReflowTempeture );
}
 802215a:	bf00      	nop
 802215c:	3790      	adds	r7, #144	; 0x90
 802215e:	46bd      	mov	sp, r7
 8022160:	bd80      	pop	{r7, pc}
 8022162:	bf00      	nop
 8022164:	20000454 	.word	0x20000454
 8022168:	461c3c00 	.word	0x461c3c00
 802216c:	460ae000 	.word	0x460ae000
 8022170:	200008dc 	.word	0x200008dc
 8022174:	0802bc10 	.word	0x0802bc10
 8022178:	0802bc38 	.word	0x0802bc38
 802217c:	0802bc50 	.word	0x0802bc50
 8022180:	0802bc40 	.word	0x0802bc40
 8022184:	0802bc48 	.word	0x0802bc48

08022188 <startReflow>:

void startReflow(){
 8022188:	b580      	push	{r7, lr}
 802218a:	af00      	add	r7, sp, #0

if(0==ReflowEnable)
 802218c:	4b0f      	ldr	r3, [pc, #60]	; (80221cc <startReflow+0x44>)
 802218e:	781b      	ldrb	r3, [r3, #0]
 8022190:	2b00      	cmp	r3, #0
 8022192:	d104      	bne.n	802219e <startReflow+0x16>
{
	initFlags();
 8022194:	f000 fa20 	bl	80225d8 <initFlags>
	State=Initializing;
 8022198:	4b0d      	ldr	r3, [pc, #52]	; (80221d0 <startReflow+0x48>)
 802219a:	2200      	movs	r2, #0
 802219c:	701a      	strb	r2, [r3, #0]
}
ReflowEnable = 1;
 802219e:	4b0b      	ldr	r3, [pc, #44]	; (80221cc <startReflow+0x44>)
 80221a0:	2201      	movs	r2, #1
 80221a2:	701a      	strb	r2, [r3, #0]
NEXTION_CMD("page 0");
 80221a4:	480b      	ldr	r0, [pc, #44]	; (80221d4 <startReflow+0x4c>)
 80221a6:	f7ff f9cf 	bl	8021548 <NEXTION_CMD>
Draw_Reflow_Curve();
 80221aa:	f000 f845 	bl	8022238 <Draw_Reflow_Curve>
sprintf(ConsoleMSG,"REFLOW START");
 80221ae:	490a      	ldr	r1, [pc, #40]	; (80221d8 <startReflow+0x50>)
 80221b0:	480a      	ldr	r0, [pc, #40]	; (80221dc <startReflow+0x54>)
 80221b2:	f005 ff75 	bl	80280a0 <siprintf>
Update_Page_0();
 80221b6:	f7ff fb07 	bl	80217c8 <Update_Page_0>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80221ba:	2017      	movs	r0, #23
 80221bc:	f001 fdcf 	bl	8023d5e <HAL_NVIC_EnableIRQ>
HAL_TIM_Base_Start_IT(&htim5);
 80221c0:	4807      	ldr	r0, [pc, #28]	; (80221e0 <startReflow+0x58>)
 80221c2:	f003 fb9a 	bl	80258fa <HAL_TIM_Base_Start_IT>
}
 80221c6:	bf00      	nop
 80221c8:	bd80      	pop	{r7, pc}
 80221ca:	bf00      	nop
 80221cc:	2000067c 	.word	0x2000067c
 80221d0:	20000898 	.word	0x20000898
 80221d4:	0802bc58 	.word	0x0802bc58
 80221d8:	0802bc60 	.word	0x0802bc60
 80221dc:	20000930 	.word	0x20000930
 80221e0:	200006f0 	.word	0x200006f0

080221e4 <stopReflow>:

void stopReflow(){
 80221e4:	b580      	push	{r7, lr}
 80221e6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//Startuje NVIC interrupta za zero crossing
 80221e8:	2017      	movs	r0, #23
 80221ea:	f001 fdc6 	bl	8023d7a <HAL_NVIC_DisableIRQ>
	//HAL_TIM_Base_Stop_IT(&htim5);
	if(ReflowEnable ==1){
 80221ee:	4b0d      	ldr	r3, [pc, #52]	; (8022224 <stopReflow+0x40>)
 80221f0:	781b      	ldrb	r3, [r3, #0]
 80221f2:	2b01      	cmp	r3, #1
 80221f4:	d113      	bne.n	802221e <stopReflow+0x3a>
		ReflowEnable = 0;
 80221f6:	4b0b      	ldr	r3, [pc, #44]	; (8022224 <stopReflow+0x40>)
 80221f8:	2200      	movs	r2, #0
 80221fa:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80221fc:	2104      	movs	r1, #4
 80221fe:	480a      	ldr	r0, [pc, #40]	; (8022228 <stopReflow+0x44>)
 8022200:	f003 fc12 	bl	8025a28 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8022204:	2108      	movs	r1, #8
 8022206:	4808      	ldr	r0, [pc, #32]	; (8022228 <stopReflow+0x44>)
 8022208:	f003 fc0e 	bl	8025a28 <HAL_TIM_PWM_Stop>
		sprintf(ConsoleMSG,"STOPPED");
 802220c:	4907      	ldr	r1, [pc, #28]	; (802222c <stopReflow+0x48>)
 802220e:	4808      	ldr	r0, [pc, #32]	; (8022230 <stopReflow+0x4c>)
 8022210:	f005 ff46 	bl	80280a0 <siprintf>
		Update_Page_0();
 8022214:	f7ff fad8 	bl	80217c8 <Update_Page_0>
		 PIDFlag=0;
 8022218:	4b06      	ldr	r3, [pc, #24]	; (8022234 <stopReflow+0x50>)
 802221a:	2200      	movs	r2, #0
 802221c:	701a      	strb	r2, [r3, #0]
	}
}
 802221e:	bf00      	nop
 8022220:	bd80      	pop	{r7, pc}
 8022222:	bf00      	nop
 8022224:	2000067c 	.word	0x2000067c
 8022228:	20000730 	.word	0x20000730
 802222c:	0802bc70 	.word	0x0802bc70
 8022230:	20000930 	.word	0x20000930
 8022234:	2000092c 	.word	0x2000092c

08022238 <Draw_Reflow_Curve>:

void Draw_Reflow_Curve(){
 8022238:	b580      	push	{r7, lr}
 802223a:	b086      	sub	sp, #24
 802223c:	af00      	add	r7, sp, #0

	float32_t dx =0.23; //275px / 400s //92px 400s
 802223e:	4b23      	ldr	r3, [pc, #140]	; (80222cc <Draw_Reflow_Curve+0x94>)
 8022240:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.5458; //200px / 240 Grad 131px 240deg
 8022242:	4b23      	ldr	r3, [pc, #140]	; (80222d0 <Draw_Reflow_Curve+0x98>)
 8022244:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 28;
 8022246:	231c      	movs	r3, #28
 8022248:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 153; //151
 802224a:	2399      	movs	r3, #153	; 0x99
 802224c:	607b      	str	r3, [r7, #4]
//	float32_t dx = 0.625 / 4; //275px / 880s / 500 ms
//	float32_t dy = 0.8333; //200px / 240 Grad
//	uint32_t OffsetX = 35;
//	uint32_t OffsetY = 230;

	uint32_t index = 0;
 802224e:	2300      	movs	r3, #0
 8022250:	617b      	str	r3, [r7, #20]



	while(ReflowCurve[index] != 0){
 8022252:	e02f      	b.n	80222b4 <Draw_Reflow_Curve+0x7c>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8022254:	697b      	ldr	r3, [r7, #20]
 8022256:	ee07 3a90 	vmov	s15, r3
 802225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8022262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802226a:	ee17 2a90 	vmov	r2, s15
 802226e:	68bb      	ldr	r3, [r7, #8]
 8022270:	441a      	add	r2, r3
 8022272:	4918      	ldr	r1, [pc, #96]	; (80222d4 <Draw_Reflow_Curve+0x9c>)
 8022274:	697b      	ldr	r3, [r7, #20]
 8022276:	440b      	add	r3, r1
 8022278:	781b      	ldrb	r3, [r3, #0]
 802227a:	ee07 3a90 	vmov	s15, r3
 802227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022282:	edd7 7a03 	vldr	s15, [r7, #12]
 8022286:	ee67 7a27 	vmul.f32	s15, s14, s15
 802228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802228e:	ee17 1a90 	vmov	r1, s15
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	1a5b      	subs	r3, r3, r1
 8022296:	4619      	mov	r1, r3
 8022298:	4610      	mov	r0, r2
 802229a:	f7ff f973 	bl	8021584 <NextionDrawDot>
		index= index + 4;
 802229e:	697b      	ldr	r3, [r7, #20]
 80222a0:	3304      	adds	r3, #4
 80222a2:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 80222a4:	2205      	movs	r2, #5
 80222a6:	490c      	ldr	r1, [pc, #48]	; (80222d8 <Draw_Reflow_Curve+0xa0>)
 80222a8:	480c      	ldr	r0, [pc, #48]	; (80222dc <Draw_Reflow_Curve+0xa4>)
 80222aa:	f005 ff19 	bl	80280e0 <strncmp>
 80222ae:	4603      	mov	r3, r0
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d006      	beq.n	80222c2 <Draw_Reflow_Curve+0x8a>
	while(ReflowCurve[index] != 0){
 80222b4:	4a07      	ldr	r2, [pc, #28]	; (80222d4 <Draw_Reflow_Curve+0x9c>)
 80222b6:	697b      	ldr	r3, [r7, #20]
 80222b8:	4413      	add	r3, r2
 80222ba:	781b      	ldrb	r3, [r3, #0]
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d1c9      	bne.n	8022254 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 80222c0:	e000      	b.n	80222c4 <Draw_Reflow_Curve+0x8c>
			break;
 80222c2:	bf00      	nop
}
 80222c4:	bf00      	nop
 80222c6:	3718      	adds	r7, #24
 80222c8:	46bd      	mov	sp, r7
 80222ca:	bd80      	pop	{r7, pc}
 80222cc:	3e6b851f 	.word	0x3e6b851f
 80222d0:	3f0bb98c 	.word	0x3f0bb98c
 80222d4:	20000954 	.word	0x20000954
 80222d8:	0802bbb8 	.word	0x0802bbb8
 80222dc:	20000454 	.word	0x20000454

080222e0 <setReflowParameters>:

void setReflowParameters(){
 80222e0:	b580      	push	{r7, lr}
 80222e2:	af00      	add	r7, sp, #0
	ReflowParameters.KP = 200; //203
 80222e4:	4b11      	ldr	r3, [pc, #68]	; (802232c <setReflowParameters+0x4c>)
 80222e6:	4a12      	ldr	r2, [pc, #72]	; (8022330 <setReflowParameters+0x50>)
 80222e8:	601a      	str	r2, [r3, #0]
	ReflowParameters.Ki = 0; //5.2
 80222ea:	4b10      	ldr	r3, [pc, #64]	; (802232c <setReflowParameters+0x4c>)
 80222ec:	f04f 0200 	mov.w	r2, #0
 80222f0:	605a      	str	r2, [r3, #4]
	ReflowParameters.KD = 0;
 80222f2:	4b0e      	ldr	r3, [pc, #56]	; (802232c <setReflowParameters+0x4c>)
 80222f4:	f04f 0200 	mov.w	r2, #0
 80222f8:	609a      	str	r2, [r3, #8]
	ReflowParameters.firstHeatUpRate = 1.2;
 80222fa:	4b0c      	ldr	r3, [pc, #48]	; (802232c <setReflowParameters+0x4c>)
 80222fc:	4a0d      	ldr	r2, [pc, #52]	; (8022334 <setReflowParameters+0x54>)
 80222fe:	60da      	str	r2, [r3, #12]
	ReflowParameters.SoakTempeture = 100;
 8022300:	4b0a      	ldr	r3, [pc, #40]	; (802232c <setReflowParameters+0x4c>)
 8022302:	2264      	movs	r2, #100	; 0x64
 8022304:	611a      	str	r2, [r3, #16]
	ReflowParameters.SoakTime = 100;
 8022306:	4b09      	ldr	r3, [pc, #36]	; (802232c <setReflowParameters+0x4c>)
 8022308:	2264      	movs	r2, #100	; 0x64
 802230a:	615a      	str	r2, [r3, #20]
	ReflowParameters.secondHeatUpRate = 1.2;
 802230c:	4b07      	ldr	r3, [pc, #28]	; (802232c <setReflowParameters+0x4c>)
 802230e:	4a09      	ldr	r2, [pc, #36]	; (8022334 <setReflowParameters+0x54>)
 8022310:	619a      	str	r2, [r3, #24]
	ReflowParameters.ReflowTempeture = 210;
 8022312:	4b06      	ldr	r3, [pc, #24]	; (802232c <setReflowParameters+0x4c>)
 8022314:	22d2      	movs	r2, #210	; 0xd2
 8022316:	61da      	str	r2, [r3, #28]
	ReflowParameters.ReflowTime =100;
 8022318:	4b04      	ldr	r3, [pc, #16]	; (802232c <setReflowParameters+0x4c>)
 802231a:	2264      	movs	r2, #100	; 0x64
 802231c:	621a      	str	r2, [r3, #32]
	sprintf(ConsoleMSG,"IDLE");
 802231e:	4906      	ldr	r1, [pc, #24]	; (8022338 <setReflowParameters+0x58>)
 8022320:	4806      	ldr	r0, [pc, #24]	; (802233c <setReflowParameters+0x5c>)
 8022322:	f005 febd 	bl	80280a0 <siprintf>
}
 8022326:	bf00      	nop
 8022328:	bd80      	pop	{r7, pc}
 802232a:	bf00      	nop
 802232c:	200008dc 	.word	0x200008dc
 8022330:	43480000 	.word	0x43480000
 8022334:	3f99999a 	.word	0x3f99999a
 8022338:	0802bc78 	.word	0x0802bc78
 802233c:	20000930 	.word	0x20000930

08022340 <calculateReflowCurve>:

void calculateReflowCurve(){
 8022340:	b5b0      	push	{r4, r5, r7, lr}
 8022342:	b08a      	sub	sp, #40	; 0x28
 8022344:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8022346:	2300      	movs	r3, #0
 8022348:	627b      	str	r3, [r7, #36]	; 0x24
 802234a:	e007      	b.n	802235c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 802234c:	4a9e      	ldr	r2, [pc, #632]	; (80225c8 <calculateReflowCurve+0x288>)
 802234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022350:	4413      	add	r3, r2
 8022352:	2200      	movs	r2, #0
 8022354:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8022356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022358:	3301      	adds	r3, #1
 802235a:	627b      	str	r3, [r7, #36]	; 0x24
 802235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802235e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8022362:	dbf3      	blt.n	802234c <calculateReflowCurve+0xc>
	}

	int index = 0;
 8022364:	2300      	movs	r3, #0
 8022366:	623b      	str	r3, [r7, #32]
	float timestep = 0.5;
 8022368:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 802236c:	61fb      	str	r3, [r7, #28]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 802236e:	e020      	b.n	80223b2 <calculateReflowCurve+0x72>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 8022370:	4b96      	ldr	r3, [pc, #600]	; (80225cc <calculateReflowCurve+0x28c>)
 8022372:	ed93 7a03 	vldr	s14, [r3, #12]
 8022376:	edd7 7a07 	vldr	s15, [r7, #28]
 802237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802237e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8022382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802238a:	edc7 7a01 	vstr	s15, [r7, #4]
 802238e:	793b      	ldrb	r3, [r7, #4]
 8022390:	b2d9      	uxtb	r1, r3
 8022392:	4a8d      	ldr	r2, [pc, #564]	; (80225c8 <calculateReflowCurve+0x288>)
 8022394:	6a3b      	ldr	r3, [r7, #32]
 8022396:	4413      	add	r3, r2
 8022398:	460a      	mov	r2, r1
 802239a:	701a      	strb	r2, [r3, #0]
	index++;
 802239c:	6a3b      	ldr	r3, [r7, #32]
 802239e:	3301      	adds	r3, #1
 80223a0:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 80223a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80223a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80223aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80223ae:	edc7 7a07 	vstr	s15, [r7, #28]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80223b2:	4b86      	ldr	r3, [pc, #536]	; (80225cc <calculateReflowCurve+0x28c>)
 80223b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80223b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80223bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80223c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80223c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80223c8:	4b80      	ldr	r3, [pc, #512]	; (80225cc <calculateReflowCurve+0x28c>)
 80223ca:	691b      	ldr	r3, [r3, #16]
 80223cc:	ee07 3a90 	vmov	s15, r3
 80223d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80223d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80223d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223dc:	d9c8      	bls.n	8022370 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 80223de:	6a3b      	ldr	r3, [r7, #32]
 80223e0:	b29a      	uxth	r2, r3
 80223e2:	4b7b      	ldr	r3, [pc, #492]	; (80225d0 <calculateReflowCurve+0x290>)
 80223e4:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 80223e6:	4b79      	ldr	r3, [pc, #484]	; (80225cc <calculateReflowCurve+0x28c>)
 80223e8:	695b      	ldr	r3, [r3, #20]
 80223ea:	005b      	lsls	r3, r3, #1
 80223ec:	613b      	str	r3, [r7, #16]

	for(int i=0;i<Soakduration;i++){
 80223ee:	2300      	movs	r3, #0
 80223f0:	61bb      	str	r3, [r7, #24]
 80223f2:	e00a      	b.n	802240a <calculateReflowCurve+0xca>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 80223f4:	4b75      	ldr	r3, [pc, #468]	; (80225cc <calculateReflowCurve+0x28c>)
 80223f6:	6919      	ldr	r1, [r3, #16]
 80223f8:	6a3a      	ldr	r2, [r7, #32]
 80223fa:	69bb      	ldr	r3, [r7, #24]
 80223fc:	4413      	add	r3, r2
 80223fe:	b2c9      	uxtb	r1, r1
 8022400:	4a71      	ldr	r2, [pc, #452]	; (80225c8 <calculateReflowCurve+0x288>)
 8022402:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 8022404:	69bb      	ldr	r3, [r7, #24]
 8022406:	3301      	adds	r3, #1
 8022408:	61bb      	str	r3, [r7, #24]
 802240a:	69ba      	ldr	r2, [r7, #24]
 802240c:	693b      	ldr	r3, [r7, #16]
 802240e:	429a      	cmp	r2, r3
 8022410:	dbf0      	blt.n	80223f4 <calculateReflowCurve+0xb4>
	}


	//Second Heat Up:
	index = index + Soakduration;
 8022412:	6a3a      	ldr	r2, [r7, #32]
 8022414:	693b      	ldr	r3, [r7, #16]
 8022416:	4413      	add	r3, r2
 8022418:	623b      	str	r3, [r7, #32]
	PhaseIndex[2]=index;
 802241a:	6a3b      	ldr	r3, [r7, #32]
 802241c:	b29a      	uxth	r2, r3
 802241e:	4b6c      	ldr	r3, [pc, #432]	; (80225d0 <calculateReflowCurve+0x290>)
 8022420:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8022422:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8022426:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8022428:	e02e      	b.n	8022488 <calculateReflowCurve+0x148>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 802242a:	4b68      	ldr	r3, [pc, #416]	; (80225cc <calculateReflowCurve+0x28c>)
 802242c:	691b      	ldr	r3, [r3, #16]
 802242e:	ee07 3a90 	vmov	s15, r3
 8022432:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022436:	edd7 7a07 	vldr	s15, [r7, #28]
 802243a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802243e:	edc7 7a01 	vstr	s15, [r7, #4]
 8022442:	793b      	ldrb	r3, [r7, #4]
 8022444:	b2db      	uxtb	r3, r3
 8022446:	ee07 3a90 	vmov	s15, r3
 802244a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802244e:	4b5f      	ldr	r3, [pc, #380]	; (80225cc <calculateReflowCurve+0x28c>)
 8022450:	edd3 7a06 	vldr	s15, [r3, #24]
 8022454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022458:	ee77 7a27 	vadd.f32	s15, s14, s15
 802245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022460:	edc7 7a01 	vstr	s15, [r7, #4]
 8022464:	793b      	ldrb	r3, [r7, #4]
 8022466:	b2d9      	uxtb	r1, r3
 8022468:	4a57      	ldr	r2, [pc, #348]	; (80225c8 <calculateReflowCurve+0x288>)
 802246a:	6a3b      	ldr	r3, [r7, #32]
 802246c:	4413      	add	r3, r2
 802246e:	460a      	mov	r2, r1
 8022470:	701a      	strb	r2, [r3, #0]
	index++;
 8022472:	6a3b      	ldr	r3, [r7, #32]
 8022474:	3301      	adds	r3, #1
 8022476:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 8022478:	edd7 7a07 	vldr	s15, [r7, #28]
 802247c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8022480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022484:	edc7 7a07 	vstr	s15, [r7, #28]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 8022488:	4b50      	ldr	r3, [pc, #320]	; (80225cc <calculateReflowCurve+0x28c>)
 802248a:	691b      	ldr	r3, [r3, #16]
 802248c:	ee07 3a90 	vmov	s15, r3
 8022490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022494:	4b4d      	ldr	r3, [pc, #308]	; (80225cc <calculateReflowCurve+0x28c>)
 8022496:	edd3 6a06 	vldr	s13, [r3, #24]
 802249a:	edd7 7a07 	vldr	s15, [r7, #28]
 802249e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80224a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80224a6:	4b49      	ldr	r3, [pc, #292]	; (80225cc <calculateReflowCurve+0x28c>)
 80224a8:	69db      	ldr	r3, [r3, #28]
 80224aa:	ee07 3a90 	vmov	s15, r3
 80224ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80224b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80224b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224ba:	d9b6      	bls.n	802242a <calculateReflowCurve+0xea>
	}
	PhaseIndex[3]=index;
 80224bc:	6a3b      	ldr	r3, [r7, #32]
 80224be:	b29a      	uxth	r2, r3
 80224c0:	4b43      	ldr	r3, [pc, #268]	; (80225d0 <calculateReflowCurve+0x290>)
 80224c2:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 80224c4:	4b41      	ldr	r3, [pc, #260]	; (80225cc <calculateReflowCurve+0x28c>)
 80224c6:	6a1b      	ldr	r3, [r3, #32]
 80224c8:	005b      	lsls	r3, r3, #1
 80224ca:	60fb      	str	r3, [r7, #12]

	for(int i=0;i<Reflowduration;i++){
 80224cc:	2300      	movs	r3, #0
 80224ce:	617b      	str	r3, [r7, #20]
 80224d0:	e00a      	b.n	80224e8 <calculateReflowCurve+0x1a8>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 80224d2:	4b3e      	ldr	r3, [pc, #248]	; (80225cc <calculateReflowCurve+0x28c>)
 80224d4:	69d9      	ldr	r1, [r3, #28]
 80224d6:	6a3a      	ldr	r2, [r7, #32]
 80224d8:	697b      	ldr	r3, [r7, #20]
 80224da:	4413      	add	r3, r2
 80224dc:	b2c9      	uxtb	r1, r1
 80224de:	4a3a      	ldr	r2, [pc, #232]	; (80225c8 <calculateReflowCurve+0x288>)
 80224e0:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 80224e2:	697b      	ldr	r3, [r7, #20]
 80224e4:	3301      	adds	r3, #1
 80224e6:	617b      	str	r3, [r7, #20]
 80224e8:	697a      	ldr	r2, [r7, #20]
 80224ea:	68fb      	ldr	r3, [r7, #12]
 80224ec:	429a      	cmp	r2, r3
 80224ee:	dbf0      	blt.n	80224d2 <calculateReflowCurve+0x192>
	}

	index = index + Reflowduration;
 80224f0:	6a3a      	ldr	r2, [r7, #32]
 80224f2:	68fb      	ldr	r3, [r7, #12]
 80224f4:	4413      	add	r3, r2
 80224f6:	623b      	str	r3, [r7, #32]
	ReflowCurve[index]=0;
 80224f8:	4a33      	ldr	r2, [pc, #204]	; (80225c8 <calculateReflowCurve+0x288>)
 80224fa:	6a3b      	ldr	r3, [r7, #32]
 80224fc:	4413      	add	r3, r2
 80224fe:	2200      	movs	r2, #0
 8022500:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 8022502:	6a3b      	ldr	r3, [r7, #32]
 8022504:	b29a      	uxth	r2, r3
 8022506:	4b32      	ldr	r3, [pc, #200]	; (80225d0 <calculateReflowCurve+0x290>)
 8022508:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 802250a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 802250e:	61fb      	str	r3, [r7, #28]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8022510:	e030      	b.n	8022574 <calculateReflowCurve+0x234>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8022512:	4b2e      	ldr	r3, [pc, #184]	; (80225cc <calculateReflowCurve+0x28c>)
 8022514:	69db      	ldr	r3, [r3, #28]
 8022516:	4618      	mov	r0, r3
 8022518:	f7fd fff4 	bl	8020504 <__aeabi_ui2d>
 802251c:	4604      	mov	r4, r0
 802251e:	460d      	mov	r5, r1
 8022520:	69f8      	ldr	r0, [r7, #28]
 8022522:	f7fe f811 	bl	8020548 <__aeabi_f2d>
 8022526:	a326      	add	r3, pc, #152	; (adr r3, 80225c0 <calculateReflowCurve+0x280>)
 8022528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802252c:	f7fe f864 	bl	80205f8 <__aeabi_dmul>
 8022530:	4602      	mov	r2, r0
 8022532:	460b      	mov	r3, r1
 8022534:	4620      	mov	r0, r4
 8022536:	4629      	mov	r1, r5
 8022538:	f7fd fea6 	bl	8020288 <__aeabi_dsub>
 802253c:	4602      	mov	r2, r0
 802253e:	460b      	mov	r3, r1
 8022540:	4610      	mov	r0, r2
 8022542:	4619      	mov	r1, r3
 8022544:	f7fe fb30 	bl	8020ba8 <__aeabi_d2uiz>
 8022548:	4603      	mov	r3, r0
 802254a:	b2d9      	uxtb	r1, r3
 802254c:	4a1e      	ldr	r2, [pc, #120]	; (80225c8 <calculateReflowCurve+0x288>)
 802254e:	6a3b      	ldr	r3, [r7, #32]
 8022550:	4413      	add	r3, r2
 8022552:	460a      	mov	r2, r1
 8022554:	701a      	strb	r2, [r3, #0]
	index++;
 8022556:	6a3b      	ldr	r3, [r7, #32]
 8022558:	3301      	adds	r3, #1
 802255a:	623b      	str	r3, [r7, #32]
	timestep = timestep + 0.5;
 802255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8022560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8022564:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022568:	edc7 7a07 	vstr	s15, [r7, #28]
	PhaseIndex[5]=index;
 802256c:	6a3b      	ldr	r3, [r7, #32]
 802256e:	b29a      	uxth	r2, r3
 8022570:	4b17      	ldr	r3, [pc, #92]	; (80225d0 <calculateReflowCurve+0x290>)
 8022572:	815a      	strh	r2, [r3, #10]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8022574:	4b15      	ldr	r3, [pc, #84]	; (80225cc <calculateReflowCurve+0x28c>)
 8022576:	69db      	ldr	r3, [r3, #28]
 8022578:	4618      	mov	r0, r3
 802257a:	f7fd ffc3 	bl	8020504 <__aeabi_ui2d>
 802257e:	4604      	mov	r4, r0
 8022580:	460d      	mov	r5, r1
 8022582:	69f8      	ldr	r0, [r7, #28]
 8022584:	f7fd ffe0 	bl	8020548 <__aeabi_f2d>
 8022588:	a30d      	add	r3, pc, #52	; (adr r3, 80225c0 <calculateReflowCurve+0x280>)
 802258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802258e:	f7fe f833 	bl	80205f8 <__aeabi_dmul>
 8022592:	4602      	mov	r2, r0
 8022594:	460b      	mov	r3, r1
 8022596:	4620      	mov	r0, r4
 8022598:	4629      	mov	r1, r5
 802259a:	f7fd fe75 	bl	8020288 <__aeabi_dsub>
 802259e:	4602      	mov	r2, r0
 80225a0:	460b      	mov	r3, r1
 80225a2:	4610      	mov	r0, r2
 80225a4:	4619      	mov	r1, r3
 80225a6:	f04f 0200 	mov.w	r2, #0
 80225aa:	4b0a      	ldr	r3, [pc, #40]	; (80225d4 <calculateReflowCurve+0x294>)
 80225ac:	f7fe faaa 	bl	8020b04 <__aeabi_dcmpge>
 80225b0:	4603      	mov	r3, r0
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d1ad      	bne.n	8022512 <calculateReflowCurve+0x1d2>
	}




}
 80225b6:	bf00      	nop
 80225b8:	bf00      	nop
 80225ba:	3728      	adds	r7, #40	; 0x28
 80225bc:	46bd      	mov	sp, r7
 80225be:	bdb0      	pop	{r4, r5, r7, pc}
 80225c0:	cccccccd 	.word	0xcccccccd
 80225c4:	3ffccccc 	.word	0x3ffccccc
 80225c8:	20000954 	.word	0x20000954
 80225cc:	200008dc 	.word	0x200008dc
 80225d0:	20000688 	.word	0x20000688
 80225d4:	40380000 	.word	0x40380000

080225d8 <initFlags>:

void initFlags(void)
{
 80225d8:	b480      	push	{r7}
 80225da:	af00      	add	r7, sp, #0
	Flags.StartFlag=TRUE;
 80225dc:	4b0b      	ldr	r3, [pc, #44]	; (802260c <initFlags+0x34>)
 80225de:	2201      	movs	r2, #1
 80225e0:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 80225e2:	4b0a      	ldr	r3, [pc, #40]	; (802260c <initFlags+0x34>)
 80225e4:	2200      	movs	r2, #0
 80225e6:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 80225e8:	4b08      	ldr	r3, [pc, #32]	; (802260c <initFlags+0x34>)
 80225ea:	2200      	movs	r2, #0
 80225ec:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80225ee:	4b07      	ldr	r3, [pc, #28]	; (802260c <initFlags+0x34>)
 80225f0:	2200      	movs	r2, #0
 80225f2:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80225f4:	4b05      	ldr	r3, [pc, #20]	; (802260c <initFlags+0x34>)
 80225f6:	2200      	movs	r2, #0
 80225f8:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80225fa:	4b04      	ldr	r3, [pc, #16]	; (802260c <initFlags+0x34>)
 80225fc:	2200      	movs	r2, #0
 80225fe:	715a      	strb	r2, [r3, #5]
}
 8022600:	bf00      	nop
 8022602:	46bd      	mov	sp, r7
 8022604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022608:	4770      	bx	lr
 802260a:	bf00      	nop
 802260c:	20000948 	.word	0x20000948

08022610 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8022610:	b580      	push	{r7, lr}
 8022612:	b082      	sub	sp, #8
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
 8022618:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	ed93 7a06 	vldr	s14, [r3, #24]
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	edd3 7a07 	vldr	s15, [r3, #28]
 8022626:	ee37 7a27 	vadd.f32	s14, s14, s15
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	edd3 7a08 	vldr	s15, [r3, #32]
 8022630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	edd3 7a06 	vldr	s15, [r3, #24]
 8022640:	eeb1 7a67 	vneg.f32	s14, s15
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	edd3 7a08 	vldr	s15, [r3, #32]
 802264a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	6a1a      	ldr	r2, [r3, #32]
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8022660:	683b      	ldr	r3, [r7, #0]
 8022662:	2b00      	cmp	r3, #0
 8022664:	d006      	beq.n	8022674 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	330c      	adds	r3, #12
 802266a:	220c      	movs	r2, #12
 802266c:	2100      	movs	r1, #0
 802266e:	4618      	mov	r0, r3
 8022670:	f005 f8a4 	bl	80277bc <memset>
  }

}
 8022674:	bf00      	nop
 8022676:	3708      	adds	r7, #8
 8022678:	46bd      	mov	sp, r7
 802267a:	bd80      	pop	{r7, pc}

0802267c <delay_us>:
 return HAL_GetTick();

}

void delay_us(unsigned long delay_us)
{
 802267c:	b480      	push	{r7}
 802267e:	b083      	sub	sp, #12
 8022680:	af00      	add	r7, sp, #0
 8022682:	6078      	str	r0, [r7, #4]
 __HAL_TIM_SET_COUNTER(&htim5,0);
 8022684:	4b08      	ldr	r3, [pc, #32]	; (80226a8 <delay_us+0x2c>)
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	2200      	movs	r2, #0
 802268a:	625a      	str	r2, [r3, #36]	; 0x24
// __HAL_TIM_SET_COUNTER(&htim6,0);
 while(__HAL_TIM_GET_COUNTER(&htim5)<delay_us);
 802268c:	bf00      	nop
 802268e:	4b06      	ldr	r3, [pc, #24]	; (80226a8 <delay_us+0x2c>)
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022694:	687a      	ldr	r2, [r7, #4]
 8022696:	429a      	cmp	r2, r3
 8022698:	d8f9      	bhi.n	802268e <delay_us+0x12>


}
 802269a:	bf00      	nop
 802269c:	bf00      	nop
 802269e:	370c      	adds	r7, #12
 80226a0:	46bd      	mov	sp, r7
 80226a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a6:	4770      	bx	lr
 80226a8:	200006f0 	.word	0x200006f0

080226ac <readTemperatureData>:

void readTemperatureData(volatile float* temperature_val)
{
 80226ac:	b580      	push	{r7, lr}
 80226ae:	b084      	sub	sp, #16
 80226b0:	af00      	add	r7, sp, #0
 80226b2:	6078      	str	r0, [r7, #4]

			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80226b4:	2201      	movs	r2, #1
 80226b6:	2110      	movs	r1, #16
 80226b8:	4820      	ldr	r0, [pc, #128]	; (802273c <readTemperatureData+0x90>)
 80226ba:	f002 f81b 	bl	80246f4 <HAL_GPIO_WritePin>
			uint8_t data8[2]={0};
 80226be:	2300      	movs	r3, #0
 80226c0:	81bb      	strh	r3, [r7, #12]
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_RESET);
 80226c2:	2200      	movs	r2, #0
 80226c4:	2110      	movs	r1, #16
 80226c6:	481d      	ldr	r0, [pc, #116]	; (802273c <readTemperatureData+0x90>)
 80226c8:	f002 f814 	bl	80246f4 <HAL_GPIO_WritePin>
			HAL_SPI_Receive(&hspi1,data8,2,300);
 80226cc:	f107 010c 	add.w	r1, r7, #12
 80226d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80226d4:	2202      	movs	r2, #2
 80226d6:	481a      	ldr	r0, [pc, #104]	; (8022740 <readTemperatureData+0x94>)
 80226d8:	f002 fd28 	bl	802512c <HAL_SPI_Receive>
			HAL_GPIO_WritePin(SPI1_CS_GPIO_Port,SPI1_CS_Pin,GPIO_PIN_SET);
 80226dc:	2201      	movs	r2, #1
 80226de:	2110      	movs	r1, #16
 80226e0:	4816      	ldr	r0, [pc, #88]	; (802273c <readTemperatureData+0x90>)
 80226e2:	f002 f807 	bl	80246f4 <HAL_GPIO_WritePin>
			uint16_t sum={0};
 80226e6:	2300      	movs	r3, #0
 80226e8:	81fb      	strh	r3, [r7, #14]
			sum=(uint16_t) data8[1] | (uint16_t) data8[0]<< 8 ;
 80226ea:	7b7b      	ldrb	r3, [r7, #13]
 80226ec:	b21a      	sxth	r2, r3
 80226ee:	7b3b      	ldrb	r3, [r7, #12]
 80226f0:	021b      	lsls	r3, r3, #8
 80226f2:	b21b      	sxth	r3, r3
 80226f4:	4313      	orrs	r3, r2
 80226f6:	b21b      	sxth	r3, r3
 80226f8:	81fb      	strh	r3, [r7, #14]
			if(sum &	0x0004)//No TC connected, error -1
 80226fa:	89fb      	ldrh	r3, [r7, #14]
 80226fc:	f003 0304 	and.w	r3, r3, #4
 8022700:	2b00      	cmp	r3, #0
 8022702:	d003      	beq.n	802270c <readTemperatureData+0x60>
			{
				(*temperature_val)=-1;
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	4a0f      	ldr	r2, [pc, #60]	; (8022744 <readTemperatureData+0x98>)
 8022708:	601a      	str	r2, [r3, #0]
				//sum2=(uint16_t) data8[3] | (uint16_t) data8[2]<< 8 ;
				(*temperature_val)=((sum>>3)/4.0);
			}


}
 802270a:	e013      	b.n	8022734 <readTemperatureData+0x88>
				(*temperature_val)=((sum>>3)/4.0);
 802270c:	89fb      	ldrh	r3, [r7, #14]
 802270e:	08db      	lsrs	r3, r3, #3
 8022710:	b29b      	uxth	r3, r3
 8022712:	4618      	mov	r0, r3
 8022714:	f7fd ff06 	bl	8020524 <__aeabi_i2d>
 8022718:	f04f 0200 	mov.w	r2, #0
 802271c:	4b0a      	ldr	r3, [pc, #40]	; (8022748 <readTemperatureData+0x9c>)
 802271e:	f7fe f895 	bl	802084c <__aeabi_ddiv>
 8022722:	4602      	mov	r2, r0
 8022724:	460b      	mov	r3, r1
 8022726:	4610      	mov	r0, r2
 8022728:	4619      	mov	r1, r3
 802272a:	f7fe fa5d 	bl	8020be8 <__aeabi_d2f>
 802272e:	4602      	mov	r2, r0
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	601a      	str	r2, [r3, #0]
}
 8022734:	bf00      	nop
 8022736:	3710      	adds	r7, #16
 8022738:	46bd      	mov	sp, r7
 802273a:	bd80      	pop	{r7, pc}
 802273c:	40020000 	.word	0x40020000
 8022740:	200007fc 	.word	0x200007fc
 8022744:	bf800000 	.word	0xbf800000
 8022748:	40100000 	.word	0x40100000

0802274c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802274c:	b480      	push	{r7}
 802274e:	b083      	sub	sp, #12
 8022750:	af00      	add	r7, sp, #0
 8022752:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM2
        {
    //	counter_us++;
    	//counter_us2++;
        }
}
 8022754:	bf00      	nop
 8022756:	370c      	adds	r7, #12
 8022758:	46bd      	mov	sp, r7
 802275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802275e:	4770      	bx	lr

08022760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8022760:	b580      	push	{r7, lr}
 8022762:	b082      	sub	sp, #8
 8022764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	static	SETPOINT Mod1; //Thermal profile setup
	Mod1.Tpreheat_setpoint=90.00;
 8022766:	4b56      	ldr	r3, [pc, #344]	; (80228c0 <main+0x160>)
 8022768:	4a56      	ldr	r2, [pc, #344]	; (80228c4 <main+0x164>)
 802276a:	601a      	str	r2, [r3, #0]
	Mod1.Tsoak_setpoint=200.00;
 802276c:	4b54      	ldr	r3, [pc, #336]	; (80228c0 <main+0x160>)
 802276e:	4a56      	ldr	r2, [pc, #344]	; (80228c8 <main+0x168>)
 8022770:	605a      	str	r2, [r3, #4]
	Mod1.Treflow_setpoint=250.00;
 8022772:	4b53      	ldr	r3, [pc, #332]	; (80228c0 <main+0x160>)
 8022774:	4a55      	ldr	r2, [pc, #340]	; (80228cc <main+0x16c>)
 8022776:	609a      	str	r2, [r3, #8]
	Mod1.Tcooldown_setpoint=30.00;
 8022778:	4b51      	ldr	r3, [pc, #324]	; (80228c0 <main+0x160>)
 802277a:	4a55      	ldr	r2, [pc, #340]	; (80228d0 <main+0x170>)
 802277c:	60da      	str	r2, [r3, #12]
	Mod1.tPreheat=60;
 802277e:	4b50      	ldr	r3, [pc, #320]	; (80228c0 <main+0x160>)
 8022780:	223c      	movs	r2, #60	; 0x3c
 8022782:	61da      	str	r2, [r3, #28]
	Mod1.tSoak=60;
 8022784:	4b4e      	ldr	r3, [pc, #312]	; (80228c0 <main+0x160>)
 8022786:	223c      	movs	r2, #60	; 0x3c
 8022788:	621a      	str	r2, [r3, #32]
	Mod1.tReflow=120;
 802278a:	4b4d      	ldr	r3, [pc, #308]	; (80228c0 <main+0x160>)
 802278c:	2278      	movs	r2, #120	; 0x78
 802278e:	625a      	str	r2, [r3, #36]	; 0x24


extern FLAGS Flags; //Flags for status

	Flags.StartFlag=TRUE;
 8022790:	4b50      	ldr	r3, [pc, #320]	; (80228d4 <main+0x174>)
 8022792:	2201      	movs	r2, #1
 8022794:	701a      	strb	r2, [r3, #0]
	Flags.initComplete=FALSE;
 8022796:	4b4f      	ldr	r3, [pc, #316]	; (80228d4 <main+0x174>)
 8022798:	2200      	movs	r2, #0
 802279a:	705a      	strb	r2, [r3, #1]
	Flags.preheatComplete=FALSE;
 802279c:	4b4d      	ldr	r3, [pc, #308]	; (80228d4 <main+0x174>)
 802279e:	2200      	movs	r2, #0
 80227a0:	709a      	strb	r2, [r3, #2]
	Flags.soakComplete=FALSE;
 80227a2:	4b4c      	ldr	r3, [pc, #304]	; (80228d4 <main+0x174>)
 80227a4:	2200      	movs	r2, #0
 80227a6:	70da      	strb	r2, [r3, #3]
	Flags.reflowComplete=FALSE;
 80227a8:	4b4a      	ldr	r3, [pc, #296]	; (80228d4 <main+0x174>)
 80227aa:	2200      	movs	r2, #0
 80227ac:	711a      	strb	r2, [r3, #4]
	Flags.cooldownComplete=FALSE;
 80227ae:	4b49      	ldr	r3, [pc, #292]	; (80228d4 <main+0x174>)
 80227b0:	2200      	movs	r2, #0
 80227b2:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80227b4:	f001 f922 	bl	80239fc <HAL_Init>

  /* USER CODE BEGIN Init */


  /* if memory for Reflow parameters is OK check, if not write default values from  setReflowParameters using SaveParameters*/
  p_ReflowParameters=0x080A0000;
 80227b8:	4b47      	ldr	r3, [pc, #284]	; (80228d8 <main+0x178>)
 80227ba:	4a48      	ldr	r2, [pc, #288]	; (80228dc <main+0x17c>)
 80227bc:	601a      	str	r2, [r3, #0]
  if(	(*p_ReflowParameters) == 0xFF	)
 80227be:	4b46      	ldr	r3, [pc, #280]	; (80228d8 <main+0x178>)
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	781b      	ldrb	r3, [r3, #0]
 80227c4:	2bff      	cmp	r3, #255	; 0xff
 80227c6:	d104      	bne.n	80227d2 <main+0x72>
	{
		setReflowParameters();
 80227c8:	f7ff fd8a 	bl	80222e0 <setReflowParameters>
		SaveParameters();
 80227cc:	f7fe fe14 	bl	80213f8 <SaveParameters>
 80227d0:	e001      	b.n	80227d6 <main+0x76>
	}
	else
	{
		 LoadParameters();
 80227d2:	f7fe fe1d 	bl	8021410 <LoadParameters>
	}


  PID.Kp = ReflowParameters.KP;
 80227d6:	4b42      	ldr	r3, [pc, #264]	; (80228e0 <main+0x180>)
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	4a42      	ldr	r2, [pc, #264]	; (80228e4 <main+0x184>)
 80227dc:	6193      	str	r3, [r2, #24]
  PID.Ki = ReflowParameters.Ki;
 80227de:	4b40      	ldr	r3, [pc, #256]	; (80228e0 <main+0x180>)
 80227e0:	685b      	ldr	r3, [r3, #4]
 80227e2:	4a40      	ldr	r2, [pc, #256]	; (80228e4 <main+0x184>)
 80227e4:	61d3      	str	r3, [r2, #28]
  PID.Kd = ReflowParameters.KD;
 80227e6:	4b3e      	ldr	r3, [pc, #248]	; (80228e0 <main+0x180>)
 80227e8:	689b      	ldr	r3, [r3, #8]
 80227ea:	4a3e      	ldr	r2, [pc, #248]	; (80228e4 <main+0x184>)
 80227ec:	6213      	str	r3, [r2, #32]
  calculateReflowCurve();
 80227ee:	f7ff fda7 	bl	8022340 <calculateReflowCurve>
  arm_pid_init_f32(&PID, 1);
 80227f2:	2101      	movs	r1, #1
 80227f4:	483b      	ldr	r0, [pc, #236]	; (80228e4 <main+0x184>)
 80227f6:	f7ff ff0b 	bl	8022610 <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80227fa:	f000 f88f 	bl	802291c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80227fe:	f000 facb 	bl	8022d98 <MX_GPIO_Init>
  MX_SPI1_Init();
 8022802:	f000 f8f5 	bl	80229f0 <MX_SPI1_Init>
  MX_TIM5_Init();
 8022806:	f000 fa4f 	bl	8022ca8 <MX_TIM5_Init>
  MX_TIM1_Init();
 802280a:	f000 f927 	bl	8022a5c <MX_TIM1_Init>
  MX_TIM2_Init();
 802280e:	f000 f97d 	bl	8022b0c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8022812:	f000 fa97 	bl	8022d44 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8022816:	f000 f9c5 	bl	8022ba4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


	void sendToNum(char *obj,uint16_t value);

	HAL_TIM_Base_Start_IT(&htim5);
 802281a:	4833      	ldr	r0, [pc, #204]	; (80228e8 <main+0x188>)
 802281c:	f003 f86d 	bl	80258fa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8022820:	4832      	ldr	r0, [pc, #200]	; (80228ec <main+0x18c>)
 8022822:	f003 f86a 	bl	80258fa <HAL_TIM_Base_Start_IT>
//TIM3->CCR2=900;
//	TIM3->CCR3=900;
	  //


	HAL_Delay(2000);
 8022826:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802282a:	f001 f959 	bl	8023ae0 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 802282e:	2205      	movs	r2, #5
 8022830:	492f      	ldr	r1, [pc, #188]	; (80228f0 <main+0x190>)
 8022832:	4830      	ldr	r0, [pc, #192]	; (80228f4 <main+0x194>)
 8022834:	f004 f922 	bl	8026a7c <HAL_UART_Receive_IT>
	sprintf(ConsoleMSG,"IDLE");
 8022838:	492f      	ldr	r1, [pc, #188]	; (80228f8 <main+0x198>)
 802283a:	4830      	ldr	r0, [pc, #192]	; (80228fc <main+0x19c>)
 802283c:	f005 fc30 	bl	80280a0 <siprintf>
	//State Status
	State=Initializing;
 8022840:	4b2f      	ldr	r3, [pc, #188]	; (8022900 <main+0x1a0>)
 8022842:	2200      	movs	r2, #0
 8022844:	701a      	strb	r2, [r3, #0]
	Update_Page_0();
 8022846:	f7fe ffbf 	bl	80217c8 <Update_Page_0>
	Draw_Reflow_Curve();
 802284a:	f7ff fcf5 	bl	8022238 <Draw_Reflow_Curve>
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 802284e:	2205      	movs	r2, #5
 8022850:	4927      	ldr	r1, [pc, #156]	; (80228f0 <main+0x190>)
 8022852:	4828      	ldr	r0, [pc, #160]	; (80228f4 <main+0x194>)
 8022854:	f004 f912 	bl	8026a7c <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8022858:	2064      	movs	r0, #100	; 0x64
 802285a:	f001 f941 	bl	8023ae0 <HAL_Delay>
	volatile uint32_t counter_us_delay=0;
 802285e:	2300      	movs	r3, #0
 8022860:	607b      	str	r3, [r7, #4]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//sing(2);
		counter_us_delay++;
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	3301      	adds	r3, #1
 8022866:	607b      	str	r3, [r7, #4]
		 boolflag=__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin);
 8022868:	4b26      	ldr	r3, [pc, #152]	; (8022904 <main+0x1a4>)
 802286a:	695b      	ldr	r3, [r3, #20]
 802286c:	b2db      	uxtb	r3, r3
 802286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022872:	b2da      	uxtb	r2, r3
 8022874:	4b24      	ldr	r3, [pc, #144]	; (8022908 <main+0x1a8>)
 8022876:	701a      	strb	r2, [r3, #0]
		 HandleGui();
 8022878:	f7ff f88e 	bl	8021998 <HandleGui>


		 HAL_Delay(1);
 802287c:	2001      	movs	r0, #1
 802287e:	f001 f92f 	bl	8023ae0 <HAL_Delay>
		 //melody for finished procedure
		 if(	(TRUE==Flags.cooldownComplete) &&	(Finish==State)	)
 8022882:	4b14      	ldr	r3, [pc, #80]	; (80228d4 <main+0x174>)
 8022884:	795b      	ldrb	r3, [r3, #5]
 8022886:	2b00      	cmp	r3, #0
 8022888:	d00d      	beq.n	80228a6 <main+0x146>
 802288a:	4b1d      	ldr	r3, [pc, #116]	; (8022900 <main+0x1a0>)
 802288c:	781b      	ldrb	r3, [r3, #0]
 802288e:	2b05      	cmp	r3, #5
 8022890:	d109      	bne.n	80228a6 <main+0x146>
		  {
			 if(0==songFlag)
 8022892:	4b1e      	ldr	r3, [pc, #120]	; (802290c <main+0x1ac>)
 8022894:	781b      	ldrb	r3, [r3, #0]
 8022896:	2b00      	cmp	r3, #0
 8022898:	d105      	bne.n	80228a6 <main+0x146>
			 {
			 sing(2);
 802289a:	2002      	movs	r0, #2
 802289c:	f7fe fbe8 	bl	8021070 <sing>
			// buzz(4800,5000);
			 songFlag=1;
 80228a0:	4b1a      	ldr	r3, [pc, #104]	; (802290c <main+0x1ac>)
 80228a2:	2201      	movs	r2, #1
 80228a4:	701a      	strb	r2, [r3, #0]
		 {
			 //do nothing
		 }


			 if(strncmp((char *)UART_Recieved_Data, (char *)"p0xxx", 5) == 0)
 80228a6:	2205      	movs	r2, #5
 80228a8:	4919      	ldr	r1, [pc, #100]	; (8022910 <main+0x1b0>)
 80228aa:	4811      	ldr	r0, [pc, #68]	; (80228f0 <main+0x190>)
 80228ac:	f005 fc18 	bl	80280e0 <strncmp>
 80228b0:	4603      	mov	r3, r0
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d1d5      	bne.n	8022862 <main+0x102>
			 {
					  debug = 5;
 80228b6:	4b17      	ldr	r3, [pc, #92]	; (8022914 <main+0x1b4>)
 80228b8:	4a17      	ldr	r2, [pc, #92]	; (8022918 <main+0x1b8>)
 80228ba:	601a      	str	r2, [r3, #0]
		counter_us_delay++;
 80228bc:	e7d1      	b.n	8022862 <main+0x102>
 80228be:	bf00      	nop
 80228c0:	2000069c 	.word	0x2000069c
 80228c4:	42b40000 	.word	0x42b40000
 80228c8:	43480000 	.word	0x43480000
 80228cc:	437a0000 	.word	0x437a0000
 80228d0:	41f00000 	.word	0x41f00000
 80228d4:	20000948 	.word	0x20000948
 80228d8:	20000950 	.word	0x20000950
 80228dc:	080a0000 	.word	0x080a0000
 80228e0:	200008dc 	.word	0x200008dc
 80228e4:	20000860 	.word	0x20000860
 80228e8:	200006f0 	.word	0x200006f0
 80228ec:	200018f4 	.word	0x200018f4
 80228f0:	20000454 	.word	0x20000454
 80228f4:	2000089c 	.word	0x2000089c
 80228f8:	0802bc88 	.word	0x0802bc88
 80228fc:	20000930 	.word	0x20000930
 8022900:	20000898 	.word	0x20000898
 8022904:	40013c00 	.word	0x40013c00
 8022908:	20000698 	.word	0x20000698
 802290c:	20000699 	.word	0x20000699
 8022910:	0802bc90 	.word	0x0802bc90
 8022914:	20000680 	.word	0x20000680
 8022918:	40a00000 	.word	0x40a00000

0802291c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802291c:	b580      	push	{r7, lr}
 802291e:	b094      	sub	sp, #80	; 0x50
 8022920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8022922:	f107 0320 	add.w	r3, r7, #32
 8022926:	2230      	movs	r2, #48	; 0x30
 8022928:	2100      	movs	r1, #0
 802292a:	4618      	mov	r0, r3
 802292c:	f004 ff46 	bl	80277bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8022930:	f107 030c 	add.w	r3, r7, #12
 8022934:	2200      	movs	r2, #0
 8022936:	601a      	str	r2, [r3, #0]
 8022938:	605a      	str	r2, [r3, #4]
 802293a:	609a      	str	r2, [r3, #8]
 802293c:	60da      	str	r2, [r3, #12]
 802293e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8022940:	2300      	movs	r3, #0
 8022942:	60bb      	str	r3, [r7, #8]
 8022944:	4b28      	ldr	r3, [pc, #160]	; (80229e8 <SystemClock_Config+0xcc>)
 8022946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022948:	4a27      	ldr	r2, [pc, #156]	; (80229e8 <SystemClock_Config+0xcc>)
 802294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802294e:	6413      	str	r3, [r2, #64]	; 0x40
 8022950:	4b25      	ldr	r3, [pc, #148]	; (80229e8 <SystemClock_Config+0xcc>)
 8022952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022958:	60bb      	str	r3, [r7, #8]
 802295a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802295c:	2300      	movs	r3, #0
 802295e:	607b      	str	r3, [r7, #4]
 8022960:	4b22      	ldr	r3, [pc, #136]	; (80229ec <SystemClock_Config+0xd0>)
 8022962:	681b      	ldr	r3, [r3, #0]
 8022964:	4a21      	ldr	r2, [pc, #132]	; (80229ec <SystemClock_Config+0xd0>)
 8022966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802296a:	6013      	str	r3, [r2, #0]
 802296c:	4b1f      	ldr	r3, [pc, #124]	; (80229ec <SystemClock_Config+0xd0>)
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022974:	607b      	str	r3, [r7, #4]
 8022976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8022978:	2301      	movs	r3, #1
 802297a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802297c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022982:	2302      	movs	r3, #2
 8022984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 802298c:	2304      	movs	r3, #4
 802298e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8022990:	2378      	movs	r3, #120	; 0x78
 8022992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022994:	2302      	movs	r3, #2
 8022996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8022998:	2305      	movs	r3, #5
 802299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802299c:	f107 0320 	add.w	r3, r7, #32
 80229a0:	4618      	mov	r0, r3
 80229a2:	f001 fef3 	bl	802478c <HAL_RCC_OscConfig>
 80229a6:	4603      	mov	r3, r0
 80229a8:	2b00      	cmp	r3, #0
 80229aa:	d001      	beq.n	80229b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80229ac:	f000 fb08 	bl	8022fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80229b0:	230f      	movs	r3, #15
 80229b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80229b4:	2302      	movs	r3, #2
 80229b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80229b8:	2380      	movs	r3, #128	; 0x80
 80229ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80229bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80229c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80229c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80229c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80229c8:	f107 030c 	add.w	r3, r7, #12
 80229cc:	2101      	movs	r1, #1
 80229ce:	4618      	mov	r0, r3
 80229d0:	f002 f94c 	bl	8024c6c <HAL_RCC_ClockConfig>
 80229d4:	4603      	mov	r3, r0
 80229d6:	2b00      	cmp	r3, #0
 80229d8:	d001      	beq.n	80229de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80229da:	f000 faf1 	bl	8022fc0 <Error_Handler>
  }
}
 80229de:	bf00      	nop
 80229e0:	3750      	adds	r7, #80	; 0x50
 80229e2:	46bd      	mov	sp, r7
 80229e4:	bd80      	pop	{r7, pc}
 80229e6:	bf00      	nop
 80229e8:	40023800 	.word	0x40023800
 80229ec:	40007000 	.word	0x40007000

080229f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80229f0:	b580      	push	{r7, lr}
 80229f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80229f4:	4b17      	ldr	r3, [pc, #92]	; (8022a54 <MX_SPI1_Init+0x64>)
 80229f6:	4a18      	ldr	r2, [pc, #96]	; (8022a58 <MX_SPI1_Init+0x68>)
 80229f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80229fa:	4b16      	ldr	r3, [pc, #88]	; (8022a54 <MX_SPI1_Init+0x64>)
 80229fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8022a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8022a02:	4b14      	ldr	r3, [pc, #80]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a04:	2200      	movs	r2, #0
 8022a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8022a08:	4b12      	ldr	r3, [pc, #72]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a0a:	2200      	movs	r2, #0
 8022a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8022a0e:	4b11      	ldr	r3, [pc, #68]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a10:	2200      	movs	r2, #0
 8022a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8022a14:	4b0f      	ldr	r3, [pc, #60]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a16:	2200      	movs	r2, #0
 8022a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8022a1a:	4b0e      	ldr	r3, [pc, #56]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8022a22:	4b0c      	ldr	r3, [pc, #48]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a24:	2238      	movs	r2, #56	; 0x38
 8022a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8022a28:	4b0a      	ldr	r3, [pc, #40]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a2a:	2200      	movs	r2, #0
 8022a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8022a2e:	4b09      	ldr	r3, [pc, #36]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a30:	2200      	movs	r2, #0
 8022a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8022a34:	4b07      	ldr	r3, [pc, #28]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a36:	2200      	movs	r2, #0
 8022a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8022a3a:	4b06      	ldr	r3, [pc, #24]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a3c:	220a      	movs	r2, #10
 8022a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8022a40:	4804      	ldr	r0, [pc, #16]	; (8022a54 <MX_SPI1_Init+0x64>)
 8022a42:	f002 fb0f 	bl	8025064 <HAL_SPI_Init>
 8022a46:	4603      	mov	r3, r0
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d001      	beq.n	8022a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8022a4c:	f000 fab8 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8022a50:	bf00      	nop
 8022a52:	bd80      	pop	{r7, pc}
 8022a54:	200007fc 	.word	0x200007fc
 8022a58:	40013000 	.word	0x40013000

08022a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b08c      	sub	sp, #48	; 0x30
 8022a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8022a62:	f107 030c 	add.w	r3, r7, #12
 8022a66:	2224      	movs	r2, #36	; 0x24
 8022a68:	2100      	movs	r1, #0
 8022a6a:	4618      	mov	r0, r3
 8022a6c:	f004 fea6 	bl	80277bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022a70:	1d3b      	adds	r3, r7, #4
 8022a72:	2200      	movs	r2, #0
 8022a74:	601a      	str	r2, [r3, #0]
 8022a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8022a78:	4b22      	ldr	r3, [pc, #136]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a7a:	4a23      	ldr	r2, [pc, #140]	; (8022b08 <MX_TIM1_Init+0xac>)
 8022a7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8022a7e:	4b21      	ldr	r3, [pc, #132]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a80:	2200      	movs	r2, #0
 8022a82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022a84:	4b1f      	ldr	r3, [pc, #124]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a86:	2200      	movs	r2, #0
 8022a88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8022a8a:	4b1e      	ldr	r3, [pc, #120]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022a92:	4b1c      	ldr	r3, [pc, #112]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a94:	2200      	movs	r2, #0
 8022a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8022a98:	4b1a      	ldr	r3, [pc, #104]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022a9e:	4b19      	ldr	r3, [pc, #100]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022aa0:	2200      	movs	r2, #0
 8022aa2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022aa4:	2303      	movs	r3, #3
 8022aa6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8022aa8:	2300      	movs	r3, #0
 8022aaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8022aac:	2301      	movs	r3, #1
 8022aae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8022ab4:	230a      	movs	r3, #10
 8022ab6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8022ab8:	2300      	movs	r3, #0
 8022aba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8022abc:	2301      	movs	r3, #1
 8022abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8022ac4:	230a      	movs	r3, #10
 8022ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8022ac8:	f107 030c 	add.w	r3, r7, #12
 8022acc:	4619      	mov	r1, r3
 8022ace:	480d      	ldr	r0, [pc, #52]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022ad0:	f003 f802 	bl	8025ad8 <HAL_TIM_Encoder_Init>
 8022ad4:	4603      	mov	r3, r0
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d001      	beq.n	8022ade <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8022ada:	f000 fa71 	bl	8022fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022ade:	2300      	movs	r3, #0
 8022ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8022ae6:	1d3b      	adds	r3, r7, #4
 8022ae8:	4619      	mov	r1, r3
 8022aea:	4806      	ldr	r0, [pc, #24]	; (8022b04 <MX_TIM1_Init+0xa8>)
 8022aec:	f003 fe50 	bl	8026790 <HAL_TIMEx_MasterConfigSynchronization>
 8022af0:	4603      	mov	r3, r0
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d001      	beq.n	8022afa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8022af6:	f000 fa63 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8022afa:	bf00      	nop
 8022afc:	3730      	adds	r7, #48	; 0x30
 8022afe:	46bd      	mov	sp, r7
 8022b00:	bd80      	pop	{r7, pc}
 8022b02:	bf00      	nop
 8022b04:	200007bc 	.word	0x200007bc
 8022b08:	40010000 	.word	0x40010000

08022b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b086      	sub	sp, #24
 8022b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022b12:	f107 0308 	add.w	r3, r7, #8
 8022b16:	2200      	movs	r2, #0
 8022b18:	601a      	str	r2, [r3, #0]
 8022b1a:	605a      	str	r2, [r3, #4]
 8022b1c:	609a      	str	r2, [r3, #8]
 8022b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022b20:	463b      	mov	r3, r7
 8022b22:	2200      	movs	r2, #0
 8022b24:	601a      	str	r2, [r3, #0]
 8022b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8022b28:	4b1d      	ldr	r3, [pc, #116]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022b2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59999;
 8022b30:	4b1b      	ldr	r3, [pc, #108]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b32:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8022b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022b38:	4b19      	ldr	r3, [pc, #100]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8022b3e:	4b18      	ldr	r3, [pc, #96]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b40:	2201      	movs	r2, #1
 8022b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022b44:	4b16      	ldr	r3, [pc, #88]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b46:	2200      	movs	r2, #0
 8022b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022b4a:	4b15      	ldr	r3, [pc, #84]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b4c:	2200      	movs	r2, #0
 8022b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8022b50:	4813      	ldr	r0, [pc, #76]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b52:	f002 fea7 	bl	80258a4 <HAL_TIM_Base_Init>
 8022b56:	4603      	mov	r3, r0
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	d001      	beq.n	8022b60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8022b5c:	f000 fa30 	bl	8022fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8022b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8022b66:	f107 0308 	add.w	r3, r7, #8
 8022b6a:	4619      	mov	r1, r3
 8022b6c:	480c      	ldr	r0, [pc, #48]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b6e:	f003 fa13 	bl	8025f98 <HAL_TIM_ConfigClockSource>
 8022b72:	4603      	mov	r3, r0
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	d001      	beq.n	8022b7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8022b78:	f000 fa22 	bl	8022fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8022b7c:	2320      	movs	r3, #32
 8022b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022b80:	2300      	movs	r3, #0
 8022b82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8022b84:	463b      	mov	r3, r7
 8022b86:	4619      	mov	r1, r3
 8022b88:	4805      	ldr	r0, [pc, #20]	; (8022ba0 <MX_TIM2_Init+0x94>)
 8022b8a:	f003 fe01 	bl	8026790 <HAL_TIMEx_MasterConfigSynchronization>
 8022b8e:	4603      	mov	r3, r0
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d001      	beq.n	8022b98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8022b94:	f000 fa14 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8022b98:	bf00      	nop
 8022b9a:	3718      	adds	r7, #24
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}
 8022ba0:	200018f4 	.word	0x200018f4

08022ba4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8022ba4:	b580      	push	{r7, lr}
 8022ba6:	b08e      	sub	sp, #56	; 0x38
 8022ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022bae:	2200      	movs	r2, #0
 8022bb0:	601a      	str	r2, [r3, #0]
 8022bb2:	605a      	str	r2, [r3, #4]
 8022bb4:	609a      	str	r2, [r3, #8]
 8022bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022bb8:	f107 0320 	add.w	r3, r7, #32
 8022bbc:	2200      	movs	r2, #0
 8022bbe:	601a      	str	r2, [r3, #0]
 8022bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8022bc2:	1d3b      	adds	r3, r7, #4
 8022bc4:	2200      	movs	r2, #0
 8022bc6:	601a      	str	r2, [r3, #0]
 8022bc8:	605a      	str	r2, [r3, #4]
 8022bca:	609a      	str	r2, [r3, #8]
 8022bcc:	60da      	str	r2, [r3, #12]
 8022bce:	611a      	str	r2, [r3, #16]
 8022bd0:	615a      	str	r2, [r3, #20]
 8022bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8022bd4:	4b32      	ldr	r3, [pc, #200]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bd6:	4a33      	ldr	r2, [pc, #204]	; (8022ca4 <MX_TIM3_Init+0x100>)
 8022bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8022bda:	4b31      	ldr	r3, [pc, #196]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bdc:	f240 2257 	movw	r2, #599	; 0x257
 8022be0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022be2:	4b2f      	ldr	r3, [pc, #188]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022be4:	2200      	movs	r2, #0
 8022be6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8022be8:	4b2d      	ldr	r3, [pc, #180]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8022bee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022bf0:	4b2b      	ldr	r3, [pc, #172]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bf2:	2200      	movs	r2, #0
 8022bf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022bf6:	4b2a      	ldr	r3, [pc, #168]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bf8:	2200      	movs	r2, #0
 8022bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8022bfc:	4828      	ldr	r0, [pc, #160]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022bfe:	f002 fe51 	bl	80258a4 <HAL_TIM_Base_Init>
 8022c02:	4603      	mov	r3, r0
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d001      	beq.n	8022c0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8022c08:	f000 f9da 	bl	8022fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8022c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022c10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8022c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022c16:	4619      	mov	r1, r3
 8022c18:	4821      	ldr	r0, [pc, #132]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c1a:	f003 f9bd 	bl	8025f98 <HAL_TIM_ConfigClockSource>
 8022c1e:	4603      	mov	r3, r0
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d001      	beq.n	8022c28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8022c24:	f000 f9cc 	bl	8022fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8022c28:	481d      	ldr	r0, [pc, #116]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c2a:	f002 fe8a 	bl	8025942 <HAL_TIM_PWM_Init>
 8022c2e:	4603      	mov	r3, r0
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	d001      	beq.n	8022c38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8022c34:	f000 f9c4 	bl	8022fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8022c38:	2320      	movs	r3, #32
 8022c3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022c3c:	2300      	movs	r3, #0
 8022c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8022c40:	f107 0320 	add.w	r3, r7, #32
 8022c44:	4619      	mov	r1, r3
 8022c46:	4816      	ldr	r0, [pc, #88]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c48:	f003 fda2 	bl	8026790 <HAL_TIMEx_MasterConfigSynchronization>
 8022c4c:	4603      	mov	r3, r0
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d001      	beq.n	8022c56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8022c52:	f000 f9b5 	bl	8022fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8022c56:	2360      	movs	r3, #96	; 0x60
 8022c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022c5a:	2300      	movs	r3, #0
 8022c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8022c5e:	2300      	movs	r3, #0
 8022c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8022c62:	2300      	movs	r3, #0
 8022c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8022c66:	1d3b      	adds	r3, r7, #4
 8022c68:	2204      	movs	r2, #4
 8022c6a:	4619      	mov	r1, r3
 8022c6c:	480c      	ldr	r0, [pc, #48]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c6e:	f003 f8cd 	bl	8025e0c <HAL_TIM_PWM_ConfigChannel>
 8022c72:	4603      	mov	r3, r0
 8022c74:	2b00      	cmp	r3, #0
 8022c76:	d001      	beq.n	8022c7c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8022c78:	f000 f9a2 	bl	8022fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8022c7c:	1d3b      	adds	r3, r7, #4
 8022c7e:	2208      	movs	r2, #8
 8022c80:	4619      	mov	r1, r3
 8022c82:	4807      	ldr	r0, [pc, #28]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c84:	f003 f8c2 	bl	8025e0c <HAL_TIM_PWM_ConfigChannel>
 8022c88:	4603      	mov	r3, r0
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d001      	beq.n	8022c92 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8022c8e:	f000 f997 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8022c92:	4803      	ldr	r0, [pc, #12]	; (8022ca0 <MX_TIM3_Init+0xfc>)
 8022c94:	f000 fab6 	bl	8023204 <HAL_TIM_MspPostInit>

}
 8022c98:	bf00      	nop
 8022c9a:	3738      	adds	r7, #56	; 0x38
 8022c9c:	46bd      	mov	sp, r7
 8022c9e:	bd80      	pop	{r7, pc}
 8022ca0:	20000730 	.word	0x20000730
 8022ca4:	40000400 	.word	0x40000400

08022ca8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b086      	sub	sp, #24
 8022cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022cae:	f107 0308 	add.w	r3, r7, #8
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	601a      	str	r2, [r3, #0]
 8022cb6:	605a      	str	r2, [r3, #4]
 8022cb8:	609a      	str	r2, [r3, #8]
 8022cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022cbc:	463b      	mov	r3, r7
 8022cbe:	2200      	movs	r2, #0
 8022cc0:	601a      	str	r2, [r3, #0]
 8022cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8022cc4:	4b1d      	ldr	r3, [pc, #116]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022cc6:	4a1e      	ldr	r2, [pc, #120]	; (8022d40 <MX_TIM5_Init+0x98>)
 8022cc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 59;
 8022cca:	4b1c      	ldr	r3, [pc, #112]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022ccc:	223b      	movs	r2, #59	; 0x3b
 8022cce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022cd0:	4b1a      	ldr	r3, [pc, #104]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8022cd6:	4b19      	ldr	r3, [pc, #100]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8022cdc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022cde:	4b17      	ldr	r3, [pc, #92]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022ce0:	2200      	movs	r2, #0
 8022ce2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022ce4:	4b15      	ldr	r3, [pc, #84]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022ce6:	2200      	movs	r2, #0
 8022ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8022cea:	4814      	ldr	r0, [pc, #80]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022cec:	f002 fdda 	bl	80258a4 <HAL_TIM_Base_Init>
 8022cf0:	4603      	mov	r3, r0
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d001      	beq.n	8022cfa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8022cf6:	f000 f963 	bl	8022fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8022cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8022d00:	f107 0308 	add.w	r3, r7, #8
 8022d04:	4619      	mov	r1, r3
 8022d06:	480d      	ldr	r0, [pc, #52]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022d08:	f003 f946 	bl	8025f98 <HAL_TIM_ConfigClockSource>
 8022d0c:	4603      	mov	r3, r0
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d001      	beq.n	8022d16 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8022d12:	f000 f955 	bl	8022fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8022d16:	2320      	movs	r3, #32
 8022d18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8022d1e:	463b      	mov	r3, r7
 8022d20:	4619      	mov	r1, r3
 8022d22:	4806      	ldr	r0, [pc, #24]	; (8022d3c <MX_TIM5_Init+0x94>)
 8022d24:	f003 fd34 	bl	8026790 <HAL_TIMEx_MasterConfigSynchronization>
 8022d28:	4603      	mov	r3, r0
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	d001      	beq.n	8022d32 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8022d2e:	f000 f947 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8022d32:	bf00      	nop
 8022d34:	3718      	adds	r7, #24
 8022d36:	46bd      	mov	sp, r7
 8022d38:	bd80      	pop	{r7, pc}
 8022d3a:	bf00      	nop
 8022d3c:	200006f0 	.word	0x200006f0
 8022d40:	40000c00 	.word	0x40000c00

08022d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8022d44:	b580      	push	{r7, lr}
 8022d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8022d48:	4b11      	ldr	r3, [pc, #68]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d4a:	4a12      	ldr	r2, [pc, #72]	; (8022d94 <MX_USART1_UART_Init+0x50>)
 8022d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8022d4e:	4b10      	ldr	r3, [pc, #64]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8022d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8022d56:	4b0e      	ldr	r3, [pc, #56]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d58:	2200      	movs	r2, #0
 8022d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8022d5c:	4b0c      	ldr	r3, [pc, #48]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d5e:	2200      	movs	r2, #0
 8022d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8022d62:	4b0b      	ldr	r3, [pc, #44]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d64:	2200      	movs	r2, #0
 8022d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8022d68:	4b09      	ldr	r3, [pc, #36]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d6a:	220c      	movs	r2, #12
 8022d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8022d6e:	4b08      	ldr	r3, [pc, #32]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d70:	2200      	movs	r2, #0
 8022d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8022d74:	4b06      	ldr	r3, [pc, #24]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d76:	2200      	movs	r2, #0
 8022d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8022d7a:	4805      	ldr	r0, [pc, #20]	; (8022d90 <MX_USART1_UART_Init+0x4c>)
 8022d7c:	f003 fd98 	bl	80268b0 <HAL_UART_Init>
 8022d80:	4603      	mov	r3, r0
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d001      	beq.n	8022d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8022d86:	f000 f91b 	bl	8022fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8022d8a:	bf00      	nop
 8022d8c:	bd80      	pop	{r7, pc}
 8022d8e:	bf00      	nop
 8022d90:	2000089c 	.word	0x2000089c
 8022d94:	40011000 	.word	0x40011000

08022d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b08c      	sub	sp, #48	; 0x30
 8022d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022d9e:	f107 031c 	add.w	r3, r7, #28
 8022da2:	2200      	movs	r2, #0
 8022da4:	601a      	str	r2, [r3, #0]
 8022da6:	605a      	str	r2, [r3, #4]
 8022da8:	609a      	str	r2, [r3, #8]
 8022daa:	60da      	str	r2, [r3, #12]
 8022dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022dae:	2300      	movs	r3, #0
 8022db0:	61bb      	str	r3, [r7, #24]
 8022db2:	4b7b      	ldr	r3, [pc, #492]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022db6:	4a7a      	ldr	r2, [pc, #488]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022db8:	f043 0304 	orr.w	r3, r3, #4
 8022dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8022dbe:	4b78      	ldr	r3, [pc, #480]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dc2:	f003 0304 	and.w	r3, r3, #4
 8022dc6:	61bb      	str	r3, [r7, #24]
 8022dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8022dca:	2300      	movs	r3, #0
 8022dcc:	617b      	str	r3, [r7, #20]
 8022dce:	4b74      	ldr	r3, [pc, #464]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dd2:	4a73      	ldr	r2, [pc, #460]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8022dda:	4b71      	ldr	r3, [pc, #452]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022de2:	617b      	str	r3, [r7, #20]
 8022de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022de6:	2300      	movs	r3, #0
 8022de8:	613b      	str	r3, [r7, #16]
 8022dea:	4b6d      	ldr	r3, [pc, #436]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dee:	4a6c      	ldr	r2, [pc, #432]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022df0:	f043 0301 	orr.w	r3, r3, #1
 8022df4:	6313      	str	r3, [r2, #48]	; 0x30
 8022df6:	4b6a      	ldr	r3, [pc, #424]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dfa:	f003 0301 	and.w	r3, r3, #1
 8022dfe:	613b      	str	r3, [r7, #16]
 8022e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022e02:	2300      	movs	r3, #0
 8022e04:	60fb      	str	r3, [r7, #12]
 8022e06:	4b66      	ldr	r3, [pc, #408]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e0a:	4a65      	ldr	r2, [pc, #404]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e0c:	f043 0302 	orr.w	r3, r3, #2
 8022e10:	6313      	str	r3, [r2, #48]	; 0x30
 8022e12:	4b63      	ldr	r3, [pc, #396]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e16:	f003 0302 	and.w	r3, r3, #2
 8022e1a:	60fb      	str	r3, [r7, #12]
 8022e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8022e1e:	2300      	movs	r3, #0
 8022e20:	60bb      	str	r3, [r7, #8]
 8022e22:	4b5f      	ldr	r3, [pc, #380]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e26:	4a5e      	ldr	r2, [pc, #376]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e28:	f043 0310 	orr.w	r3, r3, #16
 8022e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8022e2e:	4b5c      	ldr	r3, [pc, #368]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e32:	f003 0310 	and.w	r3, r3, #16
 8022e36:	60bb      	str	r3, [r7, #8]
 8022e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	607b      	str	r3, [r7, #4]
 8022e3e:	4b58      	ldr	r3, [pc, #352]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e42:	4a57      	ldr	r2, [pc, #348]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e44:	f043 0308 	orr.w	r3, r3, #8
 8022e48:	6313      	str	r3, [r2, #48]	; 0x30
 8022e4a:	4b55      	ldr	r3, [pc, #340]	; (8022fa0 <MX_GPIO_Init+0x208>)
 8022e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e4e:	f003 0308 	and.w	r3, r3, #8
 8022e52:	607b      	str	r3, [r7, #4]
 8022e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8022e56:	2200      	movs	r2, #0
 8022e58:	2110      	movs	r1, #16
 8022e5a:	4852      	ldr	r0, [pc, #328]	; (8022fa4 <MX_GPIO_Init+0x20c>)
 8022e5c:	f001 fc4a 	bl	80246f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin, GPIO_PIN_RESET);
 8022e60:	2200      	movs	r2, #0
 8022e62:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8022e66:	4850      	ldr	r0, [pc, #320]	; (8022fa8 <MX_GPIO_Init+0x210>)
 8022e68:	f001 fc44 	bl	80246f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIOTestPin_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8022e6c:	2200      	movs	r2, #0
 8022e6e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8022e72:	484e      	ldr	r0, [pc, #312]	; (8022fac <MX_GPIO_Init+0x214>)
 8022e74:	f001 fc3e 	bl	80246f4 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BuzzerPin_GPIO_Port, BuzzerPin_Pin, GPIO_PIN_SET);
 8022e78:	2201      	movs	r2, #1
 8022e7a:	2120      	movs	r1, #32
 8022e7c:	484a      	ldr	r0, [pc, #296]	; (8022fa8 <MX_GPIO_Init+0x210>)
 8022e7e:	f001 fc39 	bl	80246f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8022e82:	2301      	movs	r3, #1
 8022e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8022e86:	4b4a      	ldr	r3, [pc, #296]	; (8022fb0 <MX_GPIO_Init+0x218>)
 8022e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8022e8e:	f107 031c 	add.w	r3, r7, #28
 8022e92:	4619      	mov	r1, r3
 8022e94:	4843      	ldr	r0, [pc, #268]	; (8022fa4 <MX_GPIO_Init+0x20c>)
 8022e96:	f001 fa91 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8022e9a:	2310      	movs	r3, #16
 8022e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022e9e:	2301      	movs	r3, #1
 8022ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022ea6:	2300      	movs	r3, #0
 8022ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8022eaa:	f107 031c 	add.w	r3, r7, #28
 8022eae:	4619      	mov	r1, r3
 8022eb0:	483c      	ldr	r0, [pc, #240]	; (8022fa4 <MX_GPIO_Init+0x20c>)
 8022eb2:	f001 fa83 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLPin_Pin BOOT1_Pin */
  GPIO_InitStruct.Pin = BLPin_Pin|BOOT1_Pin;
 8022eb6:	2305      	movs	r3, #5
 8022eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022eba:	2300      	movs	r3, #0
 8022ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022ec2:	f107 031c 	add.w	r3, r7, #28
 8022ec6:	4619      	mov	r1, r3
 8022ec8:	4837      	ldr	r0, [pc, #220]	; (8022fa8 <MX_GPIO_Init+0x210>)
 8022eca:	f001 fa77 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderButtonPin_Pin */
  GPIO_InitStruct.Pin = EncoderButtonPin_Pin;
 8022ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022ed8:	2301      	movs	r3, #1
 8022eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EncoderButtonPin_GPIO_Port, &GPIO_InitStruct);
 8022edc:	f107 031c 	add.w	r3, r7, #28
 8022ee0:	4619      	mov	r1, r3
 8022ee2:	4834      	ldr	r0, [pc, #208]	; (8022fb4 <MX_GPIO_Init+0x21c>)
 8022ee4:	f001 fa6a 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BackFanPin_Pin ShutterPin_Pin AmbiLightPin_Pin */
  GPIO_InitStruct.Pin = BackFanPin_Pin|ShutterPin_Pin|AmbiLightPin_Pin;
 8022ee8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8022eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022eee:	2301      	movs	r3, #1
 8022ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022ef6:	2300      	movs	r3, #0
 8022ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022efa:	f107 031c 	add.w	r3, r7, #28
 8022efe:	4619      	mov	r1, r3
 8022f00:	4829      	ldr	r0, [pc, #164]	; (8022fa8 <MX_GPIO_Init+0x210>)
 8022f02:	f001 fa5b 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIOTestPin_Pin */
  GPIO_InitStruct.Pin = GPIOTestPin_Pin;
 8022f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022f0c:	2301      	movs	r3, #1
 8022f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8022f10:	2302      	movs	r3, #2
 8022f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8022f14:	2302      	movs	r3, #2
 8022f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOTestPin_GPIO_Port, &GPIO_InitStruct);
 8022f18:	f107 031c 	add.w	r3, r7, #28
 8022f1c:	4619      	mov	r1, r3
 8022f1e:	4823      	ldr	r0, [pc, #140]	; (8022fac <MX_GPIO_Init+0x214>)
 8022f20:	f001 fa4c 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8022f24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8022f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022f2a:	2301      	movs	r3, #1
 8022f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022f2e:	2300      	movs	r3, #0
 8022f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022f32:	2300      	movs	r3, #0
 8022f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022f36:	f107 031c 	add.w	r3, r7, #28
 8022f3a:	4619      	mov	r1, r3
 8022f3c:	481b      	ldr	r0, [pc, #108]	; (8022fac <MX_GPIO_Init+0x214>)
 8022f3e:	f001 fa3d 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ZeroCrossingPin_Pin */
  GPIO_InitStruct.Pin = ZeroCrossingPin_Pin;
 8022f42:	2340      	movs	r3, #64	; 0x40
 8022f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8022f46:	4b1c      	ldr	r3, [pc, #112]	; (8022fb8 <MX_GPIO_Init+0x220>)
 8022f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022f4a:	2300      	movs	r3, #0
 8022f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ZeroCrossingPin_GPIO_Port, &GPIO_InitStruct);
 8022f4e:	f107 031c 	add.w	r3, r7, #28
 8022f52:	4619      	mov	r1, r3
 8022f54:	4819      	ldr	r0, [pc, #100]	; (8022fbc <MX_GPIO_Init+0x224>)
 8022f56:	f001 fa31 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8022f5a:	2320      	movs	r3, #32
 8022f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022f5e:	2300      	movs	r3, #0
 8022f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022f62:	2300      	movs	r3, #0
 8022f64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8022f66:	f107 031c 	add.w	r3, r7, #28
 8022f6a:	4619      	mov	r1, r3
 8022f6c:	480f      	ldr	r0, [pc, #60]	; (8022fac <MX_GPIO_Init+0x214>)
 8022f6e:	f001 fa25 	bl	80243bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BuzzerPin_Pin */
  GPIO_InitStruct.Pin = BuzzerPin_Pin;
 8022f72:	2320      	movs	r3, #32
 8022f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8022f76:	2311      	movs	r3, #17
 8022f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022f7a:	2301      	movs	r3, #1
 8022f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022f7e:	2300      	movs	r3, #0
 8022f80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BuzzerPin_GPIO_Port, &GPIO_InitStruct);
 8022f82:	f107 031c 	add.w	r3, r7, #28
 8022f86:	4619      	mov	r1, r3
 8022f88:	4807      	ldr	r0, [pc, #28]	; (8022fa8 <MX_GPIO_Init+0x210>)
 8022f8a:	f001 fa17 	bl	80243bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8022f8e:	2201      	movs	r2, #1
 8022f90:	2100      	movs	r1, #0
 8022f92:	2017      	movs	r0, #23
 8022f94:	f000 fec7 	bl	8023d26 <HAL_NVIC_SetPriority>
 // HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8022f98:	bf00      	nop
 8022f9a:	3730      	adds	r7, #48	; 0x30
 8022f9c:	46bd      	mov	sp, r7
 8022f9e:	bd80      	pop	{r7, pc}
 8022fa0:	40023800 	.word	0x40023800
 8022fa4:	40020000 	.word	0x40020000
 8022fa8:	40020400 	.word	0x40020400
 8022fac:	40020c00 	.word	0x40020c00
 8022fb0:	10120000 	.word	0x10120000
 8022fb4:	40021000 	.word	0x40021000
 8022fb8:	10110000 	.word	0x10110000
 8022fbc:	40020800 	.word	0x40020800

08022fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8022fc0:	b480      	push	{r7}
 8022fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8022fc4:	bf00      	nop
 8022fc6:	46bd      	mov	sp, r7
 8022fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fcc:	4770      	bx	lr
	...

08022fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8022fd0:	b580      	push	{r7, lr}
 8022fd2:	b082      	sub	sp, #8
 8022fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	607b      	str	r3, [r7, #4]
 8022fda:	4b10      	ldr	r3, [pc, #64]	; (802301c <HAL_MspInit+0x4c>)
 8022fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fde:	4a0f      	ldr	r2, [pc, #60]	; (802301c <HAL_MspInit+0x4c>)
 8022fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8022fe6:	4b0d      	ldr	r3, [pc, #52]	; (802301c <HAL_MspInit+0x4c>)
 8022fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fee:	607b      	str	r3, [r7, #4]
 8022ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8022ff2:	2300      	movs	r3, #0
 8022ff4:	603b      	str	r3, [r7, #0]
 8022ff6:	4b09      	ldr	r3, [pc, #36]	; (802301c <HAL_MspInit+0x4c>)
 8022ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ffa:	4a08      	ldr	r2, [pc, #32]	; (802301c <HAL_MspInit+0x4c>)
 8022ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023000:	6413      	str	r3, [r2, #64]	; 0x40
 8023002:	4b06      	ldr	r3, [pc, #24]	; (802301c <HAL_MspInit+0x4c>)
 8023004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802300a:	603b      	str	r3, [r7, #0]
 802300c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 802300e:	2007      	movs	r0, #7
 8023010:	f000 fe7e 	bl	8023d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8023014:	bf00      	nop
 8023016:	3708      	adds	r7, #8
 8023018:	46bd      	mov	sp, r7
 802301a:	bd80      	pop	{r7, pc}
 802301c:	40023800 	.word	0x40023800

08023020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8023020:	b580      	push	{r7, lr}
 8023022:	b08a      	sub	sp, #40	; 0x28
 8023024:	af00      	add	r7, sp, #0
 8023026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023028:	f107 0314 	add.w	r3, r7, #20
 802302c:	2200      	movs	r2, #0
 802302e:	601a      	str	r2, [r3, #0]
 8023030:	605a      	str	r2, [r3, #4]
 8023032:	609a      	str	r2, [r3, #8]
 8023034:	60da      	str	r2, [r3, #12]
 8023036:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	681b      	ldr	r3, [r3, #0]
 802303c:	4a19      	ldr	r2, [pc, #100]	; (80230a4 <HAL_SPI_MspInit+0x84>)
 802303e:	4293      	cmp	r3, r2
 8023040:	d12b      	bne.n	802309a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8023042:	2300      	movs	r3, #0
 8023044:	613b      	str	r3, [r7, #16]
 8023046:	4b18      	ldr	r3, [pc, #96]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 8023048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802304a:	4a17      	ldr	r2, [pc, #92]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 802304c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8023050:	6453      	str	r3, [r2, #68]	; 0x44
 8023052:	4b15      	ldr	r3, [pc, #84]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 8023054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802305a:	613b      	str	r3, [r7, #16]
 802305c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802305e:	2300      	movs	r3, #0
 8023060:	60fb      	str	r3, [r7, #12]
 8023062:	4b11      	ldr	r3, [pc, #68]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 8023064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023066:	4a10      	ldr	r2, [pc, #64]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 8023068:	f043 0301 	orr.w	r3, r3, #1
 802306c:	6313      	str	r3, [r2, #48]	; 0x30
 802306e:	4b0e      	ldr	r3, [pc, #56]	; (80230a8 <HAL_SPI_MspInit+0x88>)
 8023070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023072:	f003 0301 	and.w	r3, r3, #1
 8023076:	60fb      	str	r3, [r7, #12]
 8023078:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 802307a:	23e0      	movs	r3, #224	; 0xe0
 802307c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802307e:	2302      	movs	r3, #2
 8023080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023082:	2300      	movs	r3, #0
 8023084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023086:	2300      	movs	r3, #0
 8023088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802308a:	2305      	movs	r3, #5
 802308c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802308e:	f107 0314 	add.w	r3, r7, #20
 8023092:	4619      	mov	r1, r3
 8023094:	4805      	ldr	r0, [pc, #20]	; (80230ac <HAL_SPI_MspInit+0x8c>)
 8023096:	f001 f991 	bl	80243bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 802309a:	bf00      	nop
 802309c:	3728      	adds	r7, #40	; 0x28
 802309e:	46bd      	mov	sp, r7
 80230a0:	bd80      	pop	{r7, pc}
 80230a2:	bf00      	nop
 80230a4:	40013000 	.word	0x40013000
 80230a8:	40023800 	.word	0x40023800
 80230ac:	40020000 	.word	0x40020000

080230b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80230b0:	b580      	push	{r7, lr}
 80230b2:	b08a      	sub	sp, #40	; 0x28
 80230b4:	af00      	add	r7, sp, #0
 80230b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80230b8:	f107 0314 	add.w	r3, r7, #20
 80230bc:	2200      	movs	r2, #0
 80230be:	601a      	str	r2, [r3, #0]
 80230c0:	605a      	str	r2, [r3, #4]
 80230c2:	609a      	str	r2, [r3, #8]
 80230c4:	60da      	str	r2, [r3, #12]
 80230c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	4a1d      	ldr	r2, [pc, #116]	; (8023144 <HAL_TIM_Encoder_MspInit+0x94>)
 80230ce:	4293      	cmp	r3, r2
 80230d0:	d134      	bne.n	802313c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80230d2:	2300      	movs	r3, #0
 80230d4:	613b      	str	r3, [r7, #16]
 80230d6:	4b1c      	ldr	r3, [pc, #112]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 80230d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80230da:	4a1b      	ldr	r2, [pc, #108]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 80230dc:	f043 0301 	orr.w	r3, r3, #1
 80230e0:	6453      	str	r3, [r2, #68]	; 0x44
 80230e2:	4b19      	ldr	r3, [pc, #100]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 80230e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80230e6:	f003 0301 	and.w	r3, r3, #1
 80230ea:	613b      	str	r3, [r7, #16]
 80230ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80230ee:	2300      	movs	r3, #0
 80230f0:	60fb      	str	r3, [r7, #12]
 80230f2:	4b15      	ldr	r3, [pc, #84]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 80230f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230f6:	4a14      	ldr	r2, [pc, #80]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 80230f8:	f043 0310 	orr.w	r3, r3, #16
 80230fc:	6313      	str	r3, [r2, #48]	; 0x30
 80230fe:	4b12      	ldr	r3, [pc, #72]	; (8023148 <HAL_TIM_Encoder_MspInit+0x98>)
 8023100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023102:	f003 0310 	and.w	r3, r3, #16
 8023106:	60fb      	str	r3, [r7, #12]
 8023108:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderPin1_Pin|EncoderPin2_Pin;
 802310a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 802310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023110:	2302      	movs	r3, #2
 8023112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023114:	2300      	movs	r3, #0
 8023116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023118:	2300      	movs	r3, #0
 802311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 802311c:	2301      	movs	r3, #1
 802311e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023120:	f107 0314 	add.w	r3, r7, #20
 8023124:	4619      	mov	r1, r3
 8023126:	4809      	ldr	r0, [pc, #36]	; (802314c <HAL_TIM_Encoder_MspInit+0x9c>)
 8023128:	f001 f948 	bl	80243bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 2);
 802312c:	2202      	movs	r2, #2
 802312e:	2100      	movs	r1, #0
 8023130:	2018      	movs	r0, #24
 8023132:	f000 fdf8 	bl	8023d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8023136:	2018      	movs	r0, #24
 8023138:	f000 fe11 	bl	8023d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 802313c:	bf00      	nop
 802313e:	3728      	adds	r7, #40	; 0x28
 8023140:	46bd      	mov	sp, r7
 8023142:	bd80      	pop	{r7, pc}
 8023144:	40010000 	.word	0x40010000
 8023148:	40023800 	.word	0x40023800
 802314c:	40021000 	.word	0x40021000

08023150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8023150:	b580      	push	{r7, lr}
 8023152:	b086      	sub	sp, #24
 8023154:	af00      	add	r7, sp, #0
 8023156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	681b      	ldr	r3, [r3, #0]
 802315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023160:	d116      	bne.n	8023190 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8023162:	2300      	movs	r3, #0
 8023164:	617b      	str	r3, [r7, #20]
 8023166:	4b24      	ldr	r3, [pc, #144]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 8023168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802316a:	4a23      	ldr	r2, [pc, #140]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 802316c:	f043 0301 	orr.w	r3, r3, #1
 8023170:	6413      	str	r3, [r2, #64]	; 0x40
 8023172:	4b21      	ldr	r3, [pc, #132]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 8023174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023176:	f003 0301 	and.w	r3, r3, #1
 802317a:	617b      	str	r3, [r7, #20]
 802317c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 802317e:	2201      	movs	r2, #1
 8023180:	2100      	movs	r1, #0
 8023182:	201c      	movs	r0, #28
 8023184:	f000 fdcf 	bl	8023d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8023188:	201c      	movs	r0, #28
 802318a:	f000 fde8 	bl	8023d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 802318e:	e02e      	b.n	80231ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	681b      	ldr	r3, [r3, #0]
 8023194:	4a19      	ldr	r2, [pc, #100]	; (80231fc <HAL_TIM_Base_MspInit+0xac>)
 8023196:	4293      	cmp	r3, r2
 8023198:	d10e      	bne.n	80231b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802319a:	2300      	movs	r3, #0
 802319c:	613b      	str	r3, [r7, #16]
 802319e:	4b16      	ldr	r3, [pc, #88]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231a2:	4a15      	ldr	r2, [pc, #84]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231a4:	f043 0302 	orr.w	r3, r3, #2
 80231a8:	6413      	str	r3, [r2, #64]	; 0x40
 80231aa:	4b13      	ldr	r3, [pc, #76]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231ae:	f003 0302 	and.w	r3, r3, #2
 80231b2:	613b      	str	r3, [r7, #16]
 80231b4:	693b      	ldr	r3, [r7, #16]
}
 80231b6:	e01a      	b.n	80231ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	4a10      	ldr	r2, [pc, #64]	; (8023200 <HAL_TIM_Base_MspInit+0xb0>)
 80231be:	4293      	cmp	r3, r2
 80231c0:	d115      	bne.n	80231ee <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80231c2:	2300      	movs	r3, #0
 80231c4:	60fb      	str	r3, [r7, #12]
 80231c6:	4b0c      	ldr	r3, [pc, #48]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231ca:	4a0b      	ldr	r2, [pc, #44]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231cc:	f043 0308 	orr.w	r3, r3, #8
 80231d0:	6413      	str	r3, [r2, #64]	; 0x40
 80231d2:	4b09      	ldr	r3, [pc, #36]	; (80231f8 <HAL_TIM_Base_MspInit+0xa8>)
 80231d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231d6:	f003 0308 	and.w	r3, r3, #8
 80231da:	60fb      	str	r3, [r7, #12]
 80231dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 80231de:	2201      	movs	r2, #1
 80231e0:	2100      	movs	r1, #0
 80231e2:	2032      	movs	r0, #50	; 0x32
 80231e4:	f000 fd9f 	bl	8023d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80231e8:	2032      	movs	r0, #50	; 0x32
 80231ea:	f000 fdb8 	bl	8023d5e <HAL_NVIC_EnableIRQ>
}
 80231ee:	bf00      	nop
 80231f0:	3718      	adds	r7, #24
 80231f2:	46bd      	mov	sp, r7
 80231f4:	bd80      	pop	{r7, pc}
 80231f6:	bf00      	nop
 80231f8:	40023800 	.word	0x40023800
 80231fc:	40000400 	.word	0x40000400
 8023200:	40000c00 	.word	0x40000c00

08023204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8023204:	b580      	push	{r7, lr}
 8023206:	b088      	sub	sp, #32
 8023208:	af00      	add	r7, sp, #0
 802320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802320c:	f107 030c 	add.w	r3, r7, #12
 8023210:	2200      	movs	r2, #0
 8023212:	601a      	str	r2, [r3, #0]
 8023214:	605a      	str	r2, [r3, #4]
 8023216:	609a      	str	r2, [r3, #8]
 8023218:	60da      	str	r2, [r3, #12]
 802321a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 802321c:	687b      	ldr	r3, [r7, #4]
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	4a12      	ldr	r2, [pc, #72]	; (802326c <HAL_TIM_MspPostInit+0x68>)
 8023222:	4293      	cmp	r3, r2
 8023224:	d11e      	bne.n	8023264 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023226:	2300      	movs	r3, #0
 8023228:	60bb      	str	r3, [r7, #8]
 802322a:	4b11      	ldr	r3, [pc, #68]	; (8023270 <HAL_TIM_MspPostInit+0x6c>)
 802322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802322e:	4a10      	ldr	r2, [pc, #64]	; (8023270 <HAL_TIM_MspPostInit+0x6c>)
 8023230:	f043 0304 	orr.w	r3, r3, #4
 8023234:	6313      	str	r3, [r2, #48]	; 0x30
 8023236:	4b0e      	ldr	r3, [pc, #56]	; (8023270 <HAL_TIM_MspPostInit+0x6c>)
 8023238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802323a:	f003 0304 	and.w	r3, r3, #4
 802323e:	60bb      	str	r3, [r7, #8]
 8023240:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FiringPinBank1_Pin|FiringPinBank2_Pin;
 8023242:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8023246:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023248:	2302      	movs	r3, #2
 802324a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802324c:	2300      	movs	r3, #0
 802324e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023250:	2300      	movs	r3, #0
 8023252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8023254:	2302      	movs	r3, #2
 8023256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023258:	f107 030c 	add.w	r3, r7, #12
 802325c:	4619      	mov	r1, r3
 802325e:	4805      	ldr	r0, [pc, #20]	; (8023274 <HAL_TIM_MspPostInit+0x70>)
 8023260:	f001 f8ac 	bl	80243bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8023264:	bf00      	nop
 8023266:	3720      	adds	r7, #32
 8023268:	46bd      	mov	sp, r7
 802326a:	bd80      	pop	{r7, pc}
 802326c:	40000400 	.word	0x40000400
 8023270:	40023800 	.word	0x40023800
 8023274:	40020800 	.word	0x40020800

08023278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8023278:	b580      	push	{r7, lr}
 802327a:	b08a      	sub	sp, #40	; 0x28
 802327c:	af00      	add	r7, sp, #0
 802327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023280:	f107 0314 	add.w	r3, r7, #20
 8023284:	2200      	movs	r2, #0
 8023286:	601a      	str	r2, [r3, #0]
 8023288:	605a      	str	r2, [r3, #4]
 802328a:	609a      	str	r2, [r3, #8]
 802328c:	60da      	str	r2, [r3, #12]
 802328e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	4a1d      	ldr	r2, [pc, #116]	; (802330c <HAL_UART_MspInit+0x94>)
 8023296:	4293      	cmp	r3, r2
 8023298:	d133      	bne.n	8023302 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802329a:	2300      	movs	r3, #0
 802329c:	613b      	str	r3, [r7, #16]
 802329e:	4b1c      	ldr	r3, [pc, #112]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80232a2:	4a1b      	ldr	r2, [pc, #108]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232a4:	f043 0310 	orr.w	r3, r3, #16
 80232a8:	6453      	str	r3, [r2, #68]	; 0x44
 80232aa:	4b19      	ldr	r3, [pc, #100]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80232ae:	f003 0310 	and.w	r3, r3, #16
 80232b2:	613b      	str	r3, [r7, #16]
 80232b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80232b6:	2300      	movs	r3, #0
 80232b8:	60fb      	str	r3, [r7, #12]
 80232ba:	4b15      	ldr	r3, [pc, #84]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80232be:	4a14      	ldr	r2, [pc, #80]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232c0:	f043 0302 	orr.w	r3, r3, #2
 80232c4:	6313      	str	r3, [r2, #48]	; 0x30
 80232c6:	4b12      	ldr	r3, [pc, #72]	; (8023310 <HAL_UART_MspInit+0x98>)
 80232c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80232ca:	f003 0302 	and.w	r3, r3, #2
 80232ce:	60fb      	str	r3, [r7, #12]
 80232d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80232d2:	23c0      	movs	r3, #192	; 0xc0
 80232d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80232d6:	2302      	movs	r3, #2
 80232d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80232da:	2300      	movs	r3, #0
 80232dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80232de:	2303      	movs	r3, #3
 80232e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80232e2:	2307      	movs	r3, #7
 80232e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80232e6:	f107 0314 	add.w	r3, r7, #20
 80232ea:	4619      	mov	r1, r3
 80232ec:	4809      	ldr	r0, [pc, #36]	; (8023314 <HAL_UART_MspInit+0x9c>)
 80232ee:	f001 f865 	bl	80243bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80232f2:	2201      	movs	r2, #1
 80232f4:	2100      	movs	r1, #0
 80232f6:	2025      	movs	r0, #37	; 0x25
 80232f8:	f000 fd15 	bl	8023d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80232fc:	2025      	movs	r0, #37	; 0x25
 80232fe:	f000 fd2e 	bl	8023d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8023302:	bf00      	nop
 8023304:	3728      	adds	r7, #40	; 0x28
 8023306:	46bd      	mov	sp, r7
 8023308:	bd80      	pop	{r7, pc}
 802330a:	bf00      	nop
 802330c:	40011000 	.word	0x40011000
 8023310:	40023800 	.word	0x40023800
 8023314:	40020400 	.word	0x40020400

08023318 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8023318:	b480      	push	{r7}
 802331a:	b085      	sub	sp, #20
 802331c:	af00      	add	r7, sp, #0
 802331e:	6078      	str	r0, [r7, #4]
 8023320:	ed87 0a00 	vstr	s0, [r7]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	ed93 7a00 	vldr	s14, [r3]
 802332a:	edd7 7a00 	vldr	s15, [r7]
 802332e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	edd3 6a01 	vldr	s13, [r3, #4]
 8023338:	687b      	ldr	r3, [r7, #4]
 802333a:	edd3 7a03 	vldr	s15, [r3, #12]
 802333e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8023342:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	edd3 6a02 	vldr	s13, [r3, #8]
 802334c:	687b      	ldr	r3, [r7, #4]
 802334e:	edd3 7a04 	vldr	s15, [r3, #16]
 8023352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8023356:	ee37 7a27 	vadd.f32	s14, s14, s15
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8023360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023364:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	68da      	ldr	r2, [r3, #12]
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	683a      	ldr	r2, [r7, #0]
 8023374:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	68fa      	ldr	r2, [r7, #12]
 802337a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 802337c:	68fb      	ldr	r3, [r7, #12]
 802337e:	ee07 3a90 	vmov	s15, r3

  }
 8023382:	eeb0 0a67 	vmov.f32	s0, s15
 8023386:	3714      	adds	r7, #20
 8023388:	46bd      	mov	sp, r7
 802338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802338e:	4770      	bx	lr

08023390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023390:	b480      	push	{r7}
 8023392:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8023394:	bf00      	nop
 8023396:	46bd      	mov	sp, r7
 8023398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802339c:	4770      	bx	lr

0802339e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802339e:	b480      	push	{r7}
 80233a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80233a2:	e7fe      	b.n	80233a2 <HardFault_Handler+0x4>

080233a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80233a4:	b480      	push	{r7}
 80233a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80233a8:	e7fe      	b.n	80233a8 <MemManage_Handler+0x4>

080233aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80233aa:	b480      	push	{r7}
 80233ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80233ae:	e7fe      	b.n	80233ae <BusFault_Handler+0x4>

080233b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80233b0:	b480      	push	{r7}
 80233b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80233b4:	e7fe      	b.n	80233b4 <UsageFault_Handler+0x4>

080233b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80233b6:	b480      	push	{r7}
 80233b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80233ba:	bf00      	nop
 80233bc:	46bd      	mov	sp, r7
 80233be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c2:	4770      	bx	lr

080233c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80233c4:	b480      	push	{r7}
 80233c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80233c8:	bf00      	nop
 80233ca:	46bd      	mov	sp, r7
 80233cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233d0:	4770      	bx	lr

080233d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80233d2:	b480      	push	{r7}
 80233d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80233d6:	bf00      	nop
 80233d8:	46bd      	mov	sp, r7
 80233da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233de:	4770      	bx	lr

080233e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80233e0:	b580      	push	{r7, lr}
 80233e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80233e4:	f000 fb5c 	bl	8023aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80233e8:	bf00      	nop
 80233ea:	bd80      	pop	{r7, pc}

080233ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80233ec:	b580      	push	{r7, lr}
 80233ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if((__HAL_GPIO_EXTI_GET_FLAG(ZeroCrossingPin_Pin))	)
 80233f0:	4b13      	ldr	r3, [pc, #76]	; (8023440 <EXTI9_5_IRQHandler+0x54>)
 80233f2:	695b      	ldr	r3, [r3, #20]
 80233f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	d010      	beq.n	802341e <EXTI9_5_IRQHandler+0x32>
	{
		//Test output pin for zero crossing
		HAL_GPIO_TogglePin(GPIOTestPin_GPIO_Port, GPIOTestPin_Pin);
 80233fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8023400:	4810      	ldr	r0, [pc, #64]	; (8023444 <EXTI9_5_IRQHandler+0x58>)
 8023402:	f001 f990 	bl	8024726 <HAL_GPIO_TogglePin>

		//PWM activation of both heater banks
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8023406:	2104      	movs	r1, #4
 8023408:	480f      	ldr	r0, [pc, #60]	; (8023448 <EXTI9_5_IRQHandler+0x5c>)
 802340a:	f002 facf 	bl	80259ac <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 802340e:	2108      	movs	r1, #8
 8023410:	480d      	ldr	r0, [pc, #52]	; (8023448 <EXTI9_5_IRQHandler+0x5c>)
 8023412:	f002 facb 	bl	80259ac <HAL_TIM_PWM_Start>
		PIDFlag=1;
 8023416:	4b0d      	ldr	r3, [pc, #52]	; (802344c <EXTI9_5_IRQHandler+0x60>)
 8023418:	2201      	movs	r2, #1
 802341a:	701a      	strb	r2, [r3, #0]
 802341c:	e00a      	b.n	8023434 <EXTI9_5_IRQHandler+0x48>

	}
	else
	{
		//Do nothing
			FlagBank1=0;
 802341e:	4b0c      	ldr	r3, [pc, #48]	; (8023450 <EXTI9_5_IRQHandler+0x64>)
 8023420:	2200      	movs	r2, #0
 8023422:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8023424:	2104      	movs	r1, #4
 8023426:	4808      	ldr	r0, [pc, #32]	; (8023448 <EXTI9_5_IRQHandler+0x5c>)
 8023428:	f002 fafe 	bl	8025a28 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 802342c:	2108      	movs	r1, #8
 802342e:	4806      	ldr	r0, [pc, #24]	; (8023448 <EXTI9_5_IRQHandler+0x5c>)
 8023430:	f002 fafa 	bl	8025a28 <HAL_TIM_PWM_Stop>
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8023434:	2040      	movs	r0, #64	; 0x40
 8023436:	f001 f991 	bl	802475c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */


  /* USER CODE END EXTI9_5_IRQn 1 */
}
 802343a:	bf00      	nop
 802343c:	bd80      	pop	{r7, pc}
 802343e:	bf00      	nop
 8023440:	40013c00 	.word	0x40013c00
 8023444:	40020c00 	.word	0x40020c00
 8023448:	20000730 	.word	0x20000730
 802344c:	2000092c 	.word	0x2000092c
 8023450:	20001952 	.word	0x20001952

08023454 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8023454:	b580      	push	{r7, lr}
 8023456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8023458:	4802      	ldr	r0, [pc, #8]	; (8023464 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 802345a:	f002 fbcf 	bl	8025bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 802345e:	bf00      	nop
 8023460:	bd80      	pop	{r7, pc}
 8023462:	bf00      	nop
 8023464:	200007bc 	.word	0x200007bc

08023468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8023468:	b580      	push	{r7, lr}
 802346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	counter3++;
 802346c:	4ba6      	ldr	r3, [pc, #664]	; (8023708 <TIM2_IRQHandler+0x2a0>)
 802346e:	681b      	ldr	r3, [r3, #0]
 8023470:	3301      	adds	r3, #1
 8023472:	4aa5      	ldr	r2, [pc, #660]	; (8023708 <TIM2_IRQHandler+0x2a0>)
 8023474:	6013      	str	r3, [r2, #0]
	counter4++;
 8023476:	4ba5      	ldr	r3, [pc, #660]	; (802370c <TIM2_IRQHandler+0x2a4>)
 8023478:	681b      	ldr	r3, [r3, #0]
 802347a:	3301      	adds	r3, #1
 802347c:	4aa3      	ldr	r2, [pc, #652]	; (802370c <TIM2_IRQHandler+0x2a4>)
 802347e:	6013      	str	r3, [r2, #0]
	counter5++;
 8023480:	4ba3      	ldr	r3, [pc, #652]	; (8023710 <TIM2_IRQHandler+0x2a8>)
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	3301      	adds	r3, #1
 8023486:	4aa2      	ldr	r2, [pc, #648]	; (8023710 <TIM2_IRQHandler+0x2a8>)
 8023488:	6013      	str	r3, [r2, #0]
	rate_counter++;
 802348a:	4ba2      	ldr	r3, [pc, #648]	; (8023714 <TIM2_IRQHandler+0x2ac>)
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	3301      	adds	r3, #1
 8023490:	4aa0      	ldr	r2, [pc, #640]	; (8023714 <TIM2_IRQHandler+0x2ac>)
 8023492:	6013      	str	r3, [r2, #0]




	if(200==counter3)
 8023494:	4b9c      	ldr	r3, [pc, #624]	; (8023708 <TIM2_IRQHandler+0x2a0>)
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	2bc8      	cmp	r3, #200	; 0xc8
 802349a:	d133      	bne.n	8023504 <TIM2_IRQHandler+0x9c>
	{
		counter3=0;
 802349c:	4b9a      	ldr	r3, [pc, #616]	; (8023708 <TIM2_IRQHandler+0x2a0>)
 802349e:	2200      	movs	r2, #0
 80234a0:	601a      	str	r2, [r3, #0]
		readTemperatureData(p_temperature);
 80234a2:	4b9d      	ldr	r3, [pc, #628]	; (8023718 <TIM2_IRQHandler+0x2b0>)
 80234a4:	681b      	ldr	r3, [r3, #0]
 80234a6:	4618      	mov	r0, r3
 80234a8:	f7ff f900 	bl	80226ac <readTemperatureData>
		if(avg_temp==-100)
 80234ac:	4b9b      	ldr	r3, [pc, #620]	; (802371c <TIM2_IRQHandler+0x2b4>)
 80234ae:	edd3 7a00 	vldr	s15, [r3]
 80234b2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8023720 <TIM2_IRQHandler+0x2b8>
 80234b6:	eef4 7a47 	vcmp.f32	s15, s14
 80234ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234be:	d104      	bne.n	80234ca <TIM2_IRQHandler+0x62>
		{
			avg_temp=(*p_temperature);
 80234c0:	4b95      	ldr	r3, [pc, #596]	; (8023718 <TIM2_IRQHandler+0x2b0>)
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	681b      	ldr	r3, [r3, #0]
 80234c6:	4a95      	ldr	r2, [pc, #596]	; (802371c <TIM2_IRQHandler+0x2b4>)
 80234c8:	6013      	str	r3, [r2, #0]
		}
		else
		{

		}
		avg_temp=alpha*(*p_temperature)+(1-alpha)*avg_temp;
 80234ca:	4b93      	ldr	r3, [pc, #588]	; (8023718 <TIM2_IRQHandler+0x2b0>)
 80234cc:	681b      	ldr	r3, [r3, #0]
 80234ce:	edd3 7a00 	vldr	s15, [r3]
 80234d2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8023724 <TIM2_IRQHandler+0x2bc>
 80234d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80234da:	eddf 7a92 	vldr	s15, [pc, #584]	; 8023724 <TIM2_IRQHandler+0x2bc>
 80234de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80234e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80234e6:	4b8d      	ldr	r3, [pc, #564]	; (802371c <TIM2_IRQHandler+0x2b4>)
 80234e8:	edd3 7a00 	vldr	s15, [r3]
 80234ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80234f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80234f4:	4b89      	ldr	r3, [pc, #548]	; (802371c <TIM2_IRQHandler+0x2b4>)
 80234f6:	edc3 7a00 	vstr	s15, [r3]
		(*p_temperature)=avg_temp;
 80234fa:	4b87      	ldr	r3, [pc, #540]	; (8023718 <TIM2_IRQHandler+0x2b0>)
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	4a87      	ldr	r2, [pc, #540]	; (802371c <TIM2_IRQHandler+0x2b4>)
 8023500:	6812      	ldr	r2, [r2, #0]
 8023502:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
	if(500==counter5)
 8023504:	4b82      	ldr	r3, [pc, #520]	; (8023710 <TIM2_IRQHandler+0x2a8>)
 8023506:	681b      	ldr	r3, [r3, #0]
 8023508:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802350c:	f040 8146 	bne.w	802379c <TIM2_IRQHandler+0x334>
	{
		if(1==ReflowEnable)
 8023510:	4b85      	ldr	r3, [pc, #532]	; (8023728 <TIM2_IRQHandler+0x2c0>)
 8023512:	781b      	ldrb	r3, [r3, #0]
 8023514:	2b01      	cmp	r3, #1
 8023516:	f040 8135 	bne.w	8023784 <TIM2_IRQHandler+0x31c>
		{
			//TODO need to perform modification of PID controller in order to get half power
			//Error
			//pid_error =temperature  -(float32_t)ReflowCurve[ReflowIndex];
			//Error for power limitation
			pid_error =(float32_t)ReflowCurve[ReflowIndex]-temperature;
 802351a:	4b84      	ldr	r3, [pc, #528]	; (802372c <TIM2_IRQHandler+0x2c4>)
 802351c:	881b      	ldrh	r3, [r3, #0]
 802351e:	461a      	mov	r2, r3
 8023520:	4b83      	ldr	r3, [pc, #524]	; (8023730 <TIM2_IRQHandler+0x2c8>)
 8023522:	5c9b      	ldrb	r3, [r3, r2]
 8023524:	ee07 3a90 	vmov	s15, r3
 8023528:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802352c:	4b81      	ldr	r3, [pc, #516]	; (8023734 <TIM2_IRQHandler+0x2cc>)
 802352e:	edd3 7a00 	vldr	s15, [r3]
 8023532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023536:	4b80      	ldr	r3, [pc, #512]	; (8023738 <TIM2_IRQHandler+0x2d0>)
 8023538:	edc3 7a00 	vstr	s15, [r3]
			//Correction
			PidCorr = arm_pid_f32(&PID, pid_error);
 802353c:	4b7e      	ldr	r3, [pc, #504]	; (8023738 <TIM2_IRQHandler+0x2d0>)
 802353e:	edd3 7a00 	vldr	s15, [r3]
 8023542:	eeb0 0a67 	vmov.f32	s0, s15
 8023546:	487d      	ldr	r0, [pc, #500]	; (802373c <TIM2_IRQHandler+0x2d4>)
 8023548:	f7ff fee6 	bl	8023318 <arm_pid_f32>
 802354c:	eef0 7a40 	vmov.f32	s15, s0
 8023550:	4b7b      	ldr	r3, [pc, #492]	; (8023740 <TIM2_IRQHandler+0x2d8>)
 8023552:	edc3 7a00 	vstr	s15, [r3]
			PidCorrLim=(uint32_t)PidCorr;
 8023556:	4b7a      	ldr	r3, [pc, #488]	; (8023740 <TIM2_IRQHandler+0x2d8>)
 8023558:	edd3 7a00 	vldr	s15, [r3]
 802355c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023560:	ee17 2a90 	vmov	r2, s15
 8023564:	4b77      	ldr	r3, [pc, #476]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 8023566:	601a      	str	r2, [r3, #0]
			//Correction limits bank1-set value
			if (PidCorrLim > 750)
 8023568:	4b76      	ldr	r3, [pc, #472]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023570:	4293      	cmp	r3, r2
 8023572:	d903      	bls.n	802357c <TIM2_IRQHandler+0x114>
			{
				PIDBank1 = 750;
 8023574:	4b74      	ldr	r3, [pc, #464]	; (8023748 <TIM2_IRQHandler+0x2e0>)
 8023576:	f240 22ee 	movw	r2, #750	; 0x2ee
 802357a:	801a      	strh	r2, [r3, #0]
			else
			{

			}
			//Correction limits bank2-set value
			if(PidCorrLim>750)
 802357c:	4b71      	ldr	r3, [pc, #452]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023584:	4293      	cmp	r3, r2
 8023586:	d903      	bls.n	8023590 <TIM2_IRQHandler+0x128>
			{
				PIDBank2 =750;
 8023588:	4b70      	ldr	r3, [pc, #448]	; (802374c <TIM2_IRQHandler+0x2e4>)
 802358a:	f240 22ee 	movw	r2, #750	; 0x2ee
 802358e:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (450>=PidCorrLim)	)
 8023590:	4b6c      	ldr	r3, [pc, #432]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8023598:	d809      	bhi.n	80235ae <TIM2_IRQHandler+0x146>
			{
				PIDBank1 = PidCorrLim;
 802359a:	4b6a      	ldr	r3, [pc, #424]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 802359c:	681b      	ldr	r3, [r3, #0]
 802359e:	b29a      	uxth	r2, r3
 80235a0:	4b69      	ldr	r3, [pc, #420]	; (8023748 <TIM2_IRQHandler+0x2e0>)
 80235a2:	801a      	strh	r2, [r3, #0]
				PIDBank2 = PidCorrLim;
 80235a4:	4b67      	ldr	r3, [pc, #412]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	b29a      	uxth	r2, r3
 80235aa:	4b68      	ldr	r3, [pc, #416]	; (802374c <TIM2_IRQHandler+0x2e4>)
 80235ac:	801a      	strh	r2, [r3, #0]
			}
			else
			{

			}
			if( (0<=PidCorrLim) && (750>=PidCorrLim)	)
 80235ae:	4b65      	ldr	r3, [pc, #404]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 80235b0:	681b      	ldr	r3, [r3, #0]
 80235b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80235b6:	4293      	cmp	r3, r2
 80235b8:	d804      	bhi.n	80235c4 <TIM2_IRQHandler+0x15c>
			{
				PIDBank1 = PidCorrLim;
 80235ba:	4b62      	ldr	r3, [pc, #392]	; (8023744 <TIM2_IRQHandler+0x2dc>)
 80235bc:	681b      	ldr	r3, [r3, #0]
 80235be:	b29a      	uxth	r2, r3
 80235c0:	4b61      	ldr	r3, [pc, #388]	; (8023748 <TIM2_IRQHandler+0x2e0>)
 80235c2:	801a      	strh	r2, [r3, #0]
			}
			//P Control without power limitation
			//TIM3->CCR2=999-PIDBank1;
			//TIM3->CCR3=450-PIDBank2;
			//P Control with power limitation
			TIM3->CCR2=PIDBank1;
 80235c4:	4b60      	ldr	r3, [pc, #384]	; (8023748 <TIM2_IRQHandler+0x2e0>)
 80235c6:	881b      	ldrh	r3, [r3, #0]
 80235c8:	b29a      	uxth	r2, r3
 80235ca:	4b61      	ldr	r3, [pc, #388]	; (8023750 <TIM2_IRQHandler+0x2e8>)
 80235cc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3=PIDBank2;
 80235ce:	4b5f      	ldr	r3, [pc, #380]	; (802374c <TIM2_IRQHandler+0x2e4>)
 80235d0:	881b      	ldrh	r3, [r3, #0]
 80235d2:	b29a      	uxth	r2, r3
 80235d4:	4b5e      	ldr	r3, [pc, #376]	; (8023750 <TIM2_IRQHandler+0x2e8>)
 80235d6:	63da      	str	r2, [r3, #60]	; 0x3c
			if((TIM3->CCR2>0) || (TIM3->CCR3>0))
 80235d8:	4b5d      	ldr	r3, [pc, #372]	; (8023750 <TIM2_IRQHandler+0x2e8>)
 80235da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235dc:	2b00      	cmp	r3, #0
 80235de:	d103      	bne.n	80235e8 <TIM2_IRQHandler+0x180>
 80235e0:	4b5b      	ldr	r3, [pc, #364]	; (8023750 <TIM2_IRQHandler+0x2e8>)
 80235e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	d006      	beq.n	80235f6 <TIM2_IRQHandler+0x18e>
			{
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_SET);
 80235e8:	2201      	movs	r2, #1
 80235ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80235ee:	4859      	ldr	r0, [pc, #356]	; (8023754 <TIM2_IRQHandler+0x2ec>)
 80235f0:	f001 f880 	bl	80246f4 <HAL_GPIO_WritePin>
 80235f4:	e005      	b.n	8023602 <TIM2_IRQHandler+0x19a>
			}
			else
			{
				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 80235f6:	2200      	movs	r2, #0
 80235f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80235fc:	4855      	ldr	r0, [pc, #340]	; (8023754 <TIM2_IRQHandler+0x2ec>)
 80235fe:	f001 f879 	bl	80246f4 <HAL_GPIO_WritePin>
			}

			if(	(ReflowIndex >= (PhaseIndex[0]+10)	)	&&	(ReflowIndex < PhaseIndex[1])	 )
 8023602:	4b55      	ldr	r3, [pc, #340]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023604:	881b      	ldrh	r3, [r3, #0]
 8023606:	3309      	adds	r3, #9
 8023608:	4a48      	ldr	r2, [pc, #288]	; (802372c <TIM2_IRQHandler+0x2c4>)
 802360a:	8812      	ldrh	r2, [r2, #0]
 802360c:	4293      	cmp	r3, r2
 802360e:	da0f      	bge.n	8023630 <TIM2_IRQHandler+0x1c8>
 8023610:	4b51      	ldr	r3, [pc, #324]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023612:	885a      	ldrh	r2, [r3, #2]
 8023614:	4b45      	ldr	r3, [pc, #276]	; (802372c <TIM2_IRQHandler+0x2c4>)
 8023616:	881b      	ldrh	r3, [r3, #0]
 8023618:	429a      	cmp	r2, r3
 802361a:	d909      	bls.n	8023630 <TIM2_IRQHandler+0x1c8>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 802361c:	494f      	ldr	r1, [pc, #316]	; (802375c <TIM2_IRQHandler+0x2f4>)
 802361e:	4850      	ldr	r0, [pc, #320]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 8023620:	f004 fd3e 	bl	80280a0 <siprintf>
				Flags.initComplete=TRUE;
 8023624:	4b4f      	ldr	r3, [pc, #316]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 8023626:	2201      	movs	r2, #1
 8023628:	705a      	strb	r2, [r3, #1]
				State=Preheat;
 802362a:	4b4f      	ldr	r3, [pc, #316]	; (8023768 <TIM2_IRQHandler+0x300>)
 802362c:	2201      	movs	r2, #1
 802362e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[1])
 8023630:	4b49      	ldr	r3, [pc, #292]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023632:	885a      	ldrh	r2, [r3, #2]
 8023634:	4b3d      	ldr	r3, [pc, #244]	; (802372c <TIM2_IRQHandler+0x2c4>)
 8023636:	881b      	ldrh	r3, [r3, #0]
 8023638:	429a      	cmp	r2, r3
 802363a:	d109      	bne.n	8023650 <TIM2_IRQHandler+0x1e8>
			{
				sprintf(ConsoleMSG,"SOAK");
 802363c:	494b      	ldr	r1, [pc, #300]	; (802376c <TIM2_IRQHandler+0x304>)
 802363e:	4848      	ldr	r0, [pc, #288]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 8023640:	f004 fd2e 	bl	80280a0 <siprintf>
				Flags.preheatComplete=TRUE;
 8023644:	4b47      	ldr	r3, [pc, #284]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 8023646:	2201      	movs	r2, #1
 8023648:	709a      	strb	r2, [r3, #2]
				State=Soak;
 802364a:	4b47      	ldr	r3, [pc, #284]	; (8023768 <TIM2_IRQHandler+0x300>)
 802364c:	2202      	movs	r2, #2
 802364e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[2])
 8023650:	4b41      	ldr	r3, [pc, #260]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023652:	889a      	ldrh	r2, [r3, #4]
 8023654:	4b35      	ldr	r3, [pc, #212]	; (802372c <TIM2_IRQHandler+0x2c4>)
 8023656:	881b      	ldrh	r3, [r3, #0]
 8023658:	429a      	cmp	r2, r3
 802365a:	d10c      	bne.n	8023676 <TIM2_IRQHandler+0x20e>
			{
				sprintf(ConsoleMSG,"HEAT UP");
 802365c:	493f      	ldr	r1, [pc, #252]	; (802375c <TIM2_IRQHandler+0x2f4>)
 802365e:	4840      	ldr	r0, [pc, #256]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 8023660:	f004 fd1e 	bl	80280a0 <siprintf>
				Flags.preheatComplete=FALSE;
 8023664:	4b3f      	ldr	r3, [pc, #252]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 8023666:	2200      	movs	r2, #0
 8023668:	709a      	strb	r2, [r3, #2]
				Flags.soakComplete=TRUE;
 802366a:	4b3e      	ldr	r3, [pc, #248]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 802366c:	2201      	movs	r2, #1
 802366e:	70da      	strb	r2, [r3, #3]
				State=Preheat;
 8023670:	4b3d      	ldr	r3, [pc, #244]	; (8023768 <TIM2_IRQHandler+0x300>)
 8023672:	2201      	movs	r2, #1
 8023674:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[3])
 8023676:	4b38      	ldr	r3, [pc, #224]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023678:	88da      	ldrh	r2, [r3, #6]
 802367a:	4b2c      	ldr	r3, [pc, #176]	; (802372c <TIM2_IRQHandler+0x2c4>)
 802367c:	881b      	ldrh	r3, [r3, #0]
 802367e:	429a      	cmp	r2, r3
 8023680:	d109      	bne.n	8023696 <TIM2_IRQHandler+0x22e>
			{
				sprintf(ConsoleMSG,"REFLOW");
 8023682:	493b      	ldr	r1, [pc, #236]	; (8023770 <TIM2_IRQHandler+0x308>)
 8023684:	4836      	ldr	r0, [pc, #216]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 8023686:	f004 fd0b 	bl	80280a0 <siprintf>
				Flags.preheatComplete=TRUE;
 802368a:	4b36      	ldr	r3, [pc, #216]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 802368c:	2201      	movs	r2, #1
 802368e:	709a      	strb	r2, [r3, #2]
				State=Reflow;
 8023690:	4b35      	ldr	r3, [pc, #212]	; (8023768 <TIM2_IRQHandler+0x300>)
 8023692:	2203      	movs	r2, #3
 8023694:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if(ReflowIndex == PhaseIndex[4])
 8023696:	4b30      	ldr	r3, [pc, #192]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 8023698:	891a      	ldrh	r2, [r3, #8]
 802369a:	4b24      	ldr	r3, [pc, #144]	; (802372c <TIM2_IRQHandler+0x2c4>)
 802369c:	881b      	ldrh	r3, [r3, #0]
 802369e:	429a      	cmp	r2, r3
 80236a0:	d11a      	bne.n	80236d8 <TIM2_IRQHandler+0x270>
			{
				HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80236a2:	2017      	movs	r0, #23
 80236a4:	f000 fb69 	bl	8023d7a <HAL_NVIC_DisableIRQ>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80236a8:	2108      	movs	r1, #8
 80236aa:	4832      	ldr	r0, [pc, #200]	; (8023774 <TIM2_IRQHandler+0x30c>)
 80236ac:	f002 f9bc 	bl	8025a28 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80236b0:	2104      	movs	r1, #4
 80236b2:	4830      	ldr	r0, [pc, #192]	; (8023774 <TIM2_IRQHandler+0x30c>)
 80236b4:	f002 f9b8 	bl	8025a28 <HAL_TIM_PWM_Stop>

				HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin,GPIO_PIN_RESET);
 80236b8:	2200      	movs	r2, #0
 80236ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80236be:	4825      	ldr	r0, [pc, #148]	; (8023754 <TIM2_IRQHandler+0x2ec>)
 80236c0:	f001 f818 	bl	80246f4 <HAL_GPIO_WritePin>
				sprintf(ConsoleMSG,"COOL DOWN");
 80236c4:	492c      	ldr	r1, [pc, #176]	; (8023778 <TIM2_IRQHandler+0x310>)
 80236c6:	4826      	ldr	r0, [pc, #152]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 80236c8:	f004 fcea 	bl	80280a0 <siprintf>
				Flags.reflowComplete=TRUE;
 80236cc:	4b25      	ldr	r3, [pc, #148]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 80236ce:	2201      	movs	r2, #1
 80236d0:	711a      	strb	r2, [r3, #4]
				State=Cooldown;
 80236d2:	4b25      	ldr	r3, [pc, #148]	; (8023768 <TIM2_IRQHandler+0x300>)
 80236d4:	2204      	movs	r2, #4
 80236d6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				//do nothing.
			}
			if (PhaseIndex[5]==ReflowIndex)
 80236d8:	4b1f      	ldr	r3, [pc, #124]	; (8023758 <TIM2_IRQHandler+0x2f0>)
 80236da:	895a      	ldrh	r2, [r3, #10]
 80236dc:	4b13      	ldr	r3, [pc, #76]	; (802372c <TIM2_IRQHandler+0x2c4>)
 80236de:	881b      	ldrh	r3, [r3, #0]
 80236e0:	429a      	cmp	r2, r3
 80236e2:	d152      	bne.n	802378a <TIM2_IRQHandler+0x322>
			{
				sprintf(ConsoleMSG,"FINISHED");
 80236e4:	4925      	ldr	r1, [pc, #148]	; (802377c <TIM2_IRQHandler+0x314>)
 80236e6:	481e      	ldr	r0, [pc, #120]	; (8023760 <TIM2_IRQHandler+0x2f8>)
 80236e8:	f004 fcda 	bl	80280a0 <siprintf>
				Flags.cooldownComplete=TRUE;
 80236ec:	4b1d      	ldr	r3, [pc, #116]	; (8023764 <TIM2_IRQHandler+0x2fc>)
 80236ee:	2201      	movs	r2, #1
 80236f0:	715a      	strb	r2, [r3, #5]
				State=Finish;
 80236f2:	4b1d      	ldr	r3, [pc, #116]	; (8023768 <TIM2_IRQHandler+0x300>)
 80236f4:	2205      	movs	r2, #5
 80236f6:	701a      	strb	r2, [r3, #0]
				ReflowEnable = 0;
 80236f8:	4b0b      	ldr	r3, [pc, #44]	; (8023728 <TIM2_IRQHandler+0x2c0>)
 80236fa:	2200      	movs	r2, #0
 80236fc:	701a      	strb	r2, [r3, #0]
				PIDFlag=0;
 80236fe:	4b20      	ldr	r3, [pc, #128]	; (8023780 <TIM2_IRQHandler+0x318>)
 8023700:	2200      	movs	r2, #0
 8023702:	701a      	strb	r2, [r3, #0]
 8023704:	e041      	b.n	802378a <TIM2_IRQHandler+0x322>
 8023706:	bf00      	nop
 8023708:	200006c8 	.word	0x200006c8
 802370c:	200006cc 	.word	0x200006cc
 8023710:	200006d0 	.word	0x200006d0
 8023714:	2000193c 	.word	0x2000193c
 8023718:	20000460 	.word	0x20000460
 802371c:	2000045c 	.word	0x2000045c
 8023720:	c2c80000 	.word	0xc2c80000
 8023724:	3dcccccd 	.word	0x3dcccccd
 8023728:	2000067c 	.word	0x2000067c
 802372c:	200006d4 	.word	0x200006d4
 8023730:	20000954 	.word	0x20000954
 8023734:	20000694 	.word	0x20000694
 8023738:	20001944 	.word	0x20001944
 802373c:	20000860 	.word	0x20000860
 8023740:	20001940 	.word	0x20001940
 8023744:	20001934 	.word	0x20001934
 8023748:	20001950 	.word	0x20001950
 802374c:	20001954 	.word	0x20001954
 8023750:	40000400 	.word	0x40000400
 8023754:	40020c00 	.word	0x40020c00
 8023758:	20000688 	.word	0x20000688
 802375c:	0802bc98 	.word	0x0802bc98
 8023760:	20000930 	.word	0x20000930
 8023764:	20000948 	.word	0x20000948
 8023768:	20000898 	.word	0x20000898
 802376c:	0802bca0 	.word	0x0802bca0
 8023770:	0802bca8 	.word	0x0802bca8
 8023774:	20000730 	.word	0x20000730
 8023778:	0802bcb0 	.word	0x0802bcb0
 802377c:	0802bcbc 	.word	0x0802bcbc
 8023780:	2000092c 	.word	0x2000092c
			}

		}
		else
		{
			ReflowIndex = 0;
 8023784:	4b08      	ldr	r3, [pc, #32]	; (80237a8 <TIM2_IRQHandler+0x340>)
 8023786:	2200      	movs	r2, #0
 8023788:	801a      	strh	r2, [r3, #0]
		}

		counter5=0;
 802378a:	4b08      	ldr	r3, [pc, #32]	; (80237ac <TIM2_IRQHandler+0x344>)
 802378c:	2200      	movs	r2, #0
 802378e:	601a      	str	r2, [r3, #0]
		ReflowIndex++;
 8023790:	4b05      	ldr	r3, [pc, #20]	; (80237a8 <TIM2_IRQHandler+0x340>)
 8023792:	881b      	ldrh	r3, [r3, #0]
 8023794:	3301      	adds	r3, #1
 8023796:	b29a      	uxth	r2, r3
 8023798:	4b03      	ldr	r3, [pc, #12]	; (80237a8 <TIM2_IRQHandler+0x340>)
 802379a:	801a      	strh	r2, [r3, #0]

	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802379c:	4804      	ldr	r0, [pc, #16]	; (80237b0 <TIM2_IRQHandler+0x348>)
 802379e:	f002 fa2d 	bl	8025bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80237a2:	bf00      	nop
 80237a4:	bd80      	pop	{r7, pc}
 80237a6:	bf00      	nop
 80237a8:	200006d4 	.word	0x200006d4
 80237ac:	200006d0 	.word	0x200006d0
 80237b0:	200018f4 	.word	0x200018f4

080237b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80237b4:	b580      	push	{r7, lr}
 80237b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80237b8:	4802      	ldr	r0, [pc, #8]	; (80237c4 <USART1_IRQHandler+0x10>)
 80237ba:	f003 f9b5 	bl	8026b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80237be:	bf00      	nop
 80237c0:	bd80      	pop	{r7, pc}
 80237c2:	bf00      	nop
 80237c4:	2000089c 	.word	0x2000089c

080237c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80237c8:	b580      	push	{r7, lr}
 80237ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80237cc:	4802      	ldr	r0, [pc, #8]	; (80237d8 <TIM5_IRQHandler+0x10>)
 80237ce:	f002 fa15 	bl	8025bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80237d2:	bf00      	nop
 80237d4:	bd80      	pop	{r7, pc}
 80237d6:	bf00      	nop
 80237d8:	200006f0 	.word	0x200006f0

080237dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80237dc:	b480      	push	{r7}
 80237de:	b083      	sub	sp, #12
 80237e0:	af00      	add	r7, sp, #0
 80237e2:	4603      	mov	r3, r0
 80237e4:	80fb      	strh	r3, [r7, #6]

}
 80237e6:	bf00      	nop
 80237e8:	370c      	adds	r7, #12
 80237ea:	46bd      	mov	sp, r7
 80237ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237f0:	4770      	bx	lr

080237f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80237f2:	b480      	push	{r7}
 80237f4:	af00      	add	r7, sp, #0
	return 1;
 80237f6:	2301      	movs	r3, #1
}
 80237f8:	4618      	mov	r0, r3
 80237fa:	46bd      	mov	sp, r7
 80237fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023800:	4770      	bx	lr

08023802 <_kill>:

int _kill(int pid, int sig)
{
 8023802:	b580      	push	{r7, lr}
 8023804:	b082      	sub	sp, #8
 8023806:	af00      	add	r7, sp, #0
 8023808:	6078      	str	r0, [r7, #4]
 802380a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802380c:	f003 ffac 	bl	8027768 <__errno>
 8023810:	4603      	mov	r3, r0
 8023812:	2216      	movs	r2, #22
 8023814:	601a      	str	r2, [r3, #0]
	return -1;
 8023816:	f04f 33ff 	mov.w	r3, #4294967295
}
 802381a:	4618      	mov	r0, r3
 802381c:	3708      	adds	r7, #8
 802381e:	46bd      	mov	sp, r7
 8023820:	bd80      	pop	{r7, pc}

08023822 <_exit>:

void _exit (int status)
{
 8023822:	b580      	push	{r7, lr}
 8023824:	b082      	sub	sp, #8
 8023826:	af00      	add	r7, sp, #0
 8023828:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802382a:	f04f 31ff 	mov.w	r1, #4294967295
 802382e:	6878      	ldr	r0, [r7, #4]
 8023830:	f7ff ffe7 	bl	8023802 <_kill>
	while (1) {}		/* Make sure we hang here */
 8023834:	e7fe      	b.n	8023834 <_exit+0x12>

08023836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8023836:	b580      	push	{r7, lr}
 8023838:	b086      	sub	sp, #24
 802383a:	af00      	add	r7, sp, #0
 802383c:	60f8      	str	r0, [r7, #12]
 802383e:	60b9      	str	r1, [r7, #8]
 8023840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023842:	2300      	movs	r3, #0
 8023844:	617b      	str	r3, [r7, #20]
 8023846:	e00a      	b.n	802385e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8023848:	f3af 8000 	nop.w
 802384c:	4601      	mov	r1, r0
 802384e:	68bb      	ldr	r3, [r7, #8]
 8023850:	1c5a      	adds	r2, r3, #1
 8023852:	60ba      	str	r2, [r7, #8]
 8023854:	b2ca      	uxtb	r2, r1
 8023856:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023858:	697b      	ldr	r3, [r7, #20]
 802385a:	3301      	adds	r3, #1
 802385c:	617b      	str	r3, [r7, #20]
 802385e:	697a      	ldr	r2, [r7, #20]
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	429a      	cmp	r2, r3
 8023864:	dbf0      	blt.n	8023848 <_read+0x12>
	}

return len;
 8023866:	687b      	ldr	r3, [r7, #4]
}
 8023868:	4618      	mov	r0, r3
 802386a:	3718      	adds	r7, #24
 802386c:	46bd      	mov	sp, r7
 802386e:	bd80      	pop	{r7, pc}

08023870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8023870:	b580      	push	{r7, lr}
 8023872:	b086      	sub	sp, #24
 8023874:	af00      	add	r7, sp, #0
 8023876:	60f8      	str	r0, [r7, #12]
 8023878:	60b9      	str	r1, [r7, #8]
 802387a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802387c:	2300      	movs	r3, #0
 802387e:	617b      	str	r3, [r7, #20]
 8023880:	e009      	b.n	8023896 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8023882:	68bb      	ldr	r3, [r7, #8]
 8023884:	1c5a      	adds	r2, r3, #1
 8023886:	60ba      	str	r2, [r7, #8]
 8023888:	781b      	ldrb	r3, [r3, #0]
 802388a:	4618      	mov	r0, r3
 802388c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023890:	697b      	ldr	r3, [r7, #20]
 8023892:	3301      	adds	r3, #1
 8023894:	617b      	str	r3, [r7, #20]
 8023896:	697a      	ldr	r2, [r7, #20]
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	429a      	cmp	r2, r3
 802389c:	dbf1      	blt.n	8023882 <_write+0x12>
	}
	return len;
 802389e:	687b      	ldr	r3, [r7, #4]
}
 80238a0:	4618      	mov	r0, r3
 80238a2:	3718      	adds	r7, #24
 80238a4:	46bd      	mov	sp, r7
 80238a6:	bd80      	pop	{r7, pc}

080238a8 <_close>:

int _close(int file)
{
 80238a8:	b480      	push	{r7}
 80238aa:	b083      	sub	sp, #12
 80238ac:	af00      	add	r7, sp, #0
 80238ae:	6078      	str	r0, [r7, #4]
	return -1;
 80238b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80238b4:	4618      	mov	r0, r3
 80238b6:	370c      	adds	r7, #12
 80238b8:	46bd      	mov	sp, r7
 80238ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238be:	4770      	bx	lr

080238c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80238c0:	b480      	push	{r7}
 80238c2:	b083      	sub	sp, #12
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	6078      	str	r0, [r7, #4]
 80238c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80238ca:	683b      	ldr	r3, [r7, #0]
 80238cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80238d0:	605a      	str	r2, [r3, #4]
	return 0;
 80238d2:	2300      	movs	r3, #0
}
 80238d4:	4618      	mov	r0, r3
 80238d6:	370c      	adds	r7, #12
 80238d8:	46bd      	mov	sp, r7
 80238da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238de:	4770      	bx	lr

080238e0 <_isatty>:

int _isatty(int file)
{
 80238e0:	b480      	push	{r7}
 80238e2:	b083      	sub	sp, #12
 80238e4:	af00      	add	r7, sp, #0
 80238e6:	6078      	str	r0, [r7, #4]
	return 1;
 80238e8:	2301      	movs	r3, #1
}
 80238ea:	4618      	mov	r0, r3
 80238ec:	370c      	adds	r7, #12
 80238ee:	46bd      	mov	sp, r7
 80238f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238f4:	4770      	bx	lr

080238f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80238f6:	b480      	push	{r7}
 80238f8:	b085      	sub	sp, #20
 80238fa:	af00      	add	r7, sp, #0
 80238fc:	60f8      	str	r0, [r7, #12]
 80238fe:	60b9      	str	r1, [r7, #8]
 8023900:	607a      	str	r2, [r7, #4]
	return 0;
 8023902:	2300      	movs	r3, #0
}
 8023904:	4618      	mov	r0, r3
 8023906:	3714      	adds	r7, #20
 8023908:	46bd      	mov	sp, r7
 802390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390e:	4770      	bx	lr

08023910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023910:	b580      	push	{r7, lr}
 8023912:	b086      	sub	sp, #24
 8023914:	af00      	add	r7, sp, #0
 8023916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8023918:	4a14      	ldr	r2, [pc, #80]	; (802396c <_sbrk+0x5c>)
 802391a:	4b15      	ldr	r3, [pc, #84]	; (8023970 <_sbrk+0x60>)
 802391c:	1ad3      	subs	r3, r2, r3
 802391e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8023920:	697b      	ldr	r3, [r7, #20]
 8023922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8023924:	4b13      	ldr	r3, [pc, #76]	; (8023974 <_sbrk+0x64>)
 8023926:	681b      	ldr	r3, [r3, #0]
 8023928:	2b00      	cmp	r3, #0
 802392a:	d102      	bne.n	8023932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802392c:	4b11      	ldr	r3, [pc, #68]	; (8023974 <_sbrk+0x64>)
 802392e:	4a12      	ldr	r2, [pc, #72]	; (8023978 <_sbrk+0x68>)
 8023930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8023932:	4b10      	ldr	r3, [pc, #64]	; (8023974 <_sbrk+0x64>)
 8023934:	681a      	ldr	r2, [r3, #0]
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	4413      	add	r3, r2
 802393a:	693a      	ldr	r2, [r7, #16]
 802393c:	429a      	cmp	r2, r3
 802393e:	d207      	bcs.n	8023950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8023940:	f003 ff12 	bl	8027768 <__errno>
 8023944:	4603      	mov	r3, r0
 8023946:	220c      	movs	r2, #12
 8023948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802394a:	f04f 33ff 	mov.w	r3, #4294967295
 802394e:	e009      	b.n	8023964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8023950:	4b08      	ldr	r3, [pc, #32]	; (8023974 <_sbrk+0x64>)
 8023952:	681b      	ldr	r3, [r3, #0]
 8023954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8023956:	4b07      	ldr	r3, [pc, #28]	; (8023974 <_sbrk+0x64>)
 8023958:	681a      	ldr	r2, [r3, #0]
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	4413      	add	r3, r2
 802395e:	4a05      	ldr	r2, [pc, #20]	; (8023974 <_sbrk+0x64>)
 8023960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8023962:	68fb      	ldr	r3, [r7, #12]
}
 8023964:	4618      	mov	r0, r3
 8023966:	3718      	adds	r7, #24
 8023968:	46bd      	mov	sp, r7
 802396a:	bd80      	pop	{r7, pc}
 802396c:	20020000 	.word	0x20020000
 8023970:	00000400 	.word	0x00000400
 8023974:	200006d8 	.word	0x200006d8
 8023978:	20001990 	.word	0x20001990

0802397c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802397c:	b480      	push	{r7}
 802397e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8023980:	4b07      	ldr	r3, [pc, #28]	; (80239a0 <SystemInit+0x24>)
 8023982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023986:	4a06      	ldr	r2, [pc, #24]	; (80239a0 <SystemInit+0x24>)
 8023988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802398c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023990:	4b03      	ldr	r3, [pc, #12]	; (80239a0 <SystemInit+0x24>)
 8023992:	4a04      	ldr	r2, [pc, #16]	; (80239a4 <SystemInit+0x28>)
 8023994:	609a      	str	r2, [r3, #8]
#endif
}
 8023996:	bf00      	nop
 8023998:	46bd      	mov	sp, r7
 802399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802399e:	4770      	bx	lr
 80239a0:	e000ed00 	.word	0xe000ed00
 80239a4:	08020000 	.word	0x08020000

080239a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80239a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80239e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80239ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80239ae:	e003      	b.n	80239b8 <LoopCopyDataInit>

080239b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80239b0:	4b0c      	ldr	r3, [pc, #48]	; (80239e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80239b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80239b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80239b6:	3104      	adds	r1, #4

080239b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80239b8:	480b      	ldr	r0, [pc, #44]	; (80239e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80239ba:	4b0c      	ldr	r3, [pc, #48]	; (80239ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80239bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80239be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80239c0:	d3f6      	bcc.n	80239b0 <CopyDataInit>
  ldr  r2, =_sbss
 80239c2:	4a0b      	ldr	r2, [pc, #44]	; (80239f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80239c4:	e002      	b.n	80239cc <LoopFillZerobss>

080239c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80239c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80239c8:	f842 3b04 	str.w	r3, [r2], #4

080239cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80239cc:	4b09      	ldr	r3, [pc, #36]	; (80239f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80239ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80239d0:	d3f9      	bcc.n	80239c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80239d2:	f7ff ffd3 	bl	802397c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80239d6:	f003 fecd 	bl	8027774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80239da:	f7fe fec1 	bl	8022760 <main>
  bx  lr    
 80239de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80239e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80239e4:	0802c19c 	.word	0x0802c19c
  ldr  r0, =_sdata
 80239e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80239ec:	20000644 	.word	0x20000644
  ldr  r2, =_sbss
 80239f0:	20000644 	.word	0x20000644
  ldr  r3, = _ebss
 80239f4:	2000198c 	.word	0x2000198c

080239f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80239f8:	e7fe      	b.n	80239f8 <ADC_IRQHandler>
	...

080239fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80239fc:	b580      	push	{r7, lr}
 80239fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023a00:	4b0e      	ldr	r3, [pc, #56]	; (8023a3c <HAL_Init+0x40>)
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	4a0d      	ldr	r2, [pc, #52]	; (8023a3c <HAL_Init+0x40>)
 8023a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023a0c:	4b0b      	ldr	r3, [pc, #44]	; (8023a3c <HAL_Init+0x40>)
 8023a0e:	681b      	ldr	r3, [r3, #0]
 8023a10:	4a0a      	ldr	r2, [pc, #40]	; (8023a3c <HAL_Init+0x40>)
 8023a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023a18:	4b08      	ldr	r3, [pc, #32]	; (8023a3c <HAL_Init+0x40>)
 8023a1a:	681b      	ldr	r3, [r3, #0]
 8023a1c:	4a07      	ldr	r2, [pc, #28]	; (8023a3c <HAL_Init+0x40>)
 8023a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023a24:	2003      	movs	r0, #3
 8023a26:	f000 f973 	bl	8023d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8023a2a:	2000      	movs	r0, #0
 8023a2c:	f000 f808 	bl	8023a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023a30:	f7ff face 	bl	8022fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023a34:	2300      	movs	r3, #0
}
 8023a36:	4618      	mov	r0, r3
 8023a38:	bd80      	pop	{r7, pc}
 8023a3a:	bf00      	nop
 8023a3c:	40023c00 	.word	0x40023c00

08023a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8023a40:	b580      	push	{r7, lr}
 8023a42:	b082      	sub	sp, #8
 8023a44:	af00      	add	r7, sp, #0
 8023a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8023a48:	4b12      	ldr	r3, [pc, #72]	; (8023a94 <HAL_InitTick+0x54>)
 8023a4a:	681a      	ldr	r2, [r3, #0]
 8023a4c:	4b12      	ldr	r3, [pc, #72]	; (8023a98 <HAL_InitTick+0x58>)
 8023a4e:	781b      	ldrb	r3, [r3, #0]
 8023a50:	4619      	mov	r1, r3
 8023a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8023a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8023a5e:	4618      	mov	r0, r3
 8023a60:	f000 f999 	bl	8023d96 <HAL_SYSTICK_Config>
 8023a64:	4603      	mov	r3, r0
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d001      	beq.n	8023a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8023a6a:	2301      	movs	r3, #1
 8023a6c:	e00e      	b.n	8023a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	2b0f      	cmp	r3, #15
 8023a72:	d80a      	bhi.n	8023a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8023a74:	2200      	movs	r2, #0
 8023a76:	6879      	ldr	r1, [r7, #4]
 8023a78:	f04f 30ff 	mov.w	r0, #4294967295
 8023a7c:	f000 f953 	bl	8023d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8023a80:	4a06      	ldr	r2, [pc, #24]	; (8023a9c <HAL_InitTick+0x5c>)
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8023a86:	2300      	movs	r3, #0
 8023a88:	e000      	b.n	8023a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8023a8a:	2301      	movs	r3, #1
}
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	3708      	adds	r7, #8
 8023a90:	46bd      	mov	sp, r7
 8023a92:	bd80      	pop	{r7, pc}
 8023a94:	20000464 	.word	0x20000464
 8023a98:	2000046c 	.word	0x2000046c
 8023a9c:	20000468 	.word	0x20000468

08023aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023aa0:	b480      	push	{r7}
 8023aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023aa4:	4b06      	ldr	r3, [pc, #24]	; (8023ac0 <HAL_IncTick+0x20>)
 8023aa6:	781b      	ldrb	r3, [r3, #0]
 8023aa8:	461a      	mov	r2, r3
 8023aaa:	4b06      	ldr	r3, [pc, #24]	; (8023ac4 <HAL_IncTick+0x24>)
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	4413      	add	r3, r2
 8023ab0:	4a04      	ldr	r2, [pc, #16]	; (8023ac4 <HAL_IncTick+0x24>)
 8023ab2:	6013      	str	r3, [r2, #0]
}
 8023ab4:	bf00      	nop
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023abc:	4770      	bx	lr
 8023abe:	bf00      	nop
 8023ac0:	2000046c 	.word	0x2000046c
 8023ac4:	20001958 	.word	0x20001958

08023ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023ac8:	b480      	push	{r7}
 8023aca:	af00      	add	r7, sp, #0
  return uwTick;
 8023acc:	4b03      	ldr	r3, [pc, #12]	; (8023adc <HAL_GetTick+0x14>)
 8023ace:	681b      	ldr	r3, [r3, #0]
}
 8023ad0:	4618      	mov	r0, r3
 8023ad2:	46bd      	mov	sp, r7
 8023ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ad8:	4770      	bx	lr
 8023ada:	bf00      	nop
 8023adc:	20001958 	.word	0x20001958

08023ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023ae0:	b580      	push	{r7, lr}
 8023ae2:	b084      	sub	sp, #16
 8023ae4:	af00      	add	r7, sp, #0
 8023ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023ae8:	f7ff ffee 	bl	8023ac8 <HAL_GetTick>
 8023aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023af2:	68fb      	ldr	r3, [r7, #12]
 8023af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023af8:	d005      	beq.n	8023b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8023afa:	4b0a      	ldr	r3, [pc, #40]	; (8023b24 <HAL_Delay+0x44>)
 8023afc:	781b      	ldrb	r3, [r3, #0]
 8023afe:	461a      	mov	r2, r3
 8023b00:	68fb      	ldr	r3, [r7, #12]
 8023b02:	4413      	add	r3, r2
 8023b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8023b06:	bf00      	nop
 8023b08:	f7ff ffde 	bl	8023ac8 <HAL_GetTick>
 8023b0c:	4602      	mov	r2, r0
 8023b0e:	68bb      	ldr	r3, [r7, #8]
 8023b10:	1ad3      	subs	r3, r2, r3
 8023b12:	68fa      	ldr	r2, [r7, #12]
 8023b14:	429a      	cmp	r2, r3
 8023b16:	d8f7      	bhi.n	8023b08 <HAL_Delay+0x28>
  {
  }
}
 8023b18:	bf00      	nop
 8023b1a:	bf00      	nop
 8023b1c:	3710      	adds	r7, #16
 8023b1e:	46bd      	mov	sp, r7
 8023b20:	bd80      	pop	{r7, pc}
 8023b22:	bf00      	nop
 8023b24:	2000046c 	.word	0x2000046c

08023b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023b28:	b480      	push	{r7}
 8023b2a:	b085      	sub	sp, #20
 8023b2c:	af00      	add	r7, sp, #0
 8023b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	f003 0307 	and.w	r3, r3, #7
 8023b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8023b38:	4b0c      	ldr	r3, [pc, #48]	; (8023b6c <__NVIC_SetPriorityGrouping+0x44>)
 8023b3a:	68db      	ldr	r3, [r3, #12]
 8023b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8023b3e:	68ba      	ldr	r2, [r7, #8]
 8023b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023b44:	4013      	ands	r3, r2
 8023b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8023b48:	68fb      	ldr	r3, [r7, #12]
 8023b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8023b4c:	68bb      	ldr	r3, [r7, #8]
 8023b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8023b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8023b5a:	4a04      	ldr	r2, [pc, #16]	; (8023b6c <__NVIC_SetPriorityGrouping+0x44>)
 8023b5c:	68bb      	ldr	r3, [r7, #8]
 8023b5e:	60d3      	str	r3, [r2, #12]
}
 8023b60:	bf00      	nop
 8023b62:	3714      	adds	r7, #20
 8023b64:	46bd      	mov	sp, r7
 8023b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b6a:	4770      	bx	lr
 8023b6c:	e000ed00 	.word	0xe000ed00

08023b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023b70:	b480      	push	{r7}
 8023b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023b74:	4b04      	ldr	r3, [pc, #16]	; (8023b88 <__NVIC_GetPriorityGrouping+0x18>)
 8023b76:	68db      	ldr	r3, [r3, #12]
 8023b78:	0a1b      	lsrs	r3, r3, #8
 8023b7a:	f003 0307 	and.w	r3, r3, #7
}
 8023b7e:	4618      	mov	r0, r3
 8023b80:	46bd      	mov	sp, r7
 8023b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b86:	4770      	bx	lr
 8023b88:	e000ed00 	.word	0xe000ed00

08023b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023b8c:	b480      	push	{r7}
 8023b8e:	b083      	sub	sp, #12
 8023b90:	af00      	add	r7, sp, #0
 8023b92:	4603      	mov	r3, r0
 8023b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023b9a:	2b00      	cmp	r3, #0
 8023b9c:	db0b      	blt.n	8023bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023b9e:	79fb      	ldrb	r3, [r7, #7]
 8023ba0:	f003 021f 	and.w	r2, r3, #31
 8023ba4:	4907      	ldr	r1, [pc, #28]	; (8023bc4 <__NVIC_EnableIRQ+0x38>)
 8023ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023baa:	095b      	lsrs	r3, r3, #5
 8023bac:	2001      	movs	r0, #1
 8023bae:	fa00 f202 	lsl.w	r2, r0, r2
 8023bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023bb6:	bf00      	nop
 8023bb8:	370c      	adds	r7, #12
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bc0:	4770      	bx	lr
 8023bc2:	bf00      	nop
 8023bc4:	e000e100 	.word	0xe000e100

08023bc8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8023bc8:	b480      	push	{r7}
 8023bca:	b083      	sub	sp, #12
 8023bcc:	af00      	add	r7, sp, #0
 8023bce:	4603      	mov	r3, r0
 8023bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	db12      	blt.n	8023c00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023bda:	79fb      	ldrb	r3, [r7, #7]
 8023bdc:	f003 021f 	and.w	r2, r3, #31
 8023be0:	490a      	ldr	r1, [pc, #40]	; (8023c0c <__NVIC_DisableIRQ+0x44>)
 8023be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023be6:	095b      	lsrs	r3, r3, #5
 8023be8:	2001      	movs	r0, #1
 8023bea:	fa00 f202 	lsl.w	r2, r0, r2
 8023bee:	3320      	adds	r3, #32
 8023bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8023bf4:	f3bf 8f4f 	dsb	sy
}
 8023bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8023bfa:	f3bf 8f6f 	isb	sy
}
 8023bfe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8023c00:	bf00      	nop
 8023c02:	370c      	adds	r7, #12
 8023c04:	46bd      	mov	sp, r7
 8023c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c0a:	4770      	bx	lr
 8023c0c:	e000e100 	.word	0xe000e100

08023c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023c10:	b480      	push	{r7}
 8023c12:	b083      	sub	sp, #12
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	4603      	mov	r3, r0
 8023c18:	6039      	str	r1, [r7, #0]
 8023c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	db0a      	blt.n	8023c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023c24:	683b      	ldr	r3, [r7, #0]
 8023c26:	b2da      	uxtb	r2, r3
 8023c28:	490c      	ldr	r1, [pc, #48]	; (8023c5c <__NVIC_SetPriority+0x4c>)
 8023c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023c2e:	0112      	lsls	r2, r2, #4
 8023c30:	b2d2      	uxtb	r2, r2
 8023c32:	440b      	add	r3, r1
 8023c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023c38:	e00a      	b.n	8023c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023c3a:	683b      	ldr	r3, [r7, #0]
 8023c3c:	b2da      	uxtb	r2, r3
 8023c3e:	4908      	ldr	r1, [pc, #32]	; (8023c60 <__NVIC_SetPriority+0x50>)
 8023c40:	79fb      	ldrb	r3, [r7, #7]
 8023c42:	f003 030f 	and.w	r3, r3, #15
 8023c46:	3b04      	subs	r3, #4
 8023c48:	0112      	lsls	r2, r2, #4
 8023c4a:	b2d2      	uxtb	r2, r2
 8023c4c:	440b      	add	r3, r1
 8023c4e:	761a      	strb	r2, [r3, #24]
}
 8023c50:	bf00      	nop
 8023c52:	370c      	adds	r7, #12
 8023c54:	46bd      	mov	sp, r7
 8023c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c5a:	4770      	bx	lr
 8023c5c:	e000e100 	.word	0xe000e100
 8023c60:	e000ed00 	.word	0xe000ed00

08023c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023c64:	b480      	push	{r7}
 8023c66:	b089      	sub	sp, #36	; 0x24
 8023c68:	af00      	add	r7, sp, #0
 8023c6a:	60f8      	str	r0, [r7, #12]
 8023c6c:	60b9      	str	r1, [r7, #8]
 8023c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	f003 0307 	and.w	r3, r3, #7
 8023c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023c78:	69fb      	ldr	r3, [r7, #28]
 8023c7a:	f1c3 0307 	rsb	r3, r3, #7
 8023c7e:	2b04      	cmp	r3, #4
 8023c80:	bf28      	it	cs
 8023c82:	2304      	movcs	r3, #4
 8023c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023c86:	69fb      	ldr	r3, [r7, #28]
 8023c88:	3304      	adds	r3, #4
 8023c8a:	2b06      	cmp	r3, #6
 8023c8c:	d902      	bls.n	8023c94 <NVIC_EncodePriority+0x30>
 8023c8e:	69fb      	ldr	r3, [r7, #28]
 8023c90:	3b03      	subs	r3, #3
 8023c92:	e000      	b.n	8023c96 <NVIC_EncodePriority+0x32>
 8023c94:	2300      	movs	r3, #0
 8023c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023c98:	f04f 32ff 	mov.w	r2, #4294967295
 8023c9c:	69bb      	ldr	r3, [r7, #24]
 8023c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8023ca2:	43da      	mvns	r2, r3
 8023ca4:	68bb      	ldr	r3, [r7, #8]
 8023ca6:	401a      	ands	r2, r3
 8023ca8:	697b      	ldr	r3, [r7, #20]
 8023caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023cac:	f04f 31ff 	mov.w	r1, #4294967295
 8023cb0:	697b      	ldr	r3, [r7, #20]
 8023cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8023cb6:	43d9      	mvns	r1, r3
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023cbc:	4313      	orrs	r3, r2
         );
}
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	3724      	adds	r7, #36	; 0x24
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cc8:	4770      	bx	lr
	...

08023ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8023ccc:	b580      	push	{r7, lr}
 8023cce:	b082      	sub	sp, #8
 8023cd0:	af00      	add	r7, sp, #0
 8023cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	3b01      	subs	r3, #1
 8023cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8023cdc:	d301      	bcc.n	8023ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8023cde:	2301      	movs	r3, #1
 8023ce0:	e00f      	b.n	8023d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8023ce2:	4a0a      	ldr	r2, [pc, #40]	; (8023d0c <SysTick_Config+0x40>)
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	3b01      	subs	r3, #1
 8023ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8023cea:	210f      	movs	r1, #15
 8023cec:	f04f 30ff 	mov.w	r0, #4294967295
 8023cf0:	f7ff ff8e 	bl	8023c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8023cf4:	4b05      	ldr	r3, [pc, #20]	; (8023d0c <SysTick_Config+0x40>)
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8023cfa:	4b04      	ldr	r3, [pc, #16]	; (8023d0c <SysTick_Config+0x40>)
 8023cfc:	2207      	movs	r2, #7
 8023cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8023d00:	2300      	movs	r3, #0
}
 8023d02:	4618      	mov	r0, r3
 8023d04:	3708      	adds	r7, #8
 8023d06:	46bd      	mov	sp, r7
 8023d08:	bd80      	pop	{r7, pc}
 8023d0a:	bf00      	nop
 8023d0c:	e000e010 	.word	0xe000e010

08023d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b082      	sub	sp, #8
 8023d14:	af00      	add	r7, sp, #0
 8023d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023d18:	6878      	ldr	r0, [r7, #4]
 8023d1a:	f7ff ff05 	bl	8023b28 <__NVIC_SetPriorityGrouping>
}
 8023d1e:	bf00      	nop
 8023d20:	3708      	adds	r7, #8
 8023d22:	46bd      	mov	sp, r7
 8023d24:	bd80      	pop	{r7, pc}

08023d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023d26:	b580      	push	{r7, lr}
 8023d28:	b086      	sub	sp, #24
 8023d2a:	af00      	add	r7, sp, #0
 8023d2c:	4603      	mov	r3, r0
 8023d2e:	60b9      	str	r1, [r7, #8]
 8023d30:	607a      	str	r2, [r7, #4]
 8023d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023d34:	2300      	movs	r3, #0
 8023d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8023d38:	f7ff ff1a 	bl	8023b70 <__NVIC_GetPriorityGrouping>
 8023d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023d3e:	687a      	ldr	r2, [r7, #4]
 8023d40:	68b9      	ldr	r1, [r7, #8]
 8023d42:	6978      	ldr	r0, [r7, #20]
 8023d44:	f7ff ff8e 	bl	8023c64 <NVIC_EncodePriority>
 8023d48:	4602      	mov	r2, r0
 8023d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023d4e:	4611      	mov	r1, r2
 8023d50:	4618      	mov	r0, r3
 8023d52:	f7ff ff5d 	bl	8023c10 <__NVIC_SetPriority>
}
 8023d56:	bf00      	nop
 8023d58:	3718      	adds	r7, #24
 8023d5a:	46bd      	mov	sp, r7
 8023d5c:	bd80      	pop	{r7, pc}

08023d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023d5e:	b580      	push	{r7, lr}
 8023d60:	b082      	sub	sp, #8
 8023d62:	af00      	add	r7, sp, #0
 8023d64:	4603      	mov	r3, r0
 8023d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8023d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023d6c:	4618      	mov	r0, r3
 8023d6e:	f7ff ff0d 	bl	8023b8c <__NVIC_EnableIRQ>
}
 8023d72:	bf00      	nop
 8023d74:	3708      	adds	r7, #8
 8023d76:	46bd      	mov	sp, r7
 8023d78:	bd80      	pop	{r7, pc}

08023d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8023d7a:	b580      	push	{r7, lr}
 8023d7c:	b082      	sub	sp, #8
 8023d7e:	af00      	add	r7, sp, #0
 8023d80:	4603      	mov	r3, r0
 8023d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8023d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023d88:	4618      	mov	r0, r3
 8023d8a:	f7ff ff1d 	bl	8023bc8 <__NVIC_DisableIRQ>
}
 8023d8e:	bf00      	nop
 8023d90:	3708      	adds	r7, #8
 8023d92:	46bd      	mov	sp, r7
 8023d94:	bd80      	pop	{r7, pc}

08023d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8023d96:	b580      	push	{r7, lr}
 8023d98:	b082      	sub	sp, #8
 8023d9a:	af00      	add	r7, sp, #0
 8023d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8023d9e:	6878      	ldr	r0, [r7, #4]
 8023da0:	f7ff ff94 	bl	8023ccc <SysTick_Config>
 8023da4:	4603      	mov	r3, r0
}
 8023da6:	4618      	mov	r0, r3
 8023da8:	3708      	adds	r7, #8
 8023daa:	46bd      	mov	sp, r7
 8023dac:	bd80      	pop	{r7, pc}

08023dae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023dae:	b480      	push	{r7}
 8023db0:	b083      	sub	sp, #12
 8023db2:	af00      	add	r7, sp, #0
 8023db4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023dbc:	b2db      	uxtb	r3, r3
 8023dbe:	2b02      	cmp	r3, #2
 8023dc0:	d004      	beq.n	8023dcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	2280      	movs	r2, #128	; 0x80
 8023dc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023dc8:	2301      	movs	r3, #1
 8023dca:	e00c      	b.n	8023de6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	2205      	movs	r2, #5
 8023dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	681a      	ldr	r2, [r3, #0]
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	681b      	ldr	r3, [r3, #0]
 8023dde:	f022 0201 	bic.w	r2, r2, #1
 8023de2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023de4:	2300      	movs	r3, #0
}
 8023de6:	4618      	mov	r0, r3
 8023de8:	370c      	adds	r7, #12
 8023dea:	46bd      	mov	sp, r7
 8023dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023df0:	4770      	bx	lr
	...

08023df4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8023df4:	b580      	push	{r7, lr}
 8023df6:	b086      	sub	sp, #24
 8023df8:	af00      	add	r7, sp, #0
 8023dfa:	60f8      	str	r0, [r7, #12]
 8023dfc:	60b9      	str	r1, [r7, #8]
 8023dfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8023e02:	2301      	movs	r3, #1
 8023e04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8023e06:	4b23      	ldr	r3, [pc, #140]	; (8023e94 <HAL_FLASH_Program+0xa0>)
 8023e08:	7e1b      	ldrb	r3, [r3, #24]
 8023e0a:	2b01      	cmp	r3, #1
 8023e0c:	d101      	bne.n	8023e12 <HAL_FLASH_Program+0x1e>
 8023e0e:	2302      	movs	r3, #2
 8023e10:	e03b      	b.n	8023e8a <HAL_FLASH_Program+0x96>
 8023e12:	4b20      	ldr	r3, [pc, #128]	; (8023e94 <HAL_FLASH_Program+0xa0>)
 8023e14:	2201      	movs	r2, #1
 8023e16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023e1c:	f000 f87c 	bl	8023f18 <FLASH_WaitForLastOperation>
 8023e20:	4603      	mov	r3, r0
 8023e22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8023e24:	7dfb      	ldrb	r3, [r7, #23]
 8023e26:	2b00      	cmp	r3, #0
 8023e28:	d12b      	bne.n	8023e82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8023e2a:	68fb      	ldr	r3, [r7, #12]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d105      	bne.n	8023e3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8023e30:	783b      	ldrb	r3, [r7, #0]
 8023e32:	4619      	mov	r1, r3
 8023e34:	68b8      	ldr	r0, [r7, #8]
 8023e36:	f000 f927 	bl	8024088 <FLASH_Program_Byte>
 8023e3a:	e016      	b.n	8023e6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8023e3c:	68fb      	ldr	r3, [r7, #12]
 8023e3e:	2b01      	cmp	r3, #1
 8023e40:	d105      	bne.n	8023e4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8023e42:	883b      	ldrh	r3, [r7, #0]
 8023e44:	4619      	mov	r1, r3
 8023e46:	68b8      	ldr	r0, [r7, #8]
 8023e48:	f000 f8fa 	bl	8024040 <FLASH_Program_HalfWord>
 8023e4c:	e00d      	b.n	8023e6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8023e4e:	68fb      	ldr	r3, [r7, #12]
 8023e50:	2b02      	cmp	r3, #2
 8023e52:	d105      	bne.n	8023e60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8023e54:	683b      	ldr	r3, [r7, #0]
 8023e56:	4619      	mov	r1, r3
 8023e58:	68b8      	ldr	r0, [r7, #8]
 8023e5a:	f000 f8cf 	bl	8023ffc <FLASH_Program_Word>
 8023e5e:	e004      	b.n	8023e6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8023e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023e64:	68b8      	ldr	r0, [r7, #8]
 8023e66:	f000 f897 	bl	8023f98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8023e6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8023e6e:	f000 f853 	bl	8023f18 <FLASH_WaitForLastOperation>
 8023e72:	4603      	mov	r3, r0
 8023e74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8023e76:	4b08      	ldr	r3, [pc, #32]	; (8023e98 <HAL_FLASH_Program+0xa4>)
 8023e78:	691b      	ldr	r3, [r3, #16]
 8023e7a:	4a07      	ldr	r2, [pc, #28]	; (8023e98 <HAL_FLASH_Program+0xa4>)
 8023e7c:	f023 0301 	bic.w	r3, r3, #1
 8023e80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8023e82:	4b04      	ldr	r3, [pc, #16]	; (8023e94 <HAL_FLASH_Program+0xa0>)
 8023e84:	2200      	movs	r2, #0
 8023e86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8023e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8023e8a:	4618      	mov	r0, r3
 8023e8c:	3718      	adds	r7, #24
 8023e8e:	46bd      	mov	sp, r7
 8023e90:	bd80      	pop	{r7, pc}
 8023e92:	bf00      	nop
 8023e94:	2000195c 	.word	0x2000195c
 8023e98:	40023c00 	.word	0x40023c00

08023e9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8023e9c:	b480      	push	{r7}
 8023e9e:	b083      	sub	sp, #12
 8023ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8023ea2:	2300      	movs	r3, #0
 8023ea4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8023ea6:	4b0b      	ldr	r3, [pc, #44]	; (8023ed4 <HAL_FLASH_Unlock+0x38>)
 8023ea8:	691b      	ldr	r3, [r3, #16]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	da0b      	bge.n	8023ec6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8023eae:	4b09      	ldr	r3, [pc, #36]	; (8023ed4 <HAL_FLASH_Unlock+0x38>)
 8023eb0:	4a09      	ldr	r2, [pc, #36]	; (8023ed8 <HAL_FLASH_Unlock+0x3c>)
 8023eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8023eb4:	4b07      	ldr	r3, [pc, #28]	; (8023ed4 <HAL_FLASH_Unlock+0x38>)
 8023eb6:	4a09      	ldr	r2, [pc, #36]	; (8023edc <HAL_FLASH_Unlock+0x40>)
 8023eb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8023eba:	4b06      	ldr	r3, [pc, #24]	; (8023ed4 <HAL_FLASH_Unlock+0x38>)
 8023ebc:	691b      	ldr	r3, [r3, #16]
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	da01      	bge.n	8023ec6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8023ec2:	2301      	movs	r3, #1
 8023ec4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8023ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8023ec8:	4618      	mov	r0, r3
 8023eca:	370c      	adds	r7, #12
 8023ecc:	46bd      	mov	sp, r7
 8023ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ed2:	4770      	bx	lr
 8023ed4:	40023c00 	.word	0x40023c00
 8023ed8:	45670123 	.word	0x45670123
 8023edc:	cdef89ab 	.word	0xcdef89ab

08023ee0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8023ee0:	b480      	push	{r7}
 8023ee2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8023ee4:	4b05      	ldr	r3, [pc, #20]	; (8023efc <HAL_FLASH_Lock+0x1c>)
 8023ee6:	691b      	ldr	r3, [r3, #16]
 8023ee8:	4a04      	ldr	r2, [pc, #16]	; (8023efc <HAL_FLASH_Lock+0x1c>)
 8023eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8023eee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8023ef0:	2300      	movs	r3, #0
}
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	46bd      	mov	sp, r7
 8023ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023efa:	4770      	bx	lr
 8023efc:	40023c00 	.word	0x40023c00

08023f00 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8023f00:	b480      	push	{r7}
 8023f02:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8023f04:	4b03      	ldr	r3, [pc, #12]	; (8023f14 <HAL_FLASH_GetError+0x14>)
 8023f06:	69db      	ldr	r3, [r3, #28]
}  
 8023f08:	4618      	mov	r0, r3
 8023f0a:	46bd      	mov	sp, r7
 8023f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f10:	4770      	bx	lr
 8023f12:	bf00      	nop
 8023f14:	2000195c 	.word	0x2000195c

08023f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8023f18:	b580      	push	{r7, lr}
 8023f1a:	b084      	sub	sp, #16
 8023f1c:	af00      	add	r7, sp, #0
 8023f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8023f20:	2300      	movs	r3, #0
 8023f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8023f24:	4b1a      	ldr	r3, [pc, #104]	; (8023f90 <FLASH_WaitForLastOperation+0x78>)
 8023f26:	2200      	movs	r2, #0
 8023f28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8023f2a:	f7ff fdcd 	bl	8023ac8 <HAL_GetTick>
 8023f2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8023f30:	e010      	b.n	8023f54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f38:	d00c      	beq.n	8023f54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	d007      	beq.n	8023f50 <FLASH_WaitForLastOperation+0x38>
 8023f40:	f7ff fdc2 	bl	8023ac8 <HAL_GetTick>
 8023f44:	4602      	mov	r2, r0
 8023f46:	68fb      	ldr	r3, [r7, #12]
 8023f48:	1ad3      	subs	r3, r2, r3
 8023f4a:	687a      	ldr	r2, [r7, #4]
 8023f4c:	429a      	cmp	r2, r3
 8023f4e:	d201      	bcs.n	8023f54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8023f50:	2303      	movs	r3, #3
 8023f52:	e019      	b.n	8023f88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8023f54:	4b0f      	ldr	r3, [pc, #60]	; (8023f94 <FLASH_WaitForLastOperation+0x7c>)
 8023f56:	68db      	ldr	r3, [r3, #12]
 8023f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023f5c:	2b00      	cmp	r3, #0
 8023f5e:	d1e8      	bne.n	8023f32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8023f60:	4b0c      	ldr	r3, [pc, #48]	; (8023f94 <FLASH_WaitForLastOperation+0x7c>)
 8023f62:	68db      	ldr	r3, [r3, #12]
 8023f64:	f003 0301 	and.w	r3, r3, #1
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	d002      	beq.n	8023f72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8023f6c:	4b09      	ldr	r3, [pc, #36]	; (8023f94 <FLASH_WaitForLastOperation+0x7c>)
 8023f6e:	2201      	movs	r2, #1
 8023f70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8023f72:	4b08      	ldr	r3, [pc, #32]	; (8023f94 <FLASH_WaitForLastOperation+0x7c>)
 8023f74:	68db      	ldr	r3, [r3, #12]
 8023f76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8023f7a:	2b00      	cmp	r3, #0
 8023f7c:	d003      	beq.n	8023f86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8023f7e:	f000 f8a5 	bl	80240cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8023f82:	2301      	movs	r3, #1
 8023f84:	e000      	b.n	8023f88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8023f86:	2300      	movs	r3, #0
  
}  
 8023f88:	4618      	mov	r0, r3
 8023f8a:	3710      	adds	r7, #16
 8023f8c:	46bd      	mov	sp, r7
 8023f8e:	bd80      	pop	{r7, pc}
 8023f90:	2000195c 	.word	0x2000195c
 8023f94:	40023c00 	.word	0x40023c00

08023f98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8023f98:	b480      	push	{r7}
 8023f9a:	b085      	sub	sp, #20
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	60f8      	str	r0, [r7, #12]
 8023fa0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8023fa4:	4b14      	ldr	r3, [pc, #80]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023fa6:	691b      	ldr	r3, [r3, #16]
 8023fa8:	4a13      	ldr	r2, [pc, #76]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023fae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8023fb0:	4b11      	ldr	r3, [pc, #68]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023fb2:	691b      	ldr	r3, [r3, #16]
 8023fb4:	4a10      	ldr	r2, [pc, #64]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023fb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8023fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8023fbc:	4b0e      	ldr	r3, [pc, #56]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023fbe:	691b      	ldr	r3, [r3, #16]
 8023fc0:	4a0d      	ldr	r2, [pc, #52]	; (8023ff8 <FLASH_Program_DoubleWord+0x60>)
 8023fc2:	f043 0301 	orr.w	r3, r3, #1
 8023fc6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8023fc8:	68fb      	ldr	r3, [r7, #12]
 8023fca:	683a      	ldr	r2, [r7, #0]
 8023fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8023fce:	f3bf 8f6f 	isb	sy
}
 8023fd2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8023fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8023fd8:	f04f 0200 	mov.w	r2, #0
 8023fdc:	f04f 0300 	mov.w	r3, #0
 8023fe0:	000a      	movs	r2, r1
 8023fe2:	2300      	movs	r3, #0
 8023fe4:	68f9      	ldr	r1, [r7, #12]
 8023fe6:	3104      	adds	r1, #4
 8023fe8:	4613      	mov	r3, r2
 8023fea:	600b      	str	r3, [r1, #0]
}
 8023fec:	bf00      	nop
 8023fee:	3714      	adds	r7, #20
 8023ff0:	46bd      	mov	sp, r7
 8023ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ff6:	4770      	bx	lr
 8023ff8:	40023c00 	.word	0x40023c00

08023ffc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8023ffc:	b480      	push	{r7}
 8023ffe:	b083      	sub	sp, #12
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
 8024004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024006:	4b0d      	ldr	r3, [pc, #52]	; (802403c <FLASH_Program_Word+0x40>)
 8024008:	691b      	ldr	r3, [r3, #16]
 802400a:	4a0c      	ldr	r2, [pc, #48]	; (802403c <FLASH_Program_Word+0x40>)
 802400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8024012:	4b0a      	ldr	r3, [pc, #40]	; (802403c <FLASH_Program_Word+0x40>)
 8024014:	691b      	ldr	r3, [r3, #16]
 8024016:	4a09      	ldr	r2, [pc, #36]	; (802403c <FLASH_Program_Word+0x40>)
 8024018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802401c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802401e:	4b07      	ldr	r3, [pc, #28]	; (802403c <FLASH_Program_Word+0x40>)
 8024020:	691b      	ldr	r3, [r3, #16]
 8024022:	4a06      	ldr	r2, [pc, #24]	; (802403c <FLASH_Program_Word+0x40>)
 8024024:	f043 0301 	orr.w	r3, r3, #1
 8024028:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	683a      	ldr	r2, [r7, #0]
 802402e:	601a      	str	r2, [r3, #0]
}
 8024030:	bf00      	nop
 8024032:	370c      	adds	r7, #12
 8024034:	46bd      	mov	sp, r7
 8024036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802403a:	4770      	bx	lr
 802403c:	40023c00 	.word	0x40023c00

08024040 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8024040:	b480      	push	{r7}
 8024042:	b083      	sub	sp, #12
 8024044:	af00      	add	r7, sp, #0
 8024046:	6078      	str	r0, [r7, #4]
 8024048:	460b      	mov	r3, r1
 802404a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802404c:	4b0d      	ldr	r3, [pc, #52]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 802404e:	691b      	ldr	r3, [r3, #16]
 8024050:	4a0c      	ldr	r2, [pc, #48]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 8024052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8024058:	4b0a      	ldr	r3, [pc, #40]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 802405a:	691b      	ldr	r3, [r3, #16]
 802405c:	4a09      	ldr	r2, [pc, #36]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 802405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024064:	4b07      	ldr	r3, [pc, #28]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 8024066:	691b      	ldr	r3, [r3, #16]
 8024068:	4a06      	ldr	r2, [pc, #24]	; (8024084 <FLASH_Program_HalfWord+0x44>)
 802406a:	f043 0301 	orr.w	r3, r3, #1
 802406e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	887a      	ldrh	r2, [r7, #2]
 8024074:	801a      	strh	r2, [r3, #0]
}
 8024076:	bf00      	nop
 8024078:	370c      	adds	r7, #12
 802407a:	46bd      	mov	sp, r7
 802407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024080:	4770      	bx	lr
 8024082:	bf00      	nop
 8024084:	40023c00 	.word	0x40023c00

08024088 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8024088:	b480      	push	{r7}
 802408a:	b083      	sub	sp, #12
 802408c:	af00      	add	r7, sp, #0
 802408e:	6078      	str	r0, [r7, #4]
 8024090:	460b      	mov	r3, r1
 8024092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024094:	4b0c      	ldr	r3, [pc, #48]	; (80240c8 <FLASH_Program_Byte+0x40>)
 8024096:	691b      	ldr	r3, [r3, #16]
 8024098:	4a0b      	ldr	r2, [pc, #44]	; (80240c8 <FLASH_Program_Byte+0x40>)
 802409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802409e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80240a0:	4b09      	ldr	r3, [pc, #36]	; (80240c8 <FLASH_Program_Byte+0x40>)
 80240a2:	4a09      	ldr	r2, [pc, #36]	; (80240c8 <FLASH_Program_Byte+0x40>)
 80240a4:	691b      	ldr	r3, [r3, #16]
 80240a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80240a8:	4b07      	ldr	r3, [pc, #28]	; (80240c8 <FLASH_Program_Byte+0x40>)
 80240aa:	691b      	ldr	r3, [r3, #16]
 80240ac:	4a06      	ldr	r2, [pc, #24]	; (80240c8 <FLASH_Program_Byte+0x40>)
 80240ae:	f043 0301 	orr.w	r3, r3, #1
 80240b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	78fa      	ldrb	r2, [r7, #3]
 80240b8:	701a      	strb	r2, [r3, #0]
}
 80240ba:	bf00      	nop
 80240bc:	370c      	adds	r7, #12
 80240be:	46bd      	mov	sp, r7
 80240c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240c4:	4770      	bx	lr
 80240c6:	bf00      	nop
 80240c8:	40023c00 	.word	0x40023c00

080240cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80240cc:	b480      	push	{r7}
 80240ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80240d0:	4b27      	ldr	r3, [pc, #156]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 80240d2:	68db      	ldr	r3, [r3, #12]
 80240d4:	f003 0310 	and.w	r3, r3, #16
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d008      	beq.n	80240ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80240dc:	4b25      	ldr	r3, [pc, #148]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 80240de:	69db      	ldr	r3, [r3, #28]
 80240e0:	f043 0310 	orr.w	r3, r3, #16
 80240e4:	4a23      	ldr	r2, [pc, #140]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 80240e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80240e8:	4b21      	ldr	r3, [pc, #132]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 80240ea:	2210      	movs	r2, #16
 80240ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80240ee:	4b20      	ldr	r3, [pc, #128]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 80240f0:	68db      	ldr	r3, [r3, #12]
 80240f2:	f003 0320 	and.w	r3, r3, #32
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	d008      	beq.n	802410c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80240fa:	4b1e      	ldr	r3, [pc, #120]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 80240fc:	69db      	ldr	r3, [r3, #28]
 80240fe:	f043 0308 	orr.w	r3, r3, #8
 8024102:	4a1c      	ldr	r2, [pc, #112]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 8024104:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8024106:	4b1a      	ldr	r3, [pc, #104]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 8024108:	2220      	movs	r2, #32
 802410a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802410c:	4b18      	ldr	r3, [pc, #96]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 802410e:	68db      	ldr	r3, [r3, #12]
 8024110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024114:	2b00      	cmp	r3, #0
 8024116:	d008      	beq.n	802412a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8024118:	4b16      	ldr	r3, [pc, #88]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 802411a:	69db      	ldr	r3, [r3, #28]
 802411c:	f043 0304 	orr.w	r3, r3, #4
 8024120:	4a14      	ldr	r2, [pc, #80]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 8024122:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8024124:	4b12      	ldr	r3, [pc, #72]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 8024126:	2240      	movs	r2, #64	; 0x40
 8024128:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802412a:	4b11      	ldr	r3, [pc, #68]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 802412c:	68db      	ldr	r3, [r3, #12]
 802412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024132:	2b00      	cmp	r3, #0
 8024134:	d008      	beq.n	8024148 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8024136:	4b0f      	ldr	r3, [pc, #60]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 8024138:	69db      	ldr	r3, [r3, #28]
 802413a:	f043 0302 	orr.w	r3, r3, #2
 802413e:	4a0d      	ldr	r2, [pc, #52]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 8024140:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8024142:	4b0b      	ldr	r3, [pc, #44]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 8024144:	2280      	movs	r2, #128	; 0x80
 8024146:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8024148:	4b09      	ldr	r3, [pc, #36]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 802414a:	68db      	ldr	r3, [r3, #12]
 802414c:	f003 0302 	and.w	r3, r3, #2
 8024150:	2b00      	cmp	r3, #0
 8024152:	d008      	beq.n	8024166 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8024154:	4b07      	ldr	r3, [pc, #28]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 8024156:	69db      	ldr	r3, [r3, #28]
 8024158:	f043 0320 	orr.w	r3, r3, #32
 802415c:	4a05      	ldr	r2, [pc, #20]	; (8024174 <FLASH_SetErrorCode+0xa8>)
 802415e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8024160:	4b03      	ldr	r3, [pc, #12]	; (8024170 <FLASH_SetErrorCode+0xa4>)
 8024162:	2202      	movs	r2, #2
 8024164:	60da      	str	r2, [r3, #12]
  }
}
 8024166:	bf00      	nop
 8024168:	46bd      	mov	sp, r7
 802416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802416e:	4770      	bx	lr
 8024170:	40023c00 	.word	0x40023c00
 8024174:	2000195c 	.word	0x2000195c

08024178 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8024178:	b580      	push	{r7, lr}
 802417a:	b084      	sub	sp, #16
 802417c:	af00      	add	r7, sp, #0
 802417e:	6078      	str	r0, [r7, #4]
 8024180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024182:	2301      	movs	r3, #1
 8024184:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8024186:	2300      	movs	r3, #0
 8024188:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802418a:	4b31      	ldr	r3, [pc, #196]	; (8024250 <HAL_FLASHEx_Erase+0xd8>)
 802418c:	7e1b      	ldrb	r3, [r3, #24]
 802418e:	2b01      	cmp	r3, #1
 8024190:	d101      	bne.n	8024196 <HAL_FLASHEx_Erase+0x1e>
 8024192:	2302      	movs	r3, #2
 8024194:	e058      	b.n	8024248 <HAL_FLASHEx_Erase+0xd0>
 8024196:	4b2e      	ldr	r3, [pc, #184]	; (8024250 <HAL_FLASHEx_Erase+0xd8>)
 8024198:	2201      	movs	r2, #1
 802419a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802419c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80241a0:	f7ff feba 	bl	8023f18 <FLASH_WaitForLastOperation>
 80241a4:	4603      	mov	r3, r0
 80241a6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80241a8:	7bfb      	ldrb	r3, [r7, #15]
 80241aa:	2b00      	cmp	r3, #0
 80241ac:	d148      	bne.n	8024240 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80241ae:	683b      	ldr	r3, [r7, #0]
 80241b0:	f04f 32ff 	mov.w	r2, #4294967295
 80241b4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80241b6:	687b      	ldr	r3, [r7, #4]
 80241b8:	681b      	ldr	r3, [r3, #0]
 80241ba:	2b01      	cmp	r3, #1
 80241bc:	d115      	bne.n	80241ea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	691b      	ldr	r3, [r3, #16]
 80241c2:	b2da      	uxtb	r2, r3
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	685b      	ldr	r3, [r3, #4]
 80241c8:	4619      	mov	r1, r3
 80241ca:	4610      	mov	r0, r2
 80241cc:	f000 f844 	bl	8024258 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80241d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80241d4:	f7ff fea0 	bl	8023f18 <FLASH_WaitForLastOperation>
 80241d8:	4603      	mov	r3, r0
 80241da:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80241dc:	4b1d      	ldr	r3, [pc, #116]	; (8024254 <HAL_FLASHEx_Erase+0xdc>)
 80241de:	691b      	ldr	r3, [r3, #16]
 80241e0:	4a1c      	ldr	r2, [pc, #112]	; (8024254 <HAL_FLASHEx_Erase+0xdc>)
 80241e2:	f023 0304 	bic.w	r3, r3, #4
 80241e6:	6113      	str	r3, [r2, #16]
 80241e8:	e028      	b.n	802423c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80241ea:	687b      	ldr	r3, [r7, #4]
 80241ec:	689b      	ldr	r3, [r3, #8]
 80241ee:	60bb      	str	r3, [r7, #8]
 80241f0:	e01c      	b.n	802422c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	691b      	ldr	r3, [r3, #16]
 80241f6:	b2db      	uxtb	r3, r3
 80241f8:	4619      	mov	r1, r3
 80241fa:	68b8      	ldr	r0, [r7, #8]
 80241fc:	f000 f850 	bl	80242a0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024200:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024204:	f7ff fe88 	bl	8023f18 <FLASH_WaitForLastOperation>
 8024208:	4603      	mov	r3, r0
 802420a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802420c:	4b11      	ldr	r3, [pc, #68]	; (8024254 <HAL_FLASHEx_Erase+0xdc>)
 802420e:	691b      	ldr	r3, [r3, #16]
 8024210:	4a10      	ldr	r2, [pc, #64]	; (8024254 <HAL_FLASHEx_Erase+0xdc>)
 8024212:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8024216:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8024218:	7bfb      	ldrb	r3, [r7, #15]
 802421a:	2b00      	cmp	r3, #0
 802421c:	d003      	beq.n	8024226 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802421e:	683b      	ldr	r3, [r7, #0]
 8024220:	68ba      	ldr	r2, [r7, #8]
 8024222:	601a      	str	r2, [r3, #0]
          break;
 8024224:	e00a      	b.n	802423c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8024226:	68bb      	ldr	r3, [r7, #8]
 8024228:	3301      	adds	r3, #1
 802422a:	60bb      	str	r3, [r7, #8]
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	68da      	ldr	r2, [r3, #12]
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	689b      	ldr	r3, [r3, #8]
 8024234:	4413      	add	r3, r2
 8024236:	68ba      	ldr	r2, [r7, #8]
 8024238:	429a      	cmp	r2, r3
 802423a:	d3da      	bcc.n	80241f2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 802423c:	f000 f878 	bl	8024330 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024240:	4b03      	ldr	r3, [pc, #12]	; (8024250 <HAL_FLASHEx_Erase+0xd8>)
 8024242:	2200      	movs	r2, #0
 8024244:	761a      	strb	r2, [r3, #24]

  return status;
 8024246:	7bfb      	ldrb	r3, [r7, #15]
}
 8024248:	4618      	mov	r0, r3
 802424a:	3710      	adds	r7, #16
 802424c:	46bd      	mov	sp, r7
 802424e:	bd80      	pop	{r7, pc}
 8024250:	2000195c 	.word	0x2000195c
 8024254:	40023c00 	.word	0x40023c00

08024258 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8024258:	b480      	push	{r7}
 802425a:	b083      	sub	sp, #12
 802425c:	af00      	add	r7, sp, #0
 802425e:	4603      	mov	r3, r0
 8024260:	6039      	str	r1, [r7, #0]
 8024262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024264:	4b0d      	ldr	r3, [pc, #52]	; (802429c <FLASH_MassErase+0x44>)
 8024266:	691b      	ldr	r3, [r3, #16]
 8024268:	4a0c      	ldr	r2, [pc, #48]	; (802429c <FLASH_MassErase+0x44>)
 802426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802426e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8024270:	4b0a      	ldr	r3, [pc, #40]	; (802429c <FLASH_MassErase+0x44>)
 8024272:	691b      	ldr	r3, [r3, #16]
 8024274:	4a09      	ldr	r2, [pc, #36]	; (802429c <FLASH_MassErase+0x44>)
 8024276:	f043 0304 	orr.w	r3, r3, #4
 802427a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 802427c:	4b07      	ldr	r3, [pc, #28]	; (802429c <FLASH_MassErase+0x44>)
 802427e:	691a      	ldr	r2, [r3, #16]
 8024280:	79fb      	ldrb	r3, [r7, #7]
 8024282:	021b      	lsls	r3, r3, #8
 8024284:	4313      	orrs	r3, r2
 8024286:	4a05      	ldr	r2, [pc, #20]	; (802429c <FLASH_MassErase+0x44>)
 8024288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802428c:	6113      	str	r3, [r2, #16]
}
 802428e:	bf00      	nop
 8024290:	370c      	adds	r7, #12
 8024292:	46bd      	mov	sp, r7
 8024294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024298:	4770      	bx	lr
 802429a:	bf00      	nop
 802429c:	40023c00 	.word	0x40023c00

080242a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80242a0:	b480      	push	{r7}
 80242a2:	b085      	sub	sp, #20
 80242a4:	af00      	add	r7, sp, #0
 80242a6:	6078      	str	r0, [r7, #4]
 80242a8:	460b      	mov	r3, r1
 80242aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80242ac:	2300      	movs	r3, #0
 80242ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80242b0:	78fb      	ldrb	r3, [r7, #3]
 80242b2:	2b00      	cmp	r3, #0
 80242b4:	d102      	bne.n	80242bc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80242b6:	2300      	movs	r3, #0
 80242b8:	60fb      	str	r3, [r7, #12]
 80242ba:	e010      	b.n	80242de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80242bc:	78fb      	ldrb	r3, [r7, #3]
 80242be:	2b01      	cmp	r3, #1
 80242c0:	d103      	bne.n	80242ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80242c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80242c6:	60fb      	str	r3, [r7, #12]
 80242c8:	e009      	b.n	80242de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80242ca:	78fb      	ldrb	r3, [r7, #3]
 80242cc:	2b02      	cmp	r3, #2
 80242ce:	d103      	bne.n	80242d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80242d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80242d4:	60fb      	str	r3, [r7, #12]
 80242d6:	e002      	b.n	80242de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80242d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80242dc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80242de:	4b13      	ldr	r3, [pc, #76]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242e0:	691b      	ldr	r3, [r3, #16]
 80242e2:	4a12      	ldr	r2, [pc, #72]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80242e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80242ea:	4b10      	ldr	r3, [pc, #64]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242ec:	691a      	ldr	r2, [r3, #16]
 80242ee:	490f      	ldr	r1, [pc, #60]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242f0:	68fb      	ldr	r3, [r7, #12]
 80242f2:	4313      	orrs	r3, r2
 80242f4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80242f6:	4b0d      	ldr	r3, [pc, #52]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242f8:	691b      	ldr	r3, [r3, #16]
 80242fa:	4a0c      	ldr	r2, [pc, #48]	; (802432c <FLASH_Erase_Sector+0x8c>)
 80242fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8024300:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8024302:	4b0a      	ldr	r3, [pc, #40]	; (802432c <FLASH_Erase_Sector+0x8c>)
 8024304:	691a      	ldr	r2, [r3, #16]
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	00db      	lsls	r3, r3, #3
 802430a:	4313      	orrs	r3, r2
 802430c:	4a07      	ldr	r2, [pc, #28]	; (802432c <FLASH_Erase_Sector+0x8c>)
 802430e:	f043 0302 	orr.w	r3, r3, #2
 8024312:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8024314:	4b05      	ldr	r3, [pc, #20]	; (802432c <FLASH_Erase_Sector+0x8c>)
 8024316:	691b      	ldr	r3, [r3, #16]
 8024318:	4a04      	ldr	r2, [pc, #16]	; (802432c <FLASH_Erase_Sector+0x8c>)
 802431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802431e:	6113      	str	r3, [r2, #16]
}
 8024320:	bf00      	nop
 8024322:	3714      	adds	r7, #20
 8024324:	46bd      	mov	sp, r7
 8024326:	f85d 7b04 	ldr.w	r7, [sp], #4
 802432a:	4770      	bx	lr
 802432c:	40023c00 	.word	0x40023c00

08024330 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8024330:	b480      	push	{r7}
 8024332:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8024334:	4b20      	ldr	r3, [pc, #128]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802433c:	2b00      	cmp	r3, #0
 802433e:	d017      	beq.n	8024370 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8024340:	4b1d      	ldr	r3, [pc, #116]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024342:	681b      	ldr	r3, [r3, #0]
 8024344:	4a1c      	ldr	r2, [pc, #112]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024346:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802434a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802434c:	4b1a      	ldr	r3, [pc, #104]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802434e:	681b      	ldr	r3, [r3, #0]
 8024350:	4a19      	ldr	r2, [pc, #100]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024356:	6013      	str	r3, [r2, #0]
 8024358:	4b17      	ldr	r3, [pc, #92]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802435a:	681b      	ldr	r3, [r3, #0]
 802435c:	4a16      	ldr	r2, [pc, #88]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802435e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024362:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024364:	4b14      	ldr	r3, [pc, #80]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	4a13      	ldr	r2, [pc, #76]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802436a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802436e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8024370:	4b11      	ldr	r3, [pc, #68]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024378:	2b00      	cmp	r3, #0
 802437a:	d017      	beq.n	80243ac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802437c:	4b0e      	ldr	r3, [pc, #56]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802437e:	681b      	ldr	r3, [r3, #0]
 8024380:	4a0d      	ldr	r2, [pc, #52]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024386:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024388:	4b0b      	ldr	r3, [pc, #44]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802438a:	681b      	ldr	r3, [r3, #0]
 802438c:	4a0a      	ldr	r2, [pc, #40]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802438e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024392:	6013      	str	r3, [r2, #0]
 8024394:	4b08      	ldr	r3, [pc, #32]	; (80243b8 <FLASH_FlushCaches+0x88>)
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	4a07      	ldr	r2, [pc, #28]	; (80243b8 <FLASH_FlushCaches+0x88>)
 802439a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802439e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80243a0:	4b05      	ldr	r3, [pc, #20]	; (80243b8 <FLASH_FlushCaches+0x88>)
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	4a04      	ldr	r2, [pc, #16]	; (80243b8 <FLASH_FlushCaches+0x88>)
 80243a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80243aa:	6013      	str	r3, [r2, #0]
  }
}
 80243ac:	bf00      	nop
 80243ae:	46bd      	mov	sp, r7
 80243b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b4:	4770      	bx	lr
 80243b6:	bf00      	nop
 80243b8:	40023c00 	.word	0x40023c00

080243bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80243bc:	b480      	push	{r7}
 80243be:	b089      	sub	sp, #36	; 0x24
 80243c0:	af00      	add	r7, sp, #0
 80243c2:	6078      	str	r0, [r7, #4]
 80243c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80243c6:	2300      	movs	r3, #0
 80243c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80243ca:	2300      	movs	r3, #0
 80243cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80243ce:	2300      	movs	r3, #0
 80243d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80243d2:	2300      	movs	r3, #0
 80243d4:	61fb      	str	r3, [r7, #28]
 80243d6:	e16b      	b.n	80246b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80243d8:	2201      	movs	r2, #1
 80243da:	69fb      	ldr	r3, [r7, #28]
 80243dc:	fa02 f303 	lsl.w	r3, r2, r3
 80243e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80243e2:	683b      	ldr	r3, [r7, #0]
 80243e4:	681b      	ldr	r3, [r3, #0]
 80243e6:	697a      	ldr	r2, [r7, #20]
 80243e8:	4013      	ands	r3, r2
 80243ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80243ec:	693a      	ldr	r2, [r7, #16]
 80243ee:	697b      	ldr	r3, [r7, #20]
 80243f0:	429a      	cmp	r2, r3
 80243f2:	f040 815a 	bne.w	80246aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80243f6:	683b      	ldr	r3, [r7, #0]
 80243f8:	685b      	ldr	r3, [r3, #4]
 80243fa:	2b01      	cmp	r3, #1
 80243fc:	d00b      	beq.n	8024416 <HAL_GPIO_Init+0x5a>
 80243fe:	683b      	ldr	r3, [r7, #0]
 8024400:	685b      	ldr	r3, [r3, #4]
 8024402:	2b02      	cmp	r3, #2
 8024404:	d007      	beq.n	8024416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024406:	683b      	ldr	r3, [r7, #0]
 8024408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802440a:	2b11      	cmp	r3, #17
 802440c:	d003      	beq.n	8024416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802440e:	683b      	ldr	r3, [r7, #0]
 8024410:	685b      	ldr	r3, [r3, #4]
 8024412:	2b12      	cmp	r3, #18
 8024414:	d130      	bne.n	8024478 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	689b      	ldr	r3, [r3, #8]
 802441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802441c:	69fb      	ldr	r3, [r7, #28]
 802441e:	005b      	lsls	r3, r3, #1
 8024420:	2203      	movs	r2, #3
 8024422:	fa02 f303 	lsl.w	r3, r2, r3
 8024426:	43db      	mvns	r3, r3
 8024428:	69ba      	ldr	r2, [r7, #24]
 802442a:	4013      	ands	r3, r2
 802442c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802442e:	683b      	ldr	r3, [r7, #0]
 8024430:	68da      	ldr	r2, [r3, #12]
 8024432:	69fb      	ldr	r3, [r7, #28]
 8024434:	005b      	lsls	r3, r3, #1
 8024436:	fa02 f303 	lsl.w	r3, r2, r3
 802443a:	69ba      	ldr	r2, [r7, #24]
 802443c:	4313      	orrs	r3, r2
 802443e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	69ba      	ldr	r2, [r7, #24]
 8024444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	685b      	ldr	r3, [r3, #4]
 802444a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802444c:	2201      	movs	r2, #1
 802444e:	69fb      	ldr	r3, [r7, #28]
 8024450:	fa02 f303 	lsl.w	r3, r2, r3
 8024454:	43db      	mvns	r3, r3
 8024456:	69ba      	ldr	r2, [r7, #24]
 8024458:	4013      	ands	r3, r2
 802445a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802445c:	683b      	ldr	r3, [r7, #0]
 802445e:	685b      	ldr	r3, [r3, #4]
 8024460:	091b      	lsrs	r3, r3, #4
 8024462:	f003 0201 	and.w	r2, r3, #1
 8024466:	69fb      	ldr	r3, [r7, #28]
 8024468:	fa02 f303 	lsl.w	r3, r2, r3
 802446c:	69ba      	ldr	r2, [r7, #24]
 802446e:	4313      	orrs	r3, r2
 8024470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	69ba      	ldr	r2, [r7, #24]
 8024476:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8024478:	687b      	ldr	r3, [r7, #4]
 802447a:	68db      	ldr	r3, [r3, #12]
 802447c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802447e:	69fb      	ldr	r3, [r7, #28]
 8024480:	005b      	lsls	r3, r3, #1
 8024482:	2203      	movs	r2, #3
 8024484:	fa02 f303 	lsl.w	r3, r2, r3
 8024488:	43db      	mvns	r3, r3
 802448a:	69ba      	ldr	r2, [r7, #24]
 802448c:	4013      	ands	r3, r2
 802448e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024490:	683b      	ldr	r3, [r7, #0]
 8024492:	689a      	ldr	r2, [r3, #8]
 8024494:	69fb      	ldr	r3, [r7, #28]
 8024496:	005b      	lsls	r3, r3, #1
 8024498:	fa02 f303 	lsl.w	r3, r2, r3
 802449c:	69ba      	ldr	r2, [r7, #24]
 802449e:	4313      	orrs	r3, r2
 80244a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	69ba      	ldr	r2, [r7, #24]
 80244a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80244a8:	683b      	ldr	r3, [r7, #0]
 80244aa:	685b      	ldr	r3, [r3, #4]
 80244ac:	2b02      	cmp	r3, #2
 80244ae:	d003      	beq.n	80244b8 <HAL_GPIO_Init+0xfc>
 80244b0:	683b      	ldr	r3, [r7, #0]
 80244b2:	685b      	ldr	r3, [r3, #4]
 80244b4:	2b12      	cmp	r3, #18
 80244b6:	d123      	bne.n	8024500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80244b8:	69fb      	ldr	r3, [r7, #28]
 80244ba:	08da      	lsrs	r2, r3, #3
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	3208      	adds	r2, #8
 80244c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80244c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80244c6:	69fb      	ldr	r3, [r7, #28]
 80244c8:	f003 0307 	and.w	r3, r3, #7
 80244cc:	009b      	lsls	r3, r3, #2
 80244ce:	220f      	movs	r2, #15
 80244d0:	fa02 f303 	lsl.w	r3, r2, r3
 80244d4:	43db      	mvns	r3, r3
 80244d6:	69ba      	ldr	r2, [r7, #24]
 80244d8:	4013      	ands	r3, r2
 80244da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80244dc:	683b      	ldr	r3, [r7, #0]
 80244de:	691a      	ldr	r2, [r3, #16]
 80244e0:	69fb      	ldr	r3, [r7, #28]
 80244e2:	f003 0307 	and.w	r3, r3, #7
 80244e6:	009b      	lsls	r3, r3, #2
 80244e8:	fa02 f303 	lsl.w	r3, r2, r3
 80244ec:	69ba      	ldr	r2, [r7, #24]
 80244ee:	4313      	orrs	r3, r2
 80244f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80244f2:	69fb      	ldr	r3, [r7, #28]
 80244f4:	08da      	lsrs	r2, r3, #3
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	3208      	adds	r2, #8
 80244fa:	69b9      	ldr	r1, [r7, #24]
 80244fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	681b      	ldr	r3, [r3, #0]
 8024504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024506:	69fb      	ldr	r3, [r7, #28]
 8024508:	005b      	lsls	r3, r3, #1
 802450a:	2203      	movs	r2, #3
 802450c:	fa02 f303 	lsl.w	r3, r2, r3
 8024510:	43db      	mvns	r3, r3
 8024512:	69ba      	ldr	r2, [r7, #24]
 8024514:	4013      	ands	r3, r2
 8024516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024518:	683b      	ldr	r3, [r7, #0]
 802451a:	685b      	ldr	r3, [r3, #4]
 802451c:	f003 0203 	and.w	r2, r3, #3
 8024520:	69fb      	ldr	r3, [r7, #28]
 8024522:	005b      	lsls	r3, r3, #1
 8024524:	fa02 f303 	lsl.w	r3, r2, r3
 8024528:	69ba      	ldr	r2, [r7, #24]
 802452a:	4313      	orrs	r3, r2
 802452c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	69ba      	ldr	r2, [r7, #24]
 8024532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8024534:	683b      	ldr	r3, [r7, #0]
 8024536:	685b      	ldr	r3, [r3, #4]
 8024538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802453c:	2b00      	cmp	r3, #0
 802453e:	f000 80b4 	beq.w	80246aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024542:	2300      	movs	r3, #0
 8024544:	60fb      	str	r3, [r7, #12]
 8024546:	4b60      	ldr	r3, [pc, #384]	; (80246c8 <HAL_GPIO_Init+0x30c>)
 8024548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802454a:	4a5f      	ldr	r2, [pc, #380]	; (80246c8 <HAL_GPIO_Init+0x30c>)
 802454c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024550:	6453      	str	r3, [r2, #68]	; 0x44
 8024552:	4b5d      	ldr	r3, [pc, #372]	; (80246c8 <HAL_GPIO_Init+0x30c>)
 8024554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802455a:	60fb      	str	r3, [r7, #12]
 802455c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802455e:	4a5b      	ldr	r2, [pc, #364]	; (80246cc <HAL_GPIO_Init+0x310>)
 8024560:	69fb      	ldr	r3, [r7, #28]
 8024562:	089b      	lsrs	r3, r3, #2
 8024564:	3302      	adds	r3, #2
 8024566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802456a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802456c:	69fb      	ldr	r3, [r7, #28]
 802456e:	f003 0303 	and.w	r3, r3, #3
 8024572:	009b      	lsls	r3, r3, #2
 8024574:	220f      	movs	r2, #15
 8024576:	fa02 f303 	lsl.w	r3, r2, r3
 802457a:	43db      	mvns	r3, r3
 802457c:	69ba      	ldr	r2, [r7, #24]
 802457e:	4013      	ands	r3, r2
 8024580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	4a52      	ldr	r2, [pc, #328]	; (80246d0 <HAL_GPIO_Init+0x314>)
 8024586:	4293      	cmp	r3, r2
 8024588:	d02b      	beq.n	80245e2 <HAL_GPIO_Init+0x226>
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	4a51      	ldr	r2, [pc, #324]	; (80246d4 <HAL_GPIO_Init+0x318>)
 802458e:	4293      	cmp	r3, r2
 8024590:	d025      	beq.n	80245de <HAL_GPIO_Init+0x222>
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	4a50      	ldr	r2, [pc, #320]	; (80246d8 <HAL_GPIO_Init+0x31c>)
 8024596:	4293      	cmp	r3, r2
 8024598:	d01f      	beq.n	80245da <HAL_GPIO_Init+0x21e>
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	4a4f      	ldr	r2, [pc, #316]	; (80246dc <HAL_GPIO_Init+0x320>)
 802459e:	4293      	cmp	r3, r2
 80245a0:	d019      	beq.n	80245d6 <HAL_GPIO_Init+0x21a>
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	4a4e      	ldr	r2, [pc, #312]	; (80246e0 <HAL_GPIO_Init+0x324>)
 80245a6:	4293      	cmp	r3, r2
 80245a8:	d013      	beq.n	80245d2 <HAL_GPIO_Init+0x216>
 80245aa:	687b      	ldr	r3, [r7, #4]
 80245ac:	4a4d      	ldr	r2, [pc, #308]	; (80246e4 <HAL_GPIO_Init+0x328>)
 80245ae:	4293      	cmp	r3, r2
 80245b0:	d00d      	beq.n	80245ce <HAL_GPIO_Init+0x212>
 80245b2:	687b      	ldr	r3, [r7, #4]
 80245b4:	4a4c      	ldr	r2, [pc, #304]	; (80246e8 <HAL_GPIO_Init+0x32c>)
 80245b6:	4293      	cmp	r3, r2
 80245b8:	d007      	beq.n	80245ca <HAL_GPIO_Init+0x20e>
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	4a4b      	ldr	r2, [pc, #300]	; (80246ec <HAL_GPIO_Init+0x330>)
 80245be:	4293      	cmp	r3, r2
 80245c0:	d101      	bne.n	80245c6 <HAL_GPIO_Init+0x20a>
 80245c2:	2307      	movs	r3, #7
 80245c4:	e00e      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245c6:	2308      	movs	r3, #8
 80245c8:	e00c      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245ca:	2306      	movs	r3, #6
 80245cc:	e00a      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245ce:	2305      	movs	r3, #5
 80245d0:	e008      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245d2:	2304      	movs	r3, #4
 80245d4:	e006      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245d6:	2303      	movs	r3, #3
 80245d8:	e004      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245da:	2302      	movs	r3, #2
 80245dc:	e002      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245de:	2301      	movs	r3, #1
 80245e0:	e000      	b.n	80245e4 <HAL_GPIO_Init+0x228>
 80245e2:	2300      	movs	r3, #0
 80245e4:	69fa      	ldr	r2, [r7, #28]
 80245e6:	f002 0203 	and.w	r2, r2, #3
 80245ea:	0092      	lsls	r2, r2, #2
 80245ec:	4093      	lsls	r3, r2
 80245ee:	69ba      	ldr	r2, [r7, #24]
 80245f0:	4313      	orrs	r3, r2
 80245f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80245f4:	4935      	ldr	r1, [pc, #212]	; (80246cc <HAL_GPIO_Init+0x310>)
 80245f6:	69fb      	ldr	r3, [r7, #28]
 80245f8:	089b      	lsrs	r3, r3, #2
 80245fa:	3302      	adds	r3, #2
 80245fc:	69ba      	ldr	r2, [r7, #24]
 80245fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024602:	4b3b      	ldr	r3, [pc, #236]	; (80246f0 <HAL_GPIO_Init+0x334>)
 8024604:	681b      	ldr	r3, [r3, #0]
 8024606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024608:	693b      	ldr	r3, [r7, #16]
 802460a:	43db      	mvns	r3, r3
 802460c:	69ba      	ldr	r2, [r7, #24]
 802460e:	4013      	ands	r3, r2
 8024610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8024612:	683b      	ldr	r3, [r7, #0]
 8024614:	685b      	ldr	r3, [r3, #4]
 8024616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802461a:	2b00      	cmp	r3, #0
 802461c:	d003      	beq.n	8024626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802461e:	69ba      	ldr	r2, [r7, #24]
 8024620:	693b      	ldr	r3, [r7, #16]
 8024622:	4313      	orrs	r3, r2
 8024624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024626:	4a32      	ldr	r2, [pc, #200]	; (80246f0 <HAL_GPIO_Init+0x334>)
 8024628:	69bb      	ldr	r3, [r7, #24]
 802462a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802462c:	4b30      	ldr	r3, [pc, #192]	; (80246f0 <HAL_GPIO_Init+0x334>)
 802462e:	685b      	ldr	r3, [r3, #4]
 8024630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024632:	693b      	ldr	r3, [r7, #16]
 8024634:	43db      	mvns	r3, r3
 8024636:	69ba      	ldr	r2, [r7, #24]
 8024638:	4013      	ands	r3, r2
 802463a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802463c:	683b      	ldr	r3, [r7, #0]
 802463e:	685b      	ldr	r3, [r3, #4]
 8024640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024644:	2b00      	cmp	r3, #0
 8024646:	d003      	beq.n	8024650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8024648:	69ba      	ldr	r2, [r7, #24]
 802464a:	693b      	ldr	r3, [r7, #16]
 802464c:	4313      	orrs	r3, r2
 802464e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024650:	4a27      	ldr	r2, [pc, #156]	; (80246f0 <HAL_GPIO_Init+0x334>)
 8024652:	69bb      	ldr	r3, [r7, #24]
 8024654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024656:	4b26      	ldr	r3, [pc, #152]	; (80246f0 <HAL_GPIO_Init+0x334>)
 8024658:	689b      	ldr	r3, [r3, #8]
 802465a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802465c:	693b      	ldr	r3, [r7, #16]
 802465e:	43db      	mvns	r3, r3
 8024660:	69ba      	ldr	r2, [r7, #24]
 8024662:	4013      	ands	r3, r2
 8024664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8024666:	683b      	ldr	r3, [r7, #0]
 8024668:	685b      	ldr	r3, [r3, #4]
 802466a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802466e:	2b00      	cmp	r3, #0
 8024670:	d003      	beq.n	802467a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8024672:	69ba      	ldr	r2, [r7, #24]
 8024674:	693b      	ldr	r3, [r7, #16]
 8024676:	4313      	orrs	r3, r2
 8024678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802467a:	4a1d      	ldr	r2, [pc, #116]	; (80246f0 <HAL_GPIO_Init+0x334>)
 802467c:	69bb      	ldr	r3, [r7, #24]
 802467e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024680:	4b1b      	ldr	r3, [pc, #108]	; (80246f0 <HAL_GPIO_Init+0x334>)
 8024682:	68db      	ldr	r3, [r3, #12]
 8024684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024686:	693b      	ldr	r3, [r7, #16]
 8024688:	43db      	mvns	r3, r3
 802468a:	69ba      	ldr	r2, [r7, #24]
 802468c:	4013      	ands	r3, r2
 802468e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8024690:	683b      	ldr	r3, [r7, #0]
 8024692:	685b      	ldr	r3, [r3, #4]
 8024694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024698:	2b00      	cmp	r3, #0
 802469a:	d003      	beq.n	80246a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802469c:	69ba      	ldr	r2, [r7, #24]
 802469e:	693b      	ldr	r3, [r7, #16]
 80246a0:	4313      	orrs	r3, r2
 80246a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80246a4:	4a12      	ldr	r2, [pc, #72]	; (80246f0 <HAL_GPIO_Init+0x334>)
 80246a6:	69bb      	ldr	r3, [r7, #24]
 80246a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80246aa:	69fb      	ldr	r3, [r7, #28]
 80246ac:	3301      	adds	r3, #1
 80246ae:	61fb      	str	r3, [r7, #28]
 80246b0:	69fb      	ldr	r3, [r7, #28]
 80246b2:	2b0f      	cmp	r3, #15
 80246b4:	f67f ae90 	bls.w	80243d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80246b8:	bf00      	nop
 80246ba:	bf00      	nop
 80246bc:	3724      	adds	r7, #36	; 0x24
 80246be:	46bd      	mov	sp, r7
 80246c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246c4:	4770      	bx	lr
 80246c6:	bf00      	nop
 80246c8:	40023800 	.word	0x40023800
 80246cc:	40013800 	.word	0x40013800
 80246d0:	40020000 	.word	0x40020000
 80246d4:	40020400 	.word	0x40020400
 80246d8:	40020800 	.word	0x40020800
 80246dc:	40020c00 	.word	0x40020c00
 80246e0:	40021000 	.word	0x40021000
 80246e4:	40021400 	.word	0x40021400
 80246e8:	40021800 	.word	0x40021800
 80246ec:	40021c00 	.word	0x40021c00
 80246f0:	40013c00 	.word	0x40013c00

080246f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80246f4:	b480      	push	{r7}
 80246f6:	b083      	sub	sp, #12
 80246f8:	af00      	add	r7, sp, #0
 80246fa:	6078      	str	r0, [r7, #4]
 80246fc:	460b      	mov	r3, r1
 80246fe:	807b      	strh	r3, [r7, #2]
 8024700:	4613      	mov	r3, r2
 8024702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024704:	787b      	ldrb	r3, [r7, #1]
 8024706:	2b00      	cmp	r3, #0
 8024708:	d003      	beq.n	8024712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802470a:	887a      	ldrh	r2, [r7, #2]
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024710:	e003      	b.n	802471a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024712:	887b      	ldrh	r3, [r7, #2]
 8024714:	041a      	lsls	r2, r3, #16
 8024716:	687b      	ldr	r3, [r7, #4]
 8024718:	619a      	str	r2, [r3, #24]
}
 802471a:	bf00      	nop
 802471c:	370c      	adds	r7, #12
 802471e:	46bd      	mov	sp, r7
 8024720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024724:	4770      	bx	lr

08024726 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8024726:	b480      	push	{r7}
 8024728:	b083      	sub	sp, #12
 802472a:	af00      	add	r7, sp, #0
 802472c:	6078      	str	r0, [r7, #4]
 802472e:	460b      	mov	r3, r1
 8024730:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	695a      	ldr	r2, [r3, #20]
 8024736:	887b      	ldrh	r3, [r7, #2]
 8024738:	401a      	ands	r2, r3
 802473a:	887b      	ldrh	r3, [r7, #2]
 802473c:	429a      	cmp	r2, r3
 802473e:	d104      	bne.n	802474a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8024740:	887b      	ldrh	r3, [r7, #2]
 8024742:	041a      	lsls	r2, r3, #16
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8024748:	e002      	b.n	8024750 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 802474a:	887a      	ldrh	r2, [r7, #2]
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	619a      	str	r2, [r3, #24]
}
 8024750:	bf00      	nop
 8024752:	370c      	adds	r7, #12
 8024754:	46bd      	mov	sp, r7
 8024756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802475a:	4770      	bx	lr

0802475c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 802475c:	b580      	push	{r7, lr}
 802475e:	b082      	sub	sp, #8
 8024760:	af00      	add	r7, sp, #0
 8024762:	4603      	mov	r3, r0
 8024764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8024766:	4b08      	ldr	r3, [pc, #32]	; (8024788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024768:	695a      	ldr	r2, [r3, #20]
 802476a:	88fb      	ldrh	r3, [r7, #6]
 802476c:	4013      	ands	r3, r2
 802476e:	2b00      	cmp	r3, #0
 8024770:	d006      	beq.n	8024780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024772:	4a05      	ldr	r2, [pc, #20]	; (8024788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024774:	88fb      	ldrh	r3, [r7, #6]
 8024776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8024778:	88fb      	ldrh	r3, [r7, #6]
 802477a:	4618      	mov	r0, r3
 802477c:	f7ff f82e 	bl	80237dc <HAL_GPIO_EXTI_Callback>
  }
}
 8024780:	bf00      	nop
 8024782:	3708      	adds	r7, #8
 8024784:	46bd      	mov	sp, r7
 8024786:	bd80      	pop	{r7, pc}
 8024788:	40013c00 	.word	0x40013c00

0802478c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802478c:	b580      	push	{r7, lr}
 802478e:	b086      	sub	sp, #24
 8024790:	af00      	add	r7, sp, #0
 8024792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	2b00      	cmp	r3, #0
 8024798:	d101      	bne.n	802479e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802479a:	2301      	movs	r3, #1
 802479c:	e25b      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802479e:	687b      	ldr	r3, [r7, #4]
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	f003 0301 	and.w	r3, r3, #1
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d075      	beq.n	8024896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80247aa:	4ba3      	ldr	r3, [pc, #652]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247ac:	689b      	ldr	r3, [r3, #8]
 80247ae:	f003 030c 	and.w	r3, r3, #12
 80247b2:	2b04      	cmp	r3, #4
 80247b4:	d00c      	beq.n	80247d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80247b6:	4ba0      	ldr	r3, [pc, #640]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247b8:	689b      	ldr	r3, [r3, #8]
 80247ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80247be:	2b08      	cmp	r3, #8
 80247c0:	d112      	bne.n	80247e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80247c2:	4b9d      	ldr	r3, [pc, #628]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247c4:	685b      	ldr	r3, [r3, #4]
 80247c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80247ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80247ce:	d10b      	bne.n	80247e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80247d0:	4b99      	ldr	r3, [pc, #612]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80247d8:	2b00      	cmp	r3, #0
 80247da:	d05b      	beq.n	8024894 <HAL_RCC_OscConfig+0x108>
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	685b      	ldr	r3, [r3, #4]
 80247e0:	2b00      	cmp	r3, #0
 80247e2:	d157      	bne.n	8024894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80247e4:	2301      	movs	r3, #1
 80247e6:	e236      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	685b      	ldr	r3, [r3, #4]
 80247ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80247f0:	d106      	bne.n	8024800 <HAL_RCC_OscConfig+0x74>
 80247f2:	4b91      	ldr	r3, [pc, #580]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	4a90      	ldr	r2, [pc, #576]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80247f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80247fc:	6013      	str	r3, [r2, #0]
 80247fe:	e01d      	b.n	802483c <HAL_RCC_OscConfig+0xb0>
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	685b      	ldr	r3, [r3, #4]
 8024804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8024808:	d10c      	bne.n	8024824 <HAL_RCC_OscConfig+0x98>
 802480a:	4b8b      	ldr	r3, [pc, #556]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	4a8a      	ldr	r2, [pc, #552]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024814:	6013      	str	r3, [r2, #0]
 8024816:	4b88      	ldr	r3, [pc, #544]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	4a87      	ldr	r2, [pc, #540]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 802481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024820:	6013      	str	r3, [r2, #0]
 8024822:	e00b      	b.n	802483c <HAL_RCC_OscConfig+0xb0>
 8024824:	4b84      	ldr	r3, [pc, #528]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024826:	681b      	ldr	r3, [r3, #0]
 8024828:	4a83      	ldr	r2, [pc, #524]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 802482a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802482e:	6013      	str	r3, [r2, #0]
 8024830:	4b81      	ldr	r3, [pc, #516]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024832:	681b      	ldr	r3, [r3, #0]
 8024834:	4a80      	ldr	r2, [pc, #512]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802483a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	685b      	ldr	r3, [r3, #4]
 8024840:	2b00      	cmp	r3, #0
 8024842:	d013      	beq.n	802486c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024844:	f7ff f940 	bl	8023ac8 <HAL_GetTick>
 8024848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802484a:	e008      	b.n	802485e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802484c:	f7ff f93c 	bl	8023ac8 <HAL_GetTick>
 8024850:	4602      	mov	r2, r0
 8024852:	693b      	ldr	r3, [r7, #16]
 8024854:	1ad3      	subs	r3, r2, r3
 8024856:	2b64      	cmp	r3, #100	; 0x64
 8024858:	d901      	bls.n	802485e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802485a:	2303      	movs	r3, #3
 802485c:	e1fb      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802485e:	4b76      	ldr	r3, [pc, #472]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024860:	681b      	ldr	r3, [r3, #0]
 8024862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024866:	2b00      	cmp	r3, #0
 8024868:	d0f0      	beq.n	802484c <HAL_RCC_OscConfig+0xc0>
 802486a:	e014      	b.n	8024896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802486c:	f7ff f92c 	bl	8023ac8 <HAL_GetTick>
 8024870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024872:	e008      	b.n	8024886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8024874:	f7ff f928 	bl	8023ac8 <HAL_GetTick>
 8024878:	4602      	mov	r2, r0
 802487a:	693b      	ldr	r3, [r7, #16]
 802487c:	1ad3      	subs	r3, r2, r3
 802487e:	2b64      	cmp	r3, #100	; 0x64
 8024880:	d901      	bls.n	8024886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8024882:	2303      	movs	r3, #3
 8024884:	e1e7      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024886:	4b6c      	ldr	r3, [pc, #432]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802488e:	2b00      	cmp	r3, #0
 8024890:	d1f0      	bne.n	8024874 <HAL_RCC_OscConfig+0xe8>
 8024892:	e000      	b.n	8024896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	681b      	ldr	r3, [r3, #0]
 802489a:	f003 0302 	and.w	r3, r3, #2
 802489e:	2b00      	cmp	r3, #0
 80248a0:	d063      	beq.n	802496a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80248a2:	4b65      	ldr	r3, [pc, #404]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248a4:	689b      	ldr	r3, [r3, #8]
 80248a6:	f003 030c 	and.w	r3, r3, #12
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d00b      	beq.n	80248c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80248ae:	4b62      	ldr	r3, [pc, #392]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248b0:	689b      	ldr	r3, [r3, #8]
 80248b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80248b6:	2b08      	cmp	r3, #8
 80248b8:	d11c      	bne.n	80248f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80248ba:	4b5f      	ldr	r3, [pc, #380]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248bc:	685b      	ldr	r3, [r3, #4]
 80248be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d116      	bne.n	80248f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80248c6:	4b5c      	ldr	r3, [pc, #368]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	f003 0302 	and.w	r3, r3, #2
 80248ce:	2b00      	cmp	r3, #0
 80248d0:	d005      	beq.n	80248de <HAL_RCC_OscConfig+0x152>
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	68db      	ldr	r3, [r3, #12]
 80248d6:	2b01      	cmp	r3, #1
 80248d8:	d001      	beq.n	80248de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80248da:	2301      	movs	r3, #1
 80248dc:	e1bb      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80248de:	4b56      	ldr	r3, [pc, #344]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	691b      	ldr	r3, [r3, #16]
 80248ea:	00db      	lsls	r3, r3, #3
 80248ec:	4952      	ldr	r1, [pc, #328]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80248ee:	4313      	orrs	r3, r2
 80248f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80248f2:	e03a      	b.n	802496a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	68db      	ldr	r3, [r3, #12]
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d020      	beq.n	802493e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80248fc:	4b4f      	ldr	r3, [pc, #316]	; (8024a3c <HAL_RCC_OscConfig+0x2b0>)
 80248fe:	2201      	movs	r2, #1
 8024900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024902:	f7ff f8e1 	bl	8023ac8 <HAL_GetTick>
 8024906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024908:	e008      	b.n	802491c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802490a:	f7ff f8dd 	bl	8023ac8 <HAL_GetTick>
 802490e:	4602      	mov	r2, r0
 8024910:	693b      	ldr	r3, [r7, #16]
 8024912:	1ad3      	subs	r3, r2, r3
 8024914:	2b02      	cmp	r3, #2
 8024916:	d901      	bls.n	802491c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8024918:	2303      	movs	r3, #3
 802491a:	e19c      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802491c:	4b46      	ldr	r3, [pc, #280]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 802491e:	681b      	ldr	r3, [r3, #0]
 8024920:	f003 0302 	and.w	r3, r3, #2
 8024924:	2b00      	cmp	r3, #0
 8024926:	d0f0      	beq.n	802490a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024928:	4b43      	ldr	r3, [pc, #268]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 802492a:	681b      	ldr	r3, [r3, #0]
 802492c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	691b      	ldr	r3, [r3, #16]
 8024934:	00db      	lsls	r3, r3, #3
 8024936:	4940      	ldr	r1, [pc, #256]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024938:	4313      	orrs	r3, r2
 802493a:	600b      	str	r3, [r1, #0]
 802493c:	e015      	b.n	802496a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802493e:	4b3f      	ldr	r3, [pc, #252]	; (8024a3c <HAL_RCC_OscConfig+0x2b0>)
 8024940:	2200      	movs	r2, #0
 8024942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024944:	f7ff f8c0 	bl	8023ac8 <HAL_GetTick>
 8024948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802494a:	e008      	b.n	802495e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802494c:	f7ff f8bc 	bl	8023ac8 <HAL_GetTick>
 8024950:	4602      	mov	r2, r0
 8024952:	693b      	ldr	r3, [r7, #16]
 8024954:	1ad3      	subs	r3, r2, r3
 8024956:	2b02      	cmp	r3, #2
 8024958:	d901      	bls.n	802495e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802495a:	2303      	movs	r3, #3
 802495c:	e17b      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802495e:	4b36      	ldr	r3, [pc, #216]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	f003 0302 	and.w	r3, r3, #2
 8024966:	2b00      	cmp	r3, #0
 8024968:	d1f0      	bne.n	802494c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802496a:	687b      	ldr	r3, [r7, #4]
 802496c:	681b      	ldr	r3, [r3, #0]
 802496e:	f003 0308 	and.w	r3, r3, #8
 8024972:	2b00      	cmp	r3, #0
 8024974:	d030      	beq.n	80249d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	695b      	ldr	r3, [r3, #20]
 802497a:	2b00      	cmp	r3, #0
 802497c:	d016      	beq.n	80249ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802497e:	4b30      	ldr	r3, [pc, #192]	; (8024a40 <HAL_RCC_OscConfig+0x2b4>)
 8024980:	2201      	movs	r2, #1
 8024982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024984:	f7ff f8a0 	bl	8023ac8 <HAL_GetTick>
 8024988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802498a:	e008      	b.n	802499e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802498c:	f7ff f89c 	bl	8023ac8 <HAL_GetTick>
 8024990:	4602      	mov	r2, r0
 8024992:	693b      	ldr	r3, [r7, #16]
 8024994:	1ad3      	subs	r3, r2, r3
 8024996:	2b02      	cmp	r3, #2
 8024998:	d901      	bls.n	802499e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802499a:	2303      	movs	r3, #3
 802499c:	e15b      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802499e:	4b26      	ldr	r3, [pc, #152]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80249a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80249a2:	f003 0302 	and.w	r3, r3, #2
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	d0f0      	beq.n	802498c <HAL_RCC_OscConfig+0x200>
 80249aa:	e015      	b.n	80249d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80249ac:	4b24      	ldr	r3, [pc, #144]	; (8024a40 <HAL_RCC_OscConfig+0x2b4>)
 80249ae:	2200      	movs	r2, #0
 80249b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80249b2:	f7ff f889 	bl	8023ac8 <HAL_GetTick>
 80249b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80249b8:	e008      	b.n	80249cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80249ba:	f7ff f885 	bl	8023ac8 <HAL_GetTick>
 80249be:	4602      	mov	r2, r0
 80249c0:	693b      	ldr	r3, [r7, #16]
 80249c2:	1ad3      	subs	r3, r2, r3
 80249c4:	2b02      	cmp	r3, #2
 80249c6:	d901      	bls.n	80249cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80249c8:	2303      	movs	r3, #3
 80249ca:	e144      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80249cc:	4b1a      	ldr	r3, [pc, #104]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80249ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80249d0:	f003 0302 	and.w	r3, r3, #2
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	d1f0      	bne.n	80249ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80249d8:	687b      	ldr	r3, [r7, #4]
 80249da:	681b      	ldr	r3, [r3, #0]
 80249dc:	f003 0304 	and.w	r3, r3, #4
 80249e0:	2b00      	cmp	r3, #0
 80249e2:	f000 80a0 	beq.w	8024b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80249e6:	2300      	movs	r3, #0
 80249e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80249ea:	4b13      	ldr	r3, [pc, #76]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80249ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d10f      	bne.n	8024a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80249f6:	2300      	movs	r3, #0
 80249f8:	60bb      	str	r3, [r7, #8]
 80249fa:	4b0f      	ldr	r3, [pc, #60]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 80249fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249fe:	4a0e      	ldr	r2, [pc, #56]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024a04:	6413      	str	r3, [r2, #64]	; 0x40
 8024a06:	4b0c      	ldr	r3, [pc, #48]	; (8024a38 <HAL_RCC_OscConfig+0x2ac>)
 8024a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024a0e:	60bb      	str	r3, [r7, #8]
 8024a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024a12:	2301      	movs	r3, #1
 8024a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a16:	4b0b      	ldr	r3, [pc, #44]	; (8024a44 <HAL_RCC_OscConfig+0x2b8>)
 8024a18:	681b      	ldr	r3, [r3, #0]
 8024a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	d121      	bne.n	8024a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8024a22:	4b08      	ldr	r3, [pc, #32]	; (8024a44 <HAL_RCC_OscConfig+0x2b8>)
 8024a24:	681b      	ldr	r3, [r3, #0]
 8024a26:	4a07      	ldr	r2, [pc, #28]	; (8024a44 <HAL_RCC_OscConfig+0x2b8>)
 8024a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8024a2e:	f7ff f84b 	bl	8023ac8 <HAL_GetTick>
 8024a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a34:	e011      	b.n	8024a5a <HAL_RCC_OscConfig+0x2ce>
 8024a36:	bf00      	nop
 8024a38:	40023800 	.word	0x40023800
 8024a3c:	42470000 	.word	0x42470000
 8024a40:	42470e80 	.word	0x42470e80
 8024a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024a48:	f7ff f83e 	bl	8023ac8 <HAL_GetTick>
 8024a4c:	4602      	mov	r2, r0
 8024a4e:	693b      	ldr	r3, [r7, #16]
 8024a50:	1ad3      	subs	r3, r2, r3
 8024a52:	2b02      	cmp	r3, #2
 8024a54:	d901      	bls.n	8024a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8024a56:	2303      	movs	r3, #3
 8024a58:	e0fd      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a5a:	4b81      	ldr	r3, [pc, #516]	; (8024c60 <HAL_RCC_OscConfig+0x4d4>)
 8024a5c:	681b      	ldr	r3, [r3, #0]
 8024a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a62:	2b00      	cmp	r3, #0
 8024a64:	d0f0      	beq.n	8024a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024a66:	687b      	ldr	r3, [r7, #4]
 8024a68:	689b      	ldr	r3, [r3, #8]
 8024a6a:	2b01      	cmp	r3, #1
 8024a6c:	d106      	bne.n	8024a7c <HAL_RCC_OscConfig+0x2f0>
 8024a6e:	4b7d      	ldr	r3, [pc, #500]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a72:	4a7c      	ldr	r2, [pc, #496]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a74:	f043 0301 	orr.w	r3, r3, #1
 8024a78:	6713      	str	r3, [r2, #112]	; 0x70
 8024a7a:	e01c      	b.n	8024ab6 <HAL_RCC_OscConfig+0x32a>
 8024a7c:	687b      	ldr	r3, [r7, #4]
 8024a7e:	689b      	ldr	r3, [r3, #8]
 8024a80:	2b05      	cmp	r3, #5
 8024a82:	d10c      	bne.n	8024a9e <HAL_RCC_OscConfig+0x312>
 8024a84:	4b77      	ldr	r3, [pc, #476]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a88:	4a76      	ldr	r2, [pc, #472]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a8a:	f043 0304 	orr.w	r3, r3, #4
 8024a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8024a90:	4b74      	ldr	r3, [pc, #464]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a94:	4a73      	ldr	r2, [pc, #460]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024a96:	f043 0301 	orr.w	r3, r3, #1
 8024a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8024a9c:	e00b      	b.n	8024ab6 <HAL_RCC_OscConfig+0x32a>
 8024a9e:	4b71      	ldr	r3, [pc, #452]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024aa2:	4a70      	ldr	r2, [pc, #448]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024aa4:	f023 0301 	bic.w	r3, r3, #1
 8024aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8024aaa:	4b6e      	ldr	r3, [pc, #440]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024aae:	4a6d      	ldr	r2, [pc, #436]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024ab0:	f023 0304 	bic.w	r3, r3, #4
 8024ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	689b      	ldr	r3, [r3, #8]
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d015      	beq.n	8024aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024abe:	f7ff f803 	bl	8023ac8 <HAL_GetTick>
 8024ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024ac4:	e00a      	b.n	8024adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024ac6:	f7fe ffff 	bl	8023ac8 <HAL_GetTick>
 8024aca:	4602      	mov	r2, r0
 8024acc:	693b      	ldr	r3, [r7, #16]
 8024ace:	1ad3      	subs	r3, r2, r3
 8024ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8024ad4:	4293      	cmp	r3, r2
 8024ad6:	d901      	bls.n	8024adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8024ad8:	2303      	movs	r3, #3
 8024ada:	e0bc      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024adc:	4b61      	ldr	r3, [pc, #388]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024ae0:	f003 0302 	and.w	r3, r3, #2
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	d0ee      	beq.n	8024ac6 <HAL_RCC_OscConfig+0x33a>
 8024ae8:	e014      	b.n	8024b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024aea:	f7fe ffed 	bl	8023ac8 <HAL_GetTick>
 8024aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024af0:	e00a      	b.n	8024b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024af2:	f7fe ffe9 	bl	8023ac8 <HAL_GetTick>
 8024af6:	4602      	mov	r2, r0
 8024af8:	693b      	ldr	r3, [r7, #16]
 8024afa:	1ad3      	subs	r3, r2, r3
 8024afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8024b00:	4293      	cmp	r3, r2
 8024b02:	d901      	bls.n	8024b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8024b04:	2303      	movs	r3, #3
 8024b06:	e0a6      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024b08:	4b56      	ldr	r3, [pc, #344]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024b0c:	f003 0302 	and.w	r3, r3, #2
 8024b10:	2b00      	cmp	r3, #0
 8024b12:	d1ee      	bne.n	8024af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024b14:	7dfb      	ldrb	r3, [r7, #23]
 8024b16:	2b01      	cmp	r3, #1
 8024b18:	d105      	bne.n	8024b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024b1a:	4b52      	ldr	r3, [pc, #328]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b1e:	4a51      	ldr	r2, [pc, #324]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8024b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	699b      	ldr	r3, [r3, #24]
 8024b2a:	2b00      	cmp	r3, #0
 8024b2c:	f000 8092 	beq.w	8024c54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024b30:	4b4c      	ldr	r3, [pc, #304]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b32:	689b      	ldr	r3, [r3, #8]
 8024b34:	f003 030c 	and.w	r3, r3, #12
 8024b38:	2b08      	cmp	r3, #8
 8024b3a:	d05c      	beq.n	8024bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	699b      	ldr	r3, [r3, #24]
 8024b40:	2b02      	cmp	r3, #2
 8024b42:	d141      	bne.n	8024bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024b44:	4b48      	ldr	r3, [pc, #288]	; (8024c68 <HAL_RCC_OscConfig+0x4dc>)
 8024b46:	2200      	movs	r2, #0
 8024b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024b4a:	f7fe ffbd 	bl	8023ac8 <HAL_GetTick>
 8024b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b50:	e008      	b.n	8024b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024b52:	f7fe ffb9 	bl	8023ac8 <HAL_GetTick>
 8024b56:	4602      	mov	r2, r0
 8024b58:	693b      	ldr	r3, [r7, #16]
 8024b5a:	1ad3      	subs	r3, r2, r3
 8024b5c:	2b02      	cmp	r3, #2
 8024b5e:	d901      	bls.n	8024b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8024b60:	2303      	movs	r3, #3
 8024b62:	e078      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b64:	4b3f      	ldr	r3, [pc, #252]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b66:	681b      	ldr	r3, [r3, #0]
 8024b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	d1f0      	bne.n	8024b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	69da      	ldr	r2, [r3, #28]
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	6a1b      	ldr	r3, [r3, #32]
 8024b78:	431a      	orrs	r2, r3
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b7e:	019b      	lsls	r3, r3, #6
 8024b80:	431a      	orrs	r2, r3
 8024b82:	687b      	ldr	r3, [r7, #4]
 8024b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b86:	085b      	lsrs	r3, r3, #1
 8024b88:	3b01      	subs	r3, #1
 8024b8a:	041b      	lsls	r3, r3, #16
 8024b8c:	431a      	orrs	r2, r3
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b92:	061b      	lsls	r3, r3, #24
 8024b94:	4933      	ldr	r1, [pc, #204]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024b96:	4313      	orrs	r3, r2
 8024b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8024b9a:	4b33      	ldr	r3, [pc, #204]	; (8024c68 <HAL_RCC_OscConfig+0x4dc>)
 8024b9c:	2201      	movs	r2, #1
 8024b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024ba0:	f7fe ff92 	bl	8023ac8 <HAL_GetTick>
 8024ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024ba6:	e008      	b.n	8024bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024ba8:	f7fe ff8e 	bl	8023ac8 <HAL_GetTick>
 8024bac:	4602      	mov	r2, r0
 8024bae:	693b      	ldr	r3, [r7, #16]
 8024bb0:	1ad3      	subs	r3, r2, r3
 8024bb2:	2b02      	cmp	r3, #2
 8024bb4:	d901      	bls.n	8024bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8024bb6:	2303      	movs	r3, #3
 8024bb8:	e04d      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024bba:	4b2a      	ldr	r3, [pc, #168]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024bbc:	681b      	ldr	r3, [r3, #0]
 8024bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d0f0      	beq.n	8024ba8 <HAL_RCC_OscConfig+0x41c>
 8024bc6:	e045      	b.n	8024c54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024bc8:	4b27      	ldr	r3, [pc, #156]	; (8024c68 <HAL_RCC_OscConfig+0x4dc>)
 8024bca:	2200      	movs	r2, #0
 8024bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024bce:	f7fe ff7b 	bl	8023ac8 <HAL_GetTick>
 8024bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024bd4:	e008      	b.n	8024be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024bd6:	f7fe ff77 	bl	8023ac8 <HAL_GetTick>
 8024bda:	4602      	mov	r2, r0
 8024bdc:	693b      	ldr	r3, [r7, #16]
 8024bde:	1ad3      	subs	r3, r2, r3
 8024be0:	2b02      	cmp	r3, #2
 8024be2:	d901      	bls.n	8024be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8024be4:	2303      	movs	r3, #3
 8024be6:	e036      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024be8:	4b1e      	ldr	r3, [pc, #120]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d1f0      	bne.n	8024bd6 <HAL_RCC_OscConfig+0x44a>
 8024bf4:	e02e      	b.n	8024c54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8024bf6:	687b      	ldr	r3, [r7, #4]
 8024bf8:	699b      	ldr	r3, [r3, #24]
 8024bfa:	2b01      	cmp	r3, #1
 8024bfc:	d101      	bne.n	8024c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8024bfe:	2301      	movs	r3, #1
 8024c00:	e029      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024c02:	4b18      	ldr	r3, [pc, #96]	; (8024c64 <HAL_RCC_OscConfig+0x4d8>)
 8024c04:	685b      	ldr	r3, [r3, #4]
 8024c06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	69db      	ldr	r3, [r3, #28]
 8024c12:	429a      	cmp	r2, r3
 8024c14:	d11c      	bne.n	8024c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024c16:	68fb      	ldr	r3, [r7, #12]
 8024c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8024c1c:	687b      	ldr	r3, [r7, #4]
 8024c1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024c20:	429a      	cmp	r2, r3
 8024c22:	d115      	bne.n	8024c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8024c24:	68fa      	ldr	r2, [r7, #12]
 8024c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8024c2a:	4013      	ands	r3, r2
 8024c2c:	687a      	ldr	r2, [r7, #4]
 8024c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024c30:	4293      	cmp	r3, r2
 8024c32:	d10d      	bne.n	8024c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8024c34:	68fb      	ldr	r3, [r7, #12]
 8024c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8024c3e:	429a      	cmp	r2, r3
 8024c40:	d106      	bne.n	8024c50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8024c42:	68fb      	ldr	r3, [r7, #12]
 8024c44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8024c4c:	429a      	cmp	r2, r3
 8024c4e:	d001      	beq.n	8024c54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8024c50:	2301      	movs	r3, #1
 8024c52:	e000      	b.n	8024c56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8024c54:	2300      	movs	r3, #0
}
 8024c56:	4618      	mov	r0, r3
 8024c58:	3718      	adds	r7, #24
 8024c5a:	46bd      	mov	sp, r7
 8024c5c:	bd80      	pop	{r7, pc}
 8024c5e:	bf00      	nop
 8024c60:	40007000 	.word	0x40007000
 8024c64:	40023800 	.word	0x40023800
 8024c68:	42470060 	.word	0x42470060

08024c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8024c6c:	b580      	push	{r7, lr}
 8024c6e:	b084      	sub	sp, #16
 8024c70:	af00      	add	r7, sp, #0
 8024c72:	6078      	str	r0, [r7, #4]
 8024c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	d101      	bne.n	8024c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8024c7c:	2301      	movs	r3, #1
 8024c7e:	e0cc      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8024c80:	4b68      	ldr	r3, [pc, #416]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	f003 030f 	and.w	r3, r3, #15
 8024c88:	683a      	ldr	r2, [r7, #0]
 8024c8a:	429a      	cmp	r2, r3
 8024c8c:	d90c      	bls.n	8024ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024c8e:	4b65      	ldr	r3, [pc, #404]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024c90:	683a      	ldr	r2, [r7, #0]
 8024c92:	b2d2      	uxtb	r2, r2
 8024c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024c96:	4b63      	ldr	r3, [pc, #396]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024c98:	681b      	ldr	r3, [r3, #0]
 8024c9a:	f003 030f 	and.w	r3, r3, #15
 8024c9e:	683a      	ldr	r2, [r7, #0]
 8024ca0:	429a      	cmp	r2, r3
 8024ca2:	d001      	beq.n	8024ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8024ca4:	2301      	movs	r3, #1
 8024ca6:	e0b8      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	f003 0302 	and.w	r3, r3, #2
 8024cb0:	2b00      	cmp	r3, #0
 8024cb2:	d020      	beq.n	8024cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024cb4:	687b      	ldr	r3, [r7, #4]
 8024cb6:	681b      	ldr	r3, [r3, #0]
 8024cb8:	f003 0304 	and.w	r3, r3, #4
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d005      	beq.n	8024ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024cc0:	4b59      	ldr	r3, [pc, #356]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024cc2:	689b      	ldr	r3, [r3, #8]
 8024cc4:	4a58      	ldr	r2, [pc, #352]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8024cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	681b      	ldr	r3, [r3, #0]
 8024cd0:	f003 0308 	and.w	r3, r3, #8
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	d005      	beq.n	8024ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8024cd8:	4b53      	ldr	r3, [pc, #332]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024cda:	689b      	ldr	r3, [r3, #8]
 8024cdc:	4a52      	ldr	r2, [pc, #328]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024ce4:	4b50      	ldr	r3, [pc, #320]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024ce6:	689b      	ldr	r3, [r3, #8]
 8024ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	689b      	ldr	r3, [r3, #8]
 8024cf0:	494d      	ldr	r1, [pc, #308]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024cf2:	4313      	orrs	r3, r2
 8024cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	f003 0301 	and.w	r3, r3, #1
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	d044      	beq.n	8024d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	685b      	ldr	r3, [r3, #4]
 8024d06:	2b01      	cmp	r3, #1
 8024d08:	d107      	bne.n	8024d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024d0a:	4b47      	ldr	r3, [pc, #284]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d0c:	681b      	ldr	r3, [r3, #0]
 8024d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	d119      	bne.n	8024d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d16:	2301      	movs	r3, #1
 8024d18:	e07f      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	685b      	ldr	r3, [r3, #4]
 8024d1e:	2b02      	cmp	r3, #2
 8024d20:	d003      	beq.n	8024d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024d26:	2b03      	cmp	r3, #3
 8024d28:	d107      	bne.n	8024d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024d2a:	4b3f      	ldr	r3, [pc, #252]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d2c:	681b      	ldr	r3, [r3, #0]
 8024d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d109      	bne.n	8024d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d36:	2301      	movs	r3, #1
 8024d38:	e06f      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024d3a:	4b3b      	ldr	r3, [pc, #236]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	f003 0302 	and.w	r3, r3, #2
 8024d42:	2b00      	cmp	r3, #0
 8024d44:	d101      	bne.n	8024d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d46:	2301      	movs	r3, #1
 8024d48:	e067      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8024d4a:	4b37      	ldr	r3, [pc, #220]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d4c:	689b      	ldr	r3, [r3, #8]
 8024d4e:	f023 0203 	bic.w	r2, r3, #3
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	685b      	ldr	r3, [r3, #4]
 8024d56:	4934      	ldr	r1, [pc, #208]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d58:	4313      	orrs	r3, r2
 8024d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8024d5c:	f7fe feb4 	bl	8023ac8 <HAL_GetTick>
 8024d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024d62:	e00a      	b.n	8024d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024d64:	f7fe feb0 	bl	8023ac8 <HAL_GetTick>
 8024d68:	4602      	mov	r2, r0
 8024d6a:	68fb      	ldr	r3, [r7, #12]
 8024d6c:	1ad3      	subs	r3, r2, r3
 8024d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024d72:	4293      	cmp	r3, r2
 8024d74:	d901      	bls.n	8024d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8024d76:	2303      	movs	r3, #3
 8024d78:	e04f      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024d7a:	4b2b      	ldr	r3, [pc, #172]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024d7c:	689b      	ldr	r3, [r3, #8]
 8024d7e:	f003 020c 	and.w	r2, r3, #12
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	685b      	ldr	r3, [r3, #4]
 8024d86:	009b      	lsls	r3, r3, #2
 8024d88:	429a      	cmp	r2, r3
 8024d8a:	d1eb      	bne.n	8024d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8024d8c:	4b25      	ldr	r3, [pc, #148]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	f003 030f 	and.w	r3, r3, #15
 8024d94:	683a      	ldr	r2, [r7, #0]
 8024d96:	429a      	cmp	r2, r3
 8024d98:	d20c      	bcs.n	8024db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024d9a:	4b22      	ldr	r3, [pc, #136]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024d9c:	683a      	ldr	r2, [r7, #0]
 8024d9e:	b2d2      	uxtb	r2, r2
 8024da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024da2:	4b20      	ldr	r3, [pc, #128]	; (8024e24 <HAL_RCC_ClockConfig+0x1b8>)
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	f003 030f 	and.w	r3, r3, #15
 8024daa:	683a      	ldr	r2, [r7, #0]
 8024dac:	429a      	cmp	r2, r3
 8024dae:	d001      	beq.n	8024db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024db0:	2301      	movs	r3, #1
 8024db2:	e032      	b.n	8024e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	f003 0304 	and.w	r3, r3, #4
 8024dbc:	2b00      	cmp	r3, #0
 8024dbe:	d008      	beq.n	8024dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024dc0:	4b19      	ldr	r3, [pc, #100]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024dc2:	689b      	ldr	r3, [r3, #8]
 8024dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	68db      	ldr	r3, [r3, #12]
 8024dcc:	4916      	ldr	r1, [pc, #88]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024dce:	4313      	orrs	r3, r2
 8024dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	681b      	ldr	r3, [r3, #0]
 8024dd6:	f003 0308 	and.w	r3, r3, #8
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	d009      	beq.n	8024df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024dde:	4b12      	ldr	r3, [pc, #72]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024de0:	689b      	ldr	r3, [r3, #8]
 8024de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	691b      	ldr	r3, [r3, #16]
 8024dea:	00db      	lsls	r3, r3, #3
 8024dec:	490e      	ldr	r1, [pc, #56]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024dee:	4313      	orrs	r3, r2
 8024df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024df2:	f000 f821 	bl	8024e38 <HAL_RCC_GetSysClockFreq>
 8024df6:	4602      	mov	r2, r0
 8024df8:	4b0b      	ldr	r3, [pc, #44]	; (8024e28 <HAL_RCC_ClockConfig+0x1bc>)
 8024dfa:	689b      	ldr	r3, [r3, #8]
 8024dfc:	091b      	lsrs	r3, r3, #4
 8024dfe:	f003 030f 	and.w	r3, r3, #15
 8024e02:	490a      	ldr	r1, [pc, #40]	; (8024e2c <HAL_RCC_ClockConfig+0x1c0>)
 8024e04:	5ccb      	ldrb	r3, [r1, r3]
 8024e06:	fa22 f303 	lsr.w	r3, r2, r3
 8024e0a:	4a09      	ldr	r2, [pc, #36]	; (8024e30 <HAL_RCC_ClockConfig+0x1c4>)
 8024e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024e0e:	4b09      	ldr	r3, [pc, #36]	; (8024e34 <HAL_RCC_ClockConfig+0x1c8>)
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	4618      	mov	r0, r3
 8024e14:	f7fe fe14 	bl	8023a40 <HAL_InitTick>

  return HAL_OK;
 8024e18:	2300      	movs	r3, #0
}
 8024e1a:	4618      	mov	r0, r3
 8024e1c:	3710      	adds	r7, #16
 8024e1e:	46bd      	mov	sp, r7
 8024e20:	bd80      	pop	{r7, pc}
 8024e22:	bf00      	nop
 8024e24:	40023c00 	.word	0x40023c00
 8024e28:	40023800 	.word	0x40023800
 8024e2c:	0802bcc8 	.word	0x0802bcc8
 8024e30:	20000464 	.word	0x20000464
 8024e34:	20000468 	.word	0x20000468

08024e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8024e3c:	b084      	sub	sp, #16
 8024e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024e40:	2300      	movs	r3, #0
 8024e42:	607b      	str	r3, [r7, #4]
 8024e44:	2300      	movs	r3, #0
 8024e46:	60fb      	str	r3, [r7, #12]
 8024e48:	2300      	movs	r3, #0
 8024e4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8024e50:	4b67      	ldr	r3, [pc, #412]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024e52:	689b      	ldr	r3, [r3, #8]
 8024e54:	f003 030c 	and.w	r3, r3, #12
 8024e58:	2b08      	cmp	r3, #8
 8024e5a:	d00d      	beq.n	8024e78 <HAL_RCC_GetSysClockFreq+0x40>
 8024e5c:	2b08      	cmp	r3, #8
 8024e5e:	f200 80bd 	bhi.w	8024fdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	d002      	beq.n	8024e6c <HAL_RCC_GetSysClockFreq+0x34>
 8024e66:	2b04      	cmp	r3, #4
 8024e68:	d003      	beq.n	8024e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8024e6a:	e0b7      	b.n	8024fdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8024e6c:	4b61      	ldr	r3, [pc, #388]	; (8024ff4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8024e6e:	60bb      	str	r3, [r7, #8]
       break;
 8024e70:	e0b7      	b.n	8024fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8024e72:	4b61      	ldr	r3, [pc, #388]	; (8024ff8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8024e74:	60bb      	str	r3, [r7, #8]
      break;
 8024e76:	e0b4      	b.n	8024fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024e78:	4b5d      	ldr	r3, [pc, #372]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024e7a:	685b      	ldr	r3, [r3, #4]
 8024e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024e80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024e82:	4b5b      	ldr	r3, [pc, #364]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024e84:	685b      	ldr	r3, [r3, #4]
 8024e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	d04d      	beq.n	8024f2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024e8e:	4b58      	ldr	r3, [pc, #352]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024e90:	685b      	ldr	r3, [r3, #4]
 8024e92:	099b      	lsrs	r3, r3, #6
 8024e94:	461a      	mov	r2, r3
 8024e96:	f04f 0300 	mov.w	r3, #0
 8024e9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8024e9e:	f04f 0100 	mov.w	r1, #0
 8024ea2:	ea02 0800 	and.w	r8, r2, r0
 8024ea6:	ea03 0901 	and.w	r9, r3, r1
 8024eaa:	4640      	mov	r0, r8
 8024eac:	4649      	mov	r1, r9
 8024eae:	f04f 0200 	mov.w	r2, #0
 8024eb2:	f04f 0300 	mov.w	r3, #0
 8024eb6:	014b      	lsls	r3, r1, #5
 8024eb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8024ebc:	0142      	lsls	r2, r0, #5
 8024ebe:	4610      	mov	r0, r2
 8024ec0:	4619      	mov	r1, r3
 8024ec2:	ebb0 0008 	subs.w	r0, r0, r8
 8024ec6:	eb61 0109 	sbc.w	r1, r1, r9
 8024eca:	f04f 0200 	mov.w	r2, #0
 8024ece:	f04f 0300 	mov.w	r3, #0
 8024ed2:	018b      	lsls	r3, r1, #6
 8024ed4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8024ed8:	0182      	lsls	r2, r0, #6
 8024eda:	1a12      	subs	r2, r2, r0
 8024edc:	eb63 0301 	sbc.w	r3, r3, r1
 8024ee0:	f04f 0000 	mov.w	r0, #0
 8024ee4:	f04f 0100 	mov.w	r1, #0
 8024ee8:	00d9      	lsls	r1, r3, #3
 8024eea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024eee:	00d0      	lsls	r0, r2, #3
 8024ef0:	4602      	mov	r2, r0
 8024ef2:	460b      	mov	r3, r1
 8024ef4:	eb12 0208 	adds.w	r2, r2, r8
 8024ef8:	eb43 0309 	adc.w	r3, r3, r9
 8024efc:	f04f 0000 	mov.w	r0, #0
 8024f00:	f04f 0100 	mov.w	r1, #0
 8024f04:	0259      	lsls	r1, r3, #9
 8024f06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8024f0a:	0250      	lsls	r0, r2, #9
 8024f0c:	4602      	mov	r2, r0
 8024f0e:	460b      	mov	r3, r1
 8024f10:	4610      	mov	r0, r2
 8024f12:	4619      	mov	r1, r3
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	461a      	mov	r2, r3
 8024f18:	f04f 0300 	mov.w	r3, #0
 8024f1c:	f7fb feb4 	bl	8020c88 <__aeabi_uldivmod>
 8024f20:	4602      	mov	r2, r0
 8024f22:	460b      	mov	r3, r1
 8024f24:	4613      	mov	r3, r2
 8024f26:	60fb      	str	r3, [r7, #12]
 8024f28:	e04a      	b.n	8024fc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024f2a:	4b31      	ldr	r3, [pc, #196]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024f2c:	685b      	ldr	r3, [r3, #4]
 8024f2e:	099b      	lsrs	r3, r3, #6
 8024f30:	461a      	mov	r2, r3
 8024f32:	f04f 0300 	mov.w	r3, #0
 8024f36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8024f3a:	f04f 0100 	mov.w	r1, #0
 8024f3e:	ea02 0400 	and.w	r4, r2, r0
 8024f42:	ea03 0501 	and.w	r5, r3, r1
 8024f46:	4620      	mov	r0, r4
 8024f48:	4629      	mov	r1, r5
 8024f4a:	f04f 0200 	mov.w	r2, #0
 8024f4e:	f04f 0300 	mov.w	r3, #0
 8024f52:	014b      	lsls	r3, r1, #5
 8024f54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8024f58:	0142      	lsls	r2, r0, #5
 8024f5a:	4610      	mov	r0, r2
 8024f5c:	4619      	mov	r1, r3
 8024f5e:	1b00      	subs	r0, r0, r4
 8024f60:	eb61 0105 	sbc.w	r1, r1, r5
 8024f64:	f04f 0200 	mov.w	r2, #0
 8024f68:	f04f 0300 	mov.w	r3, #0
 8024f6c:	018b      	lsls	r3, r1, #6
 8024f6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8024f72:	0182      	lsls	r2, r0, #6
 8024f74:	1a12      	subs	r2, r2, r0
 8024f76:	eb63 0301 	sbc.w	r3, r3, r1
 8024f7a:	f04f 0000 	mov.w	r0, #0
 8024f7e:	f04f 0100 	mov.w	r1, #0
 8024f82:	00d9      	lsls	r1, r3, #3
 8024f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024f88:	00d0      	lsls	r0, r2, #3
 8024f8a:	4602      	mov	r2, r0
 8024f8c:	460b      	mov	r3, r1
 8024f8e:	1912      	adds	r2, r2, r4
 8024f90:	eb45 0303 	adc.w	r3, r5, r3
 8024f94:	f04f 0000 	mov.w	r0, #0
 8024f98:	f04f 0100 	mov.w	r1, #0
 8024f9c:	0299      	lsls	r1, r3, #10
 8024f9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8024fa2:	0290      	lsls	r0, r2, #10
 8024fa4:	4602      	mov	r2, r0
 8024fa6:	460b      	mov	r3, r1
 8024fa8:	4610      	mov	r0, r2
 8024faa:	4619      	mov	r1, r3
 8024fac:	687b      	ldr	r3, [r7, #4]
 8024fae:	461a      	mov	r2, r3
 8024fb0:	f04f 0300 	mov.w	r3, #0
 8024fb4:	f7fb fe68 	bl	8020c88 <__aeabi_uldivmod>
 8024fb8:	4602      	mov	r2, r0
 8024fba:	460b      	mov	r3, r1
 8024fbc:	4613      	mov	r3, r2
 8024fbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8024fc0:	4b0b      	ldr	r3, [pc, #44]	; (8024ff0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024fc2:	685b      	ldr	r3, [r3, #4]
 8024fc4:	0c1b      	lsrs	r3, r3, #16
 8024fc6:	f003 0303 	and.w	r3, r3, #3
 8024fca:	3301      	adds	r3, #1
 8024fcc:	005b      	lsls	r3, r3, #1
 8024fce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8024fd0:	68fa      	ldr	r2, [r7, #12]
 8024fd2:	683b      	ldr	r3, [r7, #0]
 8024fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8024fd8:	60bb      	str	r3, [r7, #8]
      break;
 8024fda:	e002      	b.n	8024fe2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8024fdc:	4b05      	ldr	r3, [pc, #20]	; (8024ff4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8024fde:	60bb      	str	r3, [r7, #8]
      break;
 8024fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024fe2:	68bb      	ldr	r3, [r7, #8]
}
 8024fe4:	4618      	mov	r0, r3
 8024fe6:	3710      	adds	r7, #16
 8024fe8:	46bd      	mov	sp, r7
 8024fea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8024fee:	bf00      	nop
 8024ff0:	40023800 	.word	0x40023800
 8024ff4:	00f42400 	.word	0x00f42400
 8024ff8:	007a1200 	.word	0x007a1200

08024ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024ffc:	b480      	push	{r7}
 8024ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8025000:	4b03      	ldr	r3, [pc, #12]	; (8025010 <HAL_RCC_GetHCLKFreq+0x14>)
 8025002:	681b      	ldr	r3, [r3, #0]
}
 8025004:	4618      	mov	r0, r3
 8025006:	46bd      	mov	sp, r7
 8025008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802500c:	4770      	bx	lr
 802500e:	bf00      	nop
 8025010:	20000464 	.word	0x20000464

08025014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8025014:	b580      	push	{r7, lr}
 8025016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8025018:	f7ff fff0 	bl	8024ffc <HAL_RCC_GetHCLKFreq>
 802501c:	4602      	mov	r2, r0
 802501e:	4b05      	ldr	r3, [pc, #20]	; (8025034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8025020:	689b      	ldr	r3, [r3, #8]
 8025022:	0a9b      	lsrs	r3, r3, #10
 8025024:	f003 0307 	and.w	r3, r3, #7
 8025028:	4903      	ldr	r1, [pc, #12]	; (8025038 <HAL_RCC_GetPCLK1Freq+0x24>)
 802502a:	5ccb      	ldrb	r3, [r1, r3]
 802502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8025030:	4618      	mov	r0, r3
 8025032:	bd80      	pop	{r7, pc}
 8025034:	40023800 	.word	0x40023800
 8025038:	0802bcd8 	.word	0x0802bcd8

0802503c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802503c:	b580      	push	{r7, lr}
 802503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8025040:	f7ff ffdc 	bl	8024ffc <HAL_RCC_GetHCLKFreq>
 8025044:	4602      	mov	r2, r0
 8025046:	4b05      	ldr	r3, [pc, #20]	; (802505c <HAL_RCC_GetPCLK2Freq+0x20>)
 8025048:	689b      	ldr	r3, [r3, #8]
 802504a:	0b5b      	lsrs	r3, r3, #13
 802504c:	f003 0307 	and.w	r3, r3, #7
 8025050:	4903      	ldr	r1, [pc, #12]	; (8025060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8025052:	5ccb      	ldrb	r3, [r1, r3]
 8025054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8025058:	4618      	mov	r0, r3
 802505a:	bd80      	pop	{r7, pc}
 802505c:	40023800 	.word	0x40023800
 8025060:	0802bcd8 	.word	0x0802bcd8

08025064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8025064:	b580      	push	{r7, lr}
 8025066:	b082      	sub	sp, #8
 8025068:	af00      	add	r7, sp, #0
 802506a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	2b00      	cmp	r3, #0
 8025070:	d101      	bne.n	8025076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8025072:	2301      	movs	r3, #1
 8025074:	e056      	b.n	8025124 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	2200      	movs	r2, #0
 802507a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025082:	b2db      	uxtb	r3, r3
 8025084:	2b00      	cmp	r3, #0
 8025086:	d106      	bne.n	8025096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8025088:	687b      	ldr	r3, [r7, #4]
 802508a:	2200      	movs	r2, #0
 802508c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8025090:	6878      	ldr	r0, [r7, #4]
 8025092:	f7fd ffc5 	bl	8023020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	2202      	movs	r2, #2
 802509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	681a      	ldr	r2, [r3, #0]
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80250ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	685a      	ldr	r2, [r3, #4]
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	689b      	ldr	r3, [r3, #8]
 80250b6:	431a      	orrs	r2, r3
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	68db      	ldr	r3, [r3, #12]
 80250bc:	431a      	orrs	r2, r3
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	691b      	ldr	r3, [r3, #16]
 80250c2:	431a      	orrs	r2, r3
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	695b      	ldr	r3, [r3, #20]
 80250c8:	431a      	orrs	r2, r3
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	699b      	ldr	r3, [r3, #24]
 80250ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80250d2:	431a      	orrs	r2, r3
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	69db      	ldr	r3, [r3, #28]
 80250d8:	431a      	orrs	r2, r3
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	6a1b      	ldr	r3, [r3, #32]
 80250de:	ea42 0103 	orr.w	r1, r2, r3
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80250e6:	687b      	ldr	r3, [r7, #4]
 80250e8:	681b      	ldr	r3, [r3, #0]
 80250ea:	430a      	orrs	r2, r1
 80250ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	699b      	ldr	r3, [r3, #24]
 80250f2:	0c1b      	lsrs	r3, r3, #16
 80250f4:	f003 0104 	and.w	r1, r3, #4
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	681b      	ldr	r3, [r3, #0]
 8025100:	430a      	orrs	r2, r1
 8025102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	681b      	ldr	r3, [r3, #0]
 8025108:	69da      	ldr	r2, [r3, #28]
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	681b      	ldr	r3, [r3, #0]
 802510e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8025112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	2200      	movs	r2, #0
 8025118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	2201      	movs	r2, #1
 802511e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8025122:	2300      	movs	r3, #0
}
 8025124:	4618      	mov	r0, r3
 8025126:	3708      	adds	r7, #8
 8025128:	46bd      	mov	sp, r7
 802512a:	bd80      	pop	{r7, pc}

0802512c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802512c:	b580      	push	{r7, lr}
 802512e:	b088      	sub	sp, #32
 8025130:	af02      	add	r7, sp, #8
 8025132:	60f8      	str	r0, [r7, #12]
 8025134:	60b9      	str	r1, [r7, #8]
 8025136:	603b      	str	r3, [r7, #0]
 8025138:	4613      	mov	r3, r2
 802513a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802513c:	2300      	movs	r3, #0
 802513e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	685b      	ldr	r3, [r3, #4]
 8025144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025148:	d112      	bne.n	8025170 <HAL_SPI_Receive+0x44>
 802514a:	68fb      	ldr	r3, [r7, #12]
 802514c:	689b      	ldr	r3, [r3, #8]
 802514e:	2b00      	cmp	r3, #0
 8025150:	d10e      	bne.n	8025170 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8025152:	68fb      	ldr	r3, [r7, #12]
 8025154:	2204      	movs	r2, #4
 8025156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802515a:	88fa      	ldrh	r2, [r7, #6]
 802515c:	683b      	ldr	r3, [r7, #0]
 802515e:	9300      	str	r3, [sp, #0]
 8025160:	4613      	mov	r3, r2
 8025162:	68ba      	ldr	r2, [r7, #8]
 8025164:	68b9      	ldr	r1, [r7, #8]
 8025166:	68f8      	ldr	r0, [r7, #12]
 8025168:	f000 f8e9 	bl	802533e <HAL_SPI_TransmitReceive>
 802516c:	4603      	mov	r3, r0
 802516e:	e0e2      	b.n	8025336 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8025170:	68fb      	ldr	r3, [r7, #12]
 8025172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8025176:	2b01      	cmp	r3, #1
 8025178:	d101      	bne.n	802517e <HAL_SPI_Receive+0x52>
 802517a:	2302      	movs	r3, #2
 802517c:	e0db      	b.n	8025336 <HAL_SPI_Receive+0x20a>
 802517e:	68fb      	ldr	r3, [r7, #12]
 8025180:	2201      	movs	r2, #1
 8025182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8025186:	f7fe fc9f 	bl	8023ac8 <HAL_GetTick>
 802518a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 802518c:	68fb      	ldr	r3, [r7, #12]
 802518e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025192:	b2db      	uxtb	r3, r3
 8025194:	2b01      	cmp	r3, #1
 8025196:	d002      	beq.n	802519e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8025198:	2302      	movs	r3, #2
 802519a:	75fb      	strb	r3, [r7, #23]
    goto error;
 802519c:	e0c2      	b.n	8025324 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 802519e:	68bb      	ldr	r3, [r7, #8]
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	d002      	beq.n	80251aa <HAL_SPI_Receive+0x7e>
 80251a4:	88fb      	ldrh	r3, [r7, #6]
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d102      	bne.n	80251b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80251aa:	2301      	movs	r3, #1
 80251ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80251ae:	e0b9      	b.n	8025324 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80251b0:	68fb      	ldr	r3, [r7, #12]
 80251b2:	2204      	movs	r2, #4
 80251b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	2200      	movs	r2, #0
 80251bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80251be:	68fb      	ldr	r3, [r7, #12]
 80251c0:	68ba      	ldr	r2, [r7, #8]
 80251c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80251c4:	68fb      	ldr	r3, [r7, #12]
 80251c6:	88fa      	ldrh	r2, [r7, #6]
 80251c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	88fa      	ldrh	r2, [r7, #6]
 80251ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80251d0:	68fb      	ldr	r3, [r7, #12]
 80251d2:	2200      	movs	r2, #0
 80251d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80251d6:	68fb      	ldr	r3, [r7, #12]
 80251d8:	2200      	movs	r2, #0
 80251da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80251dc:	68fb      	ldr	r3, [r7, #12]
 80251de:	2200      	movs	r2, #0
 80251e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80251e2:	68fb      	ldr	r3, [r7, #12]
 80251e4:	2200      	movs	r2, #0
 80251e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80251e8:	68fb      	ldr	r3, [r7, #12]
 80251ea:	2200      	movs	r2, #0
 80251ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80251ee:	68fb      	ldr	r3, [r7, #12]
 80251f0:	689b      	ldr	r3, [r3, #8]
 80251f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80251f6:	d107      	bne.n	8025208 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80251f8:	68fb      	ldr	r3, [r7, #12]
 80251fa:	681b      	ldr	r3, [r3, #0]
 80251fc:	681a      	ldr	r2, [r3, #0]
 80251fe:	68fb      	ldr	r3, [r7, #12]
 8025200:	681b      	ldr	r3, [r3, #0]
 8025202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8025206:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8025208:	68fb      	ldr	r3, [r7, #12]
 802520a:	681b      	ldr	r3, [r3, #0]
 802520c:	681b      	ldr	r3, [r3, #0]
 802520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025212:	2b40      	cmp	r3, #64	; 0x40
 8025214:	d007      	beq.n	8025226 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8025216:	68fb      	ldr	r3, [r7, #12]
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	681a      	ldr	r2, [r3, #0]
 802521c:	68fb      	ldr	r3, [r7, #12]
 802521e:	681b      	ldr	r3, [r3, #0]
 8025220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025224:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8025226:	68fb      	ldr	r3, [r7, #12]
 8025228:	68db      	ldr	r3, [r3, #12]
 802522a:	2b00      	cmp	r3, #0
 802522c:	d162      	bne.n	80252f4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 802522e:	e02e      	b.n	802528e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8025230:	68fb      	ldr	r3, [r7, #12]
 8025232:	681b      	ldr	r3, [r3, #0]
 8025234:	689b      	ldr	r3, [r3, #8]
 8025236:	f003 0301 	and.w	r3, r3, #1
 802523a:	2b01      	cmp	r3, #1
 802523c:	d115      	bne.n	802526a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802523e:	68fb      	ldr	r3, [r7, #12]
 8025240:	681b      	ldr	r3, [r3, #0]
 8025242:	f103 020c 	add.w	r2, r3, #12
 8025246:	68fb      	ldr	r3, [r7, #12]
 8025248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802524a:	7812      	ldrb	r2, [r2, #0]
 802524c:	b2d2      	uxtb	r2, r2
 802524e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8025250:	68fb      	ldr	r3, [r7, #12]
 8025252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025254:	1c5a      	adds	r2, r3, #1
 8025256:	68fb      	ldr	r3, [r7, #12]
 8025258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802525a:	68fb      	ldr	r3, [r7, #12]
 802525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802525e:	b29b      	uxth	r3, r3
 8025260:	3b01      	subs	r3, #1
 8025262:	b29a      	uxth	r2, r3
 8025264:	68fb      	ldr	r3, [r7, #12]
 8025266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8025268:	e011      	b.n	802528e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802526a:	f7fe fc2d 	bl	8023ac8 <HAL_GetTick>
 802526e:	4602      	mov	r2, r0
 8025270:	693b      	ldr	r3, [r7, #16]
 8025272:	1ad3      	subs	r3, r2, r3
 8025274:	683a      	ldr	r2, [r7, #0]
 8025276:	429a      	cmp	r2, r3
 8025278:	d803      	bhi.n	8025282 <HAL_SPI_Receive+0x156>
 802527a:	683b      	ldr	r3, [r7, #0]
 802527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025280:	d102      	bne.n	8025288 <HAL_SPI_Receive+0x15c>
 8025282:	683b      	ldr	r3, [r7, #0]
 8025284:	2b00      	cmp	r3, #0
 8025286:	d102      	bne.n	802528e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8025288:	2303      	movs	r3, #3
 802528a:	75fb      	strb	r3, [r7, #23]
          goto error;
 802528c:	e04a      	b.n	8025324 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 802528e:	68fb      	ldr	r3, [r7, #12]
 8025290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025292:	b29b      	uxth	r3, r3
 8025294:	2b00      	cmp	r3, #0
 8025296:	d1cb      	bne.n	8025230 <HAL_SPI_Receive+0x104>
 8025298:	e031      	b.n	80252fe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802529a:	68fb      	ldr	r3, [r7, #12]
 802529c:	681b      	ldr	r3, [r3, #0]
 802529e:	689b      	ldr	r3, [r3, #8]
 80252a0:	f003 0301 	and.w	r3, r3, #1
 80252a4:	2b01      	cmp	r3, #1
 80252a6:	d113      	bne.n	80252d0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80252a8:	68fb      	ldr	r3, [r7, #12]
 80252aa:	681b      	ldr	r3, [r3, #0]
 80252ac:	68da      	ldr	r2, [r3, #12]
 80252ae:	68fb      	ldr	r3, [r7, #12]
 80252b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80252b2:	b292      	uxth	r2, r2
 80252b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80252b6:	68fb      	ldr	r3, [r7, #12]
 80252b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80252ba:	1c9a      	adds	r2, r3, #2
 80252bc:	68fb      	ldr	r3, [r7, #12]
 80252be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80252c0:	68fb      	ldr	r3, [r7, #12]
 80252c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80252c4:	b29b      	uxth	r3, r3
 80252c6:	3b01      	subs	r3, #1
 80252c8:	b29a      	uxth	r2, r3
 80252ca:	68fb      	ldr	r3, [r7, #12]
 80252cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80252ce:	e011      	b.n	80252f4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80252d0:	f7fe fbfa 	bl	8023ac8 <HAL_GetTick>
 80252d4:	4602      	mov	r2, r0
 80252d6:	693b      	ldr	r3, [r7, #16]
 80252d8:	1ad3      	subs	r3, r2, r3
 80252da:	683a      	ldr	r2, [r7, #0]
 80252dc:	429a      	cmp	r2, r3
 80252de:	d803      	bhi.n	80252e8 <HAL_SPI_Receive+0x1bc>
 80252e0:	683b      	ldr	r3, [r7, #0]
 80252e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80252e6:	d102      	bne.n	80252ee <HAL_SPI_Receive+0x1c2>
 80252e8:	683b      	ldr	r3, [r7, #0]
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d102      	bne.n	80252f4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80252ee:	2303      	movs	r3, #3
 80252f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80252f2:	e017      	b.n	8025324 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80252f8:	b29b      	uxth	r3, r3
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	d1cd      	bne.n	802529a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80252fe:	693a      	ldr	r2, [r7, #16]
 8025300:	6839      	ldr	r1, [r7, #0]
 8025302:	68f8      	ldr	r0, [r7, #12]
 8025304:	f000 fa27 	bl	8025756 <SPI_EndRxTransaction>
 8025308:	4603      	mov	r3, r0
 802530a:	2b00      	cmp	r3, #0
 802530c:	d002      	beq.n	8025314 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802530e:	68fb      	ldr	r3, [r7, #12]
 8025310:	2220      	movs	r2, #32
 8025312:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8025314:	68fb      	ldr	r3, [r7, #12]
 8025316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025318:	2b00      	cmp	r3, #0
 802531a:	d002      	beq.n	8025322 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 802531c:	2301      	movs	r3, #1
 802531e:	75fb      	strb	r3, [r7, #23]
 8025320:	e000      	b.n	8025324 <HAL_SPI_Receive+0x1f8>
  }

error :
 8025322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	2201      	movs	r2, #1
 8025328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802532c:	68fb      	ldr	r3, [r7, #12]
 802532e:	2200      	movs	r2, #0
 8025330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8025334:	7dfb      	ldrb	r3, [r7, #23]
}
 8025336:	4618      	mov	r0, r3
 8025338:	3718      	adds	r7, #24
 802533a:	46bd      	mov	sp, r7
 802533c:	bd80      	pop	{r7, pc}

0802533e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 802533e:	b580      	push	{r7, lr}
 8025340:	b08c      	sub	sp, #48	; 0x30
 8025342:	af00      	add	r7, sp, #0
 8025344:	60f8      	str	r0, [r7, #12]
 8025346:	60b9      	str	r1, [r7, #8]
 8025348:	607a      	str	r2, [r7, #4]
 802534a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802534c:	2301      	movs	r3, #1
 802534e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8025350:	2300      	movs	r3, #0
 8025352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8025356:	68fb      	ldr	r3, [r7, #12]
 8025358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802535c:	2b01      	cmp	r3, #1
 802535e:	d101      	bne.n	8025364 <HAL_SPI_TransmitReceive+0x26>
 8025360:	2302      	movs	r3, #2
 8025362:	e18a      	b.n	802567a <HAL_SPI_TransmitReceive+0x33c>
 8025364:	68fb      	ldr	r3, [r7, #12]
 8025366:	2201      	movs	r2, #1
 8025368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802536c:	f7fe fbac 	bl	8023ac8 <HAL_GetTick>
 8025370:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8025372:	68fb      	ldr	r3, [r7, #12]
 8025374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	685b      	ldr	r3, [r3, #4]
 8025380:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8025382:	887b      	ldrh	r3, [r7, #2]
 8025384:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8025386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802538a:	2b01      	cmp	r3, #1
 802538c:	d00f      	beq.n	80253ae <HAL_SPI_TransmitReceive+0x70>
 802538e:	69fb      	ldr	r3, [r7, #28]
 8025390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025394:	d107      	bne.n	80253a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8025396:	68fb      	ldr	r3, [r7, #12]
 8025398:	689b      	ldr	r3, [r3, #8]
 802539a:	2b00      	cmp	r3, #0
 802539c:	d103      	bne.n	80253a6 <HAL_SPI_TransmitReceive+0x68>
 802539e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80253a2:	2b04      	cmp	r3, #4
 80253a4:	d003      	beq.n	80253ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80253a6:	2302      	movs	r3, #2
 80253a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80253ac:	e15b      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80253ae:	68bb      	ldr	r3, [r7, #8]
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d005      	beq.n	80253c0 <HAL_SPI_TransmitReceive+0x82>
 80253b4:	687b      	ldr	r3, [r7, #4]
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d002      	beq.n	80253c0 <HAL_SPI_TransmitReceive+0x82>
 80253ba:	887b      	ldrh	r3, [r7, #2]
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d103      	bne.n	80253c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80253c0:	2301      	movs	r3, #1
 80253c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80253c6:	e14e      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80253c8:	68fb      	ldr	r3, [r7, #12]
 80253ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80253ce:	b2db      	uxtb	r3, r3
 80253d0:	2b04      	cmp	r3, #4
 80253d2:	d003      	beq.n	80253dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80253d4:	68fb      	ldr	r3, [r7, #12]
 80253d6:	2205      	movs	r2, #5
 80253d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80253dc:	68fb      	ldr	r3, [r7, #12]
 80253de:	2200      	movs	r2, #0
 80253e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80253e2:	68fb      	ldr	r3, [r7, #12]
 80253e4:	687a      	ldr	r2, [r7, #4]
 80253e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80253e8:	68fb      	ldr	r3, [r7, #12]
 80253ea:	887a      	ldrh	r2, [r7, #2]
 80253ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80253ee:	68fb      	ldr	r3, [r7, #12]
 80253f0:	887a      	ldrh	r2, [r7, #2]
 80253f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80253f4:	68fb      	ldr	r3, [r7, #12]
 80253f6:	68ba      	ldr	r2, [r7, #8]
 80253f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80253fa:	68fb      	ldr	r3, [r7, #12]
 80253fc:	887a      	ldrh	r2, [r7, #2]
 80253fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8025400:	68fb      	ldr	r3, [r7, #12]
 8025402:	887a      	ldrh	r2, [r7, #2]
 8025404:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8025406:	68fb      	ldr	r3, [r7, #12]
 8025408:	2200      	movs	r2, #0
 802540a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802540c:	68fb      	ldr	r3, [r7, #12]
 802540e:	2200      	movs	r2, #0
 8025410:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8025412:	68fb      	ldr	r3, [r7, #12]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	681b      	ldr	r3, [r3, #0]
 8025418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802541c:	2b40      	cmp	r3, #64	; 0x40
 802541e:	d007      	beq.n	8025430 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8025420:	68fb      	ldr	r3, [r7, #12]
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	681a      	ldr	r2, [r3, #0]
 8025426:	68fb      	ldr	r3, [r7, #12]
 8025428:	681b      	ldr	r3, [r3, #0]
 802542a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802542e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8025430:	68fb      	ldr	r3, [r7, #12]
 8025432:	68db      	ldr	r3, [r3, #12]
 8025434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025438:	d178      	bne.n	802552c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802543a:	68fb      	ldr	r3, [r7, #12]
 802543c:	685b      	ldr	r3, [r3, #4]
 802543e:	2b00      	cmp	r3, #0
 8025440:	d002      	beq.n	8025448 <HAL_SPI_TransmitReceive+0x10a>
 8025442:	8b7b      	ldrh	r3, [r7, #26]
 8025444:	2b01      	cmp	r3, #1
 8025446:	d166      	bne.n	8025516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8025448:	68fb      	ldr	r3, [r7, #12]
 802544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802544c:	881a      	ldrh	r2, [r3, #0]
 802544e:	68fb      	ldr	r3, [r7, #12]
 8025450:	681b      	ldr	r3, [r3, #0]
 8025452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8025454:	68fb      	ldr	r3, [r7, #12]
 8025456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025458:	1c9a      	adds	r2, r3, #2
 802545a:	68fb      	ldr	r3, [r7, #12]
 802545c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025462:	b29b      	uxth	r3, r3
 8025464:	3b01      	subs	r3, #1
 8025466:	b29a      	uxth	r2, r3
 8025468:	68fb      	ldr	r3, [r7, #12]
 802546a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802546c:	e053      	b.n	8025516 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802546e:	68fb      	ldr	r3, [r7, #12]
 8025470:	681b      	ldr	r3, [r3, #0]
 8025472:	689b      	ldr	r3, [r3, #8]
 8025474:	f003 0302 	and.w	r3, r3, #2
 8025478:	2b02      	cmp	r3, #2
 802547a:	d11b      	bne.n	80254b4 <HAL_SPI_TransmitReceive+0x176>
 802547c:	68fb      	ldr	r3, [r7, #12]
 802547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025480:	b29b      	uxth	r3, r3
 8025482:	2b00      	cmp	r3, #0
 8025484:	d016      	beq.n	80254b4 <HAL_SPI_TransmitReceive+0x176>
 8025486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025488:	2b01      	cmp	r3, #1
 802548a:	d113      	bne.n	80254b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802548c:	68fb      	ldr	r3, [r7, #12]
 802548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025490:	881a      	ldrh	r2, [r3, #0]
 8025492:	68fb      	ldr	r3, [r7, #12]
 8025494:	681b      	ldr	r3, [r3, #0]
 8025496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8025498:	68fb      	ldr	r3, [r7, #12]
 802549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802549c:	1c9a      	adds	r2, r3, #2
 802549e:	68fb      	ldr	r3, [r7, #12]
 80254a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80254a2:	68fb      	ldr	r3, [r7, #12]
 80254a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80254a6:	b29b      	uxth	r3, r3
 80254a8:	3b01      	subs	r3, #1
 80254aa:	b29a      	uxth	r2, r3
 80254ac:	68fb      	ldr	r3, [r7, #12]
 80254ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80254b0:	2300      	movs	r3, #0
 80254b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80254b4:	68fb      	ldr	r3, [r7, #12]
 80254b6:	681b      	ldr	r3, [r3, #0]
 80254b8:	689b      	ldr	r3, [r3, #8]
 80254ba:	f003 0301 	and.w	r3, r3, #1
 80254be:	2b01      	cmp	r3, #1
 80254c0:	d119      	bne.n	80254f6 <HAL_SPI_TransmitReceive+0x1b8>
 80254c2:	68fb      	ldr	r3, [r7, #12]
 80254c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80254c6:	b29b      	uxth	r3, r3
 80254c8:	2b00      	cmp	r3, #0
 80254ca:	d014      	beq.n	80254f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80254cc:	68fb      	ldr	r3, [r7, #12]
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	68da      	ldr	r2, [r3, #12]
 80254d2:	68fb      	ldr	r3, [r7, #12]
 80254d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254d6:	b292      	uxth	r2, r2
 80254d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80254da:	68fb      	ldr	r3, [r7, #12]
 80254dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254de:	1c9a      	adds	r2, r3, #2
 80254e0:	68fb      	ldr	r3, [r7, #12]
 80254e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80254e4:	68fb      	ldr	r3, [r7, #12]
 80254e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80254e8:	b29b      	uxth	r3, r3
 80254ea:	3b01      	subs	r3, #1
 80254ec:	b29a      	uxth	r2, r3
 80254ee:	68fb      	ldr	r3, [r7, #12]
 80254f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80254f2:	2301      	movs	r3, #1
 80254f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80254f6:	f7fe fae7 	bl	8023ac8 <HAL_GetTick>
 80254fa:	4602      	mov	r2, r0
 80254fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254fe:	1ad3      	subs	r3, r2, r3
 8025500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025502:	429a      	cmp	r2, r3
 8025504:	d807      	bhi.n	8025516 <HAL_SPI_TransmitReceive+0x1d8>
 8025506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025508:	f1b3 3fff 	cmp.w	r3, #4294967295
 802550c:	d003      	beq.n	8025516 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 802550e:	2303      	movs	r3, #3
 8025510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8025514:	e0a7      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8025516:	68fb      	ldr	r3, [r7, #12]
 8025518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802551a:	b29b      	uxth	r3, r3
 802551c:	2b00      	cmp	r3, #0
 802551e:	d1a6      	bne.n	802546e <HAL_SPI_TransmitReceive+0x130>
 8025520:	68fb      	ldr	r3, [r7, #12]
 8025522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025524:	b29b      	uxth	r3, r3
 8025526:	2b00      	cmp	r3, #0
 8025528:	d1a1      	bne.n	802546e <HAL_SPI_TransmitReceive+0x130>
 802552a:	e07c      	b.n	8025626 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802552c:	68fb      	ldr	r3, [r7, #12]
 802552e:	685b      	ldr	r3, [r3, #4]
 8025530:	2b00      	cmp	r3, #0
 8025532:	d002      	beq.n	802553a <HAL_SPI_TransmitReceive+0x1fc>
 8025534:	8b7b      	ldrh	r3, [r7, #26]
 8025536:	2b01      	cmp	r3, #1
 8025538:	d16b      	bne.n	8025612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802553e:	68fb      	ldr	r3, [r7, #12]
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	330c      	adds	r3, #12
 8025544:	7812      	ldrb	r2, [r2, #0]
 8025546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802554c:	1c5a      	adds	r2, r3, #1
 802554e:	68fb      	ldr	r3, [r7, #12]
 8025550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8025552:	68fb      	ldr	r3, [r7, #12]
 8025554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025556:	b29b      	uxth	r3, r3
 8025558:	3b01      	subs	r3, #1
 802555a:	b29a      	uxth	r2, r3
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8025560:	e057      	b.n	8025612 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8025562:	68fb      	ldr	r3, [r7, #12]
 8025564:	681b      	ldr	r3, [r3, #0]
 8025566:	689b      	ldr	r3, [r3, #8]
 8025568:	f003 0302 	and.w	r3, r3, #2
 802556c:	2b02      	cmp	r3, #2
 802556e:	d11c      	bne.n	80255aa <HAL_SPI_TransmitReceive+0x26c>
 8025570:	68fb      	ldr	r3, [r7, #12]
 8025572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025574:	b29b      	uxth	r3, r3
 8025576:	2b00      	cmp	r3, #0
 8025578:	d017      	beq.n	80255aa <HAL_SPI_TransmitReceive+0x26c>
 802557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802557c:	2b01      	cmp	r3, #1
 802557e:	d114      	bne.n	80255aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8025580:	68fb      	ldr	r3, [r7, #12]
 8025582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025584:	68fb      	ldr	r3, [r7, #12]
 8025586:	681b      	ldr	r3, [r3, #0]
 8025588:	330c      	adds	r3, #12
 802558a:	7812      	ldrb	r2, [r2, #0]
 802558c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802558e:	68fb      	ldr	r3, [r7, #12]
 8025590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025592:	1c5a      	adds	r2, r3, #1
 8025594:	68fb      	ldr	r3, [r7, #12]
 8025596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8025598:	68fb      	ldr	r3, [r7, #12]
 802559a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802559c:	b29b      	uxth	r3, r3
 802559e:	3b01      	subs	r3, #1
 80255a0:	b29a      	uxth	r2, r3
 80255a2:	68fb      	ldr	r3, [r7, #12]
 80255a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80255a6:	2300      	movs	r3, #0
 80255a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80255aa:	68fb      	ldr	r3, [r7, #12]
 80255ac:	681b      	ldr	r3, [r3, #0]
 80255ae:	689b      	ldr	r3, [r3, #8]
 80255b0:	f003 0301 	and.w	r3, r3, #1
 80255b4:	2b01      	cmp	r3, #1
 80255b6:	d119      	bne.n	80255ec <HAL_SPI_TransmitReceive+0x2ae>
 80255b8:	68fb      	ldr	r3, [r7, #12]
 80255ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80255bc:	b29b      	uxth	r3, r3
 80255be:	2b00      	cmp	r3, #0
 80255c0:	d014      	beq.n	80255ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80255c2:	68fb      	ldr	r3, [r7, #12]
 80255c4:	681b      	ldr	r3, [r3, #0]
 80255c6:	68da      	ldr	r2, [r3, #12]
 80255c8:	68fb      	ldr	r3, [r7, #12]
 80255ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80255cc:	b2d2      	uxtb	r2, r2
 80255ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80255d0:	68fb      	ldr	r3, [r7, #12]
 80255d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80255d4:	1c5a      	adds	r2, r3, #1
 80255d6:	68fb      	ldr	r3, [r7, #12]
 80255d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80255da:	68fb      	ldr	r3, [r7, #12]
 80255dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80255de:	b29b      	uxth	r3, r3
 80255e0:	3b01      	subs	r3, #1
 80255e2:	b29a      	uxth	r2, r3
 80255e4:	68fb      	ldr	r3, [r7, #12]
 80255e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80255e8:	2301      	movs	r3, #1
 80255ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80255ec:	f7fe fa6c 	bl	8023ac8 <HAL_GetTick>
 80255f0:	4602      	mov	r2, r0
 80255f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255f4:	1ad3      	subs	r3, r2, r3
 80255f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80255f8:	429a      	cmp	r2, r3
 80255fa:	d803      	bhi.n	8025604 <HAL_SPI_TransmitReceive+0x2c6>
 80255fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80255fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025602:	d102      	bne.n	802560a <HAL_SPI_TransmitReceive+0x2cc>
 8025604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025606:	2b00      	cmp	r3, #0
 8025608:	d103      	bne.n	8025612 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802560a:	2303      	movs	r3, #3
 802560c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8025610:	e029      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025616:	b29b      	uxth	r3, r3
 8025618:	2b00      	cmp	r3, #0
 802561a:	d1a2      	bne.n	8025562 <HAL_SPI_TransmitReceive+0x224>
 802561c:	68fb      	ldr	r3, [r7, #12]
 802561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025620:	b29b      	uxth	r3, r3
 8025622:	2b00      	cmp	r3, #0
 8025624:	d19d      	bne.n	8025562 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8025626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802562a:	68f8      	ldr	r0, [r7, #12]
 802562c:	f000 f8f8 	bl	8025820 <SPI_EndRxTxTransaction>
 8025630:	4603      	mov	r3, r0
 8025632:	2b00      	cmp	r3, #0
 8025634:	d006      	beq.n	8025644 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8025636:	2301      	movs	r3, #1
 8025638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802563c:	68fb      	ldr	r3, [r7, #12]
 802563e:	2220      	movs	r2, #32
 8025640:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8025642:	e010      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8025644:	68fb      	ldr	r3, [r7, #12]
 8025646:	689b      	ldr	r3, [r3, #8]
 8025648:	2b00      	cmp	r3, #0
 802564a:	d10b      	bne.n	8025664 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802564c:	2300      	movs	r3, #0
 802564e:	617b      	str	r3, [r7, #20]
 8025650:	68fb      	ldr	r3, [r7, #12]
 8025652:	681b      	ldr	r3, [r3, #0]
 8025654:	68db      	ldr	r3, [r3, #12]
 8025656:	617b      	str	r3, [r7, #20]
 8025658:	68fb      	ldr	r3, [r7, #12]
 802565a:	681b      	ldr	r3, [r3, #0]
 802565c:	689b      	ldr	r3, [r3, #8]
 802565e:	617b      	str	r3, [r7, #20]
 8025660:	697b      	ldr	r3, [r7, #20]
 8025662:	e000      	b.n	8025666 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8025664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8025666:	68fb      	ldr	r3, [r7, #12]
 8025668:	2201      	movs	r2, #1
 802566a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802566e:	68fb      	ldr	r3, [r7, #12]
 8025670:	2200      	movs	r2, #0
 8025672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8025676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802567a:	4618      	mov	r0, r3
 802567c:	3730      	adds	r7, #48	; 0x30
 802567e:	46bd      	mov	sp, r7
 8025680:	bd80      	pop	{r7, pc}

08025682 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8025682:	b580      	push	{r7, lr}
 8025684:	b084      	sub	sp, #16
 8025686:	af00      	add	r7, sp, #0
 8025688:	60f8      	str	r0, [r7, #12]
 802568a:	60b9      	str	r1, [r7, #8]
 802568c:	603b      	str	r3, [r7, #0]
 802568e:	4613      	mov	r3, r2
 8025690:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8025692:	e04c      	b.n	802572e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8025694:	683b      	ldr	r3, [r7, #0]
 8025696:	f1b3 3fff 	cmp.w	r3, #4294967295
 802569a:	d048      	beq.n	802572e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 802569c:	f7fe fa14 	bl	8023ac8 <HAL_GetTick>
 80256a0:	4602      	mov	r2, r0
 80256a2:	69bb      	ldr	r3, [r7, #24]
 80256a4:	1ad3      	subs	r3, r2, r3
 80256a6:	683a      	ldr	r2, [r7, #0]
 80256a8:	429a      	cmp	r2, r3
 80256aa:	d902      	bls.n	80256b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80256ac:	683b      	ldr	r3, [r7, #0]
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d13d      	bne.n	802572e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80256b2:	68fb      	ldr	r3, [r7, #12]
 80256b4:	681b      	ldr	r3, [r3, #0]
 80256b6:	685a      	ldr	r2, [r3, #4]
 80256b8:	68fb      	ldr	r3, [r7, #12]
 80256ba:	681b      	ldr	r3, [r3, #0]
 80256bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80256c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	685b      	ldr	r3, [r3, #4]
 80256c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80256ca:	d111      	bne.n	80256f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80256cc:	68fb      	ldr	r3, [r7, #12]
 80256ce:	689b      	ldr	r3, [r3, #8]
 80256d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80256d4:	d004      	beq.n	80256e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80256d6:	68fb      	ldr	r3, [r7, #12]
 80256d8:	689b      	ldr	r3, [r3, #8]
 80256da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80256de:	d107      	bne.n	80256f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80256e0:	68fb      	ldr	r3, [r7, #12]
 80256e2:	681b      	ldr	r3, [r3, #0]
 80256e4:	681a      	ldr	r2, [r3, #0]
 80256e6:	68fb      	ldr	r3, [r7, #12]
 80256e8:	681b      	ldr	r3, [r3, #0]
 80256ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80256ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80256f0:	68fb      	ldr	r3, [r7, #12]
 80256f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80256f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80256f8:	d10f      	bne.n	802571a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80256fa:	68fb      	ldr	r3, [r7, #12]
 80256fc:	681b      	ldr	r3, [r3, #0]
 80256fe:	681a      	ldr	r2, [r3, #0]
 8025700:	68fb      	ldr	r3, [r7, #12]
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8025708:	601a      	str	r2, [r3, #0]
 802570a:	68fb      	ldr	r3, [r7, #12]
 802570c:	681b      	ldr	r3, [r3, #0]
 802570e:	681a      	ldr	r2, [r3, #0]
 8025710:	68fb      	ldr	r3, [r7, #12]
 8025712:	681b      	ldr	r3, [r3, #0]
 8025714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8025718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802571a:	68fb      	ldr	r3, [r7, #12]
 802571c:	2201      	movs	r2, #1
 802571e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8025722:	68fb      	ldr	r3, [r7, #12]
 8025724:	2200      	movs	r2, #0
 8025726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802572a:	2303      	movs	r3, #3
 802572c:	e00f      	b.n	802574e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802572e:	68fb      	ldr	r3, [r7, #12]
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	689a      	ldr	r2, [r3, #8]
 8025734:	68bb      	ldr	r3, [r7, #8]
 8025736:	4013      	ands	r3, r2
 8025738:	68ba      	ldr	r2, [r7, #8]
 802573a:	429a      	cmp	r2, r3
 802573c:	bf0c      	ite	eq
 802573e:	2301      	moveq	r3, #1
 8025740:	2300      	movne	r3, #0
 8025742:	b2db      	uxtb	r3, r3
 8025744:	461a      	mov	r2, r3
 8025746:	79fb      	ldrb	r3, [r7, #7]
 8025748:	429a      	cmp	r2, r3
 802574a:	d1a3      	bne.n	8025694 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 802574c:	2300      	movs	r3, #0
}
 802574e:	4618      	mov	r0, r3
 8025750:	3710      	adds	r7, #16
 8025752:	46bd      	mov	sp, r7
 8025754:	bd80      	pop	{r7, pc}

08025756 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8025756:	b580      	push	{r7, lr}
 8025758:	b086      	sub	sp, #24
 802575a:	af02      	add	r7, sp, #8
 802575c:	60f8      	str	r0, [r7, #12]
 802575e:	60b9      	str	r1, [r7, #8]
 8025760:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8025762:	68fb      	ldr	r3, [r7, #12]
 8025764:	685b      	ldr	r3, [r3, #4]
 8025766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802576a:	d111      	bne.n	8025790 <SPI_EndRxTransaction+0x3a>
 802576c:	68fb      	ldr	r3, [r7, #12]
 802576e:	689b      	ldr	r3, [r3, #8]
 8025770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025774:	d004      	beq.n	8025780 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8025776:	68fb      	ldr	r3, [r7, #12]
 8025778:	689b      	ldr	r3, [r3, #8]
 802577a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802577e:	d107      	bne.n	8025790 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8025780:	68fb      	ldr	r3, [r7, #12]
 8025782:	681b      	ldr	r3, [r3, #0]
 8025784:	681a      	ldr	r2, [r3, #0]
 8025786:	68fb      	ldr	r3, [r7, #12]
 8025788:	681b      	ldr	r3, [r3, #0]
 802578a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802578e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8025790:	68fb      	ldr	r3, [r7, #12]
 8025792:	685b      	ldr	r3, [r3, #4]
 8025794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025798:	d12a      	bne.n	80257f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802579a:	68fb      	ldr	r3, [r7, #12]
 802579c:	689b      	ldr	r3, [r3, #8]
 802579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80257a2:	d012      	beq.n	80257ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	9300      	str	r3, [sp, #0]
 80257a8:	68bb      	ldr	r3, [r7, #8]
 80257aa:	2200      	movs	r2, #0
 80257ac:	2180      	movs	r1, #128	; 0x80
 80257ae:	68f8      	ldr	r0, [r7, #12]
 80257b0:	f7ff ff67 	bl	8025682 <SPI_WaitFlagStateUntilTimeout>
 80257b4:	4603      	mov	r3, r0
 80257b6:	2b00      	cmp	r3, #0
 80257b8:	d02d      	beq.n	8025816 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80257ba:	68fb      	ldr	r3, [r7, #12]
 80257bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80257be:	f043 0220 	orr.w	r2, r3, #32
 80257c2:	68fb      	ldr	r3, [r7, #12]
 80257c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80257c6:	2303      	movs	r3, #3
 80257c8:	e026      	b.n	8025818 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	9300      	str	r3, [sp, #0]
 80257ce:	68bb      	ldr	r3, [r7, #8]
 80257d0:	2200      	movs	r2, #0
 80257d2:	2101      	movs	r1, #1
 80257d4:	68f8      	ldr	r0, [r7, #12]
 80257d6:	f7ff ff54 	bl	8025682 <SPI_WaitFlagStateUntilTimeout>
 80257da:	4603      	mov	r3, r0
 80257dc:	2b00      	cmp	r3, #0
 80257de:	d01a      	beq.n	8025816 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80257e0:	68fb      	ldr	r3, [r7, #12]
 80257e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80257e4:	f043 0220 	orr.w	r2, r3, #32
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80257ec:	2303      	movs	r3, #3
 80257ee:	e013      	b.n	8025818 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80257f0:	687b      	ldr	r3, [r7, #4]
 80257f2:	9300      	str	r3, [sp, #0]
 80257f4:	68bb      	ldr	r3, [r7, #8]
 80257f6:	2200      	movs	r2, #0
 80257f8:	2101      	movs	r1, #1
 80257fa:	68f8      	ldr	r0, [r7, #12]
 80257fc:	f7ff ff41 	bl	8025682 <SPI_WaitFlagStateUntilTimeout>
 8025800:	4603      	mov	r3, r0
 8025802:	2b00      	cmp	r3, #0
 8025804:	d007      	beq.n	8025816 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8025806:	68fb      	ldr	r3, [r7, #12]
 8025808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802580a:	f043 0220 	orr.w	r2, r3, #32
 802580e:	68fb      	ldr	r3, [r7, #12]
 8025810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8025812:	2303      	movs	r3, #3
 8025814:	e000      	b.n	8025818 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8025816:	2300      	movs	r3, #0
}
 8025818:	4618      	mov	r0, r3
 802581a:	3710      	adds	r7, #16
 802581c:	46bd      	mov	sp, r7
 802581e:	bd80      	pop	{r7, pc}

08025820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8025820:	b580      	push	{r7, lr}
 8025822:	b088      	sub	sp, #32
 8025824:	af02      	add	r7, sp, #8
 8025826:	60f8      	str	r0, [r7, #12]
 8025828:	60b9      	str	r1, [r7, #8]
 802582a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802582c:	4b1b      	ldr	r3, [pc, #108]	; (802589c <SPI_EndRxTxTransaction+0x7c>)
 802582e:	681b      	ldr	r3, [r3, #0]
 8025830:	4a1b      	ldr	r2, [pc, #108]	; (80258a0 <SPI_EndRxTxTransaction+0x80>)
 8025832:	fba2 2303 	umull	r2, r3, r2, r3
 8025836:	0d5b      	lsrs	r3, r3, #21
 8025838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802583c:	fb02 f303 	mul.w	r3, r2, r3
 8025840:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8025842:	68fb      	ldr	r3, [r7, #12]
 8025844:	685b      	ldr	r3, [r3, #4]
 8025846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802584a:	d112      	bne.n	8025872 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	9300      	str	r3, [sp, #0]
 8025850:	68bb      	ldr	r3, [r7, #8]
 8025852:	2200      	movs	r2, #0
 8025854:	2180      	movs	r1, #128	; 0x80
 8025856:	68f8      	ldr	r0, [r7, #12]
 8025858:	f7ff ff13 	bl	8025682 <SPI_WaitFlagStateUntilTimeout>
 802585c:	4603      	mov	r3, r0
 802585e:	2b00      	cmp	r3, #0
 8025860:	d016      	beq.n	8025890 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8025862:	68fb      	ldr	r3, [r7, #12]
 8025864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025866:	f043 0220 	orr.w	r2, r3, #32
 802586a:	68fb      	ldr	r3, [r7, #12]
 802586c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802586e:	2303      	movs	r3, #3
 8025870:	e00f      	b.n	8025892 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8025872:	697b      	ldr	r3, [r7, #20]
 8025874:	2b00      	cmp	r3, #0
 8025876:	d00a      	beq.n	802588e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8025878:	697b      	ldr	r3, [r7, #20]
 802587a:	3b01      	subs	r3, #1
 802587c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802587e:	68fb      	ldr	r3, [r7, #12]
 8025880:	681b      	ldr	r3, [r3, #0]
 8025882:	689b      	ldr	r3, [r3, #8]
 8025884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025888:	2b80      	cmp	r3, #128	; 0x80
 802588a:	d0f2      	beq.n	8025872 <SPI_EndRxTxTransaction+0x52>
 802588c:	e000      	b.n	8025890 <SPI_EndRxTxTransaction+0x70>
        break;
 802588e:	bf00      	nop
  }

  return HAL_OK;
 8025890:	2300      	movs	r3, #0
}
 8025892:	4618      	mov	r0, r3
 8025894:	3718      	adds	r7, #24
 8025896:	46bd      	mov	sp, r7
 8025898:	bd80      	pop	{r7, pc}
 802589a:	bf00      	nop
 802589c:	20000464 	.word	0x20000464
 80258a0:	165e9f81 	.word	0x165e9f81

080258a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80258a4:	b580      	push	{r7, lr}
 80258a6:	b082      	sub	sp, #8
 80258a8:	af00      	add	r7, sp, #0
 80258aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80258ac:	687b      	ldr	r3, [r7, #4]
 80258ae:	2b00      	cmp	r3, #0
 80258b0:	d101      	bne.n	80258b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80258b2:	2301      	movs	r3, #1
 80258b4:	e01d      	b.n	80258f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80258bc:	b2db      	uxtb	r3, r3
 80258be:	2b00      	cmp	r3, #0
 80258c0:	d106      	bne.n	80258d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	2200      	movs	r2, #0
 80258c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80258ca:	6878      	ldr	r0, [r7, #4]
 80258cc:	f7fd fc40 	bl	8023150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80258d0:	687b      	ldr	r3, [r7, #4]
 80258d2:	2202      	movs	r2, #2
 80258d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80258d8:	687b      	ldr	r3, [r7, #4]
 80258da:	681a      	ldr	r2, [r3, #0]
 80258dc:	687b      	ldr	r3, [r7, #4]
 80258de:	3304      	adds	r3, #4
 80258e0:	4619      	mov	r1, r3
 80258e2:	4610      	mov	r0, r2
 80258e4:	f000 fc44 	bl	8026170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80258e8:	687b      	ldr	r3, [r7, #4]
 80258ea:	2201      	movs	r2, #1
 80258ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80258f0:	2300      	movs	r3, #0
}
 80258f2:	4618      	mov	r0, r3
 80258f4:	3708      	adds	r7, #8
 80258f6:	46bd      	mov	sp, r7
 80258f8:	bd80      	pop	{r7, pc}

080258fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80258fa:	b480      	push	{r7}
 80258fc:	b085      	sub	sp, #20
 80258fe:	af00      	add	r7, sp, #0
 8025900:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025902:	687b      	ldr	r3, [r7, #4]
 8025904:	681b      	ldr	r3, [r3, #0]
 8025906:	68da      	ldr	r2, [r3, #12]
 8025908:	687b      	ldr	r3, [r7, #4]
 802590a:	681b      	ldr	r3, [r3, #0]
 802590c:	f042 0201 	orr.w	r2, r2, #1
 8025910:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025912:	687b      	ldr	r3, [r7, #4]
 8025914:	681b      	ldr	r3, [r3, #0]
 8025916:	689b      	ldr	r3, [r3, #8]
 8025918:	f003 0307 	and.w	r3, r3, #7
 802591c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802591e:	68fb      	ldr	r3, [r7, #12]
 8025920:	2b06      	cmp	r3, #6
 8025922:	d007      	beq.n	8025934 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	681b      	ldr	r3, [r3, #0]
 8025928:	681a      	ldr	r2, [r3, #0]
 802592a:	687b      	ldr	r3, [r7, #4]
 802592c:	681b      	ldr	r3, [r3, #0]
 802592e:	f042 0201 	orr.w	r2, r2, #1
 8025932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025934:	2300      	movs	r3, #0
}
 8025936:	4618      	mov	r0, r3
 8025938:	3714      	adds	r7, #20
 802593a:	46bd      	mov	sp, r7
 802593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025940:	4770      	bx	lr

08025942 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8025942:	b580      	push	{r7, lr}
 8025944:	b082      	sub	sp, #8
 8025946:	af00      	add	r7, sp, #0
 8025948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	2b00      	cmp	r3, #0
 802594e:	d101      	bne.n	8025954 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8025950:	2301      	movs	r3, #1
 8025952:	e01d      	b.n	8025990 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802595a:	b2db      	uxtb	r3, r3
 802595c:	2b00      	cmp	r3, #0
 802595e:	d106      	bne.n	802596e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	2200      	movs	r2, #0
 8025964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8025968:	6878      	ldr	r0, [r7, #4]
 802596a:	f000 f815 	bl	8025998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	2202      	movs	r2, #2
 8025972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025976:	687b      	ldr	r3, [r7, #4]
 8025978:	681a      	ldr	r2, [r3, #0]
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	3304      	adds	r3, #4
 802597e:	4619      	mov	r1, r3
 8025980:	4610      	mov	r0, r2
 8025982:	f000 fbf5 	bl	8026170 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025986:	687b      	ldr	r3, [r7, #4]
 8025988:	2201      	movs	r2, #1
 802598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802598e:	2300      	movs	r3, #0
}
 8025990:	4618      	mov	r0, r3
 8025992:	3708      	adds	r7, #8
 8025994:	46bd      	mov	sp, r7
 8025996:	bd80      	pop	{r7, pc}

08025998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8025998:	b480      	push	{r7}
 802599a:	b083      	sub	sp, #12
 802599c:	af00      	add	r7, sp, #0
 802599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80259a0:	bf00      	nop
 80259a2:	370c      	adds	r7, #12
 80259a4:	46bd      	mov	sp, r7
 80259a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259aa:	4770      	bx	lr

080259ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80259ac:	b580      	push	{r7, lr}
 80259ae:	b084      	sub	sp, #16
 80259b0:	af00      	add	r7, sp, #0
 80259b2:	6078      	str	r0, [r7, #4]
 80259b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80259b6:	687b      	ldr	r3, [r7, #4]
 80259b8:	681b      	ldr	r3, [r3, #0]
 80259ba:	2201      	movs	r2, #1
 80259bc:	6839      	ldr	r1, [r7, #0]
 80259be:	4618      	mov	r0, r3
 80259c0:	f000 fec0 	bl	8026744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80259c4:	687b      	ldr	r3, [r7, #4]
 80259c6:	681b      	ldr	r3, [r3, #0]
 80259c8:	4a15      	ldr	r2, [pc, #84]	; (8025a20 <HAL_TIM_PWM_Start+0x74>)
 80259ca:	4293      	cmp	r3, r2
 80259cc:	d004      	beq.n	80259d8 <HAL_TIM_PWM_Start+0x2c>
 80259ce:	687b      	ldr	r3, [r7, #4]
 80259d0:	681b      	ldr	r3, [r3, #0]
 80259d2:	4a14      	ldr	r2, [pc, #80]	; (8025a24 <HAL_TIM_PWM_Start+0x78>)
 80259d4:	4293      	cmp	r3, r2
 80259d6:	d101      	bne.n	80259dc <HAL_TIM_PWM_Start+0x30>
 80259d8:	2301      	movs	r3, #1
 80259da:	e000      	b.n	80259de <HAL_TIM_PWM_Start+0x32>
 80259dc:	2300      	movs	r3, #0
 80259de:	2b00      	cmp	r3, #0
 80259e0:	d007      	beq.n	80259f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80259e2:	687b      	ldr	r3, [r7, #4]
 80259e4:	681b      	ldr	r3, [r3, #0]
 80259e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80259e8:	687b      	ldr	r3, [r7, #4]
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80259f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	681b      	ldr	r3, [r3, #0]
 80259f6:	689b      	ldr	r3, [r3, #8]
 80259f8:	f003 0307 	and.w	r3, r3, #7
 80259fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80259fe:	68fb      	ldr	r3, [r7, #12]
 8025a00:	2b06      	cmp	r3, #6
 8025a02:	d007      	beq.n	8025a14 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8025a04:	687b      	ldr	r3, [r7, #4]
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	681a      	ldr	r2, [r3, #0]
 8025a0a:	687b      	ldr	r3, [r7, #4]
 8025a0c:	681b      	ldr	r3, [r3, #0]
 8025a0e:	f042 0201 	orr.w	r2, r2, #1
 8025a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025a14:	2300      	movs	r3, #0
}
 8025a16:	4618      	mov	r0, r3
 8025a18:	3710      	adds	r7, #16
 8025a1a:	46bd      	mov	sp, r7
 8025a1c:	bd80      	pop	{r7, pc}
 8025a1e:	bf00      	nop
 8025a20:	40010000 	.word	0x40010000
 8025a24:	40010400 	.word	0x40010400

08025a28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025a28:	b580      	push	{r7, lr}
 8025a2a:	b082      	sub	sp, #8
 8025a2c:	af00      	add	r7, sp, #0
 8025a2e:	6078      	str	r0, [r7, #4]
 8025a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8025a32:	687b      	ldr	r3, [r7, #4]
 8025a34:	681b      	ldr	r3, [r3, #0]
 8025a36:	2200      	movs	r2, #0
 8025a38:	6839      	ldr	r1, [r7, #0]
 8025a3a:	4618      	mov	r0, r3
 8025a3c:	f000 fe82 	bl	8026744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8025a40:	687b      	ldr	r3, [r7, #4]
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	4a22      	ldr	r2, [pc, #136]	; (8025ad0 <HAL_TIM_PWM_Stop+0xa8>)
 8025a46:	4293      	cmp	r3, r2
 8025a48:	d004      	beq.n	8025a54 <HAL_TIM_PWM_Stop+0x2c>
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	681b      	ldr	r3, [r3, #0]
 8025a4e:	4a21      	ldr	r2, [pc, #132]	; (8025ad4 <HAL_TIM_PWM_Stop+0xac>)
 8025a50:	4293      	cmp	r3, r2
 8025a52:	d101      	bne.n	8025a58 <HAL_TIM_PWM_Stop+0x30>
 8025a54:	2301      	movs	r3, #1
 8025a56:	e000      	b.n	8025a5a <HAL_TIM_PWM_Stop+0x32>
 8025a58:	2300      	movs	r3, #0
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d017      	beq.n	8025a8e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8025a5e:	687b      	ldr	r3, [r7, #4]
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	6a1a      	ldr	r2, [r3, #32]
 8025a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8025a68:	4013      	ands	r3, r2
 8025a6a:	2b00      	cmp	r3, #0
 8025a6c:	d10f      	bne.n	8025a8e <HAL_TIM_PWM_Stop+0x66>
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	681b      	ldr	r3, [r3, #0]
 8025a72:	6a1a      	ldr	r2, [r3, #32]
 8025a74:	f240 4344 	movw	r3, #1092	; 0x444
 8025a78:	4013      	ands	r3, r2
 8025a7a:	2b00      	cmp	r3, #0
 8025a7c:	d107      	bne.n	8025a8e <HAL_TIM_PWM_Stop+0x66>
 8025a7e:	687b      	ldr	r3, [r7, #4]
 8025a80:	681b      	ldr	r3, [r3, #0]
 8025a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8025a8e:	687b      	ldr	r3, [r7, #4]
 8025a90:	681b      	ldr	r3, [r3, #0]
 8025a92:	6a1a      	ldr	r2, [r3, #32]
 8025a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8025a98:	4013      	ands	r3, r2
 8025a9a:	2b00      	cmp	r3, #0
 8025a9c:	d10f      	bne.n	8025abe <HAL_TIM_PWM_Stop+0x96>
 8025a9e:	687b      	ldr	r3, [r7, #4]
 8025aa0:	681b      	ldr	r3, [r3, #0]
 8025aa2:	6a1a      	ldr	r2, [r3, #32]
 8025aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8025aa8:	4013      	ands	r3, r2
 8025aaa:	2b00      	cmp	r3, #0
 8025aac:	d107      	bne.n	8025abe <HAL_TIM_PWM_Stop+0x96>
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	681a      	ldr	r2, [r3, #0]
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	f022 0201 	bic.w	r2, r2, #1
 8025abc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8025abe:	687b      	ldr	r3, [r7, #4]
 8025ac0:	2201      	movs	r2, #1
 8025ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8025ac6:	2300      	movs	r3, #0
}
 8025ac8:	4618      	mov	r0, r3
 8025aca:	3708      	adds	r7, #8
 8025acc:	46bd      	mov	sp, r7
 8025ace:	bd80      	pop	{r7, pc}
 8025ad0:	40010000 	.word	0x40010000
 8025ad4:	40010400 	.word	0x40010400

08025ad8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8025ad8:	b580      	push	{r7, lr}
 8025ada:	b086      	sub	sp, #24
 8025adc:	af00      	add	r7, sp, #0
 8025ade:	6078      	str	r0, [r7, #4]
 8025ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	2b00      	cmp	r3, #0
 8025ae6:	d101      	bne.n	8025aec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8025ae8:	2301      	movs	r3, #1
 8025aea:	e083      	b.n	8025bf4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025aec:	687b      	ldr	r3, [r7, #4]
 8025aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025af2:	b2db      	uxtb	r3, r3
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d106      	bne.n	8025b06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	2200      	movs	r2, #0
 8025afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8025b00:	6878      	ldr	r0, [r7, #4]
 8025b02:	f7fd fad5 	bl	80230b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	2202      	movs	r2, #2
 8025b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	681b      	ldr	r3, [r3, #0]
 8025b12:	689b      	ldr	r3, [r3, #8]
 8025b14:	687a      	ldr	r2, [r7, #4]
 8025b16:	6812      	ldr	r2, [r2, #0]
 8025b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025b1c:	f023 0307 	bic.w	r3, r3, #7
 8025b20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	681a      	ldr	r2, [r3, #0]
 8025b26:	687b      	ldr	r3, [r7, #4]
 8025b28:	3304      	adds	r3, #4
 8025b2a:	4619      	mov	r1, r3
 8025b2c:	4610      	mov	r0, r2
 8025b2e:	f000 fb1f 	bl	8026170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	689b      	ldr	r3, [r3, #8]
 8025b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8025b3a:	687b      	ldr	r3, [r7, #4]
 8025b3c:	681b      	ldr	r3, [r3, #0]
 8025b3e:	699b      	ldr	r3, [r3, #24]
 8025b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8025b42:	687b      	ldr	r3, [r7, #4]
 8025b44:	681b      	ldr	r3, [r3, #0]
 8025b46:	6a1b      	ldr	r3, [r3, #32]
 8025b48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8025b4a:	683b      	ldr	r3, [r7, #0]
 8025b4c:	681b      	ldr	r3, [r3, #0]
 8025b4e:	697a      	ldr	r2, [r7, #20]
 8025b50:	4313      	orrs	r3, r2
 8025b52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8025b54:	693b      	ldr	r3, [r7, #16]
 8025b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025b5a:	f023 0303 	bic.w	r3, r3, #3
 8025b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8025b60:	683b      	ldr	r3, [r7, #0]
 8025b62:	689a      	ldr	r2, [r3, #8]
 8025b64:	683b      	ldr	r3, [r7, #0]
 8025b66:	699b      	ldr	r3, [r3, #24]
 8025b68:	021b      	lsls	r3, r3, #8
 8025b6a:	4313      	orrs	r3, r2
 8025b6c:	693a      	ldr	r2, [r7, #16]
 8025b6e:	4313      	orrs	r3, r2
 8025b70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8025b72:	693b      	ldr	r3, [r7, #16]
 8025b74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8025b78:	f023 030c 	bic.w	r3, r3, #12
 8025b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8025b7e:	693b      	ldr	r3, [r7, #16]
 8025b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8025b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8025b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8025b8a:	683b      	ldr	r3, [r7, #0]
 8025b8c:	68da      	ldr	r2, [r3, #12]
 8025b8e:	683b      	ldr	r3, [r7, #0]
 8025b90:	69db      	ldr	r3, [r3, #28]
 8025b92:	021b      	lsls	r3, r3, #8
 8025b94:	4313      	orrs	r3, r2
 8025b96:	693a      	ldr	r2, [r7, #16]
 8025b98:	4313      	orrs	r3, r2
 8025b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8025b9c:	683b      	ldr	r3, [r7, #0]
 8025b9e:	691b      	ldr	r3, [r3, #16]
 8025ba0:	011a      	lsls	r2, r3, #4
 8025ba2:	683b      	ldr	r3, [r7, #0]
 8025ba4:	6a1b      	ldr	r3, [r3, #32]
 8025ba6:	031b      	lsls	r3, r3, #12
 8025ba8:	4313      	orrs	r3, r2
 8025baa:	693a      	ldr	r2, [r7, #16]
 8025bac:	4313      	orrs	r3, r2
 8025bae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8025bb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8025bb8:	68fb      	ldr	r3, [r7, #12]
 8025bba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8025bbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8025bc0:	683b      	ldr	r3, [r7, #0]
 8025bc2:	685a      	ldr	r2, [r3, #4]
 8025bc4:	683b      	ldr	r3, [r7, #0]
 8025bc6:	695b      	ldr	r3, [r3, #20]
 8025bc8:	011b      	lsls	r3, r3, #4
 8025bca:	4313      	orrs	r3, r2
 8025bcc:	68fa      	ldr	r2, [r7, #12]
 8025bce:	4313      	orrs	r3, r2
 8025bd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	681b      	ldr	r3, [r3, #0]
 8025bd6:	697a      	ldr	r2, [r7, #20]
 8025bd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8025bda:	687b      	ldr	r3, [r7, #4]
 8025bdc:	681b      	ldr	r3, [r3, #0]
 8025bde:	693a      	ldr	r2, [r7, #16]
 8025be0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8025be2:	687b      	ldr	r3, [r7, #4]
 8025be4:	681b      	ldr	r3, [r3, #0]
 8025be6:	68fa      	ldr	r2, [r7, #12]
 8025be8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025bea:	687b      	ldr	r3, [r7, #4]
 8025bec:	2201      	movs	r2, #1
 8025bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025bf2:	2300      	movs	r3, #0
}
 8025bf4:	4618      	mov	r0, r3
 8025bf6:	3718      	adds	r7, #24
 8025bf8:	46bd      	mov	sp, r7
 8025bfa:	bd80      	pop	{r7, pc}

08025bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8025bfc:	b580      	push	{r7, lr}
 8025bfe:	b082      	sub	sp, #8
 8025c00:	af00      	add	r7, sp, #0
 8025c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	681b      	ldr	r3, [r3, #0]
 8025c08:	691b      	ldr	r3, [r3, #16]
 8025c0a:	f003 0302 	and.w	r3, r3, #2
 8025c0e:	2b02      	cmp	r3, #2
 8025c10:	d122      	bne.n	8025c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	68db      	ldr	r3, [r3, #12]
 8025c18:	f003 0302 	and.w	r3, r3, #2
 8025c1c:	2b02      	cmp	r3, #2
 8025c1e:	d11b      	bne.n	8025c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8025c20:	687b      	ldr	r3, [r7, #4]
 8025c22:	681b      	ldr	r3, [r3, #0]
 8025c24:	f06f 0202 	mvn.w	r2, #2
 8025c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8025c2a:	687b      	ldr	r3, [r7, #4]
 8025c2c:	2201      	movs	r2, #1
 8025c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	699b      	ldr	r3, [r3, #24]
 8025c36:	f003 0303 	and.w	r3, r3, #3
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	d003      	beq.n	8025c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8025c3e:	6878      	ldr	r0, [r7, #4]
 8025c40:	f000 fa78 	bl	8026134 <HAL_TIM_IC_CaptureCallback>
 8025c44:	e005      	b.n	8025c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8025c46:	6878      	ldr	r0, [r7, #4]
 8025c48:	f000 fa6a 	bl	8026120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025c4c:	6878      	ldr	r0, [r7, #4]
 8025c4e:	f000 fa7b 	bl	8026148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025c52:	687b      	ldr	r3, [r7, #4]
 8025c54:	2200      	movs	r2, #0
 8025c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8025c58:	687b      	ldr	r3, [r7, #4]
 8025c5a:	681b      	ldr	r3, [r3, #0]
 8025c5c:	691b      	ldr	r3, [r3, #16]
 8025c5e:	f003 0304 	and.w	r3, r3, #4
 8025c62:	2b04      	cmp	r3, #4
 8025c64:	d122      	bne.n	8025cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	681b      	ldr	r3, [r3, #0]
 8025c6a:	68db      	ldr	r3, [r3, #12]
 8025c6c:	f003 0304 	and.w	r3, r3, #4
 8025c70:	2b04      	cmp	r3, #4
 8025c72:	d11b      	bne.n	8025cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8025c74:	687b      	ldr	r3, [r7, #4]
 8025c76:	681b      	ldr	r3, [r3, #0]
 8025c78:	f06f 0204 	mvn.w	r2, #4
 8025c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	2202      	movs	r2, #2
 8025c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8025c84:	687b      	ldr	r3, [r7, #4]
 8025c86:	681b      	ldr	r3, [r3, #0]
 8025c88:	699b      	ldr	r3, [r3, #24]
 8025c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d003      	beq.n	8025c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025c92:	6878      	ldr	r0, [r7, #4]
 8025c94:	f000 fa4e 	bl	8026134 <HAL_TIM_IC_CaptureCallback>
 8025c98:	e005      	b.n	8025ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025c9a:	6878      	ldr	r0, [r7, #4]
 8025c9c:	f000 fa40 	bl	8026120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025ca0:	6878      	ldr	r0, [r7, #4]
 8025ca2:	f000 fa51 	bl	8026148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	2200      	movs	r2, #0
 8025caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8025cac:	687b      	ldr	r3, [r7, #4]
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	691b      	ldr	r3, [r3, #16]
 8025cb2:	f003 0308 	and.w	r3, r3, #8
 8025cb6:	2b08      	cmp	r3, #8
 8025cb8:	d122      	bne.n	8025d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	681b      	ldr	r3, [r3, #0]
 8025cbe:	68db      	ldr	r3, [r3, #12]
 8025cc0:	f003 0308 	and.w	r3, r3, #8
 8025cc4:	2b08      	cmp	r3, #8
 8025cc6:	d11b      	bne.n	8025d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	681b      	ldr	r3, [r3, #0]
 8025ccc:	f06f 0208 	mvn.w	r2, #8
 8025cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	2204      	movs	r2, #4
 8025cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8025cd8:	687b      	ldr	r3, [r7, #4]
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	69db      	ldr	r3, [r3, #28]
 8025cde:	f003 0303 	and.w	r3, r3, #3
 8025ce2:	2b00      	cmp	r3, #0
 8025ce4:	d003      	beq.n	8025cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025ce6:	6878      	ldr	r0, [r7, #4]
 8025ce8:	f000 fa24 	bl	8026134 <HAL_TIM_IC_CaptureCallback>
 8025cec:	e005      	b.n	8025cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025cee:	6878      	ldr	r0, [r7, #4]
 8025cf0:	f000 fa16 	bl	8026120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025cf4:	6878      	ldr	r0, [r7, #4]
 8025cf6:	f000 fa27 	bl	8026148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025cfa:	687b      	ldr	r3, [r7, #4]
 8025cfc:	2200      	movs	r2, #0
 8025cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8025d00:	687b      	ldr	r3, [r7, #4]
 8025d02:	681b      	ldr	r3, [r3, #0]
 8025d04:	691b      	ldr	r3, [r3, #16]
 8025d06:	f003 0310 	and.w	r3, r3, #16
 8025d0a:	2b10      	cmp	r3, #16
 8025d0c:	d122      	bne.n	8025d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	68db      	ldr	r3, [r3, #12]
 8025d14:	f003 0310 	and.w	r3, r3, #16
 8025d18:	2b10      	cmp	r3, #16
 8025d1a:	d11b      	bne.n	8025d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8025d1c:	687b      	ldr	r3, [r7, #4]
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	f06f 0210 	mvn.w	r2, #16
 8025d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	2208      	movs	r2, #8
 8025d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8025d2c:	687b      	ldr	r3, [r7, #4]
 8025d2e:	681b      	ldr	r3, [r3, #0]
 8025d30:	69db      	ldr	r3, [r3, #28]
 8025d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d003      	beq.n	8025d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025d3a:	6878      	ldr	r0, [r7, #4]
 8025d3c:	f000 f9fa 	bl	8026134 <HAL_TIM_IC_CaptureCallback>
 8025d40:	e005      	b.n	8025d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025d42:	6878      	ldr	r0, [r7, #4]
 8025d44:	f000 f9ec 	bl	8026120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025d48:	6878      	ldr	r0, [r7, #4]
 8025d4a:	f000 f9fd 	bl	8026148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025d4e:	687b      	ldr	r3, [r7, #4]
 8025d50:	2200      	movs	r2, #0
 8025d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8025d54:	687b      	ldr	r3, [r7, #4]
 8025d56:	681b      	ldr	r3, [r3, #0]
 8025d58:	691b      	ldr	r3, [r3, #16]
 8025d5a:	f003 0301 	and.w	r3, r3, #1
 8025d5e:	2b01      	cmp	r3, #1
 8025d60:	d10e      	bne.n	8025d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8025d62:	687b      	ldr	r3, [r7, #4]
 8025d64:	681b      	ldr	r3, [r3, #0]
 8025d66:	68db      	ldr	r3, [r3, #12]
 8025d68:	f003 0301 	and.w	r3, r3, #1
 8025d6c:	2b01      	cmp	r3, #1
 8025d6e:	d107      	bne.n	8025d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8025d70:	687b      	ldr	r3, [r7, #4]
 8025d72:	681b      	ldr	r3, [r3, #0]
 8025d74:	f06f 0201 	mvn.w	r2, #1
 8025d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8025d7a:	6878      	ldr	r0, [r7, #4]
 8025d7c:	f7fc fce6 	bl	802274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8025d80:	687b      	ldr	r3, [r7, #4]
 8025d82:	681b      	ldr	r3, [r3, #0]
 8025d84:	691b      	ldr	r3, [r3, #16]
 8025d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025d8a:	2b80      	cmp	r3, #128	; 0x80
 8025d8c:	d10e      	bne.n	8025dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	681b      	ldr	r3, [r3, #0]
 8025d92:	68db      	ldr	r3, [r3, #12]
 8025d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025d98:	2b80      	cmp	r3, #128	; 0x80
 8025d9a:	d107      	bne.n	8025dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8025d9c:	687b      	ldr	r3, [r7, #4]
 8025d9e:	681b      	ldr	r3, [r3, #0]
 8025da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8025da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8025da6:	6878      	ldr	r0, [r7, #4]
 8025da8:	f000 fd78 	bl	802689c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8025dac:	687b      	ldr	r3, [r7, #4]
 8025dae:	681b      	ldr	r3, [r3, #0]
 8025db0:	691b      	ldr	r3, [r3, #16]
 8025db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025db6:	2b40      	cmp	r3, #64	; 0x40
 8025db8:	d10e      	bne.n	8025dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8025dba:	687b      	ldr	r3, [r7, #4]
 8025dbc:	681b      	ldr	r3, [r3, #0]
 8025dbe:	68db      	ldr	r3, [r3, #12]
 8025dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025dc4:	2b40      	cmp	r3, #64	; 0x40
 8025dc6:	d107      	bne.n	8025dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8025dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8025dd2:	6878      	ldr	r0, [r7, #4]
 8025dd4:	f000 f9c2 	bl	802615c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	691b      	ldr	r3, [r3, #16]
 8025dde:	f003 0320 	and.w	r3, r3, #32
 8025de2:	2b20      	cmp	r3, #32
 8025de4:	d10e      	bne.n	8025e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8025de6:	687b      	ldr	r3, [r7, #4]
 8025de8:	681b      	ldr	r3, [r3, #0]
 8025dea:	68db      	ldr	r3, [r3, #12]
 8025dec:	f003 0320 	and.w	r3, r3, #32
 8025df0:	2b20      	cmp	r3, #32
 8025df2:	d107      	bne.n	8025e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8025df4:	687b      	ldr	r3, [r7, #4]
 8025df6:	681b      	ldr	r3, [r3, #0]
 8025df8:	f06f 0220 	mvn.w	r2, #32
 8025dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8025dfe:	6878      	ldr	r0, [r7, #4]
 8025e00:	f000 fd42 	bl	8026888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8025e04:	bf00      	nop
 8025e06:	3708      	adds	r7, #8
 8025e08:	46bd      	mov	sp, r7
 8025e0a:	bd80      	pop	{r7, pc}

08025e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8025e0c:	b580      	push	{r7, lr}
 8025e0e:	b084      	sub	sp, #16
 8025e10:	af00      	add	r7, sp, #0
 8025e12:	60f8      	str	r0, [r7, #12]
 8025e14:	60b9      	str	r1, [r7, #8]
 8025e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8025e18:	68fb      	ldr	r3, [r7, #12]
 8025e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025e1e:	2b01      	cmp	r3, #1
 8025e20:	d101      	bne.n	8025e26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8025e22:	2302      	movs	r3, #2
 8025e24:	e0b4      	b.n	8025f90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8025e26:	68fb      	ldr	r3, [r7, #12]
 8025e28:	2201      	movs	r2, #1
 8025e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	2202      	movs	r2, #2
 8025e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	2b0c      	cmp	r3, #12
 8025e3a:	f200 809f 	bhi.w	8025f7c <HAL_TIM_PWM_ConfigChannel+0x170>
 8025e3e:	a201      	add	r2, pc, #4	; (adr r2, 8025e44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8025e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025e44:	08025e79 	.word	0x08025e79
 8025e48:	08025f7d 	.word	0x08025f7d
 8025e4c:	08025f7d 	.word	0x08025f7d
 8025e50:	08025f7d 	.word	0x08025f7d
 8025e54:	08025eb9 	.word	0x08025eb9
 8025e58:	08025f7d 	.word	0x08025f7d
 8025e5c:	08025f7d 	.word	0x08025f7d
 8025e60:	08025f7d 	.word	0x08025f7d
 8025e64:	08025efb 	.word	0x08025efb
 8025e68:	08025f7d 	.word	0x08025f7d
 8025e6c:	08025f7d 	.word	0x08025f7d
 8025e70:	08025f7d 	.word	0x08025f7d
 8025e74:	08025f3b 	.word	0x08025f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	681b      	ldr	r3, [r3, #0]
 8025e7c:	68b9      	ldr	r1, [r7, #8]
 8025e7e:	4618      	mov	r0, r3
 8025e80:	f000 fa16 	bl	80262b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8025e84:	68fb      	ldr	r3, [r7, #12]
 8025e86:	681b      	ldr	r3, [r3, #0]
 8025e88:	699a      	ldr	r2, [r3, #24]
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	681b      	ldr	r3, [r3, #0]
 8025e8e:	f042 0208 	orr.w	r2, r2, #8
 8025e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8025e94:	68fb      	ldr	r3, [r7, #12]
 8025e96:	681b      	ldr	r3, [r3, #0]
 8025e98:	699a      	ldr	r2, [r3, #24]
 8025e9a:	68fb      	ldr	r3, [r7, #12]
 8025e9c:	681b      	ldr	r3, [r3, #0]
 8025e9e:	f022 0204 	bic.w	r2, r2, #4
 8025ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8025ea4:	68fb      	ldr	r3, [r7, #12]
 8025ea6:	681b      	ldr	r3, [r3, #0]
 8025ea8:	6999      	ldr	r1, [r3, #24]
 8025eaa:	68bb      	ldr	r3, [r7, #8]
 8025eac:	691a      	ldr	r2, [r3, #16]
 8025eae:	68fb      	ldr	r3, [r7, #12]
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	430a      	orrs	r2, r1
 8025eb4:	619a      	str	r2, [r3, #24]
      break;
 8025eb6:	e062      	b.n	8025f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8025eb8:	68fb      	ldr	r3, [r7, #12]
 8025eba:	681b      	ldr	r3, [r3, #0]
 8025ebc:	68b9      	ldr	r1, [r7, #8]
 8025ebe:	4618      	mov	r0, r3
 8025ec0:	f000 fa66 	bl	8026390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8025ec4:	68fb      	ldr	r3, [r7, #12]
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	699a      	ldr	r2, [r3, #24]
 8025eca:	68fb      	ldr	r3, [r7, #12]
 8025ecc:	681b      	ldr	r3, [r3, #0]
 8025ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	681b      	ldr	r3, [r3, #0]
 8025ed8:	699a      	ldr	r2, [r3, #24]
 8025eda:	68fb      	ldr	r3, [r7, #12]
 8025edc:	681b      	ldr	r3, [r3, #0]
 8025ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8025ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8025ee4:	68fb      	ldr	r3, [r7, #12]
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	6999      	ldr	r1, [r3, #24]
 8025eea:	68bb      	ldr	r3, [r7, #8]
 8025eec:	691b      	ldr	r3, [r3, #16]
 8025eee:	021a      	lsls	r2, r3, #8
 8025ef0:	68fb      	ldr	r3, [r7, #12]
 8025ef2:	681b      	ldr	r3, [r3, #0]
 8025ef4:	430a      	orrs	r2, r1
 8025ef6:	619a      	str	r2, [r3, #24]
      break;
 8025ef8:	e041      	b.n	8025f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8025efa:	68fb      	ldr	r3, [r7, #12]
 8025efc:	681b      	ldr	r3, [r3, #0]
 8025efe:	68b9      	ldr	r1, [r7, #8]
 8025f00:	4618      	mov	r0, r3
 8025f02:	f000 fabb 	bl	802647c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8025f06:	68fb      	ldr	r3, [r7, #12]
 8025f08:	681b      	ldr	r3, [r3, #0]
 8025f0a:	69da      	ldr	r2, [r3, #28]
 8025f0c:	68fb      	ldr	r3, [r7, #12]
 8025f0e:	681b      	ldr	r3, [r3, #0]
 8025f10:	f042 0208 	orr.w	r2, r2, #8
 8025f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8025f16:	68fb      	ldr	r3, [r7, #12]
 8025f18:	681b      	ldr	r3, [r3, #0]
 8025f1a:	69da      	ldr	r2, [r3, #28]
 8025f1c:	68fb      	ldr	r3, [r7, #12]
 8025f1e:	681b      	ldr	r3, [r3, #0]
 8025f20:	f022 0204 	bic.w	r2, r2, #4
 8025f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8025f26:	68fb      	ldr	r3, [r7, #12]
 8025f28:	681b      	ldr	r3, [r3, #0]
 8025f2a:	69d9      	ldr	r1, [r3, #28]
 8025f2c:	68bb      	ldr	r3, [r7, #8]
 8025f2e:	691a      	ldr	r2, [r3, #16]
 8025f30:	68fb      	ldr	r3, [r7, #12]
 8025f32:	681b      	ldr	r3, [r3, #0]
 8025f34:	430a      	orrs	r2, r1
 8025f36:	61da      	str	r2, [r3, #28]
      break;
 8025f38:	e021      	b.n	8025f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8025f3a:	68fb      	ldr	r3, [r7, #12]
 8025f3c:	681b      	ldr	r3, [r3, #0]
 8025f3e:	68b9      	ldr	r1, [r7, #8]
 8025f40:	4618      	mov	r0, r3
 8025f42:	f000 fb0f 	bl	8026564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8025f46:	68fb      	ldr	r3, [r7, #12]
 8025f48:	681b      	ldr	r3, [r3, #0]
 8025f4a:	69da      	ldr	r2, [r3, #28]
 8025f4c:	68fb      	ldr	r3, [r7, #12]
 8025f4e:	681b      	ldr	r3, [r3, #0]
 8025f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8025f56:	68fb      	ldr	r3, [r7, #12]
 8025f58:	681b      	ldr	r3, [r3, #0]
 8025f5a:	69da      	ldr	r2, [r3, #28]
 8025f5c:	68fb      	ldr	r3, [r7, #12]
 8025f5e:	681b      	ldr	r3, [r3, #0]
 8025f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8025f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8025f66:	68fb      	ldr	r3, [r7, #12]
 8025f68:	681b      	ldr	r3, [r3, #0]
 8025f6a:	69d9      	ldr	r1, [r3, #28]
 8025f6c:	68bb      	ldr	r3, [r7, #8]
 8025f6e:	691b      	ldr	r3, [r3, #16]
 8025f70:	021a      	lsls	r2, r3, #8
 8025f72:	68fb      	ldr	r3, [r7, #12]
 8025f74:	681b      	ldr	r3, [r3, #0]
 8025f76:	430a      	orrs	r2, r1
 8025f78:	61da      	str	r2, [r3, #28]
      break;
 8025f7a:	e000      	b.n	8025f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8025f7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8025f7e:	68fb      	ldr	r3, [r7, #12]
 8025f80:	2201      	movs	r2, #1
 8025f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8025f86:	68fb      	ldr	r3, [r7, #12]
 8025f88:	2200      	movs	r2, #0
 8025f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8025f8e:	2300      	movs	r3, #0
}
 8025f90:	4618      	mov	r0, r3
 8025f92:	3710      	adds	r7, #16
 8025f94:	46bd      	mov	sp, r7
 8025f96:	bd80      	pop	{r7, pc}

08025f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8025f98:	b580      	push	{r7, lr}
 8025f9a:	b084      	sub	sp, #16
 8025f9c:	af00      	add	r7, sp, #0
 8025f9e:	6078      	str	r0, [r7, #4]
 8025fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8025fa2:	687b      	ldr	r3, [r7, #4]
 8025fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025fa8:	2b01      	cmp	r3, #1
 8025faa:	d101      	bne.n	8025fb0 <HAL_TIM_ConfigClockSource+0x18>
 8025fac:	2302      	movs	r3, #2
 8025fae:	e0b3      	b.n	8026118 <HAL_TIM_ConfigClockSource+0x180>
 8025fb0:	687b      	ldr	r3, [r7, #4]
 8025fb2:	2201      	movs	r2, #1
 8025fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	2202      	movs	r2, #2
 8025fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8025fc0:	687b      	ldr	r3, [r7, #4]
 8025fc2:	681b      	ldr	r3, [r3, #0]
 8025fc4:	689b      	ldr	r3, [r3, #8]
 8025fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8025fc8:	68fb      	ldr	r3, [r7, #12]
 8025fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8025fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8025fd0:	68fb      	ldr	r3, [r7, #12]
 8025fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025fd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8025fd8:	687b      	ldr	r3, [r7, #4]
 8025fda:	681b      	ldr	r3, [r3, #0]
 8025fdc:	68fa      	ldr	r2, [r7, #12]
 8025fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8025fe0:	683b      	ldr	r3, [r7, #0]
 8025fe2:	681b      	ldr	r3, [r3, #0]
 8025fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025fe8:	d03e      	beq.n	8026068 <HAL_TIM_ConfigClockSource+0xd0>
 8025fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025fee:	f200 8087 	bhi.w	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8025ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8025ff6:	f000 8085 	beq.w	8026104 <HAL_TIM_ConfigClockSource+0x16c>
 8025ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8025ffe:	d87f      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026000:	2b70      	cmp	r3, #112	; 0x70
 8026002:	d01a      	beq.n	802603a <HAL_TIM_ConfigClockSource+0xa2>
 8026004:	2b70      	cmp	r3, #112	; 0x70
 8026006:	d87b      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026008:	2b60      	cmp	r3, #96	; 0x60
 802600a:	d050      	beq.n	80260ae <HAL_TIM_ConfigClockSource+0x116>
 802600c:	2b60      	cmp	r3, #96	; 0x60
 802600e:	d877      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026010:	2b50      	cmp	r3, #80	; 0x50
 8026012:	d03c      	beq.n	802608e <HAL_TIM_ConfigClockSource+0xf6>
 8026014:	2b50      	cmp	r3, #80	; 0x50
 8026016:	d873      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026018:	2b40      	cmp	r3, #64	; 0x40
 802601a:	d058      	beq.n	80260ce <HAL_TIM_ConfigClockSource+0x136>
 802601c:	2b40      	cmp	r3, #64	; 0x40
 802601e:	d86f      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026020:	2b30      	cmp	r3, #48	; 0x30
 8026022:	d064      	beq.n	80260ee <HAL_TIM_ConfigClockSource+0x156>
 8026024:	2b30      	cmp	r3, #48	; 0x30
 8026026:	d86b      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026028:	2b20      	cmp	r3, #32
 802602a:	d060      	beq.n	80260ee <HAL_TIM_ConfigClockSource+0x156>
 802602c:	2b20      	cmp	r3, #32
 802602e:	d867      	bhi.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
 8026030:	2b00      	cmp	r3, #0
 8026032:	d05c      	beq.n	80260ee <HAL_TIM_ConfigClockSource+0x156>
 8026034:	2b10      	cmp	r3, #16
 8026036:	d05a      	beq.n	80260ee <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8026038:	e062      	b.n	8026100 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 802603a:	687b      	ldr	r3, [r7, #4]
 802603c:	6818      	ldr	r0, [r3, #0]
 802603e:	683b      	ldr	r3, [r7, #0]
 8026040:	6899      	ldr	r1, [r3, #8]
 8026042:	683b      	ldr	r3, [r7, #0]
 8026044:	685a      	ldr	r2, [r3, #4]
 8026046:	683b      	ldr	r3, [r7, #0]
 8026048:	68db      	ldr	r3, [r3, #12]
 802604a:	f000 fb5b 	bl	8026704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802604e:	687b      	ldr	r3, [r7, #4]
 8026050:	681b      	ldr	r3, [r3, #0]
 8026052:	689b      	ldr	r3, [r3, #8]
 8026054:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8026056:	68fb      	ldr	r3, [r7, #12]
 8026058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802605c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802605e:	687b      	ldr	r3, [r7, #4]
 8026060:	681b      	ldr	r3, [r3, #0]
 8026062:	68fa      	ldr	r2, [r7, #12]
 8026064:	609a      	str	r2, [r3, #8]
      break;
 8026066:	e04e      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8026068:	687b      	ldr	r3, [r7, #4]
 802606a:	6818      	ldr	r0, [r3, #0]
 802606c:	683b      	ldr	r3, [r7, #0]
 802606e:	6899      	ldr	r1, [r3, #8]
 8026070:	683b      	ldr	r3, [r7, #0]
 8026072:	685a      	ldr	r2, [r3, #4]
 8026074:	683b      	ldr	r3, [r7, #0]
 8026076:	68db      	ldr	r3, [r3, #12]
 8026078:	f000 fb44 	bl	8026704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	681b      	ldr	r3, [r3, #0]
 8026080:	689a      	ldr	r2, [r3, #8]
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	681b      	ldr	r3, [r3, #0]
 8026086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802608a:	609a      	str	r2, [r3, #8]
      break;
 802608c:	e03b      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802608e:	687b      	ldr	r3, [r7, #4]
 8026090:	6818      	ldr	r0, [r3, #0]
 8026092:	683b      	ldr	r3, [r7, #0]
 8026094:	6859      	ldr	r1, [r3, #4]
 8026096:	683b      	ldr	r3, [r7, #0]
 8026098:	68db      	ldr	r3, [r3, #12]
 802609a:	461a      	mov	r2, r3
 802609c:	f000 fab8 	bl	8026610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	681b      	ldr	r3, [r3, #0]
 80260a4:	2150      	movs	r1, #80	; 0x50
 80260a6:	4618      	mov	r0, r3
 80260a8:	f000 fb11 	bl	80266ce <TIM_ITRx_SetConfig>
      break;
 80260ac:	e02b      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80260ae:	687b      	ldr	r3, [r7, #4]
 80260b0:	6818      	ldr	r0, [r3, #0]
 80260b2:	683b      	ldr	r3, [r7, #0]
 80260b4:	6859      	ldr	r1, [r3, #4]
 80260b6:	683b      	ldr	r3, [r7, #0]
 80260b8:	68db      	ldr	r3, [r3, #12]
 80260ba:	461a      	mov	r2, r3
 80260bc:	f000 fad7 	bl	802666e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80260c0:	687b      	ldr	r3, [r7, #4]
 80260c2:	681b      	ldr	r3, [r3, #0]
 80260c4:	2160      	movs	r1, #96	; 0x60
 80260c6:	4618      	mov	r0, r3
 80260c8:	f000 fb01 	bl	80266ce <TIM_ITRx_SetConfig>
      break;
 80260cc:	e01b      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80260ce:	687b      	ldr	r3, [r7, #4]
 80260d0:	6818      	ldr	r0, [r3, #0]
 80260d2:	683b      	ldr	r3, [r7, #0]
 80260d4:	6859      	ldr	r1, [r3, #4]
 80260d6:	683b      	ldr	r3, [r7, #0]
 80260d8:	68db      	ldr	r3, [r3, #12]
 80260da:	461a      	mov	r2, r3
 80260dc:	f000 fa98 	bl	8026610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80260e0:	687b      	ldr	r3, [r7, #4]
 80260e2:	681b      	ldr	r3, [r3, #0]
 80260e4:	2140      	movs	r1, #64	; 0x40
 80260e6:	4618      	mov	r0, r3
 80260e8:	f000 faf1 	bl	80266ce <TIM_ITRx_SetConfig>
      break;
 80260ec:	e00b      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	681a      	ldr	r2, [r3, #0]
 80260f2:	683b      	ldr	r3, [r7, #0]
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	4619      	mov	r1, r3
 80260f8:	4610      	mov	r0, r2
 80260fa:	f000 fae8 	bl	80266ce <TIM_ITRx_SetConfig>
      break;
 80260fe:	e002      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8026100:	bf00      	nop
 8026102:	e000      	b.n	8026106 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8026104:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8026106:	687b      	ldr	r3, [r7, #4]
 8026108:	2201      	movs	r2, #1
 802610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	2200      	movs	r2, #0
 8026112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026116:	2300      	movs	r3, #0
}
 8026118:	4618      	mov	r0, r3
 802611a:	3710      	adds	r7, #16
 802611c:	46bd      	mov	sp, r7
 802611e:	bd80      	pop	{r7, pc}

08026120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8026120:	b480      	push	{r7}
 8026122:	b083      	sub	sp, #12
 8026124:	af00      	add	r7, sp, #0
 8026126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8026128:	bf00      	nop
 802612a:	370c      	adds	r7, #12
 802612c:	46bd      	mov	sp, r7
 802612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026132:	4770      	bx	lr

08026134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8026134:	b480      	push	{r7}
 8026136:	b083      	sub	sp, #12
 8026138:	af00      	add	r7, sp, #0
 802613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802613c:	bf00      	nop
 802613e:	370c      	adds	r7, #12
 8026140:	46bd      	mov	sp, r7
 8026142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026146:	4770      	bx	lr

08026148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8026148:	b480      	push	{r7}
 802614a:	b083      	sub	sp, #12
 802614c:	af00      	add	r7, sp, #0
 802614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8026150:	bf00      	nop
 8026152:	370c      	adds	r7, #12
 8026154:	46bd      	mov	sp, r7
 8026156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802615a:	4770      	bx	lr

0802615c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802615c:	b480      	push	{r7}
 802615e:	b083      	sub	sp, #12
 8026160:	af00      	add	r7, sp, #0
 8026162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8026164:	bf00      	nop
 8026166:	370c      	adds	r7, #12
 8026168:	46bd      	mov	sp, r7
 802616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802616e:	4770      	bx	lr

08026170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8026170:	b480      	push	{r7}
 8026172:	b085      	sub	sp, #20
 8026174:	af00      	add	r7, sp, #0
 8026176:	6078      	str	r0, [r7, #4]
 8026178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	681b      	ldr	r3, [r3, #0]
 802617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8026180:	687b      	ldr	r3, [r7, #4]
 8026182:	4a40      	ldr	r2, [pc, #256]	; (8026284 <TIM_Base_SetConfig+0x114>)
 8026184:	4293      	cmp	r3, r2
 8026186:	d013      	beq.n	80261b0 <TIM_Base_SetConfig+0x40>
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802618e:	d00f      	beq.n	80261b0 <TIM_Base_SetConfig+0x40>
 8026190:	687b      	ldr	r3, [r7, #4]
 8026192:	4a3d      	ldr	r2, [pc, #244]	; (8026288 <TIM_Base_SetConfig+0x118>)
 8026194:	4293      	cmp	r3, r2
 8026196:	d00b      	beq.n	80261b0 <TIM_Base_SetConfig+0x40>
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	4a3c      	ldr	r2, [pc, #240]	; (802628c <TIM_Base_SetConfig+0x11c>)
 802619c:	4293      	cmp	r3, r2
 802619e:	d007      	beq.n	80261b0 <TIM_Base_SetConfig+0x40>
 80261a0:	687b      	ldr	r3, [r7, #4]
 80261a2:	4a3b      	ldr	r2, [pc, #236]	; (8026290 <TIM_Base_SetConfig+0x120>)
 80261a4:	4293      	cmp	r3, r2
 80261a6:	d003      	beq.n	80261b0 <TIM_Base_SetConfig+0x40>
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	4a3a      	ldr	r2, [pc, #232]	; (8026294 <TIM_Base_SetConfig+0x124>)
 80261ac:	4293      	cmp	r3, r2
 80261ae:	d108      	bne.n	80261c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80261b0:	68fb      	ldr	r3, [r7, #12]
 80261b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80261b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80261b8:	683b      	ldr	r3, [r7, #0]
 80261ba:	685b      	ldr	r3, [r3, #4]
 80261bc:	68fa      	ldr	r2, [r7, #12]
 80261be:	4313      	orrs	r3, r2
 80261c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80261c2:	687b      	ldr	r3, [r7, #4]
 80261c4:	4a2f      	ldr	r2, [pc, #188]	; (8026284 <TIM_Base_SetConfig+0x114>)
 80261c6:	4293      	cmp	r3, r2
 80261c8:	d02b      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80261d0:	d027      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	4a2c      	ldr	r2, [pc, #176]	; (8026288 <TIM_Base_SetConfig+0x118>)
 80261d6:	4293      	cmp	r3, r2
 80261d8:	d023      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261da:	687b      	ldr	r3, [r7, #4]
 80261dc:	4a2b      	ldr	r2, [pc, #172]	; (802628c <TIM_Base_SetConfig+0x11c>)
 80261de:	4293      	cmp	r3, r2
 80261e0:	d01f      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261e2:	687b      	ldr	r3, [r7, #4]
 80261e4:	4a2a      	ldr	r2, [pc, #168]	; (8026290 <TIM_Base_SetConfig+0x120>)
 80261e6:	4293      	cmp	r3, r2
 80261e8:	d01b      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	4a29      	ldr	r2, [pc, #164]	; (8026294 <TIM_Base_SetConfig+0x124>)
 80261ee:	4293      	cmp	r3, r2
 80261f0:	d017      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261f2:	687b      	ldr	r3, [r7, #4]
 80261f4:	4a28      	ldr	r2, [pc, #160]	; (8026298 <TIM_Base_SetConfig+0x128>)
 80261f6:	4293      	cmp	r3, r2
 80261f8:	d013      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	4a27      	ldr	r2, [pc, #156]	; (802629c <TIM_Base_SetConfig+0x12c>)
 80261fe:	4293      	cmp	r3, r2
 8026200:	d00f      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 8026202:	687b      	ldr	r3, [r7, #4]
 8026204:	4a26      	ldr	r2, [pc, #152]	; (80262a0 <TIM_Base_SetConfig+0x130>)
 8026206:	4293      	cmp	r3, r2
 8026208:	d00b      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 802620a:	687b      	ldr	r3, [r7, #4]
 802620c:	4a25      	ldr	r2, [pc, #148]	; (80262a4 <TIM_Base_SetConfig+0x134>)
 802620e:	4293      	cmp	r3, r2
 8026210:	d007      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	4a24      	ldr	r2, [pc, #144]	; (80262a8 <TIM_Base_SetConfig+0x138>)
 8026216:	4293      	cmp	r3, r2
 8026218:	d003      	beq.n	8026222 <TIM_Base_SetConfig+0xb2>
 802621a:	687b      	ldr	r3, [r7, #4]
 802621c:	4a23      	ldr	r2, [pc, #140]	; (80262ac <TIM_Base_SetConfig+0x13c>)
 802621e:	4293      	cmp	r3, r2
 8026220:	d108      	bne.n	8026234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8026222:	68fb      	ldr	r3, [r7, #12]
 8026224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802622a:	683b      	ldr	r3, [r7, #0]
 802622c:	68db      	ldr	r3, [r3, #12]
 802622e:	68fa      	ldr	r2, [r7, #12]
 8026230:	4313      	orrs	r3, r2
 8026232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8026234:	68fb      	ldr	r3, [r7, #12]
 8026236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802623a:	683b      	ldr	r3, [r7, #0]
 802623c:	695b      	ldr	r3, [r3, #20]
 802623e:	4313      	orrs	r3, r2
 8026240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8026242:	687b      	ldr	r3, [r7, #4]
 8026244:	68fa      	ldr	r2, [r7, #12]
 8026246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8026248:	683b      	ldr	r3, [r7, #0]
 802624a:	689a      	ldr	r2, [r3, #8]
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8026250:	683b      	ldr	r3, [r7, #0]
 8026252:	681a      	ldr	r2, [r3, #0]
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8026258:	687b      	ldr	r3, [r7, #4]
 802625a:	4a0a      	ldr	r2, [pc, #40]	; (8026284 <TIM_Base_SetConfig+0x114>)
 802625c:	4293      	cmp	r3, r2
 802625e:	d003      	beq.n	8026268 <TIM_Base_SetConfig+0xf8>
 8026260:	687b      	ldr	r3, [r7, #4]
 8026262:	4a0c      	ldr	r2, [pc, #48]	; (8026294 <TIM_Base_SetConfig+0x124>)
 8026264:	4293      	cmp	r3, r2
 8026266:	d103      	bne.n	8026270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8026268:	683b      	ldr	r3, [r7, #0]
 802626a:	691a      	ldr	r2, [r3, #16]
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	2201      	movs	r2, #1
 8026274:	615a      	str	r2, [r3, #20]
}
 8026276:	bf00      	nop
 8026278:	3714      	adds	r7, #20
 802627a:	46bd      	mov	sp, r7
 802627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026280:	4770      	bx	lr
 8026282:	bf00      	nop
 8026284:	40010000 	.word	0x40010000
 8026288:	40000400 	.word	0x40000400
 802628c:	40000800 	.word	0x40000800
 8026290:	40000c00 	.word	0x40000c00
 8026294:	40010400 	.word	0x40010400
 8026298:	40014000 	.word	0x40014000
 802629c:	40014400 	.word	0x40014400
 80262a0:	40014800 	.word	0x40014800
 80262a4:	40001800 	.word	0x40001800
 80262a8:	40001c00 	.word	0x40001c00
 80262ac:	40002000 	.word	0x40002000

080262b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80262b0:	b480      	push	{r7}
 80262b2:	b087      	sub	sp, #28
 80262b4:	af00      	add	r7, sp, #0
 80262b6:	6078      	str	r0, [r7, #4]
 80262b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80262ba:	687b      	ldr	r3, [r7, #4]
 80262bc:	6a1b      	ldr	r3, [r3, #32]
 80262be:	f023 0201 	bic.w	r2, r3, #1
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80262c6:	687b      	ldr	r3, [r7, #4]
 80262c8:	6a1b      	ldr	r3, [r3, #32]
 80262ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80262cc:	687b      	ldr	r3, [r7, #4]
 80262ce:	685b      	ldr	r3, [r3, #4]
 80262d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	699b      	ldr	r3, [r3, #24]
 80262d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80262d8:	68fb      	ldr	r3, [r7, #12]
 80262da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80262de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80262e0:	68fb      	ldr	r3, [r7, #12]
 80262e2:	f023 0303 	bic.w	r3, r3, #3
 80262e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80262e8:	683b      	ldr	r3, [r7, #0]
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	68fa      	ldr	r2, [r7, #12]
 80262ee:	4313      	orrs	r3, r2
 80262f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80262f2:	697b      	ldr	r3, [r7, #20]
 80262f4:	f023 0302 	bic.w	r3, r3, #2
 80262f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80262fa:	683b      	ldr	r3, [r7, #0]
 80262fc:	689b      	ldr	r3, [r3, #8]
 80262fe:	697a      	ldr	r2, [r7, #20]
 8026300:	4313      	orrs	r3, r2
 8026302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8026304:	687b      	ldr	r3, [r7, #4]
 8026306:	4a20      	ldr	r2, [pc, #128]	; (8026388 <TIM_OC1_SetConfig+0xd8>)
 8026308:	4293      	cmp	r3, r2
 802630a:	d003      	beq.n	8026314 <TIM_OC1_SetConfig+0x64>
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	4a1f      	ldr	r2, [pc, #124]	; (802638c <TIM_OC1_SetConfig+0xdc>)
 8026310:	4293      	cmp	r3, r2
 8026312:	d10c      	bne.n	802632e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8026314:	697b      	ldr	r3, [r7, #20]
 8026316:	f023 0308 	bic.w	r3, r3, #8
 802631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802631c:	683b      	ldr	r3, [r7, #0]
 802631e:	68db      	ldr	r3, [r3, #12]
 8026320:	697a      	ldr	r2, [r7, #20]
 8026322:	4313      	orrs	r3, r2
 8026324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8026326:	697b      	ldr	r3, [r7, #20]
 8026328:	f023 0304 	bic.w	r3, r3, #4
 802632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802632e:	687b      	ldr	r3, [r7, #4]
 8026330:	4a15      	ldr	r2, [pc, #84]	; (8026388 <TIM_OC1_SetConfig+0xd8>)
 8026332:	4293      	cmp	r3, r2
 8026334:	d003      	beq.n	802633e <TIM_OC1_SetConfig+0x8e>
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	4a14      	ldr	r2, [pc, #80]	; (802638c <TIM_OC1_SetConfig+0xdc>)
 802633a:	4293      	cmp	r3, r2
 802633c:	d111      	bne.n	8026362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802633e:	693b      	ldr	r3, [r7, #16]
 8026340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8026346:	693b      	ldr	r3, [r7, #16]
 8026348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802634e:	683b      	ldr	r3, [r7, #0]
 8026350:	695b      	ldr	r3, [r3, #20]
 8026352:	693a      	ldr	r2, [r7, #16]
 8026354:	4313      	orrs	r3, r2
 8026356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8026358:	683b      	ldr	r3, [r7, #0]
 802635a:	699b      	ldr	r3, [r3, #24]
 802635c:	693a      	ldr	r2, [r7, #16]
 802635e:	4313      	orrs	r3, r2
 8026360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	693a      	ldr	r2, [r7, #16]
 8026366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026368:	687b      	ldr	r3, [r7, #4]
 802636a:	68fa      	ldr	r2, [r7, #12]
 802636c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802636e:	683b      	ldr	r3, [r7, #0]
 8026370:	685a      	ldr	r2, [r3, #4]
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	697a      	ldr	r2, [r7, #20]
 802637a:	621a      	str	r2, [r3, #32]
}
 802637c:	bf00      	nop
 802637e:	371c      	adds	r7, #28
 8026380:	46bd      	mov	sp, r7
 8026382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026386:	4770      	bx	lr
 8026388:	40010000 	.word	0x40010000
 802638c:	40010400 	.word	0x40010400

08026390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026390:	b480      	push	{r7}
 8026392:	b087      	sub	sp, #28
 8026394:	af00      	add	r7, sp, #0
 8026396:	6078      	str	r0, [r7, #4]
 8026398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802639a:	687b      	ldr	r3, [r7, #4]
 802639c:	6a1b      	ldr	r3, [r3, #32]
 802639e:	f023 0210 	bic.w	r2, r3, #16
 80263a2:	687b      	ldr	r3, [r7, #4]
 80263a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	6a1b      	ldr	r3, [r3, #32]
 80263aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	685b      	ldr	r3, [r3, #4]
 80263b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80263b2:	687b      	ldr	r3, [r7, #4]
 80263b4:	699b      	ldr	r3, [r3, #24]
 80263b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80263be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80263c0:	68fb      	ldr	r3, [r7, #12]
 80263c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80263c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80263c8:	683b      	ldr	r3, [r7, #0]
 80263ca:	681b      	ldr	r3, [r3, #0]
 80263cc:	021b      	lsls	r3, r3, #8
 80263ce:	68fa      	ldr	r2, [r7, #12]
 80263d0:	4313      	orrs	r3, r2
 80263d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80263d4:	697b      	ldr	r3, [r7, #20]
 80263d6:	f023 0320 	bic.w	r3, r3, #32
 80263da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80263dc:	683b      	ldr	r3, [r7, #0]
 80263de:	689b      	ldr	r3, [r3, #8]
 80263e0:	011b      	lsls	r3, r3, #4
 80263e2:	697a      	ldr	r2, [r7, #20]
 80263e4:	4313      	orrs	r3, r2
 80263e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80263e8:	687b      	ldr	r3, [r7, #4]
 80263ea:	4a22      	ldr	r2, [pc, #136]	; (8026474 <TIM_OC2_SetConfig+0xe4>)
 80263ec:	4293      	cmp	r3, r2
 80263ee:	d003      	beq.n	80263f8 <TIM_OC2_SetConfig+0x68>
 80263f0:	687b      	ldr	r3, [r7, #4]
 80263f2:	4a21      	ldr	r2, [pc, #132]	; (8026478 <TIM_OC2_SetConfig+0xe8>)
 80263f4:	4293      	cmp	r3, r2
 80263f6:	d10d      	bne.n	8026414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80263f8:	697b      	ldr	r3, [r7, #20]
 80263fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80263fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8026400:	683b      	ldr	r3, [r7, #0]
 8026402:	68db      	ldr	r3, [r3, #12]
 8026404:	011b      	lsls	r3, r3, #4
 8026406:	697a      	ldr	r2, [r7, #20]
 8026408:	4313      	orrs	r3, r2
 802640a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802640c:	697b      	ldr	r3, [r7, #20]
 802640e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	4a17      	ldr	r2, [pc, #92]	; (8026474 <TIM_OC2_SetConfig+0xe4>)
 8026418:	4293      	cmp	r3, r2
 802641a:	d003      	beq.n	8026424 <TIM_OC2_SetConfig+0x94>
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	4a16      	ldr	r2, [pc, #88]	; (8026478 <TIM_OC2_SetConfig+0xe8>)
 8026420:	4293      	cmp	r3, r2
 8026422:	d113      	bne.n	802644c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8026424:	693b      	ldr	r3, [r7, #16]
 8026426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802642a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802642c:	693b      	ldr	r3, [r7, #16]
 802642e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8026432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8026434:	683b      	ldr	r3, [r7, #0]
 8026436:	695b      	ldr	r3, [r3, #20]
 8026438:	009b      	lsls	r3, r3, #2
 802643a:	693a      	ldr	r2, [r7, #16]
 802643c:	4313      	orrs	r3, r2
 802643e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8026440:	683b      	ldr	r3, [r7, #0]
 8026442:	699b      	ldr	r3, [r3, #24]
 8026444:	009b      	lsls	r3, r3, #2
 8026446:	693a      	ldr	r2, [r7, #16]
 8026448:	4313      	orrs	r3, r2
 802644a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802644c:	687b      	ldr	r3, [r7, #4]
 802644e:	693a      	ldr	r2, [r7, #16]
 8026450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026452:	687b      	ldr	r3, [r7, #4]
 8026454:	68fa      	ldr	r2, [r7, #12]
 8026456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8026458:	683b      	ldr	r3, [r7, #0]
 802645a:	685a      	ldr	r2, [r3, #4]
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	697a      	ldr	r2, [r7, #20]
 8026464:	621a      	str	r2, [r3, #32]
}
 8026466:	bf00      	nop
 8026468:	371c      	adds	r7, #28
 802646a:	46bd      	mov	sp, r7
 802646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026470:	4770      	bx	lr
 8026472:	bf00      	nop
 8026474:	40010000 	.word	0x40010000
 8026478:	40010400 	.word	0x40010400

0802647c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802647c:	b480      	push	{r7}
 802647e:	b087      	sub	sp, #28
 8026480:	af00      	add	r7, sp, #0
 8026482:	6078      	str	r0, [r7, #4]
 8026484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8026486:	687b      	ldr	r3, [r7, #4]
 8026488:	6a1b      	ldr	r3, [r3, #32]
 802648a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026492:	687b      	ldr	r3, [r7, #4]
 8026494:	6a1b      	ldr	r3, [r3, #32]
 8026496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	685b      	ldr	r3, [r3, #4]
 802649c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802649e:	687b      	ldr	r3, [r7, #4]
 80264a0:	69db      	ldr	r3, [r3, #28]
 80264a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80264a4:	68fb      	ldr	r3, [r7, #12]
 80264a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80264aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	f023 0303 	bic.w	r3, r3, #3
 80264b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80264b4:	683b      	ldr	r3, [r7, #0]
 80264b6:	681b      	ldr	r3, [r3, #0]
 80264b8:	68fa      	ldr	r2, [r7, #12]
 80264ba:	4313      	orrs	r3, r2
 80264bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80264be:	697b      	ldr	r3, [r7, #20]
 80264c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80264c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80264c6:	683b      	ldr	r3, [r7, #0]
 80264c8:	689b      	ldr	r3, [r3, #8]
 80264ca:	021b      	lsls	r3, r3, #8
 80264cc:	697a      	ldr	r2, [r7, #20]
 80264ce:	4313      	orrs	r3, r2
 80264d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	4a21      	ldr	r2, [pc, #132]	; (802655c <TIM_OC3_SetConfig+0xe0>)
 80264d6:	4293      	cmp	r3, r2
 80264d8:	d003      	beq.n	80264e2 <TIM_OC3_SetConfig+0x66>
 80264da:	687b      	ldr	r3, [r7, #4]
 80264dc:	4a20      	ldr	r2, [pc, #128]	; (8026560 <TIM_OC3_SetConfig+0xe4>)
 80264de:	4293      	cmp	r3, r2
 80264e0:	d10d      	bne.n	80264fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80264e2:	697b      	ldr	r3, [r7, #20]
 80264e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80264e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80264ea:	683b      	ldr	r3, [r7, #0]
 80264ec:	68db      	ldr	r3, [r3, #12]
 80264ee:	021b      	lsls	r3, r3, #8
 80264f0:	697a      	ldr	r2, [r7, #20]
 80264f2:	4313      	orrs	r3, r2
 80264f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80264f6:	697b      	ldr	r3, [r7, #20]
 80264f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80264fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	4a16      	ldr	r2, [pc, #88]	; (802655c <TIM_OC3_SetConfig+0xe0>)
 8026502:	4293      	cmp	r3, r2
 8026504:	d003      	beq.n	802650e <TIM_OC3_SetConfig+0x92>
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	4a15      	ldr	r2, [pc, #84]	; (8026560 <TIM_OC3_SetConfig+0xe4>)
 802650a:	4293      	cmp	r3, r2
 802650c:	d113      	bne.n	8026536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802650e:	693b      	ldr	r3, [r7, #16]
 8026510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8026516:	693b      	ldr	r3, [r7, #16]
 8026518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802651c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802651e:	683b      	ldr	r3, [r7, #0]
 8026520:	695b      	ldr	r3, [r3, #20]
 8026522:	011b      	lsls	r3, r3, #4
 8026524:	693a      	ldr	r2, [r7, #16]
 8026526:	4313      	orrs	r3, r2
 8026528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802652a:	683b      	ldr	r3, [r7, #0]
 802652c:	699b      	ldr	r3, [r3, #24]
 802652e:	011b      	lsls	r3, r3, #4
 8026530:	693a      	ldr	r2, [r7, #16]
 8026532:	4313      	orrs	r3, r2
 8026534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	693a      	ldr	r2, [r7, #16]
 802653a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802653c:	687b      	ldr	r3, [r7, #4]
 802653e:	68fa      	ldr	r2, [r7, #12]
 8026540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8026542:	683b      	ldr	r3, [r7, #0]
 8026544:	685a      	ldr	r2, [r3, #4]
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802654a:	687b      	ldr	r3, [r7, #4]
 802654c:	697a      	ldr	r2, [r7, #20]
 802654e:	621a      	str	r2, [r3, #32]
}
 8026550:	bf00      	nop
 8026552:	371c      	adds	r7, #28
 8026554:	46bd      	mov	sp, r7
 8026556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802655a:	4770      	bx	lr
 802655c:	40010000 	.word	0x40010000
 8026560:	40010400 	.word	0x40010400

08026564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026564:	b480      	push	{r7}
 8026566:	b087      	sub	sp, #28
 8026568:	af00      	add	r7, sp, #0
 802656a:	6078      	str	r0, [r7, #4]
 802656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802656e:	687b      	ldr	r3, [r7, #4]
 8026570:	6a1b      	ldr	r3, [r3, #32]
 8026572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802657a:	687b      	ldr	r3, [r7, #4]
 802657c:	6a1b      	ldr	r3, [r3, #32]
 802657e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	685b      	ldr	r3, [r3, #4]
 8026584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8026586:	687b      	ldr	r3, [r7, #4]
 8026588:	69db      	ldr	r3, [r3, #28]
 802658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802658c:	68fb      	ldr	r3, [r7, #12]
 802658e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8026594:	68fb      	ldr	r3, [r7, #12]
 8026596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802659c:	683b      	ldr	r3, [r7, #0]
 802659e:	681b      	ldr	r3, [r3, #0]
 80265a0:	021b      	lsls	r3, r3, #8
 80265a2:	68fa      	ldr	r2, [r7, #12]
 80265a4:	4313      	orrs	r3, r2
 80265a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80265a8:	693b      	ldr	r3, [r7, #16]
 80265aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80265ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80265b0:	683b      	ldr	r3, [r7, #0]
 80265b2:	689b      	ldr	r3, [r3, #8]
 80265b4:	031b      	lsls	r3, r3, #12
 80265b6:	693a      	ldr	r2, [r7, #16]
 80265b8:	4313      	orrs	r3, r2
 80265ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80265bc:	687b      	ldr	r3, [r7, #4]
 80265be:	4a12      	ldr	r2, [pc, #72]	; (8026608 <TIM_OC4_SetConfig+0xa4>)
 80265c0:	4293      	cmp	r3, r2
 80265c2:	d003      	beq.n	80265cc <TIM_OC4_SetConfig+0x68>
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	4a11      	ldr	r2, [pc, #68]	; (802660c <TIM_OC4_SetConfig+0xa8>)
 80265c8:	4293      	cmp	r3, r2
 80265ca:	d109      	bne.n	80265e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80265cc:	697b      	ldr	r3, [r7, #20]
 80265ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80265d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80265d4:	683b      	ldr	r3, [r7, #0]
 80265d6:	695b      	ldr	r3, [r3, #20]
 80265d8:	019b      	lsls	r3, r3, #6
 80265da:	697a      	ldr	r2, [r7, #20]
 80265dc:	4313      	orrs	r3, r2
 80265de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	697a      	ldr	r2, [r7, #20]
 80265e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80265e6:	687b      	ldr	r3, [r7, #4]
 80265e8:	68fa      	ldr	r2, [r7, #12]
 80265ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80265ec:	683b      	ldr	r3, [r7, #0]
 80265ee:	685a      	ldr	r2, [r3, #4]
 80265f0:	687b      	ldr	r3, [r7, #4]
 80265f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80265f4:	687b      	ldr	r3, [r7, #4]
 80265f6:	693a      	ldr	r2, [r7, #16]
 80265f8:	621a      	str	r2, [r3, #32]
}
 80265fa:	bf00      	nop
 80265fc:	371c      	adds	r7, #28
 80265fe:	46bd      	mov	sp, r7
 8026600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026604:	4770      	bx	lr
 8026606:	bf00      	nop
 8026608:	40010000 	.word	0x40010000
 802660c:	40010400 	.word	0x40010400

08026610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8026610:	b480      	push	{r7}
 8026612:	b087      	sub	sp, #28
 8026614:	af00      	add	r7, sp, #0
 8026616:	60f8      	str	r0, [r7, #12]
 8026618:	60b9      	str	r1, [r7, #8]
 802661a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802661c:	68fb      	ldr	r3, [r7, #12]
 802661e:	6a1b      	ldr	r3, [r3, #32]
 8026620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8026622:	68fb      	ldr	r3, [r7, #12]
 8026624:	6a1b      	ldr	r3, [r3, #32]
 8026626:	f023 0201 	bic.w	r2, r3, #1
 802662a:	68fb      	ldr	r3, [r7, #12]
 802662c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802662e:	68fb      	ldr	r3, [r7, #12]
 8026630:	699b      	ldr	r3, [r3, #24]
 8026632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8026634:	693b      	ldr	r3, [r7, #16]
 8026636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802663a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802663c:	687b      	ldr	r3, [r7, #4]
 802663e:	011b      	lsls	r3, r3, #4
 8026640:	693a      	ldr	r2, [r7, #16]
 8026642:	4313      	orrs	r3, r2
 8026644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8026646:	697b      	ldr	r3, [r7, #20]
 8026648:	f023 030a 	bic.w	r3, r3, #10
 802664c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802664e:	697a      	ldr	r2, [r7, #20]
 8026650:	68bb      	ldr	r3, [r7, #8]
 8026652:	4313      	orrs	r3, r2
 8026654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8026656:	68fb      	ldr	r3, [r7, #12]
 8026658:	693a      	ldr	r2, [r7, #16]
 802665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802665c:	68fb      	ldr	r3, [r7, #12]
 802665e:	697a      	ldr	r2, [r7, #20]
 8026660:	621a      	str	r2, [r3, #32]
}
 8026662:	bf00      	nop
 8026664:	371c      	adds	r7, #28
 8026666:	46bd      	mov	sp, r7
 8026668:	f85d 7b04 	ldr.w	r7, [sp], #4
 802666c:	4770      	bx	lr

0802666e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802666e:	b480      	push	{r7}
 8026670:	b087      	sub	sp, #28
 8026672:	af00      	add	r7, sp, #0
 8026674:	60f8      	str	r0, [r7, #12]
 8026676:	60b9      	str	r1, [r7, #8]
 8026678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802667a:	68fb      	ldr	r3, [r7, #12]
 802667c:	6a1b      	ldr	r3, [r3, #32]
 802667e:	f023 0210 	bic.w	r2, r3, #16
 8026682:	68fb      	ldr	r3, [r7, #12]
 8026684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	699b      	ldr	r3, [r3, #24]
 802668a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802668c:	68fb      	ldr	r3, [r7, #12]
 802668e:	6a1b      	ldr	r3, [r3, #32]
 8026690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8026692:	697b      	ldr	r3, [r7, #20]
 8026694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8026698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	031b      	lsls	r3, r3, #12
 802669e:	697a      	ldr	r2, [r7, #20]
 80266a0:	4313      	orrs	r3, r2
 80266a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80266a4:	693b      	ldr	r3, [r7, #16]
 80266a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80266aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80266ac:	68bb      	ldr	r3, [r7, #8]
 80266ae:	011b      	lsls	r3, r3, #4
 80266b0:	693a      	ldr	r2, [r7, #16]
 80266b2:	4313      	orrs	r3, r2
 80266b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80266b6:	68fb      	ldr	r3, [r7, #12]
 80266b8:	697a      	ldr	r2, [r7, #20]
 80266ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80266bc:	68fb      	ldr	r3, [r7, #12]
 80266be:	693a      	ldr	r2, [r7, #16]
 80266c0:	621a      	str	r2, [r3, #32]
}
 80266c2:	bf00      	nop
 80266c4:	371c      	adds	r7, #28
 80266c6:	46bd      	mov	sp, r7
 80266c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266cc:	4770      	bx	lr

080266ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80266ce:	b480      	push	{r7}
 80266d0:	b085      	sub	sp, #20
 80266d2:	af00      	add	r7, sp, #0
 80266d4:	6078      	str	r0, [r7, #4]
 80266d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	689b      	ldr	r3, [r3, #8]
 80266dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80266de:	68fb      	ldr	r3, [r7, #12]
 80266e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80266e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80266e6:	683a      	ldr	r2, [r7, #0]
 80266e8:	68fb      	ldr	r3, [r7, #12]
 80266ea:	4313      	orrs	r3, r2
 80266ec:	f043 0307 	orr.w	r3, r3, #7
 80266f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	68fa      	ldr	r2, [r7, #12]
 80266f6:	609a      	str	r2, [r3, #8]
}
 80266f8:	bf00      	nop
 80266fa:	3714      	adds	r7, #20
 80266fc:	46bd      	mov	sp, r7
 80266fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026702:	4770      	bx	lr

08026704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8026704:	b480      	push	{r7}
 8026706:	b087      	sub	sp, #28
 8026708:	af00      	add	r7, sp, #0
 802670a:	60f8      	str	r0, [r7, #12]
 802670c:	60b9      	str	r1, [r7, #8]
 802670e:	607a      	str	r2, [r7, #4]
 8026710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8026712:	68fb      	ldr	r3, [r7, #12]
 8026714:	689b      	ldr	r3, [r3, #8]
 8026716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8026718:	697b      	ldr	r3, [r7, #20]
 802671a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802671e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8026720:	683b      	ldr	r3, [r7, #0]
 8026722:	021a      	lsls	r2, r3, #8
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	431a      	orrs	r2, r3
 8026728:	68bb      	ldr	r3, [r7, #8]
 802672a:	4313      	orrs	r3, r2
 802672c:	697a      	ldr	r2, [r7, #20]
 802672e:	4313      	orrs	r3, r2
 8026730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	697a      	ldr	r2, [r7, #20]
 8026736:	609a      	str	r2, [r3, #8]
}
 8026738:	bf00      	nop
 802673a:	371c      	adds	r7, #28
 802673c:	46bd      	mov	sp, r7
 802673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026742:	4770      	bx	lr

08026744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8026744:	b480      	push	{r7}
 8026746:	b087      	sub	sp, #28
 8026748:	af00      	add	r7, sp, #0
 802674a:	60f8      	str	r0, [r7, #12]
 802674c:	60b9      	str	r1, [r7, #8]
 802674e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8026750:	68bb      	ldr	r3, [r7, #8]
 8026752:	f003 031f 	and.w	r3, r3, #31
 8026756:	2201      	movs	r2, #1
 8026758:	fa02 f303 	lsl.w	r3, r2, r3
 802675c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802675e:	68fb      	ldr	r3, [r7, #12]
 8026760:	6a1a      	ldr	r2, [r3, #32]
 8026762:	697b      	ldr	r3, [r7, #20]
 8026764:	43db      	mvns	r3, r3
 8026766:	401a      	ands	r2, r3
 8026768:	68fb      	ldr	r3, [r7, #12]
 802676a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802676c:	68fb      	ldr	r3, [r7, #12]
 802676e:	6a1a      	ldr	r2, [r3, #32]
 8026770:	68bb      	ldr	r3, [r7, #8]
 8026772:	f003 031f 	and.w	r3, r3, #31
 8026776:	6879      	ldr	r1, [r7, #4]
 8026778:	fa01 f303 	lsl.w	r3, r1, r3
 802677c:	431a      	orrs	r2, r3
 802677e:	68fb      	ldr	r3, [r7, #12]
 8026780:	621a      	str	r2, [r3, #32]
}
 8026782:	bf00      	nop
 8026784:	371c      	adds	r7, #28
 8026786:	46bd      	mov	sp, r7
 8026788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678c:	4770      	bx	lr
	...

08026790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8026790:	b480      	push	{r7}
 8026792:	b085      	sub	sp, #20
 8026794:	af00      	add	r7, sp, #0
 8026796:	6078      	str	r0, [r7, #4]
 8026798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802679a:	687b      	ldr	r3, [r7, #4]
 802679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80267a0:	2b01      	cmp	r3, #1
 80267a2:	d101      	bne.n	80267a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80267a4:	2302      	movs	r3, #2
 80267a6:	e05a      	b.n	802685e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	2201      	movs	r2, #1
 80267ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80267b0:	687b      	ldr	r3, [r7, #4]
 80267b2:	2202      	movs	r2, #2
 80267b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80267b8:	687b      	ldr	r3, [r7, #4]
 80267ba:	681b      	ldr	r3, [r3, #0]
 80267bc:	685b      	ldr	r3, [r3, #4]
 80267be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	681b      	ldr	r3, [r3, #0]
 80267c4:	689b      	ldr	r3, [r3, #8]
 80267c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80267c8:	68fb      	ldr	r3, [r7, #12]
 80267ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80267ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80267d0:	683b      	ldr	r3, [r7, #0]
 80267d2:	681b      	ldr	r3, [r3, #0]
 80267d4:	68fa      	ldr	r2, [r7, #12]
 80267d6:	4313      	orrs	r3, r2
 80267d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	681b      	ldr	r3, [r3, #0]
 80267de:	68fa      	ldr	r2, [r7, #12]
 80267e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	4a21      	ldr	r2, [pc, #132]	; (802686c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80267e8:	4293      	cmp	r3, r2
 80267ea:	d022      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	681b      	ldr	r3, [r3, #0]
 80267f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80267f4:	d01d      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	681b      	ldr	r3, [r3, #0]
 80267fa:	4a1d      	ldr	r2, [pc, #116]	; (8026870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80267fc:	4293      	cmp	r3, r2
 80267fe:	d018      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	681b      	ldr	r3, [r3, #0]
 8026804:	4a1b      	ldr	r2, [pc, #108]	; (8026874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8026806:	4293      	cmp	r3, r2
 8026808:	d013      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	4a1a      	ldr	r2, [pc, #104]	; (8026878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8026810:	4293      	cmp	r3, r2
 8026812:	d00e      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	4a18      	ldr	r2, [pc, #96]	; (802687c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802681a:	4293      	cmp	r3, r2
 802681c:	d009      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802681e:	687b      	ldr	r3, [r7, #4]
 8026820:	681b      	ldr	r3, [r3, #0]
 8026822:	4a17      	ldr	r2, [pc, #92]	; (8026880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8026824:	4293      	cmp	r3, r2
 8026826:	d004      	beq.n	8026832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	681b      	ldr	r3, [r3, #0]
 802682c:	4a15      	ldr	r2, [pc, #84]	; (8026884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802682e:	4293      	cmp	r3, r2
 8026830:	d10c      	bne.n	802684c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8026832:	68bb      	ldr	r3, [r7, #8]
 8026834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802683a:	683b      	ldr	r3, [r7, #0]
 802683c:	685b      	ldr	r3, [r3, #4]
 802683e:	68ba      	ldr	r2, [r7, #8]
 8026840:	4313      	orrs	r3, r2
 8026842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	68ba      	ldr	r2, [r7, #8]
 802684a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	2201      	movs	r2, #1
 8026850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026854:	687b      	ldr	r3, [r7, #4]
 8026856:	2200      	movs	r2, #0
 8026858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802685c:	2300      	movs	r3, #0
}
 802685e:	4618      	mov	r0, r3
 8026860:	3714      	adds	r7, #20
 8026862:	46bd      	mov	sp, r7
 8026864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026868:	4770      	bx	lr
 802686a:	bf00      	nop
 802686c:	40010000 	.word	0x40010000
 8026870:	40000400 	.word	0x40000400
 8026874:	40000800 	.word	0x40000800
 8026878:	40000c00 	.word	0x40000c00
 802687c:	40010400 	.word	0x40010400
 8026880:	40014000 	.word	0x40014000
 8026884:	40001800 	.word	0x40001800

08026888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8026888:	b480      	push	{r7}
 802688a:	b083      	sub	sp, #12
 802688c:	af00      	add	r7, sp, #0
 802688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8026890:	bf00      	nop
 8026892:	370c      	adds	r7, #12
 8026894:	46bd      	mov	sp, r7
 8026896:	f85d 7b04 	ldr.w	r7, [sp], #4
 802689a:	4770      	bx	lr

0802689c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802689c:	b480      	push	{r7}
 802689e:	b083      	sub	sp, #12
 80268a0:	af00      	add	r7, sp, #0
 80268a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80268a4:	bf00      	nop
 80268a6:	370c      	adds	r7, #12
 80268a8:	46bd      	mov	sp, r7
 80268aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268ae:	4770      	bx	lr

080268b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80268b0:	b580      	push	{r7, lr}
 80268b2:	b082      	sub	sp, #8
 80268b4:	af00      	add	r7, sp, #0
 80268b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	d101      	bne.n	80268c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80268be:	2301      	movs	r3, #1
 80268c0:	e03f      	b.n	8026942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80268c2:	687b      	ldr	r3, [r7, #4]
 80268c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80268c8:	b2db      	uxtb	r3, r3
 80268ca:	2b00      	cmp	r3, #0
 80268cc:	d106      	bne.n	80268dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	2200      	movs	r2, #0
 80268d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80268d6:	6878      	ldr	r0, [r7, #4]
 80268d8:	f7fc fcce 	bl	8023278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	2224      	movs	r2, #36	; 0x24
 80268e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	68da      	ldr	r2, [r3, #12]
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	681b      	ldr	r3, [r3, #0]
 80268ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80268f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80268f4:	6878      	ldr	r0, [r7, #4]
 80268f6:	f000 fb97 	bl	8027028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	681b      	ldr	r3, [r3, #0]
 80268fe:	691a      	ldr	r2, [r3, #16]
 8026900:	687b      	ldr	r3, [r7, #4]
 8026902:	681b      	ldr	r3, [r3, #0]
 8026904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8026908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	695a      	ldr	r2, [r3, #20]
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	681b      	ldr	r3, [r3, #0]
 8026914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8026918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802691a:	687b      	ldr	r3, [r7, #4]
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	68da      	ldr	r2, [r3, #12]
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	681b      	ldr	r3, [r3, #0]
 8026924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8026928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	2200      	movs	r2, #0
 802692e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	2220      	movs	r2, #32
 8026934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	2220      	movs	r2, #32
 802693c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8026940:	2300      	movs	r3, #0
}
 8026942:	4618      	mov	r0, r3
 8026944:	3708      	adds	r7, #8
 8026946:	46bd      	mov	sp, r7
 8026948:	bd80      	pop	{r7, pc}

0802694a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802694a:	b580      	push	{r7, lr}
 802694c:	b088      	sub	sp, #32
 802694e:	af02      	add	r7, sp, #8
 8026950:	60f8      	str	r0, [r7, #12]
 8026952:	60b9      	str	r1, [r7, #8]
 8026954:	603b      	str	r3, [r7, #0]
 8026956:	4613      	mov	r3, r2
 8026958:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 802695a:	2300      	movs	r3, #0
 802695c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802695e:	68fb      	ldr	r3, [r7, #12]
 8026960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8026964:	b2db      	uxtb	r3, r3
 8026966:	2b20      	cmp	r3, #32
 8026968:	f040 8083 	bne.w	8026a72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 802696c:	68bb      	ldr	r3, [r7, #8]
 802696e:	2b00      	cmp	r3, #0
 8026970:	d002      	beq.n	8026978 <HAL_UART_Transmit+0x2e>
 8026972:	88fb      	ldrh	r3, [r7, #6]
 8026974:	2b00      	cmp	r3, #0
 8026976:	d101      	bne.n	802697c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8026978:	2301      	movs	r3, #1
 802697a:	e07b      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802697c:	68fb      	ldr	r3, [r7, #12]
 802697e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8026982:	2b01      	cmp	r3, #1
 8026984:	d101      	bne.n	802698a <HAL_UART_Transmit+0x40>
 8026986:	2302      	movs	r3, #2
 8026988:	e074      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
 802698a:	68fb      	ldr	r3, [r7, #12]
 802698c:	2201      	movs	r2, #1
 802698e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8026992:	68fb      	ldr	r3, [r7, #12]
 8026994:	2200      	movs	r2, #0
 8026996:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8026998:	68fb      	ldr	r3, [r7, #12]
 802699a:	2221      	movs	r2, #33	; 0x21
 802699c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80269a0:	f7fd f892 	bl	8023ac8 <HAL_GetTick>
 80269a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80269a6:	68fb      	ldr	r3, [r7, #12]
 80269a8:	88fa      	ldrh	r2, [r7, #6]
 80269aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80269ac:	68fb      	ldr	r3, [r7, #12]
 80269ae:	88fa      	ldrh	r2, [r7, #6]
 80269b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80269b2:	68fb      	ldr	r3, [r7, #12]
 80269b4:	2200      	movs	r2, #0
 80269b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80269ba:	e042      	b.n	8026a42 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80269bc:	68fb      	ldr	r3, [r7, #12]
 80269be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80269c0:	b29b      	uxth	r3, r3
 80269c2:	3b01      	subs	r3, #1
 80269c4:	b29a      	uxth	r2, r3
 80269c6:	68fb      	ldr	r3, [r7, #12]
 80269c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80269ca:	68fb      	ldr	r3, [r7, #12]
 80269cc:	689b      	ldr	r3, [r3, #8]
 80269ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80269d2:	d122      	bne.n	8026a1a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80269d4:	683b      	ldr	r3, [r7, #0]
 80269d6:	9300      	str	r3, [sp, #0]
 80269d8:	697b      	ldr	r3, [r7, #20]
 80269da:	2200      	movs	r2, #0
 80269dc:	2180      	movs	r1, #128	; 0x80
 80269de:	68f8      	ldr	r0, [r7, #12]
 80269e0:	f000 f9b6 	bl	8026d50 <UART_WaitOnFlagUntilTimeout>
 80269e4:	4603      	mov	r3, r0
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d001      	beq.n	80269ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80269ea:	2303      	movs	r3, #3
 80269ec:	e042      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80269ee:	68bb      	ldr	r3, [r7, #8]
 80269f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80269f2:	693b      	ldr	r3, [r7, #16]
 80269f4:	881b      	ldrh	r3, [r3, #0]
 80269f6:	461a      	mov	r2, r3
 80269f8:	68fb      	ldr	r3, [r7, #12]
 80269fa:	681b      	ldr	r3, [r3, #0]
 80269fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8026a00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8026a02:	68fb      	ldr	r3, [r7, #12]
 8026a04:	691b      	ldr	r3, [r3, #16]
 8026a06:	2b00      	cmp	r3, #0
 8026a08:	d103      	bne.n	8026a12 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8026a0a:	68bb      	ldr	r3, [r7, #8]
 8026a0c:	3302      	adds	r3, #2
 8026a0e:	60bb      	str	r3, [r7, #8]
 8026a10:	e017      	b.n	8026a42 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8026a12:	68bb      	ldr	r3, [r7, #8]
 8026a14:	3301      	adds	r3, #1
 8026a16:	60bb      	str	r3, [r7, #8]
 8026a18:	e013      	b.n	8026a42 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8026a1a:	683b      	ldr	r3, [r7, #0]
 8026a1c:	9300      	str	r3, [sp, #0]
 8026a1e:	697b      	ldr	r3, [r7, #20]
 8026a20:	2200      	movs	r2, #0
 8026a22:	2180      	movs	r1, #128	; 0x80
 8026a24:	68f8      	ldr	r0, [r7, #12]
 8026a26:	f000 f993 	bl	8026d50 <UART_WaitOnFlagUntilTimeout>
 8026a2a:	4603      	mov	r3, r0
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d001      	beq.n	8026a34 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8026a30:	2303      	movs	r3, #3
 8026a32:	e01f      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8026a34:	68bb      	ldr	r3, [r7, #8]
 8026a36:	1c5a      	adds	r2, r3, #1
 8026a38:	60ba      	str	r2, [r7, #8]
 8026a3a:	781a      	ldrb	r2, [r3, #0]
 8026a3c:	68fb      	ldr	r3, [r7, #12]
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8026a42:	68fb      	ldr	r3, [r7, #12]
 8026a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8026a46:	b29b      	uxth	r3, r3
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	d1b7      	bne.n	80269bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8026a4c:	683b      	ldr	r3, [r7, #0]
 8026a4e:	9300      	str	r3, [sp, #0]
 8026a50:	697b      	ldr	r3, [r7, #20]
 8026a52:	2200      	movs	r2, #0
 8026a54:	2140      	movs	r1, #64	; 0x40
 8026a56:	68f8      	ldr	r0, [r7, #12]
 8026a58:	f000 f97a 	bl	8026d50 <UART_WaitOnFlagUntilTimeout>
 8026a5c:	4603      	mov	r3, r0
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d001      	beq.n	8026a66 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8026a62:	2303      	movs	r3, #3
 8026a64:	e006      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8026a66:	68fb      	ldr	r3, [r7, #12]
 8026a68:	2220      	movs	r2, #32
 8026a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8026a6e:	2300      	movs	r3, #0
 8026a70:	e000      	b.n	8026a74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8026a72:	2302      	movs	r3, #2
  }
}
 8026a74:	4618      	mov	r0, r3
 8026a76:	3718      	adds	r7, #24
 8026a78:	46bd      	mov	sp, r7
 8026a7a:	bd80      	pop	{r7, pc}

08026a7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8026a7c:	b480      	push	{r7}
 8026a7e:	b085      	sub	sp, #20
 8026a80:	af00      	add	r7, sp, #0
 8026a82:	60f8      	str	r0, [r7, #12]
 8026a84:	60b9      	str	r1, [r7, #8]
 8026a86:	4613      	mov	r3, r2
 8026a88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8026a8a:	68fb      	ldr	r3, [r7, #12]
 8026a8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8026a90:	b2db      	uxtb	r3, r3
 8026a92:	2b20      	cmp	r3, #32
 8026a94:	d140      	bne.n	8026b18 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8026a96:	68bb      	ldr	r3, [r7, #8]
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	d002      	beq.n	8026aa2 <HAL_UART_Receive_IT+0x26>
 8026a9c:	88fb      	ldrh	r3, [r7, #6]
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	d101      	bne.n	8026aa6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8026aa2:	2301      	movs	r3, #1
 8026aa4:	e039      	b.n	8026b1a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8026aa6:	68fb      	ldr	r3, [r7, #12]
 8026aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8026aac:	2b01      	cmp	r3, #1
 8026aae:	d101      	bne.n	8026ab4 <HAL_UART_Receive_IT+0x38>
 8026ab0:	2302      	movs	r3, #2
 8026ab2:	e032      	b.n	8026b1a <HAL_UART_Receive_IT+0x9e>
 8026ab4:	68fb      	ldr	r3, [r7, #12]
 8026ab6:	2201      	movs	r2, #1
 8026ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8026abc:	68fb      	ldr	r3, [r7, #12]
 8026abe:	68ba      	ldr	r2, [r7, #8]
 8026ac0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8026ac2:	68fb      	ldr	r3, [r7, #12]
 8026ac4:	88fa      	ldrh	r2, [r7, #6]
 8026ac6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8026ac8:	68fb      	ldr	r3, [r7, #12]
 8026aca:	88fa      	ldrh	r2, [r7, #6]
 8026acc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8026ace:	68fb      	ldr	r3, [r7, #12]
 8026ad0:	2200      	movs	r2, #0
 8026ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8026ad4:	68fb      	ldr	r3, [r7, #12]
 8026ad6:	2222      	movs	r2, #34	; 0x22
 8026ad8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8026adc:	68fb      	ldr	r3, [r7, #12]
 8026ade:	2200      	movs	r2, #0
 8026ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8026ae4:	68fb      	ldr	r3, [r7, #12]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	68da      	ldr	r2, [r3, #12]
 8026aea:	68fb      	ldr	r3, [r7, #12]
 8026aec:	681b      	ldr	r3, [r3, #0]
 8026aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026af2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8026af4:	68fb      	ldr	r3, [r7, #12]
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	695a      	ldr	r2, [r3, #20]
 8026afa:	68fb      	ldr	r3, [r7, #12]
 8026afc:	681b      	ldr	r3, [r3, #0]
 8026afe:	f042 0201 	orr.w	r2, r2, #1
 8026b02:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8026b04:	68fb      	ldr	r3, [r7, #12]
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	68da      	ldr	r2, [r3, #12]
 8026b0a:	68fb      	ldr	r3, [r7, #12]
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	f042 0220 	orr.w	r2, r2, #32
 8026b12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8026b14:	2300      	movs	r3, #0
 8026b16:	e000      	b.n	8026b1a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8026b18:	2302      	movs	r3, #2
  }
}
 8026b1a:	4618      	mov	r0, r3
 8026b1c:	3714      	adds	r7, #20
 8026b1e:	46bd      	mov	sp, r7
 8026b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b24:	4770      	bx	lr
	...

08026b28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8026b28:	b580      	push	{r7, lr}
 8026b2a:	b088      	sub	sp, #32
 8026b2c:	af00      	add	r7, sp, #0
 8026b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8026b30:	687b      	ldr	r3, [r7, #4]
 8026b32:	681b      	ldr	r3, [r3, #0]
 8026b34:	681b      	ldr	r3, [r3, #0]
 8026b36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	681b      	ldr	r3, [r3, #0]
 8026b3c:	68db      	ldr	r3, [r3, #12]
 8026b3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8026b40:	687b      	ldr	r3, [r7, #4]
 8026b42:	681b      	ldr	r3, [r3, #0]
 8026b44:	695b      	ldr	r3, [r3, #20]
 8026b46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8026b48:	2300      	movs	r3, #0
 8026b4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8026b4c:	2300      	movs	r3, #0
 8026b4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8026b50:	69fb      	ldr	r3, [r7, #28]
 8026b52:	f003 030f 	and.w	r3, r3, #15
 8026b56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8026b58:	693b      	ldr	r3, [r7, #16]
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	d10d      	bne.n	8026b7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8026b5e:	69fb      	ldr	r3, [r7, #28]
 8026b60:	f003 0320 	and.w	r3, r3, #32
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	d008      	beq.n	8026b7a <HAL_UART_IRQHandler+0x52>
 8026b68:	69bb      	ldr	r3, [r7, #24]
 8026b6a:	f003 0320 	and.w	r3, r3, #32
 8026b6e:	2b00      	cmp	r3, #0
 8026b70:	d003      	beq.n	8026b7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8026b72:	6878      	ldr	r0, [r7, #4]
 8026b74:	f000 f9d6 	bl	8026f24 <UART_Receive_IT>
      return;
 8026b78:	e0d0      	b.n	8026d1c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8026b7a:	693b      	ldr	r3, [r7, #16]
 8026b7c:	2b00      	cmp	r3, #0
 8026b7e:	f000 80b0 	beq.w	8026ce2 <HAL_UART_IRQHandler+0x1ba>
 8026b82:	697b      	ldr	r3, [r7, #20]
 8026b84:	f003 0301 	and.w	r3, r3, #1
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	d105      	bne.n	8026b98 <HAL_UART_IRQHandler+0x70>
 8026b8c:	69bb      	ldr	r3, [r7, #24]
 8026b8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8026b92:	2b00      	cmp	r3, #0
 8026b94:	f000 80a5 	beq.w	8026ce2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8026b98:	69fb      	ldr	r3, [r7, #28]
 8026b9a:	f003 0301 	and.w	r3, r3, #1
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	d00a      	beq.n	8026bb8 <HAL_UART_IRQHandler+0x90>
 8026ba2:	69bb      	ldr	r3, [r7, #24]
 8026ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ba8:	2b00      	cmp	r3, #0
 8026baa:	d005      	beq.n	8026bb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026bb0:	f043 0201 	orr.w	r2, r3, #1
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8026bb8:	69fb      	ldr	r3, [r7, #28]
 8026bba:	f003 0304 	and.w	r3, r3, #4
 8026bbe:	2b00      	cmp	r3, #0
 8026bc0:	d00a      	beq.n	8026bd8 <HAL_UART_IRQHandler+0xb0>
 8026bc2:	697b      	ldr	r3, [r7, #20]
 8026bc4:	f003 0301 	and.w	r3, r3, #1
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	d005      	beq.n	8026bd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026bd0:	f043 0202 	orr.w	r2, r3, #2
 8026bd4:	687b      	ldr	r3, [r7, #4]
 8026bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8026bd8:	69fb      	ldr	r3, [r7, #28]
 8026bda:	f003 0302 	and.w	r3, r3, #2
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	d00a      	beq.n	8026bf8 <HAL_UART_IRQHandler+0xd0>
 8026be2:	697b      	ldr	r3, [r7, #20]
 8026be4:	f003 0301 	and.w	r3, r3, #1
 8026be8:	2b00      	cmp	r3, #0
 8026bea:	d005      	beq.n	8026bf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026bf0:	f043 0204 	orr.w	r2, r3, #4
 8026bf4:	687b      	ldr	r3, [r7, #4]
 8026bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8026bf8:	69fb      	ldr	r3, [r7, #28]
 8026bfa:	f003 0308 	and.w	r3, r3, #8
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	d00f      	beq.n	8026c22 <HAL_UART_IRQHandler+0xfa>
 8026c02:	69bb      	ldr	r3, [r7, #24]
 8026c04:	f003 0320 	and.w	r3, r3, #32
 8026c08:	2b00      	cmp	r3, #0
 8026c0a:	d104      	bne.n	8026c16 <HAL_UART_IRQHandler+0xee>
 8026c0c:	697b      	ldr	r3, [r7, #20]
 8026c0e:	f003 0301 	and.w	r3, r3, #1
 8026c12:	2b00      	cmp	r3, #0
 8026c14:	d005      	beq.n	8026c22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8026c16:	687b      	ldr	r3, [r7, #4]
 8026c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026c1a:	f043 0208 	orr.w	r2, r3, #8
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d077      	beq.n	8026d1a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8026c2a:	69fb      	ldr	r3, [r7, #28]
 8026c2c:	f003 0320 	and.w	r3, r3, #32
 8026c30:	2b00      	cmp	r3, #0
 8026c32:	d007      	beq.n	8026c44 <HAL_UART_IRQHandler+0x11c>
 8026c34:	69bb      	ldr	r3, [r7, #24]
 8026c36:	f003 0320 	and.w	r3, r3, #32
 8026c3a:	2b00      	cmp	r3, #0
 8026c3c:	d002      	beq.n	8026c44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8026c3e:	6878      	ldr	r0, [r7, #4]
 8026c40:	f000 f970 	bl	8026f24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8026c44:	687b      	ldr	r3, [r7, #4]
 8026c46:	681b      	ldr	r3, [r3, #0]
 8026c48:	695b      	ldr	r3, [r3, #20]
 8026c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026c4e:	2b40      	cmp	r3, #64	; 0x40
 8026c50:	bf0c      	ite	eq
 8026c52:	2301      	moveq	r3, #1
 8026c54:	2300      	movne	r3, #0
 8026c56:	b2db      	uxtb	r3, r3
 8026c58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8026c5a:	687b      	ldr	r3, [r7, #4]
 8026c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026c5e:	f003 0308 	and.w	r3, r3, #8
 8026c62:	2b00      	cmp	r3, #0
 8026c64:	d102      	bne.n	8026c6c <HAL_UART_IRQHandler+0x144>
 8026c66:	68fb      	ldr	r3, [r7, #12]
 8026c68:	2b00      	cmp	r3, #0
 8026c6a:	d031      	beq.n	8026cd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8026c6c:	6878      	ldr	r0, [r7, #4]
 8026c6e:	f000 f8b9 	bl	8026de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026c72:	687b      	ldr	r3, [r7, #4]
 8026c74:	681b      	ldr	r3, [r3, #0]
 8026c76:	695b      	ldr	r3, [r3, #20]
 8026c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026c7c:	2b40      	cmp	r3, #64	; 0x40
 8026c7e:	d123      	bne.n	8026cc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	681b      	ldr	r3, [r3, #0]
 8026c84:	695a      	ldr	r2, [r3, #20]
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	681b      	ldr	r3, [r3, #0]
 8026c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026c8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026c94:	2b00      	cmp	r3, #0
 8026c96:	d013      	beq.n	8026cc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026c9c:	4a21      	ldr	r2, [pc, #132]	; (8026d24 <HAL_UART_IRQHandler+0x1fc>)
 8026c9e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8026ca0:	687b      	ldr	r3, [r7, #4]
 8026ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026ca4:	4618      	mov	r0, r3
 8026ca6:	f7fd f882 	bl	8023dae <HAL_DMA_Abort_IT>
 8026caa:	4603      	mov	r3, r0
 8026cac:	2b00      	cmp	r3, #0
 8026cae:	d016      	beq.n	8026cde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026cb6:	687a      	ldr	r2, [r7, #4]
 8026cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8026cba:	4610      	mov	r0, r2
 8026cbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026cbe:	e00e      	b.n	8026cde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8026cc0:	6878      	ldr	r0, [r7, #4]
 8026cc2:	f000 f83b 	bl	8026d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026cc6:	e00a      	b.n	8026cde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8026cc8:	6878      	ldr	r0, [r7, #4]
 8026cca:	f000 f837 	bl	8026d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026cce:	e006      	b.n	8026cde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8026cd0:	6878      	ldr	r0, [r7, #4]
 8026cd2:	f000 f833 	bl	8026d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	2200      	movs	r2, #0
 8026cda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8026cdc:	e01d      	b.n	8026d1a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8026cde:	bf00      	nop
    return;
 8026ce0:	e01b      	b.n	8026d1a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8026ce2:	69fb      	ldr	r3, [r7, #28]
 8026ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026ce8:	2b00      	cmp	r3, #0
 8026cea:	d008      	beq.n	8026cfe <HAL_UART_IRQHandler+0x1d6>
 8026cec:	69bb      	ldr	r3, [r7, #24]
 8026cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026cf2:	2b00      	cmp	r3, #0
 8026cf4:	d003      	beq.n	8026cfe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8026cf6:	6878      	ldr	r0, [r7, #4]
 8026cf8:	f000 f8a6 	bl	8026e48 <UART_Transmit_IT>
    return;
 8026cfc:	e00e      	b.n	8026d1c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8026cfe:	69fb      	ldr	r3, [r7, #28]
 8026d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026d04:	2b00      	cmp	r3, #0
 8026d06:	d009      	beq.n	8026d1c <HAL_UART_IRQHandler+0x1f4>
 8026d08:	69bb      	ldr	r3, [r7, #24]
 8026d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026d0e:	2b00      	cmp	r3, #0
 8026d10:	d004      	beq.n	8026d1c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8026d12:	6878      	ldr	r0, [r7, #4]
 8026d14:	f000 f8ee 	bl	8026ef4 <UART_EndTransmit_IT>
    return;
 8026d18:	e000      	b.n	8026d1c <HAL_UART_IRQHandler+0x1f4>
    return;
 8026d1a:	bf00      	nop
  }
}
 8026d1c:	3720      	adds	r7, #32
 8026d1e:	46bd      	mov	sp, r7
 8026d20:	bd80      	pop	{r7, pc}
 8026d22:	bf00      	nop
 8026d24:	08026e21 	.word	0x08026e21

08026d28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8026d28:	b480      	push	{r7}
 8026d2a:	b083      	sub	sp, #12
 8026d2c:	af00      	add	r7, sp, #0
 8026d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8026d30:	bf00      	nop
 8026d32:	370c      	adds	r7, #12
 8026d34:	46bd      	mov	sp, r7
 8026d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d3a:	4770      	bx	lr

08026d3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8026d3c:	b480      	push	{r7}
 8026d3e:	b083      	sub	sp, #12
 8026d40:	af00      	add	r7, sp, #0
 8026d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8026d44:	bf00      	nop
 8026d46:	370c      	adds	r7, #12
 8026d48:	46bd      	mov	sp, r7
 8026d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d4e:	4770      	bx	lr

08026d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8026d50:	b580      	push	{r7, lr}
 8026d52:	b084      	sub	sp, #16
 8026d54:	af00      	add	r7, sp, #0
 8026d56:	60f8      	str	r0, [r7, #12]
 8026d58:	60b9      	str	r1, [r7, #8]
 8026d5a:	603b      	str	r3, [r7, #0]
 8026d5c:	4613      	mov	r3, r2
 8026d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026d60:	e02c      	b.n	8026dbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8026d62:	69bb      	ldr	r3, [r7, #24]
 8026d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026d68:	d028      	beq.n	8026dbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8026d6a:	69bb      	ldr	r3, [r7, #24]
 8026d6c:	2b00      	cmp	r3, #0
 8026d6e:	d007      	beq.n	8026d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8026d70:	f7fc feaa 	bl	8023ac8 <HAL_GetTick>
 8026d74:	4602      	mov	r2, r0
 8026d76:	683b      	ldr	r3, [r7, #0]
 8026d78:	1ad3      	subs	r3, r2, r3
 8026d7a:	69ba      	ldr	r2, [r7, #24]
 8026d7c:	429a      	cmp	r2, r3
 8026d7e:	d21d      	bcs.n	8026dbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8026d80:	68fb      	ldr	r3, [r7, #12]
 8026d82:	681b      	ldr	r3, [r3, #0]
 8026d84:	68da      	ldr	r2, [r3, #12]
 8026d86:	68fb      	ldr	r3, [r7, #12]
 8026d88:	681b      	ldr	r3, [r3, #0]
 8026d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8026d8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	681b      	ldr	r3, [r3, #0]
 8026d94:	695a      	ldr	r2, [r3, #20]
 8026d96:	68fb      	ldr	r3, [r7, #12]
 8026d98:	681b      	ldr	r3, [r3, #0]
 8026d9a:	f022 0201 	bic.w	r2, r2, #1
 8026d9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8026da0:	68fb      	ldr	r3, [r7, #12]
 8026da2:	2220      	movs	r2, #32
 8026da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8026da8:	68fb      	ldr	r3, [r7, #12]
 8026daa:	2220      	movs	r2, #32
 8026dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8026db0:	68fb      	ldr	r3, [r7, #12]
 8026db2:	2200      	movs	r2, #0
 8026db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8026db8:	2303      	movs	r3, #3
 8026dba:	e00f      	b.n	8026ddc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026dbc:	68fb      	ldr	r3, [r7, #12]
 8026dbe:	681b      	ldr	r3, [r3, #0]
 8026dc0:	681a      	ldr	r2, [r3, #0]
 8026dc2:	68bb      	ldr	r3, [r7, #8]
 8026dc4:	4013      	ands	r3, r2
 8026dc6:	68ba      	ldr	r2, [r7, #8]
 8026dc8:	429a      	cmp	r2, r3
 8026dca:	bf0c      	ite	eq
 8026dcc:	2301      	moveq	r3, #1
 8026dce:	2300      	movne	r3, #0
 8026dd0:	b2db      	uxtb	r3, r3
 8026dd2:	461a      	mov	r2, r3
 8026dd4:	79fb      	ldrb	r3, [r7, #7]
 8026dd6:	429a      	cmp	r2, r3
 8026dd8:	d0c3      	beq.n	8026d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8026dda:	2300      	movs	r3, #0
}
 8026ddc:	4618      	mov	r0, r3
 8026dde:	3710      	adds	r7, #16
 8026de0:	46bd      	mov	sp, r7
 8026de2:	bd80      	pop	{r7, pc}

08026de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8026de4:	b480      	push	{r7}
 8026de6:	b083      	sub	sp, #12
 8026de8:	af00      	add	r7, sp, #0
 8026dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8026dec:	687b      	ldr	r3, [r7, #4]
 8026dee:	681b      	ldr	r3, [r3, #0]
 8026df0:	68da      	ldr	r2, [r3, #12]
 8026df2:	687b      	ldr	r3, [r7, #4]
 8026df4:	681b      	ldr	r3, [r3, #0]
 8026df6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8026dfa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8026dfc:	687b      	ldr	r3, [r7, #4]
 8026dfe:	681b      	ldr	r3, [r3, #0]
 8026e00:	695a      	ldr	r2, [r3, #20]
 8026e02:	687b      	ldr	r3, [r7, #4]
 8026e04:	681b      	ldr	r3, [r3, #0]
 8026e06:	f022 0201 	bic.w	r2, r2, #1
 8026e0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8026e0c:	687b      	ldr	r3, [r7, #4]
 8026e0e:	2220      	movs	r2, #32
 8026e10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8026e14:	bf00      	nop
 8026e16:	370c      	adds	r7, #12
 8026e18:	46bd      	mov	sp, r7
 8026e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e1e:	4770      	bx	lr

08026e20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8026e20:	b580      	push	{r7, lr}
 8026e22:	b084      	sub	sp, #16
 8026e24:	af00      	add	r7, sp, #0
 8026e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8026e28:	687b      	ldr	r3, [r7, #4]
 8026e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	2200      	movs	r2, #0
 8026e32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8026e34:	68fb      	ldr	r3, [r7, #12]
 8026e36:	2200      	movs	r2, #0
 8026e38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8026e3a:	68f8      	ldr	r0, [r7, #12]
 8026e3c:	f7ff ff7e 	bl	8026d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8026e40:	bf00      	nop
 8026e42:	3710      	adds	r7, #16
 8026e44:	46bd      	mov	sp, r7
 8026e46:	bd80      	pop	{r7, pc}

08026e48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8026e48:	b480      	push	{r7}
 8026e4a:	b085      	sub	sp, #20
 8026e4c:	af00      	add	r7, sp, #0
 8026e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8026e56:	b2db      	uxtb	r3, r3
 8026e58:	2b21      	cmp	r3, #33	; 0x21
 8026e5a:	d144      	bne.n	8026ee6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8026e5c:	687b      	ldr	r3, [r7, #4]
 8026e5e:	689b      	ldr	r3, [r3, #8]
 8026e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026e64:	d11a      	bne.n	8026e9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8026e66:	687b      	ldr	r3, [r7, #4]
 8026e68:	6a1b      	ldr	r3, [r3, #32]
 8026e6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	881b      	ldrh	r3, [r3, #0]
 8026e70:	461a      	mov	r2, r3
 8026e72:	687b      	ldr	r3, [r7, #4]
 8026e74:	681b      	ldr	r3, [r3, #0]
 8026e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8026e7a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8026e7c:	687b      	ldr	r3, [r7, #4]
 8026e7e:	691b      	ldr	r3, [r3, #16]
 8026e80:	2b00      	cmp	r3, #0
 8026e82:	d105      	bne.n	8026e90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	6a1b      	ldr	r3, [r3, #32]
 8026e88:	1c9a      	adds	r2, r3, #2
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	621a      	str	r2, [r3, #32]
 8026e8e:	e00e      	b.n	8026eae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	6a1b      	ldr	r3, [r3, #32]
 8026e94:	1c5a      	adds	r2, r3, #1
 8026e96:	687b      	ldr	r3, [r7, #4]
 8026e98:	621a      	str	r2, [r3, #32]
 8026e9a:	e008      	b.n	8026eae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8026e9c:	687b      	ldr	r3, [r7, #4]
 8026e9e:	6a1b      	ldr	r3, [r3, #32]
 8026ea0:	1c59      	adds	r1, r3, #1
 8026ea2:	687a      	ldr	r2, [r7, #4]
 8026ea4:	6211      	str	r1, [r2, #32]
 8026ea6:	781a      	ldrb	r2, [r3, #0]
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	681b      	ldr	r3, [r3, #0]
 8026eac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8026eae:	687b      	ldr	r3, [r7, #4]
 8026eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8026eb2:	b29b      	uxth	r3, r3
 8026eb4:	3b01      	subs	r3, #1
 8026eb6:	b29b      	uxth	r3, r3
 8026eb8:	687a      	ldr	r2, [r7, #4]
 8026eba:	4619      	mov	r1, r3
 8026ebc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8026ebe:	2b00      	cmp	r3, #0
 8026ec0:	d10f      	bne.n	8026ee2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	681b      	ldr	r3, [r3, #0]
 8026ec6:	68da      	ldr	r2, [r3, #12]
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	681b      	ldr	r3, [r3, #0]
 8026ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026ed0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8026ed2:	687b      	ldr	r3, [r7, #4]
 8026ed4:	681b      	ldr	r3, [r3, #0]
 8026ed6:	68da      	ldr	r2, [r3, #12]
 8026ed8:	687b      	ldr	r3, [r7, #4]
 8026eda:	681b      	ldr	r3, [r3, #0]
 8026edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026ee0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8026ee2:	2300      	movs	r3, #0
 8026ee4:	e000      	b.n	8026ee8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8026ee6:	2302      	movs	r3, #2
  }
}
 8026ee8:	4618      	mov	r0, r3
 8026eea:	3714      	adds	r7, #20
 8026eec:	46bd      	mov	sp, r7
 8026eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ef2:	4770      	bx	lr

08026ef4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8026ef4:	b580      	push	{r7, lr}
 8026ef6:	b082      	sub	sp, #8
 8026ef8:	af00      	add	r7, sp, #0
 8026efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	681b      	ldr	r3, [r3, #0]
 8026f00:	68da      	ldr	r2, [r3, #12]
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	681b      	ldr	r3, [r3, #0]
 8026f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026f0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	2220      	movs	r2, #32
 8026f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8026f14:	6878      	ldr	r0, [r7, #4]
 8026f16:	f7ff ff07 	bl	8026d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8026f1a:	2300      	movs	r3, #0
}
 8026f1c:	4618      	mov	r0, r3
 8026f1e:	3708      	adds	r7, #8
 8026f20:	46bd      	mov	sp, r7
 8026f22:	bd80      	pop	{r7, pc}

08026f24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8026f24:	b580      	push	{r7, lr}
 8026f26:	b084      	sub	sp, #16
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8026f2c:	687b      	ldr	r3, [r7, #4]
 8026f2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8026f32:	b2db      	uxtb	r3, r3
 8026f34:	2b22      	cmp	r3, #34	; 0x22
 8026f36:	d171      	bne.n	802701c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8026f38:	687b      	ldr	r3, [r7, #4]
 8026f3a:	689b      	ldr	r3, [r3, #8]
 8026f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026f40:	d123      	bne.n	8026f8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8026f42:	687b      	ldr	r3, [r7, #4]
 8026f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	691b      	ldr	r3, [r3, #16]
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d10e      	bne.n	8026f6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	681b      	ldr	r3, [r3, #0]
 8026f54:	685b      	ldr	r3, [r3, #4]
 8026f56:	b29b      	uxth	r3, r3
 8026f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026f5c:	b29a      	uxth	r2, r3
 8026f5e:	68fb      	ldr	r3, [r7, #12]
 8026f60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f66:	1c9a      	adds	r2, r3, #2
 8026f68:	687b      	ldr	r3, [r7, #4]
 8026f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8026f6c:	e029      	b.n	8026fc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8026f6e:	687b      	ldr	r3, [r7, #4]
 8026f70:	681b      	ldr	r3, [r3, #0]
 8026f72:	685b      	ldr	r3, [r3, #4]
 8026f74:	b29b      	uxth	r3, r3
 8026f76:	b2db      	uxtb	r3, r3
 8026f78:	b29a      	uxth	r2, r3
 8026f7a:	68fb      	ldr	r3, [r7, #12]
 8026f7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f82:	1c5a      	adds	r2, r3, #1
 8026f84:	687b      	ldr	r3, [r7, #4]
 8026f86:	629a      	str	r2, [r3, #40]	; 0x28
 8026f88:	e01b      	b.n	8026fc2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	691b      	ldr	r3, [r3, #16]
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	d10a      	bne.n	8026fa8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8026f92:	687b      	ldr	r3, [r7, #4]
 8026f94:	681b      	ldr	r3, [r3, #0]
 8026f96:	6858      	ldr	r0, [r3, #4]
 8026f98:	687b      	ldr	r3, [r7, #4]
 8026f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f9c:	1c59      	adds	r1, r3, #1
 8026f9e:	687a      	ldr	r2, [r7, #4]
 8026fa0:	6291      	str	r1, [r2, #40]	; 0x28
 8026fa2:	b2c2      	uxtb	r2, r0
 8026fa4:	701a      	strb	r2, [r3, #0]
 8026fa6:	e00c      	b.n	8026fc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	685b      	ldr	r3, [r3, #4]
 8026fae:	b2da      	uxtb	r2, r3
 8026fb0:	687b      	ldr	r3, [r7, #4]
 8026fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fb4:	1c58      	adds	r0, r3, #1
 8026fb6:	6879      	ldr	r1, [r7, #4]
 8026fb8:	6288      	str	r0, [r1, #40]	; 0x28
 8026fba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8026fbe:	b2d2      	uxtb	r2, r2
 8026fc0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8026fc2:	687b      	ldr	r3, [r7, #4]
 8026fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8026fc6:	b29b      	uxth	r3, r3
 8026fc8:	3b01      	subs	r3, #1
 8026fca:	b29b      	uxth	r3, r3
 8026fcc:	687a      	ldr	r2, [r7, #4]
 8026fce:	4619      	mov	r1, r3
 8026fd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	d120      	bne.n	8027018 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8026fd6:	687b      	ldr	r3, [r7, #4]
 8026fd8:	681b      	ldr	r3, [r3, #0]
 8026fda:	68da      	ldr	r2, [r3, #12]
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	681b      	ldr	r3, [r3, #0]
 8026fe0:	f022 0220 	bic.w	r2, r2, #32
 8026fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8026fe6:	687b      	ldr	r3, [r7, #4]
 8026fe8:	681b      	ldr	r3, [r3, #0]
 8026fea:	68da      	ldr	r2, [r3, #12]
 8026fec:	687b      	ldr	r3, [r7, #4]
 8026fee:	681b      	ldr	r3, [r3, #0]
 8026ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026ff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8026ff6:	687b      	ldr	r3, [r7, #4]
 8026ff8:	681b      	ldr	r3, [r3, #0]
 8026ffa:	695a      	ldr	r2, [r3, #20]
 8026ffc:	687b      	ldr	r3, [r7, #4]
 8026ffe:	681b      	ldr	r3, [r3, #0]
 8027000:	f022 0201 	bic.w	r2, r2, #1
 8027004:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8027006:	687b      	ldr	r3, [r7, #4]
 8027008:	2220      	movs	r2, #32
 802700a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802700e:	6878      	ldr	r0, [r7, #4]
 8027010:	f7fa fa0a 	bl	8021428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8027014:	2300      	movs	r3, #0
 8027016:	e002      	b.n	802701e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8027018:	2300      	movs	r3, #0
 802701a:	e000      	b.n	802701e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 802701c:	2302      	movs	r3, #2
  }
}
 802701e:	4618      	mov	r0, r3
 8027020:	3710      	adds	r7, #16
 8027022:	46bd      	mov	sp, r7
 8027024:	bd80      	pop	{r7, pc}
	...

08027028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8027028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802702c:	b0bd      	sub	sp, #244	; 0xf4
 802702e:	af00      	add	r7, sp, #0
 8027030:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8027034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027038:	681b      	ldr	r3, [r3, #0]
 802703a:	691b      	ldr	r3, [r3, #16]
 802703c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8027040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027044:	68d9      	ldr	r1, [r3, #12]
 8027046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802704a:	681a      	ldr	r2, [r3, #0]
 802704c:	ea40 0301 	orr.w	r3, r0, r1
 8027050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8027052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027056:	689a      	ldr	r2, [r3, #8]
 8027058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802705c:	691b      	ldr	r3, [r3, #16]
 802705e:	431a      	orrs	r2, r3
 8027060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027064:	695b      	ldr	r3, [r3, #20]
 8027066:	431a      	orrs	r2, r3
 8027068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802706c:	69db      	ldr	r3, [r3, #28]
 802706e:	4313      	orrs	r3, r2
 8027070:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8027074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027078:	681b      	ldr	r3, [r3, #0]
 802707a:	68db      	ldr	r3, [r3, #12]
 802707c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8027080:	f021 010c 	bic.w	r1, r1, #12
 8027084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027088:	681a      	ldr	r2, [r3, #0]
 802708a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802708e:	430b      	orrs	r3, r1
 8027090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8027092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027096:	681b      	ldr	r3, [r3, #0]
 8027098:	695b      	ldr	r3, [r3, #20]
 802709a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80270a2:	6999      	ldr	r1, [r3, #24]
 80270a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80270a8:	681a      	ldr	r2, [r3, #0]
 80270aa:	ea40 0301 	orr.w	r3, r0, r1
 80270ae:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80270b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80270b4:	69db      	ldr	r3, [r3, #28]
 80270b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80270ba:	f040 81a5 	bne.w	8027408 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80270be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80270c2:	681a      	ldr	r2, [r3, #0]
 80270c4:	4bcd      	ldr	r3, [pc, #820]	; (80273fc <UART_SetConfig+0x3d4>)
 80270c6:	429a      	cmp	r2, r3
 80270c8:	d006      	beq.n	80270d8 <UART_SetConfig+0xb0>
 80270ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80270ce:	681a      	ldr	r2, [r3, #0]
 80270d0:	4bcb      	ldr	r3, [pc, #812]	; (8027400 <UART_SetConfig+0x3d8>)
 80270d2:	429a      	cmp	r2, r3
 80270d4:	f040 80cb 	bne.w	802726e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80270d8:	f7fd ffb0 	bl	802503c <HAL_RCC_GetPCLK2Freq>
 80270dc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80270e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80270e4:	461c      	mov	r4, r3
 80270e6:	f04f 0500 	mov.w	r5, #0
 80270ea:	4622      	mov	r2, r4
 80270ec:	462b      	mov	r3, r5
 80270ee:	1891      	adds	r1, r2, r2
 80270f0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80270f4:	415b      	adcs	r3, r3
 80270f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80270fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80270fe:	1912      	adds	r2, r2, r4
 8027100:	eb45 0303 	adc.w	r3, r5, r3
 8027104:	f04f 0000 	mov.w	r0, #0
 8027108:	f04f 0100 	mov.w	r1, #0
 802710c:	00d9      	lsls	r1, r3, #3
 802710e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027112:	00d0      	lsls	r0, r2, #3
 8027114:	4602      	mov	r2, r0
 8027116:	460b      	mov	r3, r1
 8027118:	1911      	adds	r1, r2, r4
 802711a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 802711e:	416b      	adcs	r3, r5
 8027120:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8027124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027128:	685b      	ldr	r3, [r3, #4]
 802712a:	461a      	mov	r2, r3
 802712c:	f04f 0300 	mov.w	r3, #0
 8027130:	1891      	adds	r1, r2, r2
 8027132:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8027136:	415b      	adcs	r3, r3
 8027138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802713c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8027140:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8027144:	f7f9 fda0 	bl	8020c88 <__aeabi_uldivmod>
 8027148:	4602      	mov	r2, r0
 802714a:	460b      	mov	r3, r1
 802714c:	4bad      	ldr	r3, [pc, #692]	; (8027404 <UART_SetConfig+0x3dc>)
 802714e:	fba3 2302 	umull	r2, r3, r3, r2
 8027152:	095b      	lsrs	r3, r3, #5
 8027154:	011e      	lsls	r6, r3, #4
 8027156:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802715a:	461c      	mov	r4, r3
 802715c:	f04f 0500 	mov.w	r5, #0
 8027160:	4622      	mov	r2, r4
 8027162:	462b      	mov	r3, r5
 8027164:	1891      	adds	r1, r2, r2
 8027166:	67b9      	str	r1, [r7, #120]	; 0x78
 8027168:	415b      	adcs	r3, r3
 802716a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802716c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8027170:	1912      	adds	r2, r2, r4
 8027172:	eb45 0303 	adc.w	r3, r5, r3
 8027176:	f04f 0000 	mov.w	r0, #0
 802717a:	f04f 0100 	mov.w	r1, #0
 802717e:	00d9      	lsls	r1, r3, #3
 8027180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027184:	00d0      	lsls	r0, r2, #3
 8027186:	4602      	mov	r2, r0
 8027188:	460b      	mov	r3, r1
 802718a:	1911      	adds	r1, r2, r4
 802718c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8027190:	416b      	adcs	r3, r5
 8027192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8027196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802719a:	685b      	ldr	r3, [r3, #4]
 802719c:	461a      	mov	r2, r3
 802719e:	f04f 0300 	mov.w	r3, #0
 80271a2:	1891      	adds	r1, r2, r2
 80271a4:	6739      	str	r1, [r7, #112]	; 0x70
 80271a6:	415b      	adcs	r3, r3
 80271a8:	677b      	str	r3, [r7, #116]	; 0x74
 80271aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80271ae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80271b2:	f7f9 fd69 	bl	8020c88 <__aeabi_uldivmod>
 80271b6:	4602      	mov	r2, r0
 80271b8:	460b      	mov	r3, r1
 80271ba:	4b92      	ldr	r3, [pc, #584]	; (8027404 <UART_SetConfig+0x3dc>)
 80271bc:	fba3 1302 	umull	r1, r3, r3, r2
 80271c0:	095b      	lsrs	r3, r3, #5
 80271c2:	2164      	movs	r1, #100	; 0x64
 80271c4:	fb01 f303 	mul.w	r3, r1, r3
 80271c8:	1ad3      	subs	r3, r2, r3
 80271ca:	00db      	lsls	r3, r3, #3
 80271cc:	3332      	adds	r3, #50	; 0x32
 80271ce:	4a8d      	ldr	r2, [pc, #564]	; (8027404 <UART_SetConfig+0x3dc>)
 80271d0:	fba2 2303 	umull	r2, r3, r2, r3
 80271d4:	095b      	lsrs	r3, r3, #5
 80271d6:	005b      	lsls	r3, r3, #1
 80271d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80271dc:	441e      	add	r6, r3
 80271de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80271e2:	4618      	mov	r0, r3
 80271e4:	f04f 0100 	mov.w	r1, #0
 80271e8:	4602      	mov	r2, r0
 80271ea:	460b      	mov	r3, r1
 80271ec:	1894      	adds	r4, r2, r2
 80271ee:	66bc      	str	r4, [r7, #104]	; 0x68
 80271f0:	415b      	adcs	r3, r3
 80271f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80271f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80271f8:	1812      	adds	r2, r2, r0
 80271fa:	eb41 0303 	adc.w	r3, r1, r3
 80271fe:	f04f 0400 	mov.w	r4, #0
 8027202:	f04f 0500 	mov.w	r5, #0
 8027206:	00dd      	lsls	r5, r3, #3
 8027208:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802720c:	00d4      	lsls	r4, r2, #3
 802720e:	4622      	mov	r2, r4
 8027210:	462b      	mov	r3, r5
 8027212:	1814      	adds	r4, r2, r0
 8027214:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8027218:	414b      	adcs	r3, r1
 802721a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802721e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027222:	685b      	ldr	r3, [r3, #4]
 8027224:	461a      	mov	r2, r3
 8027226:	f04f 0300 	mov.w	r3, #0
 802722a:	1891      	adds	r1, r2, r2
 802722c:	6639      	str	r1, [r7, #96]	; 0x60
 802722e:	415b      	adcs	r3, r3
 8027230:	667b      	str	r3, [r7, #100]	; 0x64
 8027232:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8027236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802723a:	f7f9 fd25 	bl	8020c88 <__aeabi_uldivmod>
 802723e:	4602      	mov	r2, r0
 8027240:	460b      	mov	r3, r1
 8027242:	4b70      	ldr	r3, [pc, #448]	; (8027404 <UART_SetConfig+0x3dc>)
 8027244:	fba3 1302 	umull	r1, r3, r3, r2
 8027248:	095b      	lsrs	r3, r3, #5
 802724a:	2164      	movs	r1, #100	; 0x64
 802724c:	fb01 f303 	mul.w	r3, r1, r3
 8027250:	1ad3      	subs	r3, r2, r3
 8027252:	00db      	lsls	r3, r3, #3
 8027254:	3332      	adds	r3, #50	; 0x32
 8027256:	4a6b      	ldr	r2, [pc, #428]	; (8027404 <UART_SetConfig+0x3dc>)
 8027258:	fba2 2303 	umull	r2, r3, r2, r3
 802725c:	095b      	lsrs	r3, r3, #5
 802725e:	f003 0207 	and.w	r2, r3, #7
 8027262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027266:	681b      	ldr	r3, [r3, #0]
 8027268:	4432      	add	r2, r6
 802726a:	609a      	str	r2, [r3, #8]
 802726c:	e26d      	b.n	802774a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802726e:	f7fd fed1 	bl	8025014 <HAL_RCC_GetPCLK1Freq>
 8027272:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8027276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802727a:	461c      	mov	r4, r3
 802727c:	f04f 0500 	mov.w	r5, #0
 8027280:	4622      	mov	r2, r4
 8027282:	462b      	mov	r3, r5
 8027284:	1891      	adds	r1, r2, r2
 8027286:	65b9      	str	r1, [r7, #88]	; 0x58
 8027288:	415b      	adcs	r3, r3
 802728a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802728c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8027290:	1912      	adds	r2, r2, r4
 8027292:	eb45 0303 	adc.w	r3, r5, r3
 8027296:	f04f 0000 	mov.w	r0, #0
 802729a:	f04f 0100 	mov.w	r1, #0
 802729e:	00d9      	lsls	r1, r3, #3
 80272a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80272a4:	00d0      	lsls	r0, r2, #3
 80272a6:	4602      	mov	r2, r0
 80272a8:	460b      	mov	r3, r1
 80272aa:	1911      	adds	r1, r2, r4
 80272ac:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80272b0:	416b      	adcs	r3, r5
 80272b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80272b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80272ba:	685b      	ldr	r3, [r3, #4]
 80272bc:	461a      	mov	r2, r3
 80272be:	f04f 0300 	mov.w	r3, #0
 80272c2:	1891      	adds	r1, r2, r2
 80272c4:	6539      	str	r1, [r7, #80]	; 0x50
 80272c6:	415b      	adcs	r3, r3
 80272c8:	657b      	str	r3, [r7, #84]	; 0x54
 80272ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80272ce:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80272d2:	f7f9 fcd9 	bl	8020c88 <__aeabi_uldivmod>
 80272d6:	4602      	mov	r2, r0
 80272d8:	460b      	mov	r3, r1
 80272da:	4b4a      	ldr	r3, [pc, #296]	; (8027404 <UART_SetConfig+0x3dc>)
 80272dc:	fba3 2302 	umull	r2, r3, r3, r2
 80272e0:	095b      	lsrs	r3, r3, #5
 80272e2:	011e      	lsls	r6, r3, #4
 80272e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80272e8:	461c      	mov	r4, r3
 80272ea:	f04f 0500 	mov.w	r5, #0
 80272ee:	4622      	mov	r2, r4
 80272f0:	462b      	mov	r3, r5
 80272f2:	1891      	adds	r1, r2, r2
 80272f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80272f6:	415b      	adcs	r3, r3
 80272f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80272fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80272fe:	1912      	adds	r2, r2, r4
 8027300:	eb45 0303 	adc.w	r3, r5, r3
 8027304:	f04f 0000 	mov.w	r0, #0
 8027308:	f04f 0100 	mov.w	r1, #0
 802730c:	00d9      	lsls	r1, r3, #3
 802730e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027312:	00d0      	lsls	r0, r2, #3
 8027314:	4602      	mov	r2, r0
 8027316:	460b      	mov	r3, r1
 8027318:	1911      	adds	r1, r2, r4
 802731a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 802731e:	416b      	adcs	r3, r5
 8027320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8027324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027328:	685b      	ldr	r3, [r3, #4]
 802732a:	461a      	mov	r2, r3
 802732c:	f04f 0300 	mov.w	r3, #0
 8027330:	1891      	adds	r1, r2, r2
 8027332:	6439      	str	r1, [r7, #64]	; 0x40
 8027334:	415b      	adcs	r3, r3
 8027336:	647b      	str	r3, [r7, #68]	; 0x44
 8027338:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802733c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8027340:	f7f9 fca2 	bl	8020c88 <__aeabi_uldivmod>
 8027344:	4602      	mov	r2, r0
 8027346:	460b      	mov	r3, r1
 8027348:	4b2e      	ldr	r3, [pc, #184]	; (8027404 <UART_SetConfig+0x3dc>)
 802734a:	fba3 1302 	umull	r1, r3, r3, r2
 802734e:	095b      	lsrs	r3, r3, #5
 8027350:	2164      	movs	r1, #100	; 0x64
 8027352:	fb01 f303 	mul.w	r3, r1, r3
 8027356:	1ad3      	subs	r3, r2, r3
 8027358:	00db      	lsls	r3, r3, #3
 802735a:	3332      	adds	r3, #50	; 0x32
 802735c:	4a29      	ldr	r2, [pc, #164]	; (8027404 <UART_SetConfig+0x3dc>)
 802735e:	fba2 2303 	umull	r2, r3, r2, r3
 8027362:	095b      	lsrs	r3, r3, #5
 8027364:	005b      	lsls	r3, r3, #1
 8027366:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802736a:	441e      	add	r6, r3
 802736c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027370:	4618      	mov	r0, r3
 8027372:	f04f 0100 	mov.w	r1, #0
 8027376:	4602      	mov	r2, r0
 8027378:	460b      	mov	r3, r1
 802737a:	1894      	adds	r4, r2, r2
 802737c:	63bc      	str	r4, [r7, #56]	; 0x38
 802737e:	415b      	adcs	r3, r3
 8027380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027382:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8027386:	1812      	adds	r2, r2, r0
 8027388:	eb41 0303 	adc.w	r3, r1, r3
 802738c:	f04f 0400 	mov.w	r4, #0
 8027390:	f04f 0500 	mov.w	r5, #0
 8027394:	00dd      	lsls	r5, r3, #3
 8027396:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802739a:	00d4      	lsls	r4, r2, #3
 802739c:	4622      	mov	r2, r4
 802739e:	462b      	mov	r3, r5
 80273a0:	1814      	adds	r4, r2, r0
 80273a2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80273a6:	414b      	adcs	r3, r1
 80273a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80273ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80273b0:	685b      	ldr	r3, [r3, #4]
 80273b2:	461a      	mov	r2, r3
 80273b4:	f04f 0300 	mov.w	r3, #0
 80273b8:	1891      	adds	r1, r2, r2
 80273ba:	6339      	str	r1, [r7, #48]	; 0x30
 80273bc:	415b      	adcs	r3, r3
 80273be:	637b      	str	r3, [r7, #52]	; 0x34
 80273c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80273c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80273c8:	f7f9 fc5e 	bl	8020c88 <__aeabi_uldivmod>
 80273cc:	4602      	mov	r2, r0
 80273ce:	460b      	mov	r3, r1
 80273d0:	4b0c      	ldr	r3, [pc, #48]	; (8027404 <UART_SetConfig+0x3dc>)
 80273d2:	fba3 1302 	umull	r1, r3, r3, r2
 80273d6:	095b      	lsrs	r3, r3, #5
 80273d8:	2164      	movs	r1, #100	; 0x64
 80273da:	fb01 f303 	mul.w	r3, r1, r3
 80273de:	1ad3      	subs	r3, r2, r3
 80273e0:	00db      	lsls	r3, r3, #3
 80273e2:	3332      	adds	r3, #50	; 0x32
 80273e4:	4a07      	ldr	r2, [pc, #28]	; (8027404 <UART_SetConfig+0x3dc>)
 80273e6:	fba2 2303 	umull	r2, r3, r2, r3
 80273ea:	095b      	lsrs	r3, r3, #5
 80273ec:	f003 0207 	and.w	r2, r3, #7
 80273f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80273f4:	681b      	ldr	r3, [r3, #0]
 80273f6:	4432      	add	r2, r6
 80273f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80273fa:	e1a6      	b.n	802774a <UART_SetConfig+0x722>
 80273fc:	40011000 	.word	0x40011000
 8027400:	40011400 	.word	0x40011400
 8027404:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8027408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802740c:	681a      	ldr	r2, [r3, #0]
 802740e:	4bd1      	ldr	r3, [pc, #836]	; (8027754 <UART_SetConfig+0x72c>)
 8027410:	429a      	cmp	r2, r3
 8027412:	d006      	beq.n	8027422 <UART_SetConfig+0x3fa>
 8027414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027418:	681a      	ldr	r2, [r3, #0]
 802741a:	4bcf      	ldr	r3, [pc, #828]	; (8027758 <UART_SetConfig+0x730>)
 802741c:	429a      	cmp	r2, r3
 802741e:	f040 80ca 	bne.w	80275b6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8027422:	f7fd fe0b 	bl	802503c <HAL_RCC_GetPCLK2Freq>
 8027426:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802742a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802742e:	461c      	mov	r4, r3
 8027430:	f04f 0500 	mov.w	r5, #0
 8027434:	4622      	mov	r2, r4
 8027436:	462b      	mov	r3, r5
 8027438:	1891      	adds	r1, r2, r2
 802743a:	62b9      	str	r1, [r7, #40]	; 0x28
 802743c:	415b      	adcs	r3, r3
 802743e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027444:	1912      	adds	r2, r2, r4
 8027446:	eb45 0303 	adc.w	r3, r5, r3
 802744a:	f04f 0000 	mov.w	r0, #0
 802744e:	f04f 0100 	mov.w	r1, #0
 8027452:	00d9      	lsls	r1, r3, #3
 8027454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027458:	00d0      	lsls	r0, r2, #3
 802745a:	4602      	mov	r2, r0
 802745c:	460b      	mov	r3, r1
 802745e:	eb12 0a04 	adds.w	sl, r2, r4
 8027462:	eb43 0b05 	adc.w	fp, r3, r5
 8027466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802746a:	685b      	ldr	r3, [r3, #4]
 802746c:	4618      	mov	r0, r3
 802746e:	f04f 0100 	mov.w	r1, #0
 8027472:	f04f 0200 	mov.w	r2, #0
 8027476:	f04f 0300 	mov.w	r3, #0
 802747a:	008b      	lsls	r3, r1, #2
 802747c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027480:	0082      	lsls	r2, r0, #2
 8027482:	4650      	mov	r0, sl
 8027484:	4659      	mov	r1, fp
 8027486:	f7f9 fbff 	bl	8020c88 <__aeabi_uldivmod>
 802748a:	4602      	mov	r2, r0
 802748c:	460b      	mov	r3, r1
 802748e:	4bb3      	ldr	r3, [pc, #716]	; (802775c <UART_SetConfig+0x734>)
 8027490:	fba3 2302 	umull	r2, r3, r3, r2
 8027494:	095b      	lsrs	r3, r3, #5
 8027496:	011e      	lsls	r6, r3, #4
 8027498:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802749c:	4618      	mov	r0, r3
 802749e:	f04f 0100 	mov.w	r1, #0
 80274a2:	4602      	mov	r2, r0
 80274a4:	460b      	mov	r3, r1
 80274a6:	1894      	adds	r4, r2, r2
 80274a8:	623c      	str	r4, [r7, #32]
 80274aa:	415b      	adcs	r3, r3
 80274ac:	627b      	str	r3, [r7, #36]	; 0x24
 80274ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80274b2:	1812      	adds	r2, r2, r0
 80274b4:	eb41 0303 	adc.w	r3, r1, r3
 80274b8:	f04f 0400 	mov.w	r4, #0
 80274bc:	f04f 0500 	mov.w	r5, #0
 80274c0:	00dd      	lsls	r5, r3, #3
 80274c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80274c6:	00d4      	lsls	r4, r2, #3
 80274c8:	4622      	mov	r2, r4
 80274ca:	462b      	mov	r3, r5
 80274cc:	1814      	adds	r4, r2, r0
 80274ce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80274d2:	414b      	adcs	r3, r1
 80274d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80274d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80274dc:	685b      	ldr	r3, [r3, #4]
 80274de:	4618      	mov	r0, r3
 80274e0:	f04f 0100 	mov.w	r1, #0
 80274e4:	f04f 0200 	mov.w	r2, #0
 80274e8:	f04f 0300 	mov.w	r3, #0
 80274ec:	008b      	lsls	r3, r1, #2
 80274ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80274f2:	0082      	lsls	r2, r0, #2
 80274f4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80274f8:	f7f9 fbc6 	bl	8020c88 <__aeabi_uldivmod>
 80274fc:	4602      	mov	r2, r0
 80274fe:	460b      	mov	r3, r1
 8027500:	4b96      	ldr	r3, [pc, #600]	; (802775c <UART_SetConfig+0x734>)
 8027502:	fba3 1302 	umull	r1, r3, r3, r2
 8027506:	095b      	lsrs	r3, r3, #5
 8027508:	2164      	movs	r1, #100	; 0x64
 802750a:	fb01 f303 	mul.w	r3, r1, r3
 802750e:	1ad3      	subs	r3, r2, r3
 8027510:	011b      	lsls	r3, r3, #4
 8027512:	3332      	adds	r3, #50	; 0x32
 8027514:	4a91      	ldr	r2, [pc, #580]	; (802775c <UART_SetConfig+0x734>)
 8027516:	fba2 2303 	umull	r2, r3, r2, r3
 802751a:	095b      	lsrs	r3, r3, #5
 802751c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027520:	441e      	add	r6, r3
 8027522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027526:	4618      	mov	r0, r3
 8027528:	f04f 0100 	mov.w	r1, #0
 802752c:	4602      	mov	r2, r0
 802752e:	460b      	mov	r3, r1
 8027530:	1894      	adds	r4, r2, r2
 8027532:	61bc      	str	r4, [r7, #24]
 8027534:	415b      	adcs	r3, r3
 8027536:	61fb      	str	r3, [r7, #28]
 8027538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802753c:	1812      	adds	r2, r2, r0
 802753e:	eb41 0303 	adc.w	r3, r1, r3
 8027542:	f04f 0400 	mov.w	r4, #0
 8027546:	f04f 0500 	mov.w	r5, #0
 802754a:	00dd      	lsls	r5, r3, #3
 802754c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8027550:	00d4      	lsls	r4, r2, #3
 8027552:	4622      	mov	r2, r4
 8027554:	462b      	mov	r3, r5
 8027556:	1814      	adds	r4, r2, r0
 8027558:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 802755c:	414b      	adcs	r3, r1
 802755e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8027562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027566:	685b      	ldr	r3, [r3, #4]
 8027568:	4618      	mov	r0, r3
 802756a:	f04f 0100 	mov.w	r1, #0
 802756e:	f04f 0200 	mov.w	r2, #0
 8027572:	f04f 0300 	mov.w	r3, #0
 8027576:	008b      	lsls	r3, r1, #2
 8027578:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802757c:	0082      	lsls	r2, r0, #2
 802757e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8027582:	f7f9 fb81 	bl	8020c88 <__aeabi_uldivmod>
 8027586:	4602      	mov	r2, r0
 8027588:	460b      	mov	r3, r1
 802758a:	4b74      	ldr	r3, [pc, #464]	; (802775c <UART_SetConfig+0x734>)
 802758c:	fba3 1302 	umull	r1, r3, r3, r2
 8027590:	095b      	lsrs	r3, r3, #5
 8027592:	2164      	movs	r1, #100	; 0x64
 8027594:	fb01 f303 	mul.w	r3, r1, r3
 8027598:	1ad3      	subs	r3, r2, r3
 802759a:	011b      	lsls	r3, r3, #4
 802759c:	3332      	adds	r3, #50	; 0x32
 802759e:	4a6f      	ldr	r2, [pc, #444]	; (802775c <UART_SetConfig+0x734>)
 80275a0:	fba2 2303 	umull	r2, r3, r2, r3
 80275a4:	095b      	lsrs	r3, r3, #5
 80275a6:	f003 020f 	and.w	r2, r3, #15
 80275aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80275ae:	681b      	ldr	r3, [r3, #0]
 80275b0:	4432      	add	r2, r6
 80275b2:	609a      	str	r2, [r3, #8]
 80275b4:	e0c9      	b.n	802774a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80275b6:	f7fd fd2d 	bl	8025014 <HAL_RCC_GetPCLK1Freq>
 80275ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80275be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80275c2:	461c      	mov	r4, r3
 80275c4:	f04f 0500 	mov.w	r5, #0
 80275c8:	4622      	mov	r2, r4
 80275ca:	462b      	mov	r3, r5
 80275cc:	1891      	adds	r1, r2, r2
 80275ce:	6139      	str	r1, [r7, #16]
 80275d0:	415b      	adcs	r3, r3
 80275d2:	617b      	str	r3, [r7, #20]
 80275d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80275d8:	1912      	adds	r2, r2, r4
 80275da:	eb45 0303 	adc.w	r3, r5, r3
 80275de:	f04f 0000 	mov.w	r0, #0
 80275e2:	f04f 0100 	mov.w	r1, #0
 80275e6:	00d9      	lsls	r1, r3, #3
 80275e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80275ec:	00d0      	lsls	r0, r2, #3
 80275ee:	4602      	mov	r2, r0
 80275f0:	460b      	mov	r3, r1
 80275f2:	eb12 0804 	adds.w	r8, r2, r4
 80275f6:	eb43 0905 	adc.w	r9, r3, r5
 80275fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80275fe:	685b      	ldr	r3, [r3, #4]
 8027600:	4618      	mov	r0, r3
 8027602:	f04f 0100 	mov.w	r1, #0
 8027606:	f04f 0200 	mov.w	r2, #0
 802760a:	f04f 0300 	mov.w	r3, #0
 802760e:	008b      	lsls	r3, r1, #2
 8027610:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027614:	0082      	lsls	r2, r0, #2
 8027616:	4640      	mov	r0, r8
 8027618:	4649      	mov	r1, r9
 802761a:	f7f9 fb35 	bl	8020c88 <__aeabi_uldivmod>
 802761e:	4602      	mov	r2, r0
 8027620:	460b      	mov	r3, r1
 8027622:	4b4e      	ldr	r3, [pc, #312]	; (802775c <UART_SetConfig+0x734>)
 8027624:	fba3 2302 	umull	r2, r3, r3, r2
 8027628:	095b      	lsrs	r3, r3, #5
 802762a:	011e      	lsls	r6, r3, #4
 802762c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8027630:	4618      	mov	r0, r3
 8027632:	f04f 0100 	mov.w	r1, #0
 8027636:	4602      	mov	r2, r0
 8027638:	460b      	mov	r3, r1
 802763a:	1894      	adds	r4, r2, r2
 802763c:	60bc      	str	r4, [r7, #8]
 802763e:	415b      	adcs	r3, r3
 8027640:	60fb      	str	r3, [r7, #12]
 8027642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8027646:	1812      	adds	r2, r2, r0
 8027648:	eb41 0303 	adc.w	r3, r1, r3
 802764c:	f04f 0400 	mov.w	r4, #0
 8027650:	f04f 0500 	mov.w	r5, #0
 8027654:	00dd      	lsls	r5, r3, #3
 8027656:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802765a:	00d4      	lsls	r4, r2, #3
 802765c:	4622      	mov	r2, r4
 802765e:	462b      	mov	r3, r5
 8027660:	1814      	adds	r4, r2, r0
 8027662:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8027666:	414b      	adcs	r3, r1
 8027668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027670:	685b      	ldr	r3, [r3, #4]
 8027672:	4618      	mov	r0, r3
 8027674:	f04f 0100 	mov.w	r1, #0
 8027678:	f04f 0200 	mov.w	r2, #0
 802767c:	f04f 0300 	mov.w	r3, #0
 8027680:	008b      	lsls	r3, r1, #2
 8027682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027686:	0082      	lsls	r2, r0, #2
 8027688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802768c:	f7f9 fafc 	bl	8020c88 <__aeabi_uldivmod>
 8027690:	4602      	mov	r2, r0
 8027692:	460b      	mov	r3, r1
 8027694:	4b31      	ldr	r3, [pc, #196]	; (802775c <UART_SetConfig+0x734>)
 8027696:	fba3 1302 	umull	r1, r3, r3, r2
 802769a:	095b      	lsrs	r3, r3, #5
 802769c:	2164      	movs	r1, #100	; 0x64
 802769e:	fb01 f303 	mul.w	r3, r1, r3
 80276a2:	1ad3      	subs	r3, r2, r3
 80276a4:	011b      	lsls	r3, r3, #4
 80276a6:	3332      	adds	r3, #50	; 0x32
 80276a8:	4a2c      	ldr	r2, [pc, #176]	; (802775c <UART_SetConfig+0x734>)
 80276aa:	fba2 2303 	umull	r2, r3, r2, r3
 80276ae:	095b      	lsrs	r3, r3, #5
 80276b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80276b4:	441e      	add	r6, r3
 80276b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80276ba:	4618      	mov	r0, r3
 80276bc:	f04f 0100 	mov.w	r1, #0
 80276c0:	4602      	mov	r2, r0
 80276c2:	460b      	mov	r3, r1
 80276c4:	1894      	adds	r4, r2, r2
 80276c6:	603c      	str	r4, [r7, #0]
 80276c8:	415b      	adcs	r3, r3
 80276ca:	607b      	str	r3, [r7, #4]
 80276cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80276d0:	1812      	adds	r2, r2, r0
 80276d2:	eb41 0303 	adc.w	r3, r1, r3
 80276d6:	f04f 0400 	mov.w	r4, #0
 80276da:	f04f 0500 	mov.w	r5, #0
 80276de:	00dd      	lsls	r5, r3, #3
 80276e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80276e4:	00d4      	lsls	r4, r2, #3
 80276e6:	4622      	mov	r2, r4
 80276e8:	462b      	mov	r3, r5
 80276ea:	1814      	adds	r4, r2, r0
 80276ec:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80276f0:	414b      	adcs	r3, r1
 80276f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80276f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80276fa:	685b      	ldr	r3, [r3, #4]
 80276fc:	4618      	mov	r0, r3
 80276fe:	f04f 0100 	mov.w	r1, #0
 8027702:	f04f 0200 	mov.w	r2, #0
 8027706:	f04f 0300 	mov.w	r3, #0
 802770a:	008b      	lsls	r3, r1, #2
 802770c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8027710:	0082      	lsls	r2, r0, #2
 8027712:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8027716:	f7f9 fab7 	bl	8020c88 <__aeabi_uldivmod>
 802771a:	4602      	mov	r2, r0
 802771c:	460b      	mov	r3, r1
 802771e:	4b0f      	ldr	r3, [pc, #60]	; (802775c <UART_SetConfig+0x734>)
 8027720:	fba3 1302 	umull	r1, r3, r3, r2
 8027724:	095b      	lsrs	r3, r3, #5
 8027726:	2164      	movs	r1, #100	; 0x64
 8027728:	fb01 f303 	mul.w	r3, r1, r3
 802772c:	1ad3      	subs	r3, r2, r3
 802772e:	011b      	lsls	r3, r3, #4
 8027730:	3332      	adds	r3, #50	; 0x32
 8027732:	4a0a      	ldr	r2, [pc, #40]	; (802775c <UART_SetConfig+0x734>)
 8027734:	fba2 2303 	umull	r2, r3, r2, r3
 8027738:	095b      	lsrs	r3, r3, #5
 802773a:	f003 020f 	and.w	r2, r3, #15
 802773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8027742:	681b      	ldr	r3, [r3, #0]
 8027744:	4432      	add	r2, r6
 8027746:	609a      	str	r2, [r3, #8]
}
 8027748:	e7ff      	b.n	802774a <UART_SetConfig+0x722>
 802774a:	bf00      	nop
 802774c:	37f4      	adds	r7, #244	; 0xf4
 802774e:	46bd      	mov	sp, r7
 8027750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027754:	40011000 	.word	0x40011000
 8027758:	40011400 	.word	0x40011400
 802775c:	51eb851f 	.word	0x51eb851f

08027760 <atof>:
 8027760:	2100      	movs	r1, #0
 8027762:	f001 baf7 	b.w	8028d54 <strtod>
	...

08027768 <__errno>:
 8027768:	4b01      	ldr	r3, [pc, #4]	; (8027770 <__errno+0x8>)
 802776a:	6818      	ldr	r0, [r3, #0]
 802776c:	4770      	bx	lr
 802776e:	bf00      	nop
 8027770:	20000470 	.word	0x20000470

08027774 <__libc_init_array>:
 8027774:	b570      	push	{r4, r5, r6, lr}
 8027776:	4d0d      	ldr	r5, [pc, #52]	; (80277ac <__libc_init_array+0x38>)
 8027778:	4c0d      	ldr	r4, [pc, #52]	; (80277b0 <__libc_init_array+0x3c>)
 802777a:	1b64      	subs	r4, r4, r5
 802777c:	10a4      	asrs	r4, r4, #2
 802777e:	2600      	movs	r6, #0
 8027780:	42a6      	cmp	r6, r4
 8027782:	d109      	bne.n	8027798 <__libc_init_array+0x24>
 8027784:	4d0b      	ldr	r5, [pc, #44]	; (80277b4 <__libc_init_array+0x40>)
 8027786:	4c0c      	ldr	r4, [pc, #48]	; (80277b8 <__libc_init_array+0x44>)
 8027788:	f004 f9b0 	bl	802baec <_init>
 802778c:	1b64      	subs	r4, r4, r5
 802778e:	10a4      	asrs	r4, r4, #2
 8027790:	2600      	movs	r6, #0
 8027792:	42a6      	cmp	r6, r4
 8027794:	d105      	bne.n	80277a2 <__libc_init_array+0x2e>
 8027796:	bd70      	pop	{r4, r5, r6, pc}
 8027798:	f855 3b04 	ldr.w	r3, [r5], #4
 802779c:	4798      	blx	r3
 802779e:	3601      	adds	r6, #1
 80277a0:	e7ee      	b.n	8027780 <__libc_init_array+0xc>
 80277a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80277a6:	4798      	blx	r3
 80277a8:	3601      	adds	r6, #1
 80277aa:	e7f2      	b.n	8027792 <__libc_init_array+0x1e>
 80277ac:	0802c194 	.word	0x0802c194
 80277b0:	0802c194 	.word	0x0802c194
 80277b4:	0802c194 	.word	0x0802c194
 80277b8:	0802c198 	.word	0x0802c198

080277bc <memset>:
 80277bc:	4402      	add	r2, r0
 80277be:	4603      	mov	r3, r0
 80277c0:	4293      	cmp	r3, r2
 80277c2:	d100      	bne.n	80277c6 <memset+0xa>
 80277c4:	4770      	bx	lr
 80277c6:	f803 1b01 	strb.w	r1, [r3], #1
 80277ca:	e7f9      	b.n	80277c0 <memset+0x4>

080277cc <__cvt>:
 80277cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80277d0:	ec55 4b10 	vmov	r4, r5, d0
 80277d4:	2d00      	cmp	r5, #0
 80277d6:	460e      	mov	r6, r1
 80277d8:	4619      	mov	r1, r3
 80277da:	462b      	mov	r3, r5
 80277dc:	bfbb      	ittet	lt
 80277de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80277e2:	461d      	movlt	r5, r3
 80277e4:	2300      	movge	r3, #0
 80277e6:	232d      	movlt	r3, #45	; 0x2d
 80277e8:	700b      	strb	r3, [r1, #0]
 80277ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80277ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80277f0:	4691      	mov	r9, r2
 80277f2:	f023 0820 	bic.w	r8, r3, #32
 80277f6:	bfbc      	itt	lt
 80277f8:	4622      	movlt	r2, r4
 80277fa:	4614      	movlt	r4, r2
 80277fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8027800:	d005      	beq.n	802780e <__cvt+0x42>
 8027802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8027806:	d100      	bne.n	802780a <__cvt+0x3e>
 8027808:	3601      	adds	r6, #1
 802780a:	2102      	movs	r1, #2
 802780c:	e000      	b.n	8027810 <__cvt+0x44>
 802780e:	2103      	movs	r1, #3
 8027810:	ab03      	add	r3, sp, #12
 8027812:	9301      	str	r3, [sp, #4]
 8027814:	ab02      	add	r3, sp, #8
 8027816:	9300      	str	r3, [sp, #0]
 8027818:	ec45 4b10 	vmov	d0, r4, r5
 802781c:	4653      	mov	r3, sl
 802781e:	4632      	mov	r2, r6
 8027820:	f001 fb32 	bl	8028e88 <_dtoa_r>
 8027824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8027828:	4607      	mov	r7, r0
 802782a:	d102      	bne.n	8027832 <__cvt+0x66>
 802782c:	f019 0f01 	tst.w	r9, #1
 8027830:	d022      	beq.n	8027878 <__cvt+0xac>
 8027832:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8027836:	eb07 0906 	add.w	r9, r7, r6
 802783a:	d110      	bne.n	802785e <__cvt+0x92>
 802783c:	783b      	ldrb	r3, [r7, #0]
 802783e:	2b30      	cmp	r3, #48	; 0x30
 8027840:	d10a      	bne.n	8027858 <__cvt+0x8c>
 8027842:	2200      	movs	r2, #0
 8027844:	2300      	movs	r3, #0
 8027846:	4620      	mov	r0, r4
 8027848:	4629      	mov	r1, r5
 802784a:	f7f9 f93d 	bl	8020ac8 <__aeabi_dcmpeq>
 802784e:	b918      	cbnz	r0, 8027858 <__cvt+0x8c>
 8027850:	f1c6 0601 	rsb	r6, r6, #1
 8027854:	f8ca 6000 	str.w	r6, [sl]
 8027858:	f8da 3000 	ldr.w	r3, [sl]
 802785c:	4499      	add	r9, r3
 802785e:	2200      	movs	r2, #0
 8027860:	2300      	movs	r3, #0
 8027862:	4620      	mov	r0, r4
 8027864:	4629      	mov	r1, r5
 8027866:	f7f9 f92f 	bl	8020ac8 <__aeabi_dcmpeq>
 802786a:	b108      	cbz	r0, 8027870 <__cvt+0xa4>
 802786c:	f8cd 900c 	str.w	r9, [sp, #12]
 8027870:	2230      	movs	r2, #48	; 0x30
 8027872:	9b03      	ldr	r3, [sp, #12]
 8027874:	454b      	cmp	r3, r9
 8027876:	d307      	bcc.n	8027888 <__cvt+0xbc>
 8027878:	9b03      	ldr	r3, [sp, #12]
 802787a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802787c:	1bdb      	subs	r3, r3, r7
 802787e:	4638      	mov	r0, r7
 8027880:	6013      	str	r3, [r2, #0]
 8027882:	b004      	add	sp, #16
 8027884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027888:	1c59      	adds	r1, r3, #1
 802788a:	9103      	str	r1, [sp, #12]
 802788c:	701a      	strb	r2, [r3, #0]
 802788e:	e7f0      	b.n	8027872 <__cvt+0xa6>

08027890 <__exponent>:
 8027890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027892:	4603      	mov	r3, r0
 8027894:	2900      	cmp	r1, #0
 8027896:	bfb8      	it	lt
 8027898:	4249      	neglt	r1, r1
 802789a:	f803 2b02 	strb.w	r2, [r3], #2
 802789e:	bfb4      	ite	lt
 80278a0:	222d      	movlt	r2, #45	; 0x2d
 80278a2:	222b      	movge	r2, #43	; 0x2b
 80278a4:	2909      	cmp	r1, #9
 80278a6:	7042      	strb	r2, [r0, #1]
 80278a8:	dd2a      	ble.n	8027900 <__exponent+0x70>
 80278aa:	f10d 0407 	add.w	r4, sp, #7
 80278ae:	46a4      	mov	ip, r4
 80278b0:	270a      	movs	r7, #10
 80278b2:	46a6      	mov	lr, r4
 80278b4:	460a      	mov	r2, r1
 80278b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80278ba:	fb07 1516 	mls	r5, r7, r6, r1
 80278be:	3530      	adds	r5, #48	; 0x30
 80278c0:	2a63      	cmp	r2, #99	; 0x63
 80278c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80278c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80278ca:	4631      	mov	r1, r6
 80278cc:	dcf1      	bgt.n	80278b2 <__exponent+0x22>
 80278ce:	3130      	adds	r1, #48	; 0x30
 80278d0:	f1ae 0502 	sub.w	r5, lr, #2
 80278d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80278d8:	1c44      	adds	r4, r0, #1
 80278da:	4629      	mov	r1, r5
 80278dc:	4561      	cmp	r1, ip
 80278de:	d30a      	bcc.n	80278f6 <__exponent+0x66>
 80278e0:	f10d 0209 	add.w	r2, sp, #9
 80278e4:	eba2 020e 	sub.w	r2, r2, lr
 80278e8:	4565      	cmp	r5, ip
 80278ea:	bf88      	it	hi
 80278ec:	2200      	movhi	r2, #0
 80278ee:	4413      	add	r3, r2
 80278f0:	1a18      	subs	r0, r3, r0
 80278f2:	b003      	add	sp, #12
 80278f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80278f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80278fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80278fe:	e7ed      	b.n	80278dc <__exponent+0x4c>
 8027900:	2330      	movs	r3, #48	; 0x30
 8027902:	3130      	adds	r1, #48	; 0x30
 8027904:	7083      	strb	r3, [r0, #2]
 8027906:	70c1      	strb	r1, [r0, #3]
 8027908:	1d03      	adds	r3, r0, #4
 802790a:	e7f1      	b.n	80278f0 <__exponent+0x60>

0802790c <_printf_float>:
 802790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027910:	ed2d 8b02 	vpush	{d8}
 8027914:	b08d      	sub	sp, #52	; 0x34
 8027916:	460c      	mov	r4, r1
 8027918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802791c:	4616      	mov	r6, r2
 802791e:	461f      	mov	r7, r3
 8027920:	4605      	mov	r5, r0
 8027922:	f002 fc0d 	bl	802a140 <_localeconv_r>
 8027926:	f8d0 a000 	ldr.w	sl, [r0]
 802792a:	4650      	mov	r0, sl
 802792c:	f7f8 fc50 	bl	80201d0 <strlen>
 8027930:	2300      	movs	r3, #0
 8027932:	930a      	str	r3, [sp, #40]	; 0x28
 8027934:	6823      	ldr	r3, [r4, #0]
 8027936:	9305      	str	r3, [sp, #20]
 8027938:	f8d8 3000 	ldr.w	r3, [r8]
 802793c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8027940:	3307      	adds	r3, #7
 8027942:	f023 0307 	bic.w	r3, r3, #7
 8027946:	f103 0208 	add.w	r2, r3, #8
 802794a:	f8c8 2000 	str.w	r2, [r8]
 802794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027952:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8027956:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802795a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802795e:	9307      	str	r3, [sp, #28]
 8027960:	f8cd 8018 	str.w	r8, [sp, #24]
 8027964:	ee08 0a10 	vmov	s16, r0
 8027968:	4b9f      	ldr	r3, [pc, #636]	; (8027be8 <_printf_float+0x2dc>)
 802796a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802796e:	f04f 32ff 	mov.w	r2, #4294967295
 8027972:	f7f9 f8db 	bl	8020b2c <__aeabi_dcmpun>
 8027976:	bb88      	cbnz	r0, 80279dc <_printf_float+0xd0>
 8027978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802797c:	4b9a      	ldr	r3, [pc, #616]	; (8027be8 <_printf_float+0x2dc>)
 802797e:	f04f 32ff 	mov.w	r2, #4294967295
 8027982:	f7f9 f8b5 	bl	8020af0 <__aeabi_dcmple>
 8027986:	bb48      	cbnz	r0, 80279dc <_printf_float+0xd0>
 8027988:	2200      	movs	r2, #0
 802798a:	2300      	movs	r3, #0
 802798c:	4640      	mov	r0, r8
 802798e:	4649      	mov	r1, r9
 8027990:	f7f9 f8a4 	bl	8020adc <__aeabi_dcmplt>
 8027994:	b110      	cbz	r0, 802799c <_printf_float+0x90>
 8027996:	232d      	movs	r3, #45	; 0x2d
 8027998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802799c:	4b93      	ldr	r3, [pc, #588]	; (8027bec <_printf_float+0x2e0>)
 802799e:	4894      	ldr	r0, [pc, #592]	; (8027bf0 <_printf_float+0x2e4>)
 80279a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80279a4:	bf94      	ite	ls
 80279a6:	4698      	movls	r8, r3
 80279a8:	4680      	movhi	r8, r0
 80279aa:	2303      	movs	r3, #3
 80279ac:	6123      	str	r3, [r4, #16]
 80279ae:	9b05      	ldr	r3, [sp, #20]
 80279b0:	f023 0204 	bic.w	r2, r3, #4
 80279b4:	6022      	str	r2, [r4, #0]
 80279b6:	f04f 0900 	mov.w	r9, #0
 80279ba:	9700      	str	r7, [sp, #0]
 80279bc:	4633      	mov	r3, r6
 80279be:	aa0b      	add	r2, sp, #44	; 0x2c
 80279c0:	4621      	mov	r1, r4
 80279c2:	4628      	mov	r0, r5
 80279c4:	f000 f9d8 	bl	8027d78 <_printf_common>
 80279c8:	3001      	adds	r0, #1
 80279ca:	f040 8090 	bne.w	8027aee <_printf_float+0x1e2>
 80279ce:	f04f 30ff 	mov.w	r0, #4294967295
 80279d2:	b00d      	add	sp, #52	; 0x34
 80279d4:	ecbd 8b02 	vpop	{d8}
 80279d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279dc:	4642      	mov	r2, r8
 80279de:	464b      	mov	r3, r9
 80279e0:	4640      	mov	r0, r8
 80279e2:	4649      	mov	r1, r9
 80279e4:	f7f9 f8a2 	bl	8020b2c <__aeabi_dcmpun>
 80279e8:	b140      	cbz	r0, 80279fc <_printf_float+0xf0>
 80279ea:	464b      	mov	r3, r9
 80279ec:	2b00      	cmp	r3, #0
 80279ee:	bfbc      	itt	lt
 80279f0:	232d      	movlt	r3, #45	; 0x2d
 80279f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80279f6:	487f      	ldr	r0, [pc, #508]	; (8027bf4 <_printf_float+0x2e8>)
 80279f8:	4b7f      	ldr	r3, [pc, #508]	; (8027bf8 <_printf_float+0x2ec>)
 80279fa:	e7d1      	b.n	80279a0 <_printf_float+0x94>
 80279fc:	6863      	ldr	r3, [r4, #4]
 80279fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8027a02:	9206      	str	r2, [sp, #24]
 8027a04:	1c5a      	adds	r2, r3, #1
 8027a06:	d13f      	bne.n	8027a88 <_printf_float+0x17c>
 8027a08:	2306      	movs	r3, #6
 8027a0a:	6063      	str	r3, [r4, #4]
 8027a0c:	9b05      	ldr	r3, [sp, #20]
 8027a0e:	6861      	ldr	r1, [r4, #4]
 8027a10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8027a14:	2300      	movs	r3, #0
 8027a16:	9303      	str	r3, [sp, #12]
 8027a18:	ab0a      	add	r3, sp, #40	; 0x28
 8027a1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8027a1e:	ab09      	add	r3, sp, #36	; 0x24
 8027a20:	ec49 8b10 	vmov	d0, r8, r9
 8027a24:	9300      	str	r3, [sp, #0]
 8027a26:	6022      	str	r2, [r4, #0]
 8027a28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8027a2c:	4628      	mov	r0, r5
 8027a2e:	f7ff fecd 	bl	80277cc <__cvt>
 8027a32:	9b06      	ldr	r3, [sp, #24]
 8027a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027a36:	2b47      	cmp	r3, #71	; 0x47
 8027a38:	4680      	mov	r8, r0
 8027a3a:	d108      	bne.n	8027a4e <_printf_float+0x142>
 8027a3c:	1cc8      	adds	r0, r1, #3
 8027a3e:	db02      	blt.n	8027a46 <_printf_float+0x13a>
 8027a40:	6863      	ldr	r3, [r4, #4]
 8027a42:	4299      	cmp	r1, r3
 8027a44:	dd41      	ble.n	8027aca <_printf_float+0x1be>
 8027a46:	f1ab 0b02 	sub.w	fp, fp, #2
 8027a4a:	fa5f fb8b 	uxtb.w	fp, fp
 8027a4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8027a52:	d820      	bhi.n	8027a96 <_printf_float+0x18a>
 8027a54:	3901      	subs	r1, #1
 8027a56:	465a      	mov	r2, fp
 8027a58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8027a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8027a5e:	f7ff ff17 	bl	8027890 <__exponent>
 8027a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027a64:	1813      	adds	r3, r2, r0
 8027a66:	2a01      	cmp	r2, #1
 8027a68:	4681      	mov	r9, r0
 8027a6a:	6123      	str	r3, [r4, #16]
 8027a6c:	dc02      	bgt.n	8027a74 <_printf_float+0x168>
 8027a6e:	6822      	ldr	r2, [r4, #0]
 8027a70:	07d2      	lsls	r2, r2, #31
 8027a72:	d501      	bpl.n	8027a78 <_printf_float+0x16c>
 8027a74:	3301      	adds	r3, #1
 8027a76:	6123      	str	r3, [r4, #16]
 8027a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d09c      	beq.n	80279ba <_printf_float+0xae>
 8027a80:	232d      	movs	r3, #45	; 0x2d
 8027a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027a86:	e798      	b.n	80279ba <_printf_float+0xae>
 8027a88:	9a06      	ldr	r2, [sp, #24]
 8027a8a:	2a47      	cmp	r2, #71	; 0x47
 8027a8c:	d1be      	bne.n	8027a0c <_printf_float+0x100>
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	d1bc      	bne.n	8027a0c <_printf_float+0x100>
 8027a92:	2301      	movs	r3, #1
 8027a94:	e7b9      	b.n	8027a0a <_printf_float+0xfe>
 8027a96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8027a9a:	d118      	bne.n	8027ace <_printf_float+0x1c2>
 8027a9c:	2900      	cmp	r1, #0
 8027a9e:	6863      	ldr	r3, [r4, #4]
 8027aa0:	dd0b      	ble.n	8027aba <_printf_float+0x1ae>
 8027aa2:	6121      	str	r1, [r4, #16]
 8027aa4:	b913      	cbnz	r3, 8027aac <_printf_float+0x1a0>
 8027aa6:	6822      	ldr	r2, [r4, #0]
 8027aa8:	07d0      	lsls	r0, r2, #31
 8027aaa:	d502      	bpl.n	8027ab2 <_printf_float+0x1a6>
 8027aac:	3301      	adds	r3, #1
 8027aae:	440b      	add	r3, r1
 8027ab0:	6123      	str	r3, [r4, #16]
 8027ab2:	65a1      	str	r1, [r4, #88]	; 0x58
 8027ab4:	f04f 0900 	mov.w	r9, #0
 8027ab8:	e7de      	b.n	8027a78 <_printf_float+0x16c>
 8027aba:	b913      	cbnz	r3, 8027ac2 <_printf_float+0x1b6>
 8027abc:	6822      	ldr	r2, [r4, #0]
 8027abe:	07d2      	lsls	r2, r2, #31
 8027ac0:	d501      	bpl.n	8027ac6 <_printf_float+0x1ba>
 8027ac2:	3302      	adds	r3, #2
 8027ac4:	e7f4      	b.n	8027ab0 <_printf_float+0x1a4>
 8027ac6:	2301      	movs	r3, #1
 8027ac8:	e7f2      	b.n	8027ab0 <_printf_float+0x1a4>
 8027aca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8027ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ad0:	4299      	cmp	r1, r3
 8027ad2:	db05      	blt.n	8027ae0 <_printf_float+0x1d4>
 8027ad4:	6823      	ldr	r3, [r4, #0]
 8027ad6:	6121      	str	r1, [r4, #16]
 8027ad8:	07d8      	lsls	r0, r3, #31
 8027ada:	d5ea      	bpl.n	8027ab2 <_printf_float+0x1a6>
 8027adc:	1c4b      	adds	r3, r1, #1
 8027ade:	e7e7      	b.n	8027ab0 <_printf_float+0x1a4>
 8027ae0:	2900      	cmp	r1, #0
 8027ae2:	bfd4      	ite	le
 8027ae4:	f1c1 0202 	rsble	r2, r1, #2
 8027ae8:	2201      	movgt	r2, #1
 8027aea:	4413      	add	r3, r2
 8027aec:	e7e0      	b.n	8027ab0 <_printf_float+0x1a4>
 8027aee:	6823      	ldr	r3, [r4, #0]
 8027af0:	055a      	lsls	r2, r3, #21
 8027af2:	d407      	bmi.n	8027b04 <_printf_float+0x1f8>
 8027af4:	6923      	ldr	r3, [r4, #16]
 8027af6:	4642      	mov	r2, r8
 8027af8:	4631      	mov	r1, r6
 8027afa:	4628      	mov	r0, r5
 8027afc:	47b8      	blx	r7
 8027afe:	3001      	adds	r0, #1
 8027b00:	d12c      	bne.n	8027b5c <_printf_float+0x250>
 8027b02:	e764      	b.n	80279ce <_printf_float+0xc2>
 8027b04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8027b08:	f240 80e0 	bls.w	8027ccc <_printf_float+0x3c0>
 8027b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027b10:	2200      	movs	r2, #0
 8027b12:	2300      	movs	r3, #0
 8027b14:	f7f8 ffd8 	bl	8020ac8 <__aeabi_dcmpeq>
 8027b18:	2800      	cmp	r0, #0
 8027b1a:	d034      	beq.n	8027b86 <_printf_float+0x27a>
 8027b1c:	4a37      	ldr	r2, [pc, #220]	; (8027bfc <_printf_float+0x2f0>)
 8027b1e:	2301      	movs	r3, #1
 8027b20:	4631      	mov	r1, r6
 8027b22:	4628      	mov	r0, r5
 8027b24:	47b8      	blx	r7
 8027b26:	3001      	adds	r0, #1
 8027b28:	f43f af51 	beq.w	80279ce <_printf_float+0xc2>
 8027b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027b30:	429a      	cmp	r2, r3
 8027b32:	db02      	blt.n	8027b3a <_printf_float+0x22e>
 8027b34:	6823      	ldr	r3, [r4, #0]
 8027b36:	07d8      	lsls	r0, r3, #31
 8027b38:	d510      	bpl.n	8027b5c <_printf_float+0x250>
 8027b3a:	ee18 3a10 	vmov	r3, s16
 8027b3e:	4652      	mov	r2, sl
 8027b40:	4631      	mov	r1, r6
 8027b42:	4628      	mov	r0, r5
 8027b44:	47b8      	blx	r7
 8027b46:	3001      	adds	r0, #1
 8027b48:	f43f af41 	beq.w	80279ce <_printf_float+0xc2>
 8027b4c:	f04f 0800 	mov.w	r8, #0
 8027b50:	f104 091a 	add.w	r9, r4, #26
 8027b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b56:	3b01      	subs	r3, #1
 8027b58:	4543      	cmp	r3, r8
 8027b5a:	dc09      	bgt.n	8027b70 <_printf_float+0x264>
 8027b5c:	6823      	ldr	r3, [r4, #0]
 8027b5e:	079b      	lsls	r3, r3, #30
 8027b60:	f100 8105 	bmi.w	8027d6e <_printf_float+0x462>
 8027b64:	68e0      	ldr	r0, [r4, #12]
 8027b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027b68:	4298      	cmp	r0, r3
 8027b6a:	bfb8      	it	lt
 8027b6c:	4618      	movlt	r0, r3
 8027b6e:	e730      	b.n	80279d2 <_printf_float+0xc6>
 8027b70:	2301      	movs	r3, #1
 8027b72:	464a      	mov	r2, r9
 8027b74:	4631      	mov	r1, r6
 8027b76:	4628      	mov	r0, r5
 8027b78:	47b8      	blx	r7
 8027b7a:	3001      	adds	r0, #1
 8027b7c:	f43f af27 	beq.w	80279ce <_printf_float+0xc2>
 8027b80:	f108 0801 	add.w	r8, r8, #1
 8027b84:	e7e6      	b.n	8027b54 <_printf_float+0x248>
 8027b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	dc39      	bgt.n	8027c00 <_printf_float+0x2f4>
 8027b8c:	4a1b      	ldr	r2, [pc, #108]	; (8027bfc <_printf_float+0x2f0>)
 8027b8e:	2301      	movs	r3, #1
 8027b90:	4631      	mov	r1, r6
 8027b92:	4628      	mov	r0, r5
 8027b94:	47b8      	blx	r7
 8027b96:	3001      	adds	r0, #1
 8027b98:	f43f af19 	beq.w	80279ce <_printf_float+0xc2>
 8027b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027ba0:	4313      	orrs	r3, r2
 8027ba2:	d102      	bne.n	8027baa <_printf_float+0x29e>
 8027ba4:	6823      	ldr	r3, [r4, #0]
 8027ba6:	07d9      	lsls	r1, r3, #31
 8027ba8:	d5d8      	bpl.n	8027b5c <_printf_float+0x250>
 8027baa:	ee18 3a10 	vmov	r3, s16
 8027bae:	4652      	mov	r2, sl
 8027bb0:	4631      	mov	r1, r6
 8027bb2:	4628      	mov	r0, r5
 8027bb4:	47b8      	blx	r7
 8027bb6:	3001      	adds	r0, #1
 8027bb8:	f43f af09 	beq.w	80279ce <_printf_float+0xc2>
 8027bbc:	f04f 0900 	mov.w	r9, #0
 8027bc0:	f104 0a1a 	add.w	sl, r4, #26
 8027bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bc6:	425b      	negs	r3, r3
 8027bc8:	454b      	cmp	r3, r9
 8027bca:	dc01      	bgt.n	8027bd0 <_printf_float+0x2c4>
 8027bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bce:	e792      	b.n	8027af6 <_printf_float+0x1ea>
 8027bd0:	2301      	movs	r3, #1
 8027bd2:	4652      	mov	r2, sl
 8027bd4:	4631      	mov	r1, r6
 8027bd6:	4628      	mov	r0, r5
 8027bd8:	47b8      	blx	r7
 8027bda:	3001      	adds	r0, #1
 8027bdc:	f43f aef7 	beq.w	80279ce <_printf_float+0xc2>
 8027be0:	f109 0901 	add.w	r9, r9, #1
 8027be4:	e7ee      	b.n	8027bc4 <_printf_float+0x2b8>
 8027be6:	bf00      	nop
 8027be8:	7fefffff 	.word	0x7fefffff
 8027bec:	0802bce4 	.word	0x0802bce4
 8027bf0:	0802bce8 	.word	0x0802bce8
 8027bf4:	0802bcf0 	.word	0x0802bcf0
 8027bf8:	0802bcec 	.word	0x0802bcec
 8027bfc:	0802bcf4 	.word	0x0802bcf4
 8027c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027c02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027c04:	429a      	cmp	r2, r3
 8027c06:	bfa8      	it	ge
 8027c08:	461a      	movge	r2, r3
 8027c0a:	2a00      	cmp	r2, #0
 8027c0c:	4691      	mov	r9, r2
 8027c0e:	dc37      	bgt.n	8027c80 <_printf_float+0x374>
 8027c10:	f04f 0b00 	mov.w	fp, #0
 8027c14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027c18:	f104 021a 	add.w	r2, r4, #26
 8027c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027c1e:	9305      	str	r3, [sp, #20]
 8027c20:	eba3 0309 	sub.w	r3, r3, r9
 8027c24:	455b      	cmp	r3, fp
 8027c26:	dc33      	bgt.n	8027c90 <_printf_float+0x384>
 8027c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027c2c:	429a      	cmp	r2, r3
 8027c2e:	db3b      	blt.n	8027ca8 <_printf_float+0x39c>
 8027c30:	6823      	ldr	r3, [r4, #0]
 8027c32:	07da      	lsls	r2, r3, #31
 8027c34:	d438      	bmi.n	8027ca8 <_printf_float+0x39c>
 8027c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027c38:	9b05      	ldr	r3, [sp, #20]
 8027c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027c3c:	1ad3      	subs	r3, r2, r3
 8027c3e:	eba2 0901 	sub.w	r9, r2, r1
 8027c42:	4599      	cmp	r9, r3
 8027c44:	bfa8      	it	ge
 8027c46:	4699      	movge	r9, r3
 8027c48:	f1b9 0f00 	cmp.w	r9, #0
 8027c4c:	dc35      	bgt.n	8027cba <_printf_float+0x3ae>
 8027c4e:	f04f 0800 	mov.w	r8, #0
 8027c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027c56:	f104 0a1a 	add.w	sl, r4, #26
 8027c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027c5e:	1a9b      	subs	r3, r3, r2
 8027c60:	eba3 0309 	sub.w	r3, r3, r9
 8027c64:	4543      	cmp	r3, r8
 8027c66:	f77f af79 	ble.w	8027b5c <_printf_float+0x250>
 8027c6a:	2301      	movs	r3, #1
 8027c6c:	4652      	mov	r2, sl
 8027c6e:	4631      	mov	r1, r6
 8027c70:	4628      	mov	r0, r5
 8027c72:	47b8      	blx	r7
 8027c74:	3001      	adds	r0, #1
 8027c76:	f43f aeaa 	beq.w	80279ce <_printf_float+0xc2>
 8027c7a:	f108 0801 	add.w	r8, r8, #1
 8027c7e:	e7ec      	b.n	8027c5a <_printf_float+0x34e>
 8027c80:	4613      	mov	r3, r2
 8027c82:	4631      	mov	r1, r6
 8027c84:	4642      	mov	r2, r8
 8027c86:	4628      	mov	r0, r5
 8027c88:	47b8      	blx	r7
 8027c8a:	3001      	adds	r0, #1
 8027c8c:	d1c0      	bne.n	8027c10 <_printf_float+0x304>
 8027c8e:	e69e      	b.n	80279ce <_printf_float+0xc2>
 8027c90:	2301      	movs	r3, #1
 8027c92:	4631      	mov	r1, r6
 8027c94:	4628      	mov	r0, r5
 8027c96:	9205      	str	r2, [sp, #20]
 8027c98:	47b8      	blx	r7
 8027c9a:	3001      	adds	r0, #1
 8027c9c:	f43f ae97 	beq.w	80279ce <_printf_float+0xc2>
 8027ca0:	9a05      	ldr	r2, [sp, #20]
 8027ca2:	f10b 0b01 	add.w	fp, fp, #1
 8027ca6:	e7b9      	b.n	8027c1c <_printf_float+0x310>
 8027ca8:	ee18 3a10 	vmov	r3, s16
 8027cac:	4652      	mov	r2, sl
 8027cae:	4631      	mov	r1, r6
 8027cb0:	4628      	mov	r0, r5
 8027cb2:	47b8      	blx	r7
 8027cb4:	3001      	adds	r0, #1
 8027cb6:	d1be      	bne.n	8027c36 <_printf_float+0x32a>
 8027cb8:	e689      	b.n	80279ce <_printf_float+0xc2>
 8027cba:	9a05      	ldr	r2, [sp, #20]
 8027cbc:	464b      	mov	r3, r9
 8027cbe:	4442      	add	r2, r8
 8027cc0:	4631      	mov	r1, r6
 8027cc2:	4628      	mov	r0, r5
 8027cc4:	47b8      	blx	r7
 8027cc6:	3001      	adds	r0, #1
 8027cc8:	d1c1      	bne.n	8027c4e <_printf_float+0x342>
 8027cca:	e680      	b.n	80279ce <_printf_float+0xc2>
 8027ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027cce:	2a01      	cmp	r2, #1
 8027cd0:	dc01      	bgt.n	8027cd6 <_printf_float+0x3ca>
 8027cd2:	07db      	lsls	r3, r3, #31
 8027cd4:	d538      	bpl.n	8027d48 <_printf_float+0x43c>
 8027cd6:	2301      	movs	r3, #1
 8027cd8:	4642      	mov	r2, r8
 8027cda:	4631      	mov	r1, r6
 8027cdc:	4628      	mov	r0, r5
 8027cde:	47b8      	blx	r7
 8027ce0:	3001      	adds	r0, #1
 8027ce2:	f43f ae74 	beq.w	80279ce <_printf_float+0xc2>
 8027ce6:	ee18 3a10 	vmov	r3, s16
 8027cea:	4652      	mov	r2, sl
 8027cec:	4631      	mov	r1, r6
 8027cee:	4628      	mov	r0, r5
 8027cf0:	47b8      	blx	r7
 8027cf2:	3001      	adds	r0, #1
 8027cf4:	f43f ae6b 	beq.w	80279ce <_printf_float+0xc2>
 8027cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027cfc:	2200      	movs	r2, #0
 8027cfe:	2300      	movs	r3, #0
 8027d00:	f7f8 fee2 	bl	8020ac8 <__aeabi_dcmpeq>
 8027d04:	b9d8      	cbnz	r0, 8027d3e <_printf_float+0x432>
 8027d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d08:	f108 0201 	add.w	r2, r8, #1
 8027d0c:	3b01      	subs	r3, #1
 8027d0e:	4631      	mov	r1, r6
 8027d10:	4628      	mov	r0, r5
 8027d12:	47b8      	blx	r7
 8027d14:	3001      	adds	r0, #1
 8027d16:	d10e      	bne.n	8027d36 <_printf_float+0x42a>
 8027d18:	e659      	b.n	80279ce <_printf_float+0xc2>
 8027d1a:	2301      	movs	r3, #1
 8027d1c:	4652      	mov	r2, sl
 8027d1e:	4631      	mov	r1, r6
 8027d20:	4628      	mov	r0, r5
 8027d22:	47b8      	blx	r7
 8027d24:	3001      	adds	r0, #1
 8027d26:	f43f ae52 	beq.w	80279ce <_printf_float+0xc2>
 8027d2a:	f108 0801 	add.w	r8, r8, #1
 8027d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d30:	3b01      	subs	r3, #1
 8027d32:	4543      	cmp	r3, r8
 8027d34:	dcf1      	bgt.n	8027d1a <_printf_float+0x40e>
 8027d36:	464b      	mov	r3, r9
 8027d38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8027d3c:	e6dc      	b.n	8027af8 <_printf_float+0x1ec>
 8027d3e:	f04f 0800 	mov.w	r8, #0
 8027d42:	f104 0a1a 	add.w	sl, r4, #26
 8027d46:	e7f2      	b.n	8027d2e <_printf_float+0x422>
 8027d48:	2301      	movs	r3, #1
 8027d4a:	4642      	mov	r2, r8
 8027d4c:	e7df      	b.n	8027d0e <_printf_float+0x402>
 8027d4e:	2301      	movs	r3, #1
 8027d50:	464a      	mov	r2, r9
 8027d52:	4631      	mov	r1, r6
 8027d54:	4628      	mov	r0, r5
 8027d56:	47b8      	blx	r7
 8027d58:	3001      	adds	r0, #1
 8027d5a:	f43f ae38 	beq.w	80279ce <_printf_float+0xc2>
 8027d5e:	f108 0801 	add.w	r8, r8, #1
 8027d62:	68e3      	ldr	r3, [r4, #12]
 8027d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027d66:	1a5b      	subs	r3, r3, r1
 8027d68:	4543      	cmp	r3, r8
 8027d6a:	dcf0      	bgt.n	8027d4e <_printf_float+0x442>
 8027d6c:	e6fa      	b.n	8027b64 <_printf_float+0x258>
 8027d6e:	f04f 0800 	mov.w	r8, #0
 8027d72:	f104 0919 	add.w	r9, r4, #25
 8027d76:	e7f4      	b.n	8027d62 <_printf_float+0x456>

08027d78 <_printf_common>:
 8027d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d7c:	4616      	mov	r6, r2
 8027d7e:	4699      	mov	r9, r3
 8027d80:	688a      	ldr	r2, [r1, #8]
 8027d82:	690b      	ldr	r3, [r1, #16]
 8027d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027d88:	4293      	cmp	r3, r2
 8027d8a:	bfb8      	it	lt
 8027d8c:	4613      	movlt	r3, r2
 8027d8e:	6033      	str	r3, [r6, #0]
 8027d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027d94:	4607      	mov	r7, r0
 8027d96:	460c      	mov	r4, r1
 8027d98:	b10a      	cbz	r2, 8027d9e <_printf_common+0x26>
 8027d9a:	3301      	adds	r3, #1
 8027d9c:	6033      	str	r3, [r6, #0]
 8027d9e:	6823      	ldr	r3, [r4, #0]
 8027da0:	0699      	lsls	r1, r3, #26
 8027da2:	bf42      	ittt	mi
 8027da4:	6833      	ldrmi	r3, [r6, #0]
 8027da6:	3302      	addmi	r3, #2
 8027da8:	6033      	strmi	r3, [r6, #0]
 8027daa:	6825      	ldr	r5, [r4, #0]
 8027dac:	f015 0506 	ands.w	r5, r5, #6
 8027db0:	d106      	bne.n	8027dc0 <_printf_common+0x48>
 8027db2:	f104 0a19 	add.w	sl, r4, #25
 8027db6:	68e3      	ldr	r3, [r4, #12]
 8027db8:	6832      	ldr	r2, [r6, #0]
 8027dba:	1a9b      	subs	r3, r3, r2
 8027dbc:	42ab      	cmp	r3, r5
 8027dbe:	dc26      	bgt.n	8027e0e <_printf_common+0x96>
 8027dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027dc4:	1e13      	subs	r3, r2, #0
 8027dc6:	6822      	ldr	r2, [r4, #0]
 8027dc8:	bf18      	it	ne
 8027dca:	2301      	movne	r3, #1
 8027dcc:	0692      	lsls	r2, r2, #26
 8027dce:	d42b      	bmi.n	8027e28 <_printf_common+0xb0>
 8027dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027dd4:	4649      	mov	r1, r9
 8027dd6:	4638      	mov	r0, r7
 8027dd8:	47c0      	blx	r8
 8027dda:	3001      	adds	r0, #1
 8027ddc:	d01e      	beq.n	8027e1c <_printf_common+0xa4>
 8027dde:	6823      	ldr	r3, [r4, #0]
 8027de0:	68e5      	ldr	r5, [r4, #12]
 8027de2:	6832      	ldr	r2, [r6, #0]
 8027de4:	f003 0306 	and.w	r3, r3, #6
 8027de8:	2b04      	cmp	r3, #4
 8027dea:	bf08      	it	eq
 8027dec:	1aad      	subeq	r5, r5, r2
 8027dee:	68a3      	ldr	r3, [r4, #8]
 8027df0:	6922      	ldr	r2, [r4, #16]
 8027df2:	bf0c      	ite	eq
 8027df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027df8:	2500      	movne	r5, #0
 8027dfa:	4293      	cmp	r3, r2
 8027dfc:	bfc4      	itt	gt
 8027dfe:	1a9b      	subgt	r3, r3, r2
 8027e00:	18ed      	addgt	r5, r5, r3
 8027e02:	2600      	movs	r6, #0
 8027e04:	341a      	adds	r4, #26
 8027e06:	42b5      	cmp	r5, r6
 8027e08:	d11a      	bne.n	8027e40 <_printf_common+0xc8>
 8027e0a:	2000      	movs	r0, #0
 8027e0c:	e008      	b.n	8027e20 <_printf_common+0xa8>
 8027e0e:	2301      	movs	r3, #1
 8027e10:	4652      	mov	r2, sl
 8027e12:	4649      	mov	r1, r9
 8027e14:	4638      	mov	r0, r7
 8027e16:	47c0      	blx	r8
 8027e18:	3001      	adds	r0, #1
 8027e1a:	d103      	bne.n	8027e24 <_printf_common+0xac>
 8027e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8027e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e24:	3501      	adds	r5, #1
 8027e26:	e7c6      	b.n	8027db6 <_printf_common+0x3e>
 8027e28:	18e1      	adds	r1, r4, r3
 8027e2a:	1c5a      	adds	r2, r3, #1
 8027e2c:	2030      	movs	r0, #48	; 0x30
 8027e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027e32:	4422      	add	r2, r4
 8027e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027e3c:	3302      	adds	r3, #2
 8027e3e:	e7c7      	b.n	8027dd0 <_printf_common+0x58>
 8027e40:	2301      	movs	r3, #1
 8027e42:	4622      	mov	r2, r4
 8027e44:	4649      	mov	r1, r9
 8027e46:	4638      	mov	r0, r7
 8027e48:	47c0      	blx	r8
 8027e4a:	3001      	adds	r0, #1
 8027e4c:	d0e6      	beq.n	8027e1c <_printf_common+0xa4>
 8027e4e:	3601      	adds	r6, #1
 8027e50:	e7d9      	b.n	8027e06 <_printf_common+0x8e>
	...

08027e54 <_printf_i>:
 8027e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e58:	460c      	mov	r4, r1
 8027e5a:	4691      	mov	r9, r2
 8027e5c:	7e27      	ldrb	r7, [r4, #24]
 8027e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027e60:	2f78      	cmp	r7, #120	; 0x78
 8027e62:	4680      	mov	r8, r0
 8027e64:	469a      	mov	sl, r3
 8027e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027e6a:	d807      	bhi.n	8027e7c <_printf_i+0x28>
 8027e6c:	2f62      	cmp	r7, #98	; 0x62
 8027e6e:	d80a      	bhi.n	8027e86 <_printf_i+0x32>
 8027e70:	2f00      	cmp	r7, #0
 8027e72:	f000 80d8 	beq.w	8028026 <_printf_i+0x1d2>
 8027e76:	2f58      	cmp	r7, #88	; 0x58
 8027e78:	f000 80a3 	beq.w	8027fc2 <_printf_i+0x16e>
 8027e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027e84:	e03a      	b.n	8027efc <_printf_i+0xa8>
 8027e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027e8a:	2b15      	cmp	r3, #21
 8027e8c:	d8f6      	bhi.n	8027e7c <_printf_i+0x28>
 8027e8e:	a001      	add	r0, pc, #4	; (adr r0, 8027e94 <_printf_i+0x40>)
 8027e90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027e94:	08027eed 	.word	0x08027eed
 8027e98:	08027f01 	.word	0x08027f01
 8027e9c:	08027e7d 	.word	0x08027e7d
 8027ea0:	08027e7d 	.word	0x08027e7d
 8027ea4:	08027e7d 	.word	0x08027e7d
 8027ea8:	08027e7d 	.word	0x08027e7d
 8027eac:	08027f01 	.word	0x08027f01
 8027eb0:	08027e7d 	.word	0x08027e7d
 8027eb4:	08027e7d 	.word	0x08027e7d
 8027eb8:	08027e7d 	.word	0x08027e7d
 8027ebc:	08027e7d 	.word	0x08027e7d
 8027ec0:	0802800d 	.word	0x0802800d
 8027ec4:	08027f31 	.word	0x08027f31
 8027ec8:	08027fef 	.word	0x08027fef
 8027ecc:	08027e7d 	.word	0x08027e7d
 8027ed0:	08027e7d 	.word	0x08027e7d
 8027ed4:	0802802f 	.word	0x0802802f
 8027ed8:	08027e7d 	.word	0x08027e7d
 8027edc:	08027f31 	.word	0x08027f31
 8027ee0:	08027e7d 	.word	0x08027e7d
 8027ee4:	08027e7d 	.word	0x08027e7d
 8027ee8:	08027ff7 	.word	0x08027ff7
 8027eec:	680b      	ldr	r3, [r1, #0]
 8027eee:	1d1a      	adds	r2, r3, #4
 8027ef0:	681b      	ldr	r3, [r3, #0]
 8027ef2:	600a      	str	r2, [r1, #0]
 8027ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027efc:	2301      	movs	r3, #1
 8027efe:	e0a3      	b.n	8028048 <_printf_i+0x1f4>
 8027f00:	6825      	ldr	r5, [r4, #0]
 8027f02:	6808      	ldr	r0, [r1, #0]
 8027f04:	062e      	lsls	r6, r5, #24
 8027f06:	f100 0304 	add.w	r3, r0, #4
 8027f0a:	d50a      	bpl.n	8027f22 <_printf_i+0xce>
 8027f0c:	6805      	ldr	r5, [r0, #0]
 8027f0e:	600b      	str	r3, [r1, #0]
 8027f10:	2d00      	cmp	r5, #0
 8027f12:	da03      	bge.n	8027f1c <_printf_i+0xc8>
 8027f14:	232d      	movs	r3, #45	; 0x2d
 8027f16:	426d      	negs	r5, r5
 8027f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027f1c:	485e      	ldr	r0, [pc, #376]	; (8028098 <_printf_i+0x244>)
 8027f1e:	230a      	movs	r3, #10
 8027f20:	e019      	b.n	8027f56 <_printf_i+0x102>
 8027f22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8027f26:	6805      	ldr	r5, [r0, #0]
 8027f28:	600b      	str	r3, [r1, #0]
 8027f2a:	bf18      	it	ne
 8027f2c:	b22d      	sxthne	r5, r5
 8027f2e:	e7ef      	b.n	8027f10 <_printf_i+0xbc>
 8027f30:	680b      	ldr	r3, [r1, #0]
 8027f32:	6825      	ldr	r5, [r4, #0]
 8027f34:	1d18      	adds	r0, r3, #4
 8027f36:	6008      	str	r0, [r1, #0]
 8027f38:	0628      	lsls	r0, r5, #24
 8027f3a:	d501      	bpl.n	8027f40 <_printf_i+0xec>
 8027f3c:	681d      	ldr	r5, [r3, #0]
 8027f3e:	e002      	b.n	8027f46 <_printf_i+0xf2>
 8027f40:	0669      	lsls	r1, r5, #25
 8027f42:	d5fb      	bpl.n	8027f3c <_printf_i+0xe8>
 8027f44:	881d      	ldrh	r5, [r3, #0]
 8027f46:	4854      	ldr	r0, [pc, #336]	; (8028098 <_printf_i+0x244>)
 8027f48:	2f6f      	cmp	r7, #111	; 0x6f
 8027f4a:	bf0c      	ite	eq
 8027f4c:	2308      	moveq	r3, #8
 8027f4e:	230a      	movne	r3, #10
 8027f50:	2100      	movs	r1, #0
 8027f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027f56:	6866      	ldr	r6, [r4, #4]
 8027f58:	60a6      	str	r6, [r4, #8]
 8027f5a:	2e00      	cmp	r6, #0
 8027f5c:	bfa2      	ittt	ge
 8027f5e:	6821      	ldrge	r1, [r4, #0]
 8027f60:	f021 0104 	bicge.w	r1, r1, #4
 8027f64:	6021      	strge	r1, [r4, #0]
 8027f66:	b90d      	cbnz	r5, 8027f6c <_printf_i+0x118>
 8027f68:	2e00      	cmp	r6, #0
 8027f6a:	d04d      	beq.n	8028008 <_printf_i+0x1b4>
 8027f6c:	4616      	mov	r6, r2
 8027f6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8027f72:	fb03 5711 	mls	r7, r3, r1, r5
 8027f76:	5dc7      	ldrb	r7, [r0, r7]
 8027f78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027f7c:	462f      	mov	r7, r5
 8027f7e:	42bb      	cmp	r3, r7
 8027f80:	460d      	mov	r5, r1
 8027f82:	d9f4      	bls.n	8027f6e <_printf_i+0x11a>
 8027f84:	2b08      	cmp	r3, #8
 8027f86:	d10b      	bne.n	8027fa0 <_printf_i+0x14c>
 8027f88:	6823      	ldr	r3, [r4, #0]
 8027f8a:	07df      	lsls	r7, r3, #31
 8027f8c:	d508      	bpl.n	8027fa0 <_printf_i+0x14c>
 8027f8e:	6923      	ldr	r3, [r4, #16]
 8027f90:	6861      	ldr	r1, [r4, #4]
 8027f92:	4299      	cmp	r1, r3
 8027f94:	bfde      	ittt	le
 8027f96:	2330      	movle	r3, #48	; 0x30
 8027f98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027f9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027fa0:	1b92      	subs	r2, r2, r6
 8027fa2:	6122      	str	r2, [r4, #16]
 8027fa4:	f8cd a000 	str.w	sl, [sp]
 8027fa8:	464b      	mov	r3, r9
 8027faa:	aa03      	add	r2, sp, #12
 8027fac:	4621      	mov	r1, r4
 8027fae:	4640      	mov	r0, r8
 8027fb0:	f7ff fee2 	bl	8027d78 <_printf_common>
 8027fb4:	3001      	adds	r0, #1
 8027fb6:	d14c      	bne.n	8028052 <_printf_i+0x1fe>
 8027fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8027fbc:	b004      	add	sp, #16
 8027fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fc2:	4835      	ldr	r0, [pc, #212]	; (8028098 <_printf_i+0x244>)
 8027fc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8027fc8:	6823      	ldr	r3, [r4, #0]
 8027fca:	680e      	ldr	r6, [r1, #0]
 8027fcc:	061f      	lsls	r7, r3, #24
 8027fce:	f856 5b04 	ldr.w	r5, [r6], #4
 8027fd2:	600e      	str	r6, [r1, #0]
 8027fd4:	d514      	bpl.n	8028000 <_printf_i+0x1ac>
 8027fd6:	07d9      	lsls	r1, r3, #31
 8027fd8:	bf44      	itt	mi
 8027fda:	f043 0320 	orrmi.w	r3, r3, #32
 8027fde:	6023      	strmi	r3, [r4, #0]
 8027fe0:	b91d      	cbnz	r5, 8027fea <_printf_i+0x196>
 8027fe2:	6823      	ldr	r3, [r4, #0]
 8027fe4:	f023 0320 	bic.w	r3, r3, #32
 8027fe8:	6023      	str	r3, [r4, #0]
 8027fea:	2310      	movs	r3, #16
 8027fec:	e7b0      	b.n	8027f50 <_printf_i+0xfc>
 8027fee:	6823      	ldr	r3, [r4, #0]
 8027ff0:	f043 0320 	orr.w	r3, r3, #32
 8027ff4:	6023      	str	r3, [r4, #0]
 8027ff6:	2378      	movs	r3, #120	; 0x78
 8027ff8:	4828      	ldr	r0, [pc, #160]	; (802809c <_printf_i+0x248>)
 8027ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027ffe:	e7e3      	b.n	8027fc8 <_printf_i+0x174>
 8028000:	065e      	lsls	r6, r3, #25
 8028002:	bf48      	it	mi
 8028004:	b2ad      	uxthmi	r5, r5
 8028006:	e7e6      	b.n	8027fd6 <_printf_i+0x182>
 8028008:	4616      	mov	r6, r2
 802800a:	e7bb      	b.n	8027f84 <_printf_i+0x130>
 802800c:	680b      	ldr	r3, [r1, #0]
 802800e:	6826      	ldr	r6, [r4, #0]
 8028010:	6960      	ldr	r0, [r4, #20]
 8028012:	1d1d      	adds	r5, r3, #4
 8028014:	600d      	str	r5, [r1, #0]
 8028016:	0635      	lsls	r5, r6, #24
 8028018:	681b      	ldr	r3, [r3, #0]
 802801a:	d501      	bpl.n	8028020 <_printf_i+0x1cc>
 802801c:	6018      	str	r0, [r3, #0]
 802801e:	e002      	b.n	8028026 <_printf_i+0x1d2>
 8028020:	0671      	lsls	r1, r6, #25
 8028022:	d5fb      	bpl.n	802801c <_printf_i+0x1c8>
 8028024:	8018      	strh	r0, [r3, #0]
 8028026:	2300      	movs	r3, #0
 8028028:	6123      	str	r3, [r4, #16]
 802802a:	4616      	mov	r6, r2
 802802c:	e7ba      	b.n	8027fa4 <_printf_i+0x150>
 802802e:	680b      	ldr	r3, [r1, #0]
 8028030:	1d1a      	adds	r2, r3, #4
 8028032:	600a      	str	r2, [r1, #0]
 8028034:	681e      	ldr	r6, [r3, #0]
 8028036:	6862      	ldr	r2, [r4, #4]
 8028038:	2100      	movs	r1, #0
 802803a:	4630      	mov	r0, r6
 802803c:	f7f8 f8d0 	bl	80201e0 <memchr>
 8028040:	b108      	cbz	r0, 8028046 <_printf_i+0x1f2>
 8028042:	1b80      	subs	r0, r0, r6
 8028044:	6060      	str	r0, [r4, #4]
 8028046:	6863      	ldr	r3, [r4, #4]
 8028048:	6123      	str	r3, [r4, #16]
 802804a:	2300      	movs	r3, #0
 802804c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028050:	e7a8      	b.n	8027fa4 <_printf_i+0x150>
 8028052:	6923      	ldr	r3, [r4, #16]
 8028054:	4632      	mov	r2, r6
 8028056:	4649      	mov	r1, r9
 8028058:	4640      	mov	r0, r8
 802805a:	47d0      	blx	sl
 802805c:	3001      	adds	r0, #1
 802805e:	d0ab      	beq.n	8027fb8 <_printf_i+0x164>
 8028060:	6823      	ldr	r3, [r4, #0]
 8028062:	079b      	lsls	r3, r3, #30
 8028064:	d413      	bmi.n	802808e <_printf_i+0x23a>
 8028066:	68e0      	ldr	r0, [r4, #12]
 8028068:	9b03      	ldr	r3, [sp, #12]
 802806a:	4298      	cmp	r0, r3
 802806c:	bfb8      	it	lt
 802806e:	4618      	movlt	r0, r3
 8028070:	e7a4      	b.n	8027fbc <_printf_i+0x168>
 8028072:	2301      	movs	r3, #1
 8028074:	4632      	mov	r2, r6
 8028076:	4649      	mov	r1, r9
 8028078:	4640      	mov	r0, r8
 802807a:	47d0      	blx	sl
 802807c:	3001      	adds	r0, #1
 802807e:	d09b      	beq.n	8027fb8 <_printf_i+0x164>
 8028080:	3501      	adds	r5, #1
 8028082:	68e3      	ldr	r3, [r4, #12]
 8028084:	9903      	ldr	r1, [sp, #12]
 8028086:	1a5b      	subs	r3, r3, r1
 8028088:	42ab      	cmp	r3, r5
 802808a:	dcf2      	bgt.n	8028072 <_printf_i+0x21e>
 802808c:	e7eb      	b.n	8028066 <_printf_i+0x212>
 802808e:	2500      	movs	r5, #0
 8028090:	f104 0619 	add.w	r6, r4, #25
 8028094:	e7f5      	b.n	8028082 <_printf_i+0x22e>
 8028096:	bf00      	nop
 8028098:	0802bcf6 	.word	0x0802bcf6
 802809c:	0802bd07 	.word	0x0802bd07

080280a0 <siprintf>:
 80280a0:	b40e      	push	{r1, r2, r3}
 80280a2:	b500      	push	{lr}
 80280a4:	b09c      	sub	sp, #112	; 0x70
 80280a6:	ab1d      	add	r3, sp, #116	; 0x74
 80280a8:	9002      	str	r0, [sp, #8]
 80280aa:	9006      	str	r0, [sp, #24]
 80280ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80280b0:	4809      	ldr	r0, [pc, #36]	; (80280d8 <siprintf+0x38>)
 80280b2:	9107      	str	r1, [sp, #28]
 80280b4:	9104      	str	r1, [sp, #16]
 80280b6:	4909      	ldr	r1, [pc, #36]	; (80280dc <siprintf+0x3c>)
 80280b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80280bc:	9105      	str	r1, [sp, #20]
 80280be:	6800      	ldr	r0, [r0, #0]
 80280c0:	9301      	str	r3, [sp, #4]
 80280c2:	a902      	add	r1, sp, #8
 80280c4:	f002 fe38 	bl	802ad38 <_svfiprintf_r>
 80280c8:	9b02      	ldr	r3, [sp, #8]
 80280ca:	2200      	movs	r2, #0
 80280cc:	701a      	strb	r2, [r3, #0]
 80280ce:	b01c      	add	sp, #112	; 0x70
 80280d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80280d4:	b003      	add	sp, #12
 80280d6:	4770      	bx	lr
 80280d8:	20000470 	.word	0x20000470
 80280dc:	ffff0208 	.word	0xffff0208

080280e0 <strncmp>:
 80280e0:	b510      	push	{r4, lr}
 80280e2:	b16a      	cbz	r2, 8028100 <strncmp+0x20>
 80280e4:	3901      	subs	r1, #1
 80280e6:	1884      	adds	r4, r0, r2
 80280e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80280ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80280f0:	4293      	cmp	r3, r2
 80280f2:	d103      	bne.n	80280fc <strncmp+0x1c>
 80280f4:	42a0      	cmp	r0, r4
 80280f6:	d001      	beq.n	80280fc <strncmp+0x1c>
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d1f5      	bne.n	80280e8 <strncmp+0x8>
 80280fc:	1a98      	subs	r0, r3, r2
 80280fe:	bd10      	pop	{r4, pc}
 8028100:	4610      	mov	r0, r2
 8028102:	e7fc      	b.n	80280fe <strncmp+0x1e>

08028104 <sulp>:
 8028104:	b570      	push	{r4, r5, r6, lr}
 8028106:	4604      	mov	r4, r0
 8028108:	460d      	mov	r5, r1
 802810a:	ec45 4b10 	vmov	d0, r4, r5
 802810e:	4616      	mov	r6, r2
 8028110:	f002 fbae 	bl	802a870 <__ulp>
 8028114:	ec51 0b10 	vmov	r0, r1, d0
 8028118:	b17e      	cbz	r6, 802813a <sulp+0x36>
 802811a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802811e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028122:	2b00      	cmp	r3, #0
 8028124:	dd09      	ble.n	802813a <sulp+0x36>
 8028126:	051b      	lsls	r3, r3, #20
 8028128:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802812c:	2400      	movs	r4, #0
 802812e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8028132:	4622      	mov	r2, r4
 8028134:	462b      	mov	r3, r5
 8028136:	f7f8 fa5f 	bl	80205f8 <__aeabi_dmul>
 802813a:	bd70      	pop	{r4, r5, r6, pc}
 802813c:	0000      	movs	r0, r0
	...

08028140 <_strtod_l>:
 8028140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028144:	b0a3      	sub	sp, #140	; 0x8c
 8028146:	461f      	mov	r7, r3
 8028148:	2300      	movs	r3, #0
 802814a:	931e      	str	r3, [sp, #120]	; 0x78
 802814c:	4ba4      	ldr	r3, [pc, #656]	; (80283e0 <_strtod_l+0x2a0>)
 802814e:	9219      	str	r2, [sp, #100]	; 0x64
 8028150:	681b      	ldr	r3, [r3, #0]
 8028152:	9307      	str	r3, [sp, #28]
 8028154:	4604      	mov	r4, r0
 8028156:	4618      	mov	r0, r3
 8028158:	4688      	mov	r8, r1
 802815a:	f7f8 f839 	bl	80201d0 <strlen>
 802815e:	f04f 0a00 	mov.w	sl, #0
 8028162:	4605      	mov	r5, r0
 8028164:	f04f 0b00 	mov.w	fp, #0
 8028168:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 802816c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802816e:	781a      	ldrb	r2, [r3, #0]
 8028170:	2a2b      	cmp	r2, #43	; 0x2b
 8028172:	d04c      	beq.n	802820e <_strtod_l+0xce>
 8028174:	d839      	bhi.n	80281ea <_strtod_l+0xaa>
 8028176:	2a0d      	cmp	r2, #13
 8028178:	d832      	bhi.n	80281e0 <_strtod_l+0xa0>
 802817a:	2a08      	cmp	r2, #8
 802817c:	d832      	bhi.n	80281e4 <_strtod_l+0xa4>
 802817e:	2a00      	cmp	r2, #0
 8028180:	d03c      	beq.n	80281fc <_strtod_l+0xbc>
 8028182:	2300      	movs	r3, #0
 8028184:	930e      	str	r3, [sp, #56]	; 0x38
 8028186:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8028188:	7833      	ldrb	r3, [r6, #0]
 802818a:	2b30      	cmp	r3, #48	; 0x30
 802818c:	f040 80b4 	bne.w	80282f8 <_strtod_l+0x1b8>
 8028190:	7873      	ldrb	r3, [r6, #1]
 8028192:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8028196:	2b58      	cmp	r3, #88	; 0x58
 8028198:	d16c      	bne.n	8028274 <_strtod_l+0x134>
 802819a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802819c:	9301      	str	r3, [sp, #4]
 802819e:	ab1e      	add	r3, sp, #120	; 0x78
 80281a0:	9702      	str	r7, [sp, #8]
 80281a2:	9300      	str	r3, [sp, #0]
 80281a4:	4a8f      	ldr	r2, [pc, #572]	; (80283e4 <_strtod_l+0x2a4>)
 80281a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80281a8:	a91d      	add	r1, sp, #116	; 0x74
 80281aa:	4620      	mov	r0, r4
 80281ac:	f001 fcc0 	bl	8029b30 <__gethex>
 80281b0:	f010 0707 	ands.w	r7, r0, #7
 80281b4:	4605      	mov	r5, r0
 80281b6:	d005      	beq.n	80281c4 <_strtod_l+0x84>
 80281b8:	2f06      	cmp	r7, #6
 80281ba:	d12a      	bne.n	8028212 <_strtod_l+0xd2>
 80281bc:	3601      	adds	r6, #1
 80281be:	2300      	movs	r3, #0
 80281c0:	961d      	str	r6, [sp, #116]	; 0x74
 80281c2:	930e      	str	r3, [sp, #56]	; 0x38
 80281c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80281c6:	2b00      	cmp	r3, #0
 80281c8:	f040 8596 	bne.w	8028cf8 <_strtod_l+0xbb8>
 80281cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80281ce:	b1db      	cbz	r3, 8028208 <_strtod_l+0xc8>
 80281d0:	4652      	mov	r2, sl
 80281d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80281d6:	ec43 2b10 	vmov	d0, r2, r3
 80281da:	b023      	add	sp, #140	; 0x8c
 80281dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281e0:	2a20      	cmp	r2, #32
 80281e2:	d1ce      	bne.n	8028182 <_strtod_l+0x42>
 80281e4:	3301      	adds	r3, #1
 80281e6:	931d      	str	r3, [sp, #116]	; 0x74
 80281e8:	e7c0      	b.n	802816c <_strtod_l+0x2c>
 80281ea:	2a2d      	cmp	r2, #45	; 0x2d
 80281ec:	d1c9      	bne.n	8028182 <_strtod_l+0x42>
 80281ee:	2201      	movs	r2, #1
 80281f0:	920e      	str	r2, [sp, #56]	; 0x38
 80281f2:	1c5a      	adds	r2, r3, #1
 80281f4:	921d      	str	r2, [sp, #116]	; 0x74
 80281f6:	785b      	ldrb	r3, [r3, #1]
 80281f8:	2b00      	cmp	r3, #0
 80281fa:	d1c4      	bne.n	8028186 <_strtod_l+0x46>
 80281fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80281fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8028202:	2b00      	cmp	r3, #0
 8028204:	f040 8576 	bne.w	8028cf4 <_strtod_l+0xbb4>
 8028208:	4652      	mov	r2, sl
 802820a:	465b      	mov	r3, fp
 802820c:	e7e3      	b.n	80281d6 <_strtod_l+0x96>
 802820e:	2200      	movs	r2, #0
 8028210:	e7ee      	b.n	80281f0 <_strtod_l+0xb0>
 8028212:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028214:	b13a      	cbz	r2, 8028226 <_strtod_l+0xe6>
 8028216:	2135      	movs	r1, #53	; 0x35
 8028218:	a820      	add	r0, sp, #128	; 0x80
 802821a:	f002 fc34 	bl	802aa86 <__copybits>
 802821e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028220:	4620      	mov	r0, r4
 8028222:	f001 fff9 	bl	802a218 <_Bfree>
 8028226:	3f01      	subs	r7, #1
 8028228:	2f05      	cmp	r7, #5
 802822a:	d807      	bhi.n	802823c <_strtod_l+0xfc>
 802822c:	e8df f007 	tbb	[pc, r7]
 8028230:	1d180b0e 	.word	0x1d180b0e
 8028234:	030e      	.short	0x030e
 8028236:	f04f 0b00 	mov.w	fp, #0
 802823a:	46da      	mov	sl, fp
 802823c:	0728      	lsls	r0, r5, #28
 802823e:	d5c1      	bpl.n	80281c4 <_strtod_l+0x84>
 8028240:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8028244:	e7be      	b.n	80281c4 <_strtod_l+0x84>
 8028246:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 802824a:	e7f7      	b.n	802823c <_strtod_l+0xfc>
 802824c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8028250:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8028256:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802825a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802825e:	e7ed      	b.n	802823c <_strtod_l+0xfc>
 8028260:	f8df b184 	ldr.w	fp, [pc, #388]	; 80283e8 <_strtod_l+0x2a8>
 8028264:	f04f 0a00 	mov.w	sl, #0
 8028268:	e7e8      	b.n	802823c <_strtod_l+0xfc>
 802826a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802826e:	f04f 3aff 	mov.w	sl, #4294967295
 8028272:	e7e3      	b.n	802823c <_strtod_l+0xfc>
 8028274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028276:	1c5a      	adds	r2, r3, #1
 8028278:	921d      	str	r2, [sp, #116]	; 0x74
 802827a:	785b      	ldrb	r3, [r3, #1]
 802827c:	2b30      	cmp	r3, #48	; 0x30
 802827e:	d0f9      	beq.n	8028274 <_strtod_l+0x134>
 8028280:	2b00      	cmp	r3, #0
 8028282:	d09f      	beq.n	80281c4 <_strtod_l+0x84>
 8028284:	2301      	movs	r3, #1
 8028286:	f04f 0900 	mov.w	r9, #0
 802828a:	9304      	str	r3, [sp, #16]
 802828c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802828e:	930a      	str	r3, [sp, #40]	; 0x28
 8028290:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8028294:	464f      	mov	r7, r9
 8028296:	220a      	movs	r2, #10
 8028298:	981d      	ldr	r0, [sp, #116]	; 0x74
 802829a:	7806      	ldrb	r6, [r0, #0]
 802829c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80282a0:	b2d9      	uxtb	r1, r3
 80282a2:	2909      	cmp	r1, #9
 80282a4:	d92a      	bls.n	80282fc <_strtod_l+0x1bc>
 80282a6:	9907      	ldr	r1, [sp, #28]
 80282a8:	462a      	mov	r2, r5
 80282aa:	f7ff ff19 	bl	80280e0 <strncmp>
 80282ae:	b398      	cbz	r0, 8028318 <_strtod_l+0x1d8>
 80282b0:	2000      	movs	r0, #0
 80282b2:	4633      	mov	r3, r6
 80282b4:	463d      	mov	r5, r7
 80282b6:	9007      	str	r0, [sp, #28]
 80282b8:	4602      	mov	r2, r0
 80282ba:	2b65      	cmp	r3, #101	; 0x65
 80282bc:	d001      	beq.n	80282c2 <_strtod_l+0x182>
 80282be:	2b45      	cmp	r3, #69	; 0x45
 80282c0:	d118      	bne.n	80282f4 <_strtod_l+0x1b4>
 80282c2:	b91d      	cbnz	r5, 80282cc <_strtod_l+0x18c>
 80282c4:	9b04      	ldr	r3, [sp, #16]
 80282c6:	4303      	orrs	r3, r0
 80282c8:	d098      	beq.n	80281fc <_strtod_l+0xbc>
 80282ca:	2500      	movs	r5, #0
 80282cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80282d0:	f108 0301 	add.w	r3, r8, #1
 80282d4:	931d      	str	r3, [sp, #116]	; 0x74
 80282d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80282da:	2b2b      	cmp	r3, #43	; 0x2b
 80282dc:	d075      	beq.n	80283ca <_strtod_l+0x28a>
 80282de:	2b2d      	cmp	r3, #45	; 0x2d
 80282e0:	d07b      	beq.n	80283da <_strtod_l+0x29a>
 80282e2:	f04f 0c00 	mov.w	ip, #0
 80282e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80282ea:	2909      	cmp	r1, #9
 80282ec:	f240 8082 	bls.w	80283f4 <_strtod_l+0x2b4>
 80282f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80282f4:	2600      	movs	r6, #0
 80282f6:	e09d      	b.n	8028434 <_strtod_l+0x2f4>
 80282f8:	2300      	movs	r3, #0
 80282fa:	e7c4      	b.n	8028286 <_strtod_l+0x146>
 80282fc:	2f08      	cmp	r7, #8
 80282fe:	bfd8      	it	le
 8028300:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8028302:	f100 0001 	add.w	r0, r0, #1
 8028306:	bfda      	itte	le
 8028308:	fb02 3301 	mlale	r3, r2, r1, r3
 802830c:	9309      	strle	r3, [sp, #36]	; 0x24
 802830e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8028312:	3701      	adds	r7, #1
 8028314:	901d      	str	r0, [sp, #116]	; 0x74
 8028316:	e7bf      	b.n	8028298 <_strtod_l+0x158>
 8028318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802831a:	195a      	adds	r2, r3, r5
 802831c:	921d      	str	r2, [sp, #116]	; 0x74
 802831e:	5d5b      	ldrb	r3, [r3, r5]
 8028320:	2f00      	cmp	r7, #0
 8028322:	d037      	beq.n	8028394 <_strtod_l+0x254>
 8028324:	9007      	str	r0, [sp, #28]
 8028326:	463d      	mov	r5, r7
 8028328:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802832c:	2a09      	cmp	r2, #9
 802832e:	d912      	bls.n	8028356 <_strtod_l+0x216>
 8028330:	2201      	movs	r2, #1
 8028332:	e7c2      	b.n	80282ba <_strtod_l+0x17a>
 8028334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028336:	1c5a      	adds	r2, r3, #1
 8028338:	921d      	str	r2, [sp, #116]	; 0x74
 802833a:	785b      	ldrb	r3, [r3, #1]
 802833c:	3001      	adds	r0, #1
 802833e:	2b30      	cmp	r3, #48	; 0x30
 8028340:	d0f8      	beq.n	8028334 <_strtod_l+0x1f4>
 8028342:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8028346:	2a08      	cmp	r2, #8
 8028348:	f200 84db 	bhi.w	8028d02 <_strtod_l+0xbc2>
 802834c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802834e:	9007      	str	r0, [sp, #28]
 8028350:	2000      	movs	r0, #0
 8028352:	920a      	str	r2, [sp, #40]	; 0x28
 8028354:	4605      	mov	r5, r0
 8028356:	3b30      	subs	r3, #48	; 0x30
 8028358:	f100 0201 	add.w	r2, r0, #1
 802835c:	d014      	beq.n	8028388 <_strtod_l+0x248>
 802835e:	9907      	ldr	r1, [sp, #28]
 8028360:	4411      	add	r1, r2
 8028362:	9107      	str	r1, [sp, #28]
 8028364:	462a      	mov	r2, r5
 8028366:	eb00 0e05 	add.w	lr, r0, r5
 802836a:	210a      	movs	r1, #10
 802836c:	4572      	cmp	r2, lr
 802836e:	d113      	bne.n	8028398 <_strtod_l+0x258>
 8028370:	182a      	adds	r2, r5, r0
 8028372:	2a08      	cmp	r2, #8
 8028374:	f105 0501 	add.w	r5, r5, #1
 8028378:	4405      	add	r5, r0
 802837a:	dc1c      	bgt.n	80283b6 <_strtod_l+0x276>
 802837c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802837e:	220a      	movs	r2, #10
 8028380:	fb02 3301 	mla	r3, r2, r1, r3
 8028384:	9309      	str	r3, [sp, #36]	; 0x24
 8028386:	2200      	movs	r2, #0
 8028388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802838a:	1c59      	adds	r1, r3, #1
 802838c:	911d      	str	r1, [sp, #116]	; 0x74
 802838e:	785b      	ldrb	r3, [r3, #1]
 8028390:	4610      	mov	r0, r2
 8028392:	e7c9      	b.n	8028328 <_strtod_l+0x1e8>
 8028394:	4638      	mov	r0, r7
 8028396:	e7d2      	b.n	802833e <_strtod_l+0x1fe>
 8028398:	2a08      	cmp	r2, #8
 802839a:	dc04      	bgt.n	80283a6 <_strtod_l+0x266>
 802839c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802839e:	434e      	muls	r6, r1
 80283a0:	9609      	str	r6, [sp, #36]	; 0x24
 80283a2:	3201      	adds	r2, #1
 80283a4:	e7e2      	b.n	802836c <_strtod_l+0x22c>
 80283a6:	f102 0c01 	add.w	ip, r2, #1
 80283aa:	f1bc 0f10 	cmp.w	ip, #16
 80283ae:	bfd8      	it	le
 80283b0:	fb01 f909 	mulle.w	r9, r1, r9
 80283b4:	e7f5      	b.n	80283a2 <_strtod_l+0x262>
 80283b6:	2d10      	cmp	r5, #16
 80283b8:	bfdc      	itt	le
 80283ba:	220a      	movle	r2, #10
 80283bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80283c0:	e7e1      	b.n	8028386 <_strtod_l+0x246>
 80283c2:	2300      	movs	r3, #0
 80283c4:	9307      	str	r3, [sp, #28]
 80283c6:	2201      	movs	r2, #1
 80283c8:	e77c      	b.n	80282c4 <_strtod_l+0x184>
 80283ca:	f04f 0c00 	mov.w	ip, #0
 80283ce:	f108 0302 	add.w	r3, r8, #2
 80283d2:	931d      	str	r3, [sp, #116]	; 0x74
 80283d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80283d8:	e785      	b.n	80282e6 <_strtod_l+0x1a6>
 80283da:	f04f 0c01 	mov.w	ip, #1
 80283de:	e7f6      	b.n	80283ce <_strtod_l+0x28e>
 80283e0:	0802be68 	.word	0x0802be68
 80283e4:	0802bd18 	.word	0x0802bd18
 80283e8:	7ff00000 	.word	0x7ff00000
 80283ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80283ee:	1c59      	adds	r1, r3, #1
 80283f0:	911d      	str	r1, [sp, #116]	; 0x74
 80283f2:	785b      	ldrb	r3, [r3, #1]
 80283f4:	2b30      	cmp	r3, #48	; 0x30
 80283f6:	d0f9      	beq.n	80283ec <_strtod_l+0x2ac>
 80283f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80283fc:	2908      	cmp	r1, #8
 80283fe:	f63f af79 	bhi.w	80282f4 <_strtod_l+0x1b4>
 8028402:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8028406:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028408:	9308      	str	r3, [sp, #32]
 802840a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802840c:	1c59      	adds	r1, r3, #1
 802840e:	911d      	str	r1, [sp, #116]	; 0x74
 8028410:	785b      	ldrb	r3, [r3, #1]
 8028412:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8028416:	2e09      	cmp	r6, #9
 8028418:	d937      	bls.n	802848a <_strtod_l+0x34a>
 802841a:	9e08      	ldr	r6, [sp, #32]
 802841c:	1b89      	subs	r1, r1, r6
 802841e:	2908      	cmp	r1, #8
 8028420:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8028424:	dc02      	bgt.n	802842c <_strtod_l+0x2ec>
 8028426:	4576      	cmp	r6, lr
 8028428:	bfa8      	it	ge
 802842a:	4676      	movge	r6, lr
 802842c:	f1bc 0f00 	cmp.w	ip, #0
 8028430:	d000      	beq.n	8028434 <_strtod_l+0x2f4>
 8028432:	4276      	negs	r6, r6
 8028434:	2d00      	cmp	r5, #0
 8028436:	d14f      	bne.n	80284d8 <_strtod_l+0x398>
 8028438:	9904      	ldr	r1, [sp, #16]
 802843a:	4301      	orrs	r1, r0
 802843c:	f47f aec2 	bne.w	80281c4 <_strtod_l+0x84>
 8028440:	2a00      	cmp	r2, #0
 8028442:	f47f aedb 	bne.w	80281fc <_strtod_l+0xbc>
 8028446:	2b69      	cmp	r3, #105	; 0x69
 8028448:	d027      	beq.n	802849a <_strtod_l+0x35a>
 802844a:	dc24      	bgt.n	8028496 <_strtod_l+0x356>
 802844c:	2b49      	cmp	r3, #73	; 0x49
 802844e:	d024      	beq.n	802849a <_strtod_l+0x35a>
 8028450:	2b4e      	cmp	r3, #78	; 0x4e
 8028452:	f47f aed3 	bne.w	80281fc <_strtod_l+0xbc>
 8028456:	499e      	ldr	r1, [pc, #632]	; (80286d0 <_strtod_l+0x590>)
 8028458:	a81d      	add	r0, sp, #116	; 0x74
 802845a:	f001 fdc1 	bl	8029fe0 <__match>
 802845e:	2800      	cmp	r0, #0
 8028460:	f43f aecc 	beq.w	80281fc <_strtod_l+0xbc>
 8028464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028466:	781b      	ldrb	r3, [r3, #0]
 8028468:	2b28      	cmp	r3, #40	; 0x28
 802846a:	d12d      	bne.n	80284c8 <_strtod_l+0x388>
 802846c:	4999      	ldr	r1, [pc, #612]	; (80286d4 <_strtod_l+0x594>)
 802846e:	aa20      	add	r2, sp, #128	; 0x80
 8028470:	a81d      	add	r0, sp, #116	; 0x74
 8028472:	f001 fdc9 	bl	802a008 <__hexnan>
 8028476:	2805      	cmp	r0, #5
 8028478:	d126      	bne.n	80284c8 <_strtod_l+0x388>
 802847a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802847c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8028480:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8028484:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8028488:	e69c      	b.n	80281c4 <_strtod_l+0x84>
 802848a:	210a      	movs	r1, #10
 802848c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8028490:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8028494:	e7b9      	b.n	802840a <_strtod_l+0x2ca>
 8028496:	2b6e      	cmp	r3, #110	; 0x6e
 8028498:	e7db      	b.n	8028452 <_strtod_l+0x312>
 802849a:	498f      	ldr	r1, [pc, #572]	; (80286d8 <_strtod_l+0x598>)
 802849c:	a81d      	add	r0, sp, #116	; 0x74
 802849e:	f001 fd9f 	bl	8029fe0 <__match>
 80284a2:	2800      	cmp	r0, #0
 80284a4:	f43f aeaa 	beq.w	80281fc <_strtod_l+0xbc>
 80284a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80284aa:	498c      	ldr	r1, [pc, #560]	; (80286dc <_strtod_l+0x59c>)
 80284ac:	3b01      	subs	r3, #1
 80284ae:	a81d      	add	r0, sp, #116	; 0x74
 80284b0:	931d      	str	r3, [sp, #116]	; 0x74
 80284b2:	f001 fd95 	bl	8029fe0 <__match>
 80284b6:	b910      	cbnz	r0, 80284be <_strtod_l+0x37e>
 80284b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80284ba:	3301      	adds	r3, #1
 80284bc:	931d      	str	r3, [sp, #116]	; 0x74
 80284be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80286ec <_strtod_l+0x5ac>
 80284c2:	f04f 0a00 	mov.w	sl, #0
 80284c6:	e67d      	b.n	80281c4 <_strtod_l+0x84>
 80284c8:	4885      	ldr	r0, [pc, #532]	; (80286e0 <_strtod_l+0x5a0>)
 80284ca:	f002 fd35 	bl	802af38 <nan>
 80284ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80284d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80284d6:	e675      	b.n	80281c4 <_strtod_l+0x84>
 80284d8:	9b07      	ldr	r3, [sp, #28]
 80284da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80284dc:	1af3      	subs	r3, r6, r3
 80284de:	2f00      	cmp	r7, #0
 80284e0:	bf08      	it	eq
 80284e2:	462f      	moveq	r7, r5
 80284e4:	2d10      	cmp	r5, #16
 80284e6:	9308      	str	r3, [sp, #32]
 80284e8:	46a8      	mov	r8, r5
 80284ea:	bfa8      	it	ge
 80284ec:	f04f 0810 	movge.w	r8, #16
 80284f0:	f7f8 f808 	bl	8020504 <__aeabi_ui2d>
 80284f4:	2d09      	cmp	r5, #9
 80284f6:	4682      	mov	sl, r0
 80284f8:	468b      	mov	fp, r1
 80284fa:	dd13      	ble.n	8028524 <_strtod_l+0x3e4>
 80284fc:	4b79      	ldr	r3, [pc, #484]	; (80286e4 <_strtod_l+0x5a4>)
 80284fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8028502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8028506:	f7f8 f877 	bl	80205f8 <__aeabi_dmul>
 802850a:	4682      	mov	sl, r0
 802850c:	4648      	mov	r0, r9
 802850e:	468b      	mov	fp, r1
 8028510:	f7f7 fff8 	bl	8020504 <__aeabi_ui2d>
 8028514:	4602      	mov	r2, r0
 8028516:	460b      	mov	r3, r1
 8028518:	4650      	mov	r0, sl
 802851a:	4659      	mov	r1, fp
 802851c:	f7f7 feb6 	bl	802028c <__adddf3>
 8028520:	4682      	mov	sl, r0
 8028522:	468b      	mov	fp, r1
 8028524:	2d0f      	cmp	r5, #15
 8028526:	dc38      	bgt.n	802859a <_strtod_l+0x45a>
 8028528:	9b08      	ldr	r3, [sp, #32]
 802852a:	2b00      	cmp	r3, #0
 802852c:	f43f ae4a 	beq.w	80281c4 <_strtod_l+0x84>
 8028530:	dd24      	ble.n	802857c <_strtod_l+0x43c>
 8028532:	2b16      	cmp	r3, #22
 8028534:	dc0b      	bgt.n	802854e <_strtod_l+0x40e>
 8028536:	4d6b      	ldr	r5, [pc, #428]	; (80286e4 <_strtod_l+0x5a4>)
 8028538:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 802853c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8028540:	4652      	mov	r2, sl
 8028542:	465b      	mov	r3, fp
 8028544:	f7f8 f858 	bl	80205f8 <__aeabi_dmul>
 8028548:	4682      	mov	sl, r0
 802854a:	468b      	mov	fp, r1
 802854c:	e63a      	b.n	80281c4 <_strtod_l+0x84>
 802854e:	9a08      	ldr	r2, [sp, #32]
 8028550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8028554:	4293      	cmp	r3, r2
 8028556:	db20      	blt.n	802859a <_strtod_l+0x45a>
 8028558:	4c62      	ldr	r4, [pc, #392]	; (80286e4 <_strtod_l+0x5a4>)
 802855a:	f1c5 050f 	rsb	r5, r5, #15
 802855e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8028562:	4652      	mov	r2, sl
 8028564:	465b      	mov	r3, fp
 8028566:	e9d1 0100 	ldrd	r0, r1, [r1]
 802856a:	f7f8 f845 	bl	80205f8 <__aeabi_dmul>
 802856e:	9b08      	ldr	r3, [sp, #32]
 8028570:	1b5d      	subs	r5, r3, r5
 8028572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8028576:	e9d4 2300 	ldrd	r2, r3, [r4]
 802857a:	e7e3      	b.n	8028544 <_strtod_l+0x404>
 802857c:	9b08      	ldr	r3, [sp, #32]
 802857e:	3316      	adds	r3, #22
 8028580:	db0b      	blt.n	802859a <_strtod_l+0x45a>
 8028582:	9b07      	ldr	r3, [sp, #28]
 8028584:	4a57      	ldr	r2, [pc, #348]	; (80286e4 <_strtod_l+0x5a4>)
 8028586:	1b9e      	subs	r6, r3, r6
 8028588:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802858c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8028590:	4650      	mov	r0, sl
 8028592:	4659      	mov	r1, fp
 8028594:	f7f8 f95a 	bl	802084c <__aeabi_ddiv>
 8028598:	e7d6      	b.n	8028548 <_strtod_l+0x408>
 802859a:	9b08      	ldr	r3, [sp, #32]
 802859c:	eba5 0808 	sub.w	r8, r5, r8
 80285a0:	4498      	add	r8, r3
 80285a2:	f1b8 0f00 	cmp.w	r8, #0
 80285a6:	dd71      	ble.n	802868c <_strtod_l+0x54c>
 80285a8:	f018 030f 	ands.w	r3, r8, #15
 80285ac:	d00a      	beq.n	80285c4 <_strtod_l+0x484>
 80285ae:	494d      	ldr	r1, [pc, #308]	; (80286e4 <_strtod_l+0x5a4>)
 80285b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80285b4:	4652      	mov	r2, sl
 80285b6:	465b      	mov	r3, fp
 80285b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80285bc:	f7f8 f81c 	bl	80205f8 <__aeabi_dmul>
 80285c0:	4682      	mov	sl, r0
 80285c2:	468b      	mov	fp, r1
 80285c4:	f038 080f 	bics.w	r8, r8, #15
 80285c8:	d04d      	beq.n	8028666 <_strtod_l+0x526>
 80285ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80285ce:	dd22      	ble.n	8028616 <_strtod_l+0x4d6>
 80285d0:	2500      	movs	r5, #0
 80285d2:	462e      	mov	r6, r5
 80285d4:	9509      	str	r5, [sp, #36]	; 0x24
 80285d6:	9507      	str	r5, [sp, #28]
 80285d8:	2322      	movs	r3, #34	; 0x22
 80285da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80286ec <_strtod_l+0x5ac>
 80285de:	6023      	str	r3, [r4, #0]
 80285e0:	f04f 0a00 	mov.w	sl, #0
 80285e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285e6:	2b00      	cmp	r3, #0
 80285e8:	f43f adec 	beq.w	80281c4 <_strtod_l+0x84>
 80285ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80285ee:	4620      	mov	r0, r4
 80285f0:	f001 fe12 	bl	802a218 <_Bfree>
 80285f4:	9907      	ldr	r1, [sp, #28]
 80285f6:	4620      	mov	r0, r4
 80285f8:	f001 fe0e 	bl	802a218 <_Bfree>
 80285fc:	4631      	mov	r1, r6
 80285fe:	4620      	mov	r0, r4
 8028600:	f001 fe0a 	bl	802a218 <_Bfree>
 8028604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028606:	4620      	mov	r0, r4
 8028608:	f001 fe06 	bl	802a218 <_Bfree>
 802860c:	4629      	mov	r1, r5
 802860e:	4620      	mov	r0, r4
 8028610:	f001 fe02 	bl	802a218 <_Bfree>
 8028614:	e5d6      	b.n	80281c4 <_strtod_l+0x84>
 8028616:	2300      	movs	r3, #0
 8028618:	ea4f 1828 	mov.w	r8, r8, asr #4
 802861c:	4650      	mov	r0, sl
 802861e:	4659      	mov	r1, fp
 8028620:	4699      	mov	r9, r3
 8028622:	f1b8 0f01 	cmp.w	r8, #1
 8028626:	dc21      	bgt.n	802866c <_strtod_l+0x52c>
 8028628:	b10b      	cbz	r3, 802862e <_strtod_l+0x4ee>
 802862a:	4682      	mov	sl, r0
 802862c:	468b      	mov	fp, r1
 802862e:	4b2e      	ldr	r3, [pc, #184]	; (80286e8 <_strtod_l+0x5a8>)
 8028630:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8028634:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8028638:	4652      	mov	r2, sl
 802863a:	465b      	mov	r3, fp
 802863c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8028640:	f7f7 ffda 	bl	80205f8 <__aeabi_dmul>
 8028644:	4b29      	ldr	r3, [pc, #164]	; (80286ec <_strtod_l+0x5ac>)
 8028646:	460a      	mov	r2, r1
 8028648:	400b      	ands	r3, r1
 802864a:	4929      	ldr	r1, [pc, #164]	; (80286f0 <_strtod_l+0x5b0>)
 802864c:	428b      	cmp	r3, r1
 802864e:	4682      	mov	sl, r0
 8028650:	d8be      	bhi.n	80285d0 <_strtod_l+0x490>
 8028652:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8028656:	428b      	cmp	r3, r1
 8028658:	bf86      	itte	hi
 802865a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80286f4 <_strtod_l+0x5b4>
 802865e:	f04f 3aff 	movhi.w	sl, #4294967295
 8028662:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8028666:	2300      	movs	r3, #0
 8028668:	9304      	str	r3, [sp, #16]
 802866a:	e081      	b.n	8028770 <_strtod_l+0x630>
 802866c:	f018 0f01 	tst.w	r8, #1
 8028670:	d007      	beq.n	8028682 <_strtod_l+0x542>
 8028672:	4b1d      	ldr	r3, [pc, #116]	; (80286e8 <_strtod_l+0x5a8>)
 8028674:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8028678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802867c:	f7f7 ffbc 	bl	80205f8 <__aeabi_dmul>
 8028680:	2301      	movs	r3, #1
 8028682:	f109 0901 	add.w	r9, r9, #1
 8028686:	ea4f 0868 	mov.w	r8, r8, asr #1
 802868a:	e7ca      	b.n	8028622 <_strtod_l+0x4e2>
 802868c:	d0eb      	beq.n	8028666 <_strtod_l+0x526>
 802868e:	f1c8 0800 	rsb	r8, r8, #0
 8028692:	f018 020f 	ands.w	r2, r8, #15
 8028696:	d00a      	beq.n	80286ae <_strtod_l+0x56e>
 8028698:	4b12      	ldr	r3, [pc, #72]	; (80286e4 <_strtod_l+0x5a4>)
 802869a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802869e:	4650      	mov	r0, sl
 80286a0:	4659      	mov	r1, fp
 80286a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80286a6:	f7f8 f8d1 	bl	802084c <__aeabi_ddiv>
 80286aa:	4682      	mov	sl, r0
 80286ac:	468b      	mov	fp, r1
 80286ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80286b2:	d0d8      	beq.n	8028666 <_strtod_l+0x526>
 80286b4:	f1b8 0f1f 	cmp.w	r8, #31
 80286b8:	dd1e      	ble.n	80286f8 <_strtod_l+0x5b8>
 80286ba:	2500      	movs	r5, #0
 80286bc:	462e      	mov	r6, r5
 80286be:	9509      	str	r5, [sp, #36]	; 0x24
 80286c0:	9507      	str	r5, [sp, #28]
 80286c2:	2322      	movs	r3, #34	; 0x22
 80286c4:	f04f 0a00 	mov.w	sl, #0
 80286c8:	f04f 0b00 	mov.w	fp, #0
 80286cc:	6023      	str	r3, [r4, #0]
 80286ce:	e789      	b.n	80285e4 <_strtod_l+0x4a4>
 80286d0:	0802bcf1 	.word	0x0802bcf1
 80286d4:	0802bd2c 	.word	0x0802bd2c
 80286d8:	0802bce9 	.word	0x0802bce9
 80286dc:	0802bd6b 	.word	0x0802bd6b
 80286e0:	0802c028 	.word	0x0802c028
 80286e4:	0802bf08 	.word	0x0802bf08
 80286e8:	0802bee0 	.word	0x0802bee0
 80286ec:	7ff00000 	.word	0x7ff00000
 80286f0:	7ca00000 	.word	0x7ca00000
 80286f4:	7fefffff 	.word	0x7fefffff
 80286f8:	f018 0310 	ands.w	r3, r8, #16
 80286fc:	bf18      	it	ne
 80286fe:	236a      	movne	r3, #106	; 0x6a
 8028700:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8028ab8 <_strtod_l+0x978>
 8028704:	9304      	str	r3, [sp, #16]
 8028706:	4650      	mov	r0, sl
 8028708:	4659      	mov	r1, fp
 802870a:	2300      	movs	r3, #0
 802870c:	f018 0f01 	tst.w	r8, #1
 8028710:	d004      	beq.n	802871c <_strtod_l+0x5dc>
 8028712:	e9d9 2300 	ldrd	r2, r3, [r9]
 8028716:	f7f7 ff6f 	bl	80205f8 <__aeabi_dmul>
 802871a:	2301      	movs	r3, #1
 802871c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8028720:	f109 0908 	add.w	r9, r9, #8
 8028724:	d1f2      	bne.n	802870c <_strtod_l+0x5cc>
 8028726:	b10b      	cbz	r3, 802872c <_strtod_l+0x5ec>
 8028728:	4682      	mov	sl, r0
 802872a:	468b      	mov	fp, r1
 802872c:	9b04      	ldr	r3, [sp, #16]
 802872e:	b1bb      	cbz	r3, 8028760 <_strtod_l+0x620>
 8028730:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8028734:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8028738:	2b00      	cmp	r3, #0
 802873a:	4659      	mov	r1, fp
 802873c:	dd10      	ble.n	8028760 <_strtod_l+0x620>
 802873e:	2b1f      	cmp	r3, #31
 8028740:	f340 8128 	ble.w	8028994 <_strtod_l+0x854>
 8028744:	2b34      	cmp	r3, #52	; 0x34
 8028746:	bfde      	ittt	le
 8028748:	3b20      	suble	r3, #32
 802874a:	f04f 32ff 	movle.w	r2, #4294967295
 802874e:	fa02 f303 	lslle.w	r3, r2, r3
 8028752:	f04f 0a00 	mov.w	sl, #0
 8028756:	bfcc      	ite	gt
 8028758:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802875c:	ea03 0b01 	andle.w	fp, r3, r1
 8028760:	2200      	movs	r2, #0
 8028762:	2300      	movs	r3, #0
 8028764:	4650      	mov	r0, sl
 8028766:	4659      	mov	r1, fp
 8028768:	f7f8 f9ae 	bl	8020ac8 <__aeabi_dcmpeq>
 802876c:	2800      	cmp	r0, #0
 802876e:	d1a4      	bne.n	80286ba <_strtod_l+0x57a>
 8028770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028772:	9300      	str	r3, [sp, #0]
 8028774:	990a      	ldr	r1, [sp, #40]	; 0x28
 8028776:	462b      	mov	r3, r5
 8028778:	463a      	mov	r2, r7
 802877a:	4620      	mov	r0, r4
 802877c:	f001 fdb8 	bl	802a2f0 <__s2b>
 8028780:	9009      	str	r0, [sp, #36]	; 0x24
 8028782:	2800      	cmp	r0, #0
 8028784:	f43f af24 	beq.w	80285d0 <_strtod_l+0x490>
 8028788:	9b07      	ldr	r3, [sp, #28]
 802878a:	1b9e      	subs	r6, r3, r6
 802878c:	9b08      	ldr	r3, [sp, #32]
 802878e:	2b00      	cmp	r3, #0
 8028790:	bfb4      	ite	lt
 8028792:	4633      	movlt	r3, r6
 8028794:	2300      	movge	r3, #0
 8028796:	9310      	str	r3, [sp, #64]	; 0x40
 8028798:	9b08      	ldr	r3, [sp, #32]
 802879a:	2500      	movs	r5, #0
 802879c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80287a0:	9318      	str	r3, [sp, #96]	; 0x60
 80287a2:	462e      	mov	r6, r5
 80287a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80287a6:	4620      	mov	r0, r4
 80287a8:	6859      	ldr	r1, [r3, #4]
 80287aa:	f001 fcf5 	bl	802a198 <_Balloc>
 80287ae:	9007      	str	r0, [sp, #28]
 80287b0:	2800      	cmp	r0, #0
 80287b2:	f43f af11 	beq.w	80285d8 <_strtod_l+0x498>
 80287b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80287b8:	691a      	ldr	r2, [r3, #16]
 80287ba:	3202      	adds	r2, #2
 80287bc:	f103 010c 	add.w	r1, r3, #12
 80287c0:	0092      	lsls	r2, r2, #2
 80287c2:	300c      	adds	r0, #12
 80287c4:	f001 fcda 	bl	802a17c <memcpy>
 80287c8:	ec4b ab10 	vmov	d0, sl, fp
 80287cc:	aa20      	add	r2, sp, #128	; 0x80
 80287ce:	a91f      	add	r1, sp, #124	; 0x7c
 80287d0:	4620      	mov	r0, r4
 80287d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80287d6:	f002 f8c7 	bl	802a968 <__d2b>
 80287da:	901e      	str	r0, [sp, #120]	; 0x78
 80287dc:	2800      	cmp	r0, #0
 80287de:	f43f aefb 	beq.w	80285d8 <_strtod_l+0x498>
 80287e2:	2101      	movs	r1, #1
 80287e4:	4620      	mov	r0, r4
 80287e6:	f001 fe1d 	bl	802a424 <__i2b>
 80287ea:	4606      	mov	r6, r0
 80287ec:	2800      	cmp	r0, #0
 80287ee:	f43f aef3 	beq.w	80285d8 <_strtod_l+0x498>
 80287f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80287f4:	9904      	ldr	r1, [sp, #16]
 80287f6:	2b00      	cmp	r3, #0
 80287f8:	bfab      	itete	ge
 80287fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80287fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80287fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8028800:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8028804:	bfac      	ite	ge
 8028806:	eb03 0902 	addge.w	r9, r3, r2
 802880a:	1ad7      	sublt	r7, r2, r3
 802880c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802880e:	eba3 0801 	sub.w	r8, r3, r1
 8028812:	4490      	add	r8, r2
 8028814:	4ba3      	ldr	r3, [pc, #652]	; (8028aa4 <_strtod_l+0x964>)
 8028816:	f108 38ff 	add.w	r8, r8, #4294967295
 802881a:	4598      	cmp	r8, r3
 802881c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8028820:	f280 80cc 	bge.w	80289bc <_strtod_l+0x87c>
 8028824:	eba3 0308 	sub.w	r3, r3, r8
 8028828:	2b1f      	cmp	r3, #31
 802882a:	eba2 0203 	sub.w	r2, r2, r3
 802882e:	f04f 0101 	mov.w	r1, #1
 8028832:	f300 80b6 	bgt.w	80289a2 <_strtod_l+0x862>
 8028836:	fa01 f303 	lsl.w	r3, r1, r3
 802883a:	9311      	str	r3, [sp, #68]	; 0x44
 802883c:	2300      	movs	r3, #0
 802883e:	930c      	str	r3, [sp, #48]	; 0x30
 8028840:	eb09 0802 	add.w	r8, r9, r2
 8028844:	9b04      	ldr	r3, [sp, #16]
 8028846:	45c1      	cmp	r9, r8
 8028848:	4417      	add	r7, r2
 802884a:	441f      	add	r7, r3
 802884c:	464b      	mov	r3, r9
 802884e:	bfa8      	it	ge
 8028850:	4643      	movge	r3, r8
 8028852:	42bb      	cmp	r3, r7
 8028854:	bfa8      	it	ge
 8028856:	463b      	movge	r3, r7
 8028858:	2b00      	cmp	r3, #0
 802885a:	bfc2      	ittt	gt
 802885c:	eba8 0803 	subgt.w	r8, r8, r3
 8028860:	1aff      	subgt	r7, r7, r3
 8028862:	eba9 0903 	subgt.w	r9, r9, r3
 8028866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028868:	2b00      	cmp	r3, #0
 802886a:	dd17      	ble.n	802889c <_strtod_l+0x75c>
 802886c:	4631      	mov	r1, r6
 802886e:	461a      	mov	r2, r3
 8028870:	4620      	mov	r0, r4
 8028872:	f001 fe93 	bl	802a59c <__pow5mult>
 8028876:	4606      	mov	r6, r0
 8028878:	2800      	cmp	r0, #0
 802887a:	f43f aead 	beq.w	80285d8 <_strtod_l+0x498>
 802887e:	4601      	mov	r1, r0
 8028880:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028882:	4620      	mov	r0, r4
 8028884:	f001 fde4 	bl	802a450 <__multiply>
 8028888:	900f      	str	r0, [sp, #60]	; 0x3c
 802888a:	2800      	cmp	r0, #0
 802888c:	f43f aea4 	beq.w	80285d8 <_strtod_l+0x498>
 8028890:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028892:	4620      	mov	r0, r4
 8028894:	f001 fcc0 	bl	802a218 <_Bfree>
 8028898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802889a:	931e      	str	r3, [sp, #120]	; 0x78
 802889c:	f1b8 0f00 	cmp.w	r8, #0
 80288a0:	f300 8091 	bgt.w	80289c6 <_strtod_l+0x886>
 80288a4:	9b08      	ldr	r3, [sp, #32]
 80288a6:	2b00      	cmp	r3, #0
 80288a8:	dd08      	ble.n	80288bc <_strtod_l+0x77c>
 80288aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80288ac:	9907      	ldr	r1, [sp, #28]
 80288ae:	4620      	mov	r0, r4
 80288b0:	f001 fe74 	bl	802a59c <__pow5mult>
 80288b4:	9007      	str	r0, [sp, #28]
 80288b6:	2800      	cmp	r0, #0
 80288b8:	f43f ae8e 	beq.w	80285d8 <_strtod_l+0x498>
 80288bc:	2f00      	cmp	r7, #0
 80288be:	dd08      	ble.n	80288d2 <_strtod_l+0x792>
 80288c0:	9907      	ldr	r1, [sp, #28]
 80288c2:	463a      	mov	r2, r7
 80288c4:	4620      	mov	r0, r4
 80288c6:	f001 fec3 	bl	802a650 <__lshift>
 80288ca:	9007      	str	r0, [sp, #28]
 80288cc:	2800      	cmp	r0, #0
 80288ce:	f43f ae83 	beq.w	80285d8 <_strtod_l+0x498>
 80288d2:	f1b9 0f00 	cmp.w	r9, #0
 80288d6:	dd08      	ble.n	80288ea <_strtod_l+0x7aa>
 80288d8:	4631      	mov	r1, r6
 80288da:	464a      	mov	r2, r9
 80288dc:	4620      	mov	r0, r4
 80288de:	f001 feb7 	bl	802a650 <__lshift>
 80288e2:	4606      	mov	r6, r0
 80288e4:	2800      	cmp	r0, #0
 80288e6:	f43f ae77 	beq.w	80285d8 <_strtod_l+0x498>
 80288ea:	9a07      	ldr	r2, [sp, #28]
 80288ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80288ee:	4620      	mov	r0, r4
 80288f0:	f001 ff36 	bl	802a760 <__mdiff>
 80288f4:	4605      	mov	r5, r0
 80288f6:	2800      	cmp	r0, #0
 80288f8:	f43f ae6e 	beq.w	80285d8 <_strtod_l+0x498>
 80288fc:	68c3      	ldr	r3, [r0, #12]
 80288fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8028900:	2300      	movs	r3, #0
 8028902:	60c3      	str	r3, [r0, #12]
 8028904:	4631      	mov	r1, r6
 8028906:	f001 ff0f 	bl	802a728 <__mcmp>
 802890a:	2800      	cmp	r0, #0
 802890c:	da65      	bge.n	80289da <_strtod_l+0x89a>
 802890e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028910:	ea53 030a 	orrs.w	r3, r3, sl
 8028914:	f040 8087 	bne.w	8028a26 <_strtod_l+0x8e6>
 8028918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802891c:	2b00      	cmp	r3, #0
 802891e:	f040 8082 	bne.w	8028a26 <_strtod_l+0x8e6>
 8028922:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8028926:	0d1b      	lsrs	r3, r3, #20
 8028928:	051b      	lsls	r3, r3, #20
 802892a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802892e:	d97a      	bls.n	8028a26 <_strtod_l+0x8e6>
 8028930:	696b      	ldr	r3, [r5, #20]
 8028932:	b913      	cbnz	r3, 802893a <_strtod_l+0x7fa>
 8028934:	692b      	ldr	r3, [r5, #16]
 8028936:	2b01      	cmp	r3, #1
 8028938:	dd75      	ble.n	8028a26 <_strtod_l+0x8e6>
 802893a:	4629      	mov	r1, r5
 802893c:	2201      	movs	r2, #1
 802893e:	4620      	mov	r0, r4
 8028940:	f001 fe86 	bl	802a650 <__lshift>
 8028944:	4631      	mov	r1, r6
 8028946:	4605      	mov	r5, r0
 8028948:	f001 feee 	bl	802a728 <__mcmp>
 802894c:	2800      	cmp	r0, #0
 802894e:	dd6a      	ble.n	8028a26 <_strtod_l+0x8e6>
 8028950:	9904      	ldr	r1, [sp, #16]
 8028952:	4a55      	ldr	r2, [pc, #340]	; (8028aa8 <_strtod_l+0x968>)
 8028954:	465b      	mov	r3, fp
 8028956:	2900      	cmp	r1, #0
 8028958:	f000 8085 	beq.w	8028a66 <_strtod_l+0x926>
 802895c:	ea02 010b 	and.w	r1, r2, fp
 8028960:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8028964:	dc7f      	bgt.n	8028a66 <_strtod_l+0x926>
 8028966:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802896a:	f77f aeaa 	ble.w	80286c2 <_strtod_l+0x582>
 802896e:	4a4f      	ldr	r2, [pc, #316]	; (8028aac <_strtod_l+0x96c>)
 8028970:	2300      	movs	r3, #0
 8028972:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8028976:	4650      	mov	r0, sl
 8028978:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802897c:	4659      	mov	r1, fp
 802897e:	f7f7 fe3b 	bl	80205f8 <__aeabi_dmul>
 8028982:	460b      	mov	r3, r1
 8028984:	4303      	orrs	r3, r0
 8028986:	bf08      	it	eq
 8028988:	2322      	moveq	r3, #34	; 0x22
 802898a:	4682      	mov	sl, r0
 802898c:	468b      	mov	fp, r1
 802898e:	bf08      	it	eq
 8028990:	6023      	streq	r3, [r4, #0]
 8028992:	e62b      	b.n	80285ec <_strtod_l+0x4ac>
 8028994:	f04f 32ff 	mov.w	r2, #4294967295
 8028998:	fa02 f303 	lsl.w	r3, r2, r3
 802899c:	ea03 0a0a 	and.w	sl, r3, sl
 80289a0:	e6de      	b.n	8028760 <_strtod_l+0x620>
 80289a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80289a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80289aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80289ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80289b2:	fa01 f308 	lsl.w	r3, r1, r8
 80289b6:	930c      	str	r3, [sp, #48]	; 0x30
 80289b8:	9111      	str	r1, [sp, #68]	; 0x44
 80289ba:	e741      	b.n	8028840 <_strtod_l+0x700>
 80289bc:	2300      	movs	r3, #0
 80289be:	930c      	str	r3, [sp, #48]	; 0x30
 80289c0:	2301      	movs	r3, #1
 80289c2:	9311      	str	r3, [sp, #68]	; 0x44
 80289c4:	e73c      	b.n	8028840 <_strtod_l+0x700>
 80289c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80289c8:	4642      	mov	r2, r8
 80289ca:	4620      	mov	r0, r4
 80289cc:	f001 fe40 	bl	802a650 <__lshift>
 80289d0:	901e      	str	r0, [sp, #120]	; 0x78
 80289d2:	2800      	cmp	r0, #0
 80289d4:	f47f af66 	bne.w	80288a4 <_strtod_l+0x764>
 80289d8:	e5fe      	b.n	80285d8 <_strtod_l+0x498>
 80289da:	465f      	mov	r7, fp
 80289dc:	d16e      	bne.n	8028abc <_strtod_l+0x97c>
 80289de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80289e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80289e4:	b342      	cbz	r2, 8028a38 <_strtod_l+0x8f8>
 80289e6:	4a32      	ldr	r2, [pc, #200]	; (8028ab0 <_strtod_l+0x970>)
 80289e8:	4293      	cmp	r3, r2
 80289ea:	d128      	bne.n	8028a3e <_strtod_l+0x8fe>
 80289ec:	9b04      	ldr	r3, [sp, #16]
 80289ee:	4650      	mov	r0, sl
 80289f0:	b1eb      	cbz	r3, 8028a2e <_strtod_l+0x8ee>
 80289f2:	4a2d      	ldr	r2, [pc, #180]	; (8028aa8 <_strtod_l+0x968>)
 80289f4:	403a      	ands	r2, r7
 80289f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80289fa:	f04f 31ff 	mov.w	r1, #4294967295
 80289fe:	d819      	bhi.n	8028a34 <_strtod_l+0x8f4>
 8028a00:	0d12      	lsrs	r2, r2, #20
 8028a02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8028a06:	fa01 f303 	lsl.w	r3, r1, r3
 8028a0a:	4298      	cmp	r0, r3
 8028a0c:	d117      	bne.n	8028a3e <_strtod_l+0x8fe>
 8028a0e:	4b29      	ldr	r3, [pc, #164]	; (8028ab4 <_strtod_l+0x974>)
 8028a10:	429f      	cmp	r7, r3
 8028a12:	d102      	bne.n	8028a1a <_strtod_l+0x8da>
 8028a14:	3001      	adds	r0, #1
 8028a16:	f43f addf 	beq.w	80285d8 <_strtod_l+0x498>
 8028a1a:	4b23      	ldr	r3, [pc, #140]	; (8028aa8 <_strtod_l+0x968>)
 8028a1c:	403b      	ands	r3, r7
 8028a1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8028a22:	f04f 0a00 	mov.w	sl, #0
 8028a26:	9b04      	ldr	r3, [sp, #16]
 8028a28:	2b00      	cmp	r3, #0
 8028a2a:	d1a0      	bne.n	802896e <_strtod_l+0x82e>
 8028a2c:	e5de      	b.n	80285ec <_strtod_l+0x4ac>
 8028a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8028a32:	e7ea      	b.n	8028a0a <_strtod_l+0x8ca>
 8028a34:	460b      	mov	r3, r1
 8028a36:	e7e8      	b.n	8028a0a <_strtod_l+0x8ca>
 8028a38:	ea53 030a 	orrs.w	r3, r3, sl
 8028a3c:	d088      	beq.n	8028950 <_strtod_l+0x810>
 8028a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a40:	b1db      	cbz	r3, 8028a7a <_strtod_l+0x93a>
 8028a42:	423b      	tst	r3, r7
 8028a44:	d0ef      	beq.n	8028a26 <_strtod_l+0x8e6>
 8028a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028a48:	9a04      	ldr	r2, [sp, #16]
 8028a4a:	4650      	mov	r0, sl
 8028a4c:	4659      	mov	r1, fp
 8028a4e:	b1c3      	cbz	r3, 8028a82 <_strtod_l+0x942>
 8028a50:	f7ff fb58 	bl	8028104 <sulp>
 8028a54:	4602      	mov	r2, r0
 8028a56:	460b      	mov	r3, r1
 8028a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8028a5c:	f7f7 fc16 	bl	802028c <__adddf3>
 8028a60:	4682      	mov	sl, r0
 8028a62:	468b      	mov	fp, r1
 8028a64:	e7df      	b.n	8028a26 <_strtod_l+0x8e6>
 8028a66:	4013      	ands	r3, r2
 8028a68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8028a6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8028a70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8028a74:	f04f 3aff 	mov.w	sl, #4294967295
 8028a78:	e7d5      	b.n	8028a26 <_strtod_l+0x8e6>
 8028a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028a7c:	ea13 0f0a 	tst.w	r3, sl
 8028a80:	e7e0      	b.n	8028a44 <_strtod_l+0x904>
 8028a82:	f7ff fb3f 	bl	8028104 <sulp>
 8028a86:	4602      	mov	r2, r0
 8028a88:	460b      	mov	r3, r1
 8028a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8028a8e:	f7f7 fbfb 	bl	8020288 <__aeabi_dsub>
 8028a92:	2200      	movs	r2, #0
 8028a94:	2300      	movs	r3, #0
 8028a96:	4682      	mov	sl, r0
 8028a98:	468b      	mov	fp, r1
 8028a9a:	f7f8 f815 	bl	8020ac8 <__aeabi_dcmpeq>
 8028a9e:	2800      	cmp	r0, #0
 8028aa0:	d0c1      	beq.n	8028a26 <_strtod_l+0x8e6>
 8028aa2:	e60e      	b.n	80286c2 <_strtod_l+0x582>
 8028aa4:	fffffc02 	.word	0xfffffc02
 8028aa8:	7ff00000 	.word	0x7ff00000
 8028aac:	39500000 	.word	0x39500000
 8028ab0:	000fffff 	.word	0x000fffff
 8028ab4:	7fefffff 	.word	0x7fefffff
 8028ab8:	0802bd40 	.word	0x0802bd40
 8028abc:	4631      	mov	r1, r6
 8028abe:	4628      	mov	r0, r5
 8028ac0:	f001 ffae 	bl	802aa20 <__ratio>
 8028ac4:	ec59 8b10 	vmov	r8, r9, d0
 8028ac8:	ee10 0a10 	vmov	r0, s0
 8028acc:	2200      	movs	r2, #0
 8028ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028ad2:	4649      	mov	r1, r9
 8028ad4:	f7f8 f80c 	bl	8020af0 <__aeabi_dcmple>
 8028ad8:	2800      	cmp	r0, #0
 8028ada:	d07c      	beq.n	8028bd6 <_strtod_l+0xa96>
 8028adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	d04c      	beq.n	8028b7c <_strtod_l+0xa3c>
 8028ae2:	4b95      	ldr	r3, [pc, #596]	; (8028d38 <_strtod_l+0xbf8>)
 8028ae4:	2200      	movs	r2, #0
 8028ae6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028aea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8028d38 <_strtod_l+0xbf8>
 8028aee:	f04f 0800 	mov.w	r8, #0
 8028af2:	4b92      	ldr	r3, [pc, #584]	; (8028d3c <_strtod_l+0xbfc>)
 8028af4:	403b      	ands	r3, r7
 8028af6:	9311      	str	r3, [sp, #68]	; 0x44
 8028af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028afa:	4b91      	ldr	r3, [pc, #580]	; (8028d40 <_strtod_l+0xc00>)
 8028afc:	429a      	cmp	r2, r3
 8028afe:	f040 80b2 	bne.w	8028c66 <_strtod_l+0xb26>
 8028b02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8028b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028b0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8028b0e:	ec4b ab10 	vmov	d0, sl, fp
 8028b12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8028b16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028b1a:	f001 fea9 	bl	802a870 <__ulp>
 8028b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028b22:	ec53 2b10 	vmov	r2, r3, d0
 8028b26:	f7f7 fd67 	bl	80205f8 <__aeabi_dmul>
 8028b2a:	4652      	mov	r2, sl
 8028b2c:	465b      	mov	r3, fp
 8028b2e:	f7f7 fbad 	bl	802028c <__adddf3>
 8028b32:	460b      	mov	r3, r1
 8028b34:	4981      	ldr	r1, [pc, #516]	; (8028d3c <_strtod_l+0xbfc>)
 8028b36:	4a83      	ldr	r2, [pc, #524]	; (8028d44 <_strtod_l+0xc04>)
 8028b38:	4019      	ands	r1, r3
 8028b3a:	4291      	cmp	r1, r2
 8028b3c:	4682      	mov	sl, r0
 8028b3e:	d95e      	bls.n	8028bfe <_strtod_l+0xabe>
 8028b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028b42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8028b46:	4293      	cmp	r3, r2
 8028b48:	d103      	bne.n	8028b52 <_strtod_l+0xa12>
 8028b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b4c:	3301      	adds	r3, #1
 8028b4e:	f43f ad43 	beq.w	80285d8 <_strtod_l+0x498>
 8028b52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8028d50 <_strtod_l+0xc10>
 8028b56:	f04f 3aff 	mov.w	sl, #4294967295
 8028b5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028b5c:	4620      	mov	r0, r4
 8028b5e:	f001 fb5b 	bl	802a218 <_Bfree>
 8028b62:	9907      	ldr	r1, [sp, #28]
 8028b64:	4620      	mov	r0, r4
 8028b66:	f001 fb57 	bl	802a218 <_Bfree>
 8028b6a:	4631      	mov	r1, r6
 8028b6c:	4620      	mov	r0, r4
 8028b6e:	f001 fb53 	bl	802a218 <_Bfree>
 8028b72:	4629      	mov	r1, r5
 8028b74:	4620      	mov	r0, r4
 8028b76:	f001 fb4f 	bl	802a218 <_Bfree>
 8028b7a:	e613      	b.n	80287a4 <_strtod_l+0x664>
 8028b7c:	f1ba 0f00 	cmp.w	sl, #0
 8028b80:	d11b      	bne.n	8028bba <_strtod_l+0xa7a>
 8028b82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028b86:	b9f3      	cbnz	r3, 8028bc6 <_strtod_l+0xa86>
 8028b88:	4b6b      	ldr	r3, [pc, #428]	; (8028d38 <_strtod_l+0xbf8>)
 8028b8a:	2200      	movs	r2, #0
 8028b8c:	4640      	mov	r0, r8
 8028b8e:	4649      	mov	r1, r9
 8028b90:	f7f7 ffa4 	bl	8020adc <__aeabi_dcmplt>
 8028b94:	b9d0      	cbnz	r0, 8028bcc <_strtod_l+0xa8c>
 8028b96:	4640      	mov	r0, r8
 8028b98:	4649      	mov	r1, r9
 8028b9a:	4b6b      	ldr	r3, [pc, #428]	; (8028d48 <_strtod_l+0xc08>)
 8028b9c:	2200      	movs	r2, #0
 8028b9e:	f7f7 fd2b 	bl	80205f8 <__aeabi_dmul>
 8028ba2:	4680      	mov	r8, r0
 8028ba4:	4689      	mov	r9, r1
 8028ba6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8028baa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8028bae:	931b      	str	r3, [sp, #108]	; 0x6c
 8028bb0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8028bb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028bb8:	e79b      	b.n	8028af2 <_strtod_l+0x9b2>
 8028bba:	f1ba 0f01 	cmp.w	sl, #1
 8028bbe:	d102      	bne.n	8028bc6 <_strtod_l+0xa86>
 8028bc0:	2f00      	cmp	r7, #0
 8028bc2:	f43f ad7e 	beq.w	80286c2 <_strtod_l+0x582>
 8028bc6:	4b61      	ldr	r3, [pc, #388]	; (8028d4c <_strtod_l+0xc0c>)
 8028bc8:	2200      	movs	r2, #0
 8028bca:	e78c      	b.n	8028ae6 <_strtod_l+0x9a6>
 8028bcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8028d48 <_strtod_l+0xc08>
 8028bd0:	f04f 0800 	mov.w	r8, #0
 8028bd4:	e7e7      	b.n	8028ba6 <_strtod_l+0xa66>
 8028bd6:	4b5c      	ldr	r3, [pc, #368]	; (8028d48 <_strtod_l+0xc08>)
 8028bd8:	4640      	mov	r0, r8
 8028bda:	4649      	mov	r1, r9
 8028bdc:	2200      	movs	r2, #0
 8028bde:	f7f7 fd0b 	bl	80205f8 <__aeabi_dmul>
 8028be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028be4:	4680      	mov	r8, r0
 8028be6:	4689      	mov	r9, r1
 8028be8:	b933      	cbnz	r3, 8028bf8 <_strtod_l+0xab8>
 8028bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028bee:	9012      	str	r0, [sp, #72]	; 0x48
 8028bf0:	9313      	str	r3, [sp, #76]	; 0x4c
 8028bf2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8028bf6:	e7dd      	b.n	8028bb4 <_strtod_l+0xa74>
 8028bf8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8028bfc:	e7f9      	b.n	8028bf2 <_strtod_l+0xab2>
 8028bfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8028c02:	9b04      	ldr	r3, [sp, #16]
 8028c04:	2b00      	cmp	r3, #0
 8028c06:	d1a8      	bne.n	8028b5a <_strtod_l+0xa1a>
 8028c08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8028c0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028c0e:	0d1b      	lsrs	r3, r3, #20
 8028c10:	051b      	lsls	r3, r3, #20
 8028c12:	429a      	cmp	r2, r3
 8028c14:	d1a1      	bne.n	8028b5a <_strtod_l+0xa1a>
 8028c16:	4640      	mov	r0, r8
 8028c18:	4649      	mov	r1, r9
 8028c1a:	f7f8 f84d 	bl	8020cb8 <__aeabi_d2lz>
 8028c1e:	f7f7 fcbd 	bl	802059c <__aeabi_l2d>
 8028c22:	4602      	mov	r2, r0
 8028c24:	460b      	mov	r3, r1
 8028c26:	4640      	mov	r0, r8
 8028c28:	4649      	mov	r1, r9
 8028c2a:	f7f7 fb2d 	bl	8020288 <__aeabi_dsub>
 8028c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028c34:	ea43 030a 	orr.w	r3, r3, sl
 8028c38:	4313      	orrs	r3, r2
 8028c3a:	4680      	mov	r8, r0
 8028c3c:	4689      	mov	r9, r1
 8028c3e:	d053      	beq.n	8028ce8 <_strtod_l+0xba8>
 8028c40:	a335      	add	r3, pc, #212	; (adr r3, 8028d18 <_strtod_l+0xbd8>)
 8028c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c46:	f7f7 ff49 	bl	8020adc <__aeabi_dcmplt>
 8028c4a:	2800      	cmp	r0, #0
 8028c4c:	f47f acce 	bne.w	80285ec <_strtod_l+0x4ac>
 8028c50:	a333      	add	r3, pc, #204	; (adr r3, 8028d20 <_strtod_l+0xbe0>)
 8028c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c56:	4640      	mov	r0, r8
 8028c58:	4649      	mov	r1, r9
 8028c5a:	f7f7 ff5d 	bl	8020b18 <__aeabi_dcmpgt>
 8028c5e:	2800      	cmp	r0, #0
 8028c60:	f43f af7b 	beq.w	8028b5a <_strtod_l+0xa1a>
 8028c64:	e4c2      	b.n	80285ec <_strtod_l+0x4ac>
 8028c66:	9b04      	ldr	r3, [sp, #16]
 8028c68:	b333      	cbz	r3, 8028cb8 <_strtod_l+0xb78>
 8028c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028c6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8028c70:	d822      	bhi.n	8028cb8 <_strtod_l+0xb78>
 8028c72:	a32d      	add	r3, pc, #180	; (adr r3, 8028d28 <_strtod_l+0xbe8>)
 8028c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c78:	4640      	mov	r0, r8
 8028c7a:	4649      	mov	r1, r9
 8028c7c:	f7f7 ff38 	bl	8020af0 <__aeabi_dcmple>
 8028c80:	b1a0      	cbz	r0, 8028cac <_strtod_l+0xb6c>
 8028c82:	4649      	mov	r1, r9
 8028c84:	4640      	mov	r0, r8
 8028c86:	f7f7 ff8f 	bl	8020ba8 <__aeabi_d2uiz>
 8028c8a:	2801      	cmp	r0, #1
 8028c8c:	bf38      	it	cc
 8028c8e:	2001      	movcc	r0, #1
 8028c90:	f7f7 fc38 	bl	8020504 <__aeabi_ui2d>
 8028c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028c96:	4680      	mov	r8, r0
 8028c98:	4689      	mov	r9, r1
 8028c9a:	bb13      	cbnz	r3, 8028ce2 <_strtod_l+0xba2>
 8028c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028ca0:	9014      	str	r0, [sp, #80]	; 0x50
 8028ca2:	9315      	str	r3, [sp, #84]	; 0x54
 8028ca4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8028ca8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8028cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028cb0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8028cb4:	1a9b      	subs	r3, r3, r2
 8028cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8028cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028cbc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028cc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028cc4:	f001 fdd4 	bl	802a870 <__ulp>
 8028cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028ccc:	ec53 2b10 	vmov	r2, r3, d0
 8028cd0:	f7f7 fc92 	bl	80205f8 <__aeabi_dmul>
 8028cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8028cd8:	f7f7 fad8 	bl	802028c <__adddf3>
 8028cdc:	4682      	mov	sl, r0
 8028cde:	468b      	mov	fp, r1
 8028ce0:	e78f      	b.n	8028c02 <_strtod_l+0xac2>
 8028ce2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8028ce6:	e7dd      	b.n	8028ca4 <_strtod_l+0xb64>
 8028ce8:	a311      	add	r3, pc, #68	; (adr r3, 8028d30 <_strtod_l+0xbf0>)
 8028cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028cee:	f7f7 fef5 	bl	8020adc <__aeabi_dcmplt>
 8028cf2:	e7b4      	b.n	8028c5e <_strtod_l+0xb1e>
 8028cf4:	2300      	movs	r3, #0
 8028cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8028cf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028cfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028cfc:	6013      	str	r3, [r2, #0]
 8028cfe:	f7ff ba65 	b.w	80281cc <_strtod_l+0x8c>
 8028d02:	2b65      	cmp	r3, #101	; 0x65
 8028d04:	f43f ab5d 	beq.w	80283c2 <_strtod_l+0x282>
 8028d08:	2b45      	cmp	r3, #69	; 0x45
 8028d0a:	f43f ab5a 	beq.w	80283c2 <_strtod_l+0x282>
 8028d0e:	2201      	movs	r2, #1
 8028d10:	f7ff bb92 	b.w	8028438 <_strtod_l+0x2f8>
 8028d14:	f3af 8000 	nop.w
 8028d18:	94a03595 	.word	0x94a03595
 8028d1c:	3fdfffff 	.word	0x3fdfffff
 8028d20:	35afe535 	.word	0x35afe535
 8028d24:	3fe00000 	.word	0x3fe00000
 8028d28:	ffc00000 	.word	0xffc00000
 8028d2c:	41dfffff 	.word	0x41dfffff
 8028d30:	94a03595 	.word	0x94a03595
 8028d34:	3fcfffff 	.word	0x3fcfffff
 8028d38:	3ff00000 	.word	0x3ff00000
 8028d3c:	7ff00000 	.word	0x7ff00000
 8028d40:	7fe00000 	.word	0x7fe00000
 8028d44:	7c9fffff 	.word	0x7c9fffff
 8028d48:	3fe00000 	.word	0x3fe00000
 8028d4c:	bff00000 	.word	0xbff00000
 8028d50:	7fefffff 	.word	0x7fefffff

08028d54 <strtod>:
 8028d54:	460a      	mov	r2, r1
 8028d56:	4601      	mov	r1, r0
 8028d58:	4802      	ldr	r0, [pc, #8]	; (8028d64 <strtod+0x10>)
 8028d5a:	4b03      	ldr	r3, [pc, #12]	; (8028d68 <strtod+0x14>)
 8028d5c:	6800      	ldr	r0, [r0, #0]
 8028d5e:	f7ff b9ef 	b.w	8028140 <_strtod_l>
 8028d62:	bf00      	nop
 8028d64:	20000470 	.word	0x20000470
 8028d68:	200004d8 	.word	0x200004d8

08028d6c <quorem>:
 8028d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d70:	6903      	ldr	r3, [r0, #16]
 8028d72:	690c      	ldr	r4, [r1, #16]
 8028d74:	42a3      	cmp	r3, r4
 8028d76:	4607      	mov	r7, r0
 8028d78:	f2c0 8081 	blt.w	8028e7e <quorem+0x112>
 8028d7c:	3c01      	subs	r4, #1
 8028d7e:	f101 0814 	add.w	r8, r1, #20
 8028d82:	f100 0514 	add.w	r5, r0, #20
 8028d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028d8a:	9301      	str	r3, [sp, #4]
 8028d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8028d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028d94:	3301      	adds	r3, #1
 8028d96:	429a      	cmp	r2, r3
 8028d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8028d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8028da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8028da4:	d331      	bcc.n	8028e0a <quorem+0x9e>
 8028da6:	f04f 0e00 	mov.w	lr, #0
 8028daa:	4640      	mov	r0, r8
 8028dac:	46ac      	mov	ip, r5
 8028dae:	46f2      	mov	sl, lr
 8028db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8028db4:	b293      	uxth	r3, r2
 8028db6:	fb06 e303 	mla	r3, r6, r3, lr
 8028dba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028dbe:	b29b      	uxth	r3, r3
 8028dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8028dc4:	0c12      	lsrs	r2, r2, #16
 8028dc6:	f8dc a000 	ldr.w	sl, [ip]
 8028dca:	fb06 e202 	mla	r2, r6, r2, lr
 8028dce:	fa13 f38a 	uxtah	r3, r3, sl
 8028dd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8028dd6:	fa1f fa82 	uxth.w	sl, r2
 8028dda:	f8dc 2000 	ldr.w	r2, [ip]
 8028dde:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028de6:	b29b      	uxth	r3, r3
 8028de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028dec:	4581      	cmp	r9, r0
 8028dee:	f84c 3b04 	str.w	r3, [ip], #4
 8028df2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8028df6:	d2db      	bcs.n	8028db0 <quorem+0x44>
 8028df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8028dfc:	b92b      	cbnz	r3, 8028e0a <quorem+0x9e>
 8028dfe:	9b01      	ldr	r3, [sp, #4]
 8028e00:	3b04      	subs	r3, #4
 8028e02:	429d      	cmp	r5, r3
 8028e04:	461a      	mov	r2, r3
 8028e06:	d32e      	bcc.n	8028e66 <quorem+0xfa>
 8028e08:	613c      	str	r4, [r7, #16]
 8028e0a:	4638      	mov	r0, r7
 8028e0c:	f001 fc8c 	bl	802a728 <__mcmp>
 8028e10:	2800      	cmp	r0, #0
 8028e12:	db24      	blt.n	8028e5e <quorem+0xf2>
 8028e14:	3601      	adds	r6, #1
 8028e16:	4628      	mov	r0, r5
 8028e18:	f04f 0c00 	mov.w	ip, #0
 8028e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8028e20:	f8d0 e000 	ldr.w	lr, [r0]
 8028e24:	b293      	uxth	r3, r2
 8028e26:	ebac 0303 	sub.w	r3, ip, r3
 8028e2a:	0c12      	lsrs	r2, r2, #16
 8028e2c:	fa13 f38e 	uxtah	r3, r3, lr
 8028e30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028e38:	b29b      	uxth	r3, r3
 8028e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028e3e:	45c1      	cmp	r9, r8
 8028e40:	f840 3b04 	str.w	r3, [r0], #4
 8028e44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8028e48:	d2e8      	bcs.n	8028e1c <quorem+0xb0>
 8028e4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028e52:	b922      	cbnz	r2, 8028e5e <quorem+0xf2>
 8028e54:	3b04      	subs	r3, #4
 8028e56:	429d      	cmp	r5, r3
 8028e58:	461a      	mov	r2, r3
 8028e5a:	d30a      	bcc.n	8028e72 <quorem+0x106>
 8028e5c:	613c      	str	r4, [r7, #16]
 8028e5e:	4630      	mov	r0, r6
 8028e60:	b003      	add	sp, #12
 8028e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e66:	6812      	ldr	r2, [r2, #0]
 8028e68:	3b04      	subs	r3, #4
 8028e6a:	2a00      	cmp	r2, #0
 8028e6c:	d1cc      	bne.n	8028e08 <quorem+0x9c>
 8028e6e:	3c01      	subs	r4, #1
 8028e70:	e7c7      	b.n	8028e02 <quorem+0x96>
 8028e72:	6812      	ldr	r2, [r2, #0]
 8028e74:	3b04      	subs	r3, #4
 8028e76:	2a00      	cmp	r2, #0
 8028e78:	d1f0      	bne.n	8028e5c <quorem+0xf0>
 8028e7a:	3c01      	subs	r4, #1
 8028e7c:	e7eb      	b.n	8028e56 <quorem+0xea>
 8028e7e:	2000      	movs	r0, #0
 8028e80:	e7ee      	b.n	8028e60 <quorem+0xf4>
 8028e82:	0000      	movs	r0, r0
 8028e84:	0000      	movs	r0, r0
	...

08028e88 <_dtoa_r>:
 8028e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e8c:	ed2d 8b02 	vpush	{d8}
 8028e90:	ec57 6b10 	vmov	r6, r7, d0
 8028e94:	b095      	sub	sp, #84	; 0x54
 8028e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8028e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8028e9c:	9105      	str	r1, [sp, #20]
 8028e9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8028ea2:	4604      	mov	r4, r0
 8028ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8028ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8028ea8:	b975      	cbnz	r5, 8028ec8 <_dtoa_r+0x40>
 8028eaa:	2010      	movs	r0, #16
 8028eac:	f001 f94c 	bl	802a148 <malloc>
 8028eb0:	4602      	mov	r2, r0
 8028eb2:	6260      	str	r0, [r4, #36]	; 0x24
 8028eb4:	b920      	cbnz	r0, 8028ec0 <_dtoa_r+0x38>
 8028eb6:	4bb2      	ldr	r3, [pc, #712]	; (8029180 <_dtoa_r+0x2f8>)
 8028eb8:	21ea      	movs	r1, #234	; 0xea
 8028eba:	48b2      	ldr	r0, [pc, #712]	; (8029184 <_dtoa_r+0x2fc>)
 8028ebc:	f002 f862 	bl	802af84 <__assert_func>
 8028ec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028ec4:	6005      	str	r5, [r0, #0]
 8028ec6:	60c5      	str	r5, [r0, #12]
 8028ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028eca:	6819      	ldr	r1, [r3, #0]
 8028ecc:	b151      	cbz	r1, 8028ee4 <_dtoa_r+0x5c>
 8028ece:	685a      	ldr	r2, [r3, #4]
 8028ed0:	604a      	str	r2, [r1, #4]
 8028ed2:	2301      	movs	r3, #1
 8028ed4:	4093      	lsls	r3, r2
 8028ed6:	608b      	str	r3, [r1, #8]
 8028ed8:	4620      	mov	r0, r4
 8028eda:	f001 f99d 	bl	802a218 <_Bfree>
 8028ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028ee0:	2200      	movs	r2, #0
 8028ee2:	601a      	str	r2, [r3, #0]
 8028ee4:	1e3b      	subs	r3, r7, #0
 8028ee6:	bfb9      	ittee	lt
 8028ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028eec:	9303      	strlt	r3, [sp, #12]
 8028eee:	2300      	movge	r3, #0
 8028ef0:	f8c8 3000 	strge.w	r3, [r8]
 8028ef4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8028ef8:	4ba3      	ldr	r3, [pc, #652]	; (8029188 <_dtoa_r+0x300>)
 8028efa:	bfbc      	itt	lt
 8028efc:	2201      	movlt	r2, #1
 8028efe:	f8c8 2000 	strlt.w	r2, [r8]
 8028f02:	ea33 0309 	bics.w	r3, r3, r9
 8028f06:	d11b      	bne.n	8028f40 <_dtoa_r+0xb8>
 8028f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8028f0e:	6013      	str	r3, [r2, #0]
 8028f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028f14:	4333      	orrs	r3, r6
 8028f16:	f000 857a 	beq.w	8029a0e <_dtoa_r+0xb86>
 8028f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028f1c:	b963      	cbnz	r3, 8028f38 <_dtoa_r+0xb0>
 8028f1e:	4b9b      	ldr	r3, [pc, #620]	; (802918c <_dtoa_r+0x304>)
 8028f20:	e024      	b.n	8028f6c <_dtoa_r+0xe4>
 8028f22:	4b9b      	ldr	r3, [pc, #620]	; (8029190 <_dtoa_r+0x308>)
 8028f24:	9300      	str	r3, [sp, #0]
 8028f26:	3308      	adds	r3, #8
 8028f28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028f2a:	6013      	str	r3, [r2, #0]
 8028f2c:	9800      	ldr	r0, [sp, #0]
 8028f2e:	b015      	add	sp, #84	; 0x54
 8028f30:	ecbd 8b02 	vpop	{d8}
 8028f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f38:	4b94      	ldr	r3, [pc, #592]	; (802918c <_dtoa_r+0x304>)
 8028f3a:	9300      	str	r3, [sp, #0]
 8028f3c:	3303      	adds	r3, #3
 8028f3e:	e7f3      	b.n	8028f28 <_dtoa_r+0xa0>
 8028f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028f44:	2200      	movs	r2, #0
 8028f46:	ec51 0b17 	vmov	r0, r1, d7
 8028f4a:	2300      	movs	r3, #0
 8028f4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8028f50:	f7f7 fdba 	bl	8020ac8 <__aeabi_dcmpeq>
 8028f54:	4680      	mov	r8, r0
 8028f56:	b158      	cbz	r0, 8028f70 <_dtoa_r+0xe8>
 8028f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028f5a:	2301      	movs	r3, #1
 8028f5c:	6013      	str	r3, [r2, #0]
 8028f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	f000 8551 	beq.w	8029a08 <_dtoa_r+0xb80>
 8028f66:	488b      	ldr	r0, [pc, #556]	; (8029194 <_dtoa_r+0x30c>)
 8028f68:	6018      	str	r0, [r3, #0]
 8028f6a:	1e43      	subs	r3, r0, #1
 8028f6c:	9300      	str	r3, [sp, #0]
 8028f6e:	e7dd      	b.n	8028f2c <_dtoa_r+0xa4>
 8028f70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028f74:	aa12      	add	r2, sp, #72	; 0x48
 8028f76:	a913      	add	r1, sp, #76	; 0x4c
 8028f78:	4620      	mov	r0, r4
 8028f7a:	f001 fcf5 	bl	802a968 <__d2b>
 8028f7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8028f82:	4683      	mov	fp, r0
 8028f84:	2d00      	cmp	r5, #0
 8028f86:	d07c      	beq.n	8029082 <_dtoa_r+0x1fa>
 8028f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028f8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8028f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8028f92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8028f96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8028f9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8028f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8028fa2:	4b7d      	ldr	r3, [pc, #500]	; (8029198 <_dtoa_r+0x310>)
 8028fa4:	2200      	movs	r2, #0
 8028fa6:	4630      	mov	r0, r6
 8028fa8:	4639      	mov	r1, r7
 8028faa:	f7f7 f96d 	bl	8020288 <__aeabi_dsub>
 8028fae:	a36e      	add	r3, pc, #440	; (adr r3, 8029168 <_dtoa_r+0x2e0>)
 8028fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fb4:	f7f7 fb20 	bl	80205f8 <__aeabi_dmul>
 8028fb8:	a36d      	add	r3, pc, #436	; (adr r3, 8029170 <_dtoa_r+0x2e8>)
 8028fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fbe:	f7f7 f965 	bl	802028c <__adddf3>
 8028fc2:	4606      	mov	r6, r0
 8028fc4:	4628      	mov	r0, r5
 8028fc6:	460f      	mov	r7, r1
 8028fc8:	f7f7 faac 	bl	8020524 <__aeabi_i2d>
 8028fcc:	a36a      	add	r3, pc, #424	; (adr r3, 8029178 <_dtoa_r+0x2f0>)
 8028fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fd2:	f7f7 fb11 	bl	80205f8 <__aeabi_dmul>
 8028fd6:	4602      	mov	r2, r0
 8028fd8:	460b      	mov	r3, r1
 8028fda:	4630      	mov	r0, r6
 8028fdc:	4639      	mov	r1, r7
 8028fde:	f7f7 f955 	bl	802028c <__adddf3>
 8028fe2:	4606      	mov	r6, r0
 8028fe4:	460f      	mov	r7, r1
 8028fe6:	f7f7 fdb7 	bl	8020b58 <__aeabi_d2iz>
 8028fea:	2200      	movs	r2, #0
 8028fec:	4682      	mov	sl, r0
 8028fee:	2300      	movs	r3, #0
 8028ff0:	4630      	mov	r0, r6
 8028ff2:	4639      	mov	r1, r7
 8028ff4:	f7f7 fd72 	bl	8020adc <__aeabi_dcmplt>
 8028ff8:	b148      	cbz	r0, 802900e <_dtoa_r+0x186>
 8028ffa:	4650      	mov	r0, sl
 8028ffc:	f7f7 fa92 	bl	8020524 <__aeabi_i2d>
 8029000:	4632      	mov	r2, r6
 8029002:	463b      	mov	r3, r7
 8029004:	f7f7 fd60 	bl	8020ac8 <__aeabi_dcmpeq>
 8029008:	b908      	cbnz	r0, 802900e <_dtoa_r+0x186>
 802900a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802900e:	f1ba 0f16 	cmp.w	sl, #22
 8029012:	d854      	bhi.n	80290be <_dtoa_r+0x236>
 8029014:	4b61      	ldr	r3, [pc, #388]	; (802919c <_dtoa_r+0x314>)
 8029016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802901e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8029022:	f7f7 fd5b 	bl	8020adc <__aeabi_dcmplt>
 8029026:	2800      	cmp	r0, #0
 8029028:	d04b      	beq.n	80290c2 <_dtoa_r+0x23a>
 802902a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802902e:	2300      	movs	r3, #0
 8029030:	930e      	str	r3, [sp, #56]	; 0x38
 8029032:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8029034:	1b5d      	subs	r5, r3, r5
 8029036:	1e6b      	subs	r3, r5, #1
 8029038:	9304      	str	r3, [sp, #16]
 802903a:	bf43      	ittte	mi
 802903c:	2300      	movmi	r3, #0
 802903e:	f1c5 0801 	rsbmi	r8, r5, #1
 8029042:	9304      	strmi	r3, [sp, #16]
 8029044:	f04f 0800 	movpl.w	r8, #0
 8029048:	f1ba 0f00 	cmp.w	sl, #0
 802904c:	db3b      	blt.n	80290c6 <_dtoa_r+0x23e>
 802904e:	9b04      	ldr	r3, [sp, #16]
 8029050:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8029054:	4453      	add	r3, sl
 8029056:	9304      	str	r3, [sp, #16]
 8029058:	2300      	movs	r3, #0
 802905a:	9306      	str	r3, [sp, #24]
 802905c:	9b05      	ldr	r3, [sp, #20]
 802905e:	2b09      	cmp	r3, #9
 8029060:	d869      	bhi.n	8029136 <_dtoa_r+0x2ae>
 8029062:	2b05      	cmp	r3, #5
 8029064:	bfc4      	itt	gt
 8029066:	3b04      	subgt	r3, #4
 8029068:	9305      	strgt	r3, [sp, #20]
 802906a:	9b05      	ldr	r3, [sp, #20]
 802906c:	f1a3 0302 	sub.w	r3, r3, #2
 8029070:	bfcc      	ite	gt
 8029072:	2500      	movgt	r5, #0
 8029074:	2501      	movle	r5, #1
 8029076:	2b03      	cmp	r3, #3
 8029078:	d869      	bhi.n	802914e <_dtoa_r+0x2c6>
 802907a:	e8df f003 	tbb	[pc, r3]
 802907e:	4e2c      	.short	0x4e2c
 8029080:	5a4c      	.short	0x5a4c
 8029082:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8029086:	441d      	add	r5, r3
 8029088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802908c:	2b20      	cmp	r3, #32
 802908e:	bfc1      	itttt	gt
 8029090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8029094:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8029098:	fa09 f303 	lslgt.w	r3, r9, r3
 802909c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80290a0:	bfda      	itte	le
 80290a2:	f1c3 0320 	rsble	r3, r3, #32
 80290a6:	fa06 f003 	lslle.w	r0, r6, r3
 80290aa:	4318      	orrgt	r0, r3
 80290ac:	f7f7 fa2a 	bl	8020504 <__aeabi_ui2d>
 80290b0:	2301      	movs	r3, #1
 80290b2:	4606      	mov	r6, r0
 80290b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80290b8:	3d01      	subs	r5, #1
 80290ba:	9310      	str	r3, [sp, #64]	; 0x40
 80290bc:	e771      	b.n	8028fa2 <_dtoa_r+0x11a>
 80290be:	2301      	movs	r3, #1
 80290c0:	e7b6      	b.n	8029030 <_dtoa_r+0x1a8>
 80290c2:	900e      	str	r0, [sp, #56]	; 0x38
 80290c4:	e7b5      	b.n	8029032 <_dtoa_r+0x1aa>
 80290c6:	f1ca 0300 	rsb	r3, sl, #0
 80290ca:	9306      	str	r3, [sp, #24]
 80290cc:	2300      	movs	r3, #0
 80290ce:	eba8 080a 	sub.w	r8, r8, sl
 80290d2:	930d      	str	r3, [sp, #52]	; 0x34
 80290d4:	e7c2      	b.n	802905c <_dtoa_r+0x1d4>
 80290d6:	2300      	movs	r3, #0
 80290d8:	9308      	str	r3, [sp, #32]
 80290da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80290dc:	2b00      	cmp	r3, #0
 80290de:	dc39      	bgt.n	8029154 <_dtoa_r+0x2cc>
 80290e0:	f04f 0901 	mov.w	r9, #1
 80290e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80290e8:	464b      	mov	r3, r9
 80290ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80290ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80290f0:	2200      	movs	r2, #0
 80290f2:	6042      	str	r2, [r0, #4]
 80290f4:	2204      	movs	r2, #4
 80290f6:	f102 0614 	add.w	r6, r2, #20
 80290fa:	429e      	cmp	r6, r3
 80290fc:	6841      	ldr	r1, [r0, #4]
 80290fe:	d92f      	bls.n	8029160 <_dtoa_r+0x2d8>
 8029100:	4620      	mov	r0, r4
 8029102:	f001 f849 	bl	802a198 <_Balloc>
 8029106:	9000      	str	r0, [sp, #0]
 8029108:	2800      	cmp	r0, #0
 802910a:	d14b      	bne.n	80291a4 <_dtoa_r+0x31c>
 802910c:	4b24      	ldr	r3, [pc, #144]	; (80291a0 <_dtoa_r+0x318>)
 802910e:	4602      	mov	r2, r0
 8029110:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8029114:	e6d1      	b.n	8028eba <_dtoa_r+0x32>
 8029116:	2301      	movs	r3, #1
 8029118:	e7de      	b.n	80290d8 <_dtoa_r+0x250>
 802911a:	2300      	movs	r3, #0
 802911c:	9308      	str	r3, [sp, #32]
 802911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029120:	eb0a 0903 	add.w	r9, sl, r3
 8029124:	f109 0301 	add.w	r3, r9, #1
 8029128:	2b01      	cmp	r3, #1
 802912a:	9301      	str	r3, [sp, #4]
 802912c:	bfb8      	it	lt
 802912e:	2301      	movlt	r3, #1
 8029130:	e7dd      	b.n	80290ee <_dtoa_r+0x266>
 8029132:	2301      	movs	r3, #1
 8029134:	e7f2      	b.n	802911c <_dtoa_r+0x294>
 8029136:	2501      	movs	r5, #1
 8029138:	2300      	movs	r3, #0
 802913a:	9305      	str	r3, [sp, #20]
 802913c:	9508      	str	r5, [sp, #32]
 802913e:	f04f 39ff 	mov.w	r9, #4294967295
 8029142:	2200      	movs	r2, #0
 8029144:	f8cd 9004 	str.w	r9, [sp, #4]
 8029148:	2312      	movs	r3, #18
 802914a:	9209      	str	r2, [sp, #36]	; 0x24
 802914c:	e7cf      	b.n	80290ee <_dtoa_r+0x266>
 802914e:	2301      	movs	r3, #1
 8029150:	9308      	str	r3, [sp, #32]
 8029152:	e7f4      	b.n	802913e <_dtoa_r+0x2b6>
 8029154:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8029158:	f8cd 9004 	str.w	r9, [sp, #4]
 802915c:	464b      	mov	r3, r9
 802915e:	e7c6      	b.n	80290ee <_dtoa_r+0x266>
 8029160:	3101      	adds	r1, #1
 8029162:	6041      	str	r1, [r0, #4]
 8029164:	0052      	lsls	r2, r2, #1
 8029166:	e7c6      	b.n	80290f6 <_dtoa_r+0x26e>
 8029168:	636f4361 	.word	0x636f4361
 802916c:	3fd287a7 	.word	0x3fd287a7
 8029170:	8b60c8b3 	.word	0x8b60c8b3
 8029174:	3fc68a28 	.word	0x3fc68a28
 8029178:	509f79fb 	.word	0x509f79fb
 802917c:	3fd34413 	.word	0x3fd34413
 8029180:	0802bd75 	.word	0x0802bd75
 8029184:	0802bd8c 	.word	0x0802bd8c
 8029188:	7ff00000 	.word	0x7ff00000
 802918c:	0802bd71 	.word	0x0802bd71
 8029190:	0802bd68 	.word	0x0802bd68
 8029194:	0802bcf5 	.word	0x0802bcf5
 8029198:	3ff80000 	.word	0x3ff80000
 802919c:	0802bf08 	.word	0x0802bf08
 80291a0:	0802bdeb 	.word	0x0802bdeb
 80291a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80291a6:	9a00      	ldr	r2, [sp, #0]
 80291a8:	601a      	str	r2, [r3, #0]
 80291aa:	9b01      	ldr	r3, [sp, #4]
 80291ac:	2b0e      	cmp	r3, #14
 80291ae:	f200 80ad 	bhi.w	802930c <_dtoa_r+0x484>
 80291b2:	2d00      	cmp	r5, #0
 80291b4:	f000 80aa 	beq.w	802930c <_dtoa_r+0x484>
 80291b8:	f1ba 0f00 	cmp.w	sl, #0
 80291bc:	dd36      	ble.n	802922c <_dtoa_r+0x3a4>
 80291be:	4ac3      	ldr	r2, [pc, #780]	; (80294cc <_dtoa_r+0x644>)
 80291c0:	f00a 030f 	and.w	r3, sl, #15
 80291c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80291c8:	ed93 7b00 	vldr	d7, [r3]
 80291cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80291d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80291d4:	eeb0 8a47 	vmov.f32	s16, s14
 80291d8:	eef0 8a67 	vmov.f32	s17, s15
 80291dc:	d016      	beq.n	802920c <_dtoa_r+0x384>
 80291de:	4bbc      	ldr	r3, [pc, #752]	; (80294d0 <_dtoa_r+0x648>)
 80291e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80291e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80291e8:	f7f7 fb30 	bl	802084c <__aeabi_ddiv>
 80291ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80291f0:	f007 070f 	and.w	r7, r7, #15
 80291f4:	2503      	movs	r5, #3
 80291f6:	4eb6      	ldr	r6, [pc, #728]	; (80294d0 <_dtoa_r+0x648>)
 80291f8:	b957      	cbnz	r7, 8029210 <_dtoa_r+0x388>
 80291fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80291fe:	ec53 2b18 	vmov	r2, r3, d8
 8029202:	f7f7 fb23 	bl	802084c <__aeabi_ddiv>
 8029206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802920a:	e029      	b.n	8029260 <_dtoa_r+0x3d8>
 802920c:	2502      	movs	r5, #2
 802920e:	e7f2      	b.n	80291f6 <_dtoa_r+0x36e>
 8029210:	07f9      	lsls	r1, r7, #31
 8029212:	d508      	bpl.n	8029226 <_dtoa_r+0x39e>
 8029214:	ec51 0b18 	vmov	r0, r1, d8
 8029218:	e9d6 2300 	ldrd	r2, r3, [r6]
 802921c:	f7f7 f9ec 	bl	80205f8 <__aeabi_dmul>
 8029220:	ec41 0b18 	vmov	d8, r0, r1
 8029224:	3501      	adds	r5, #1
 8029226:	107f      	asrs	r7, r7, #1
 8029228:	3608      	adds	r6, #8
 802922a:	e7e5      	b.n	80291f8 <_dtoa_r+0x370>
 802922c:	f000 80a6 	beq.w	802937c <_dtoa_r+0x4f4>
 8029230:	f1ca 0600 	rsb	r6, sl, #0
 8029234:	4ba5      	ldr	r3, [pc, #660]	; (80294cc <_dtoa_r+0x644>)
 8029236:	4fa6      	ldr	r7, [pc, #664]	; (80294d0 <_dtoa_r+0x648>)
 8029238:	f006 020f 	and.w	r2, r6, #15
 802923c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029244:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8029248:	f7f7 f9d6 	bl	80205f8 <__aeabi_dmul>
 802924c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029250:	1136      	asrs	r6, r6, #4
 8029252:	2300      	movs	r3, #0
 8029254:	2502      	movs	r5, #2
 8029256:	2e00      	cmp	r6, #0
 8029258:	f040 8085 	bne.w	8029366 <_dtoa_r+0x4de>
 802925c:	2b00      	cmp	r3, #0
 802925e:	d1d2      	bne.n	8029206 <_dtoa_r+0x37e>
 8029260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029262:	2b00      	cmp	r3, #0
 8029264:	f000 808c 	beq.w	8029380 <_dtoa_r+0x4f8>
 8029268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802926c:	4b99      	ldr	r3, [pc, #612]	; (80294d4 <_dtoa_r+0x64c>)
 802926e:	2200      	movs	r2, #0
 8029270:	4630      	mov	r0, r6
 8029272:	4639      	mov	r1, r7
 8029274:	f7f7 fc32 	bl	8020adc <__aeabi_dcmplt>
 8029278:	2800      	cmp	r0, #0
 802927a:	f000 8081 	beq.w	8029380 <_dtoa_r+0x4f8>
 802927e:	9b01      	ldr	r3, [sp, #4]
 8029280:	2b00      	cmp	r3, #0
 8029282:	d07d      	beq.n	8029380 <_dtoa_r+0x4f8>
 8029284:	f1b9 0f00 	cmp.w	r9, #0
 8029288:	dd3c      	ble.n	8029304 <_dtoa_r+0x47c>
 802928a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802928e:	9307      	str	r3, [sp, #28]
 8029290:	2200      	movs	r2, #0
 8029292:	4b91      	ldr	r3, [pc, #580]	; (80294d8 <_dtoa_r+0x650>)
 8029294:	4630      	mov	r0, r6
 8029296:	4639      	mov	r1, r7
 8029298:	f7f7 f9ae 	bl	80205f8 <__aeabi_dmul>
 802929c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80292a0:	3501      	adds	r5, #1
 80292a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80292a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80292aa:	4628      	mov	r0, r5
 80292ac:	f7f7 f93a 	bl	8020524 <__aeabi_i2d>
 80292b0:	4632      	mov	r2, r6
 80292b2:	463b      	mov	r3, r7
 80292b4:	f7f7 f9a0 	bl	80205f8 <__aeabi_dmul>
 80292b8:	4b88      	ldr	r3, [pc, #544]	; (80294dc <_dtoa_r+0x654>)
 80292ba:	2200      	movs	r2, #0
 80292bc:	f7f6 ffe6 	bl	802028c <__adddf3>
 80292c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80292c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80292c8:	9303      	str	r3, [sp, #12]
 80292ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80292cc:	2b00      	cmp	r3, #0
 80292ce:	d15c      	bne.n	802938a <_dtoa_r+0x502>
 80292d0:	4b83      	ldr	r3, [pc, #524]	; (80294e0 <_dtoa_r+0x658>)
 80292d2:	2200      	movs	r2, #0
 80292d4:	4630      	mov	r0, r6
 80292d6:	4639      	mov	r1, r7
 80292d8:	f7f6 ffd6 	bl	8020288 <__aeabi_dsub>
 80292dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80292e0:	4606      	mov	r6, r0
 80292e2:	460f      	mov	r7, r1
 80292e4:	f7f7 fc18 	bl	8020b18 <__aeabi_dcmpgt>
 80292e8:	2800      	cmp	r0, #0
 80292ea:	f040 8296 	bne.w	802981a <_dtoa_r+0x992>
 80292ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80292f2:	4630      	mov	r0, r6
 80292f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80292f8:	4639      	mov	r1, r7
 80292fa:	f7f7 fbef 	bl	8020adc <__aeabi_dcmplt>
 80292fe:	2800      	cmp	r0, #0
 8029300:	f040 8288 	bne.w	8029814 <_dtoa_r+0x98c>
 8029304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8029308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802930c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802930e:	2b00      	cmp	r3, #0
 8029310:	f2c0 8158 	blt.w	80295c4 <_dtoa_r+0x73c>
 8029314:	f1ba 0f0e 	cmp.w	sl, #14
 8029318:	f300 8154 	bgt.w	80295c4 <_dtoa_r+0x73c>
 802931c:	4b6b      	ldr	r3, [pc, #428]	; (80294cc <_dtoa_r+0x644>)
 802931e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8029322:	e9d3 8900 	ldrd	r8, r9, [r3]
 8029326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029328:	2b00      	cmp	r3, #0
 802932a:	f280 80e3 	bge.w	80294f4 <_dtoa_r+0x66c>
 802932e:	9b01      	ldr	r3, [sp, #4]
 8029330:	2b00      	cmp	r3, #0
 8029332:	f300 80df 	bgt.w	80294f4 <_dtoa_r+0x66c>
 8029336:	f040 826d 	bne.w	8029814 <_dtoa_r+0x98c>
 802933a:	4b69      	ldr	r3, [pc, #420]	; (80294e0 <_dtoa_r+0x658>)
 802933c:	2200      	movs	r2, #0
 802933e:	4640      	mov	r0, r8
 8029340:	4649      	mov	r1, r9
 8029342:	f7f7 f959 	bl	80205f8 <__aeabi_dmul>
 8029346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802934a:	f7f7 fbdb 	bl	8020b04 <__aeabi_dcmpge>
 802934e:	9e01      	ldr	r6, [sp, #4]
 8029350:	4637      	mov	r7, r6
 8029352:	2800      	cmp	r0, #0
 8029354:	f040 8243 	bne.w	80297de <_dtoa_r+0x956>
 8029358:	9d00      	ldr	r5, [sp, #0]
 802935a:	2331      	movs	r3, #49	; 0x31
 802935c:	f805 3b01 	strb.w	r3, [r5], #1
 8029360:	f10a 0a01 	add.w	sl, sl, #1
 8029364:	e23f      	b.n	80297e6 <_dtoa_r+0x95e>
 8029366:	07f2      	lsls	r2, r6, #31
 8029368:	d505      	bpl.n	8029376 <_dtoa_r+0x4ee>
 802936a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802936e:	f7f7 f943 	bl	80205f8 <__aeabi_dmul>
 8029372:	3501      	adds	r5, #1
 8029374:	2301      	movs	r3, #1
 8029376:	1076      	asrs	r6, r6, #1
 8029378:	3708      	adds	r7, #8
 802937a:	e76c      	b.n	8029256 <_dtoa_r+0x3ce>
 802937c:	2502      	movs	r5, #2
 802937e:	e76f      	b.n	8029260 <_dtoa_r+0x3d8>
 8029380:	9b01      	ldr	r3, [sp, #4]
 8029382:	f8cd a01c 	str.w	sl, [sp, #28]
 8029386:	930c      	str	r3, [sp, #48]	; 0x30
 8029388:	e78d      	b.n	80292a6 <_dtoa_r+0x41e>
 802938a:	9900      	ldr	r1, [sp, #0]
 802938c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802938e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029390:	4b4e      	ldr	r3, [pc, #312]	; (80294cc <_dtoa_r+0x644>)
 8029392:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029396:	4401      	add	r1, r0
 8029398:	9102      	str	r1, [sp, #8]
 802939a:	9908      	ldr	r1, [sp, #32]
 802939c:	eeb0 8a47 	vmov.f32	s16, s14
 80293a0:	eef0 8a67 	vmov.f32	s17, s15
 80293a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80293a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80293ac:	2900      	cmp	r1, #0
 80293ae:	d045      	beq.n	802943c <_dtoa_r+0x5b4>
 80293b0:	494c      	ldr	r1, [pc, #304]	; (80294e4 <_dtoa_r+0x65c>)
 80293b2:	2000      	movs	r0, #0
 80293b4:	f7f7 fa4a 	bl	802084c <__aeabi_ddiv>
 80293b8:	ec53 2b18 	vmov	r2, r3, d8
 80293bc:	f7f6 ff64 	bl	8020288 <__aeabi_dsub>
 80293c0:	9d00      	ldr	r5, [sp, #0]
 80293c2:	ec41 0b18 	vmov	d8, r0, r1
 80293c6:	4639      	mov	r1, r7
 80293c8:	4630      	mov	r0, r6
 80293ca:	f7f7 fbc5 	bl	8020b58 <__aeabi_d2iz>
 80293ce:	900c      	str	r0, [sp, #48]	; 0x30
 80293d0:	f7f7 f8a8 	bl	8020524 <__aeabi_i2d>
 80293d4:	4602      	mov	r2, r0
 80293d6:	460b      	mov	r3, r1
 80293d8:	4630      	mov	r0, r6
 80293da:	4639      	mov	r1, r7
 80293dc:	f7f6 ff54 	bl	8020288 <__aeabi_dsub>
 80293e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80293e2:	3330      	adds	r3, #48	; 0x30
 80293e4:	f805 3b01 	strb.w	r3, [r5], #1
 80293e8:	ec53 2b18 	vmov	r2, r3, d8
 80293ec:	4606      	mov	r6, r0
 80293ee:	460f      	mov	r7, r1
 80293f0:	f7f7 fb74 	bl	8020adc <__aeabi_dcmplt>
 80293f4:	2800      	cmp	r0, #0
 80293f6:	d165      	bne.n	80294c4 <_dtoa_r+0x63c>
 80293f8:	4632      	mov	r2, r6
 80293fa:	463b      	mov	r3, r7
 80293fc:	4935      	ldr	r1, [pc, #212]	; (80294d4 <_dtoa_r+0x64c>)
 80293fe:	2000      	movs	r0, #0
 8029400:	f7f6 ff42 	bl	8020288 <__aeabi_dsub>
 8029404:	ec53 2b18 	vmov	r2, r3, d8
 8029408:	f7f7 fb68 	bl	8020adc <__aeabi_dcmplt>
 802940c:	2800      	cmp	r0, #0
 802940e:	f040 80b9 	bne.w	8029584 <_dtoa_r+0x6fc>
 8029412:	9b02      	ldr	r3, [sp, #8]
 8029414:	429d      	cmp	r5, r3
 8029416:	f43f af75 	beq.w	8029304 <_dtoa_r+0x47c>
 802941a:	4b2f      	ldr	r3, [pc, #188]	; (80294d8 <_dtoa_r+0x650>)
 802941c:	ec51 0b18 	vmov	r0, r1, d8
 8029420:	2200      	movs	r2, #0
 8029422:	f7f7 f8e9 	bl	80205f8 <__aeabi_dmul>
 8029426:	4b2c      	ldr	r3, [pc, #176]	; (80294d8 <_dtoa_r+0x650>)
 8029428:	ec41 0b18 	vmov	d8, r0, r1
 802942c:	2200      	movs	r2, #0
 802942e:	4630      	mov	r0, r6
 8029430:	4639      	mov	r1, r7
 8029432:	f7f7 f8e1 	bl	80205f8 <__aeabi_dmul>
 8029436:	4606      	mov	r6, r0
 8029438:	460f      	mov	r7, r1
 802943a:	e7c4      	b.n	80293c6 <_dtoa_r+0x53e>
 802943c:	ec51 0b17 	vmov	r0, r1, d7
 8029440:	f7f7 f8da 	bl	80205f8 <__aeabi_dmul>
 8029444:	9b02      	ldr	r3, [sp, #8]
 8029446:	9d00      	ldr	r5, [sp, #0]
 8029448:	930c      	str	r3, [sp, #48]	; 0x30
 802944a:	ec41 0b18 	vmov	d8, r0, r1
 802944e:	4639      	mov	r1, r7
 8029450:	4630      	mov	r0, r6
 8029452:	f7f7 fb81 	bl	8020b58 <__aeabi_d2iz>
 8029456:	9011      	str	r0, [sp, #68]	; 0x44
 8029458:	f7f7 f864 	bl	8020524 <__aeabi_i2d>
 802945c:	4602      	mov	r2, r0
 802945e:	460b      	mov	r3, r1
 8029460:	4630      	mov	r0, r6
 8029462:	4639      	mov	r1, r7
 8029464:	f7f6 ff10 	bl	8020288 <__aeabi_dsub>
 8029468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802946a:	3330      	adds	r3, #48	; 0x30
 802946c:	f805 3b01 	strb.w	r3, [r5], #1
 8029470:	9b02      	ldr	r3, [sp, #8]
 8029472:	429d      	cmp	r5, r3
 8029474:	4606      	mov	r6, r0
 8029476:	460f      	mov	r7, r1
 8029478:	f04f 0200 	mov.w	r2, #0
 802947c:	d134      	bne.n	80294e8 <_dtoa_r+0x660>
 802947e:	4b19      	ldr	r3, [pc, #100]	; (80294e4 <_dtoa_r+0x65c>)
 8029480:	ec51 0b18 	vmov	r0, r1, d8
 8029484:	f7f6 ff02 	bl	802028c <__adddf3>
 8029488:	4602      	mov	r2, r0
 802948a:	460b      	mov	r3, r1
 802948c:	4630      	mov	r0, r6
 802948e:	4639      	mov	r1, r7
 8029490:	f7f7 fb42 	bl	8020b18 <__aeabi_dcmpgt>
 8029494:	2800      	cmp	r0, #0
 8029496:	d175      	bne.n	8029584 <_dtoa_r+0x6fc>
 8029498:	ec53 2b18 	vmov	r2, r3, d8
 802949c:	4911      	ldr	r1, [pc, #68]	; (80294e4 <_dtoa_r+0x65c>)
 802949e:	2000      	movs	r0, #0
 80294a0:	f7f6 fef2 	bl	8020288 <__aeabi_dsub>
 80294a4:	4602      	mov	r2, r0
 80294a6:	460b      	mov	r3, r1
 80294a8:	4630      	mov	r0, r6
 80294aa:	4639      	mov	r1, r7
 80294ac:	f7f7 fb16 	bl	8020adc <__aeabi_dcmplt>
 80294b0:	2800      	cmp	r0, #0
 80294b2:	f43f af27 	beq.w	8029304 <_dtoa_r+0x47c>
 80294b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80294b8:	1e6b      	subs	r3, r5, #1
 80294ba:	930c      	str	r3, [sp, #48]	; 0x30
 80294bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80294c0:	2b30      	cmp	r3, #48	; 0x30
 80294c2:	d0f8      	beq.n	80294b6 <_dtoa_r+0x62e>
 80294c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80294c8:	e04a      	b.n	8029560 <_dtoa_r+0x6d8>
 80294ca:	bf00      	nop
 80294cc:	0802bf08 	.word	0x0802bf08
 80294d0:	0802bee0 	.word	0x0802bee0
 80294d4:	3ff00000 	.word	0x3ff00000
 80294d8:	40240000 	.word	0x40240000
 80294dc:	401c0000 	.word	0x401c0000
 80294e0:	40140000 	.word	0x40140000
 80294e4:	3fe00000 	.word	0x3fe00000
 80294e8:	4baf      	ldr	r3, [pc, #700]	; (80297a8 <_dtoa_r+0x920>)
 80294ea:	f7f7 f885 	bl	80205f8 <__aeabi_dmul>
 80294ee:	4606      	mov	r6, r0
 80294f0:	460f      	mov	r7, r1
 80294f2:	e7ac      	b.n	802944e <_dtoa_r+0x5c6>
 80294f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80294f8:	9d00      	ldr	r5, [sp, #0]
 80294fa:	4642      	mov	r2, r8
 80294fc:	464b      	mov	r3, r9
 80294fe:	4630      	mov	r0, r6
 8029500:	4639      	mov	r1, r7
 8029502:	f7f7 f9a3 	bl	802084c <__aeabi_ddiv>
 8029506:	f7f7 fb27 	bl	8020b58 <__aeabi_d2iz>
 802950a:	9002      	str	r0, [sp, #8]
 802950c:	f7f7 f80a 	bl	8020524 <__aeabi_i2d>
 8029510:	4642      	mov	r2, r8
 8029512:	464b      	mov	r3, r9
 8029514:	f7f7 f870 	bl	80205f8 <__aeabi_dmul>
 8029518:	4602      	mov	r2, r0
 802951a:	460b      	mov	r3, r1
 802951c:	4630      	mov	r0, r6
 802951e:	4639      	mov	r1, r7
 8029520:	f7f6 feb2 	bl	8020288 <__aeabi_dsub>
 8029524:	9e02      	ldr	r6, [sp, #8]
 8029526:	9f01      	ldr	r7, [sp, #4]
 8029528:	3630      	adds	r6, #48	; 0x30
 802952a:	f805 6b01 	strb.w	r6, [r5], #1
 802952e:	9e00      	ldr	r6, [sp, #0]
 8029530:	1bae      	subs	r6, r5, r6
 8029532:	42b7      	cmp	r7, r6
 8029534:	4602      	mov	r2, r0
 8029536:	460b      	mov	r3, r1
 8029538:	d137      	bne.n	80295aa <_dtoa_r+0x722>
 802953a:	f7f6 fea7 	bl	802028c <__adddf3>
 802953e:	4642      	mov	r2, r8
 8029540:	464b      	mov	r3, r9
 8029542:	4606      	mov	r6, r0
 8029544:	460f      	mov	r7, r1
 8029546:	f7f7 fae7 	bl	8020b18 <__aeabi_dcmpgt>
 802954a:	b9c8      	cbnz	r0, 8029580 <_dtoa_r+0x6f8>
 802954c:	4642      	mov	r2, r8
 802954e:	464b      	mov	r3, r9
 8029550:	4630      	mov	r0, r6
 8029552:	4639      	mov	r1, r7
 8029554:	f7f7 fab8 	bl	8020ac8 <__aeabi_dcmpeq>
 8029558:	b110      	cbz	r0, 8029560 <_dtoa_r+0x6d8>
 802955a:	9b02      	ldr	r3, [sp, #8]
 802955c:	07d9      	lsls	r1, r3, #31
 802955e:	d40f      	bmi.n	8029580 <_dtoa_r+0x6f8>
 8029560:	4620      	mov	r0, r4
 8029562:	4659      	mov	r1, fp
 8029564:	f000 fe58 	bl	802a218 <_Bfree>
 8029568:	2300      	movs	r3, #0
 802956a:	702b      	strb	r3, [r5, #0]
 802956c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802956e:	f10a 0001 	add.w	r0, sl, #1
 8029572:	6018      	str	r0, [r3, #0]
 8029574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029576:	2b00      	cmp	r3, #0
 8029578:	f43f acd8 	beq.w	8028f2c <_dtoa_r+0xa4>
 802957c:	601d      	str	r5, [r3, #0]
 802957e:	e4d5      	b.n	8028f2c <_dtoa_r+0xa4>
 8029580:	f8cd a01c 	str.w	sl, [sp, #28]
 8029584:	462b      	mov	r3, r5
 8029586:	461d      	mov	r5, r3
 8029588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802958c:	2a39      	cmp	r2, #57	; 0x39
 802958e:	d108      	bne.n	80295a2 <_dtoa_r+0x71a>
 8029590:	9a00      	ldr	r2, [sp, #0]
 8029592:	429a      	cmp	r2, r3
 8029594:	d1f7      	bne.n	8029586 <_dtoa_r+0x6fe>
 8029596:	9a07      	ldr	r2, [sp, #28]
 8029598:	9900      	ldr	r1, [sp, #0]
 802959a:	3201      	adds	r2, #1
 802959c:	9207      	str	r2, [sp, #28]
 802959e:	2230      	movs	r2, #48	; 0x30
 80295a0:	700a      	strb	r2, [r1, #0]
 80295a2:	781a      	ldrb	r2, [r3, #0]
 80295a4:	3201      	adds	r2, #1
 80295a6:	701a      	strb	r2, [r3, #0]
 80295a8:	e78c      	b.n	80294c4 <_dtoa_r+0x63c>
 80295aa:	4b7f      	ldr	r3, [pc, #508]	; (80297a8 <_dtoa_r+0x920>)
 80295ac:	2200      	movs	r2, #0
 80295ae:	f7f7 f823 	bl	80205f8 <__aeabi_dmul>
 80295b2:	2200      	movs	r2, #0
 80295b4:	2300      	movs	r3, #0
 80295b6:	4606      	mov	r6, r0
 80295b8:	460f      	mov	r7, r1
 80295ba:	f7f7 fa85 	bl	8020ac8 <__aeabi_dcmpeq>
 80295be:	2800      	cmp	r0, #0
 80295c0:	d09b      	beq.n	80294fa <_dtoa_r+0x672>
 80295c2:	e7cd      	b.n	8029560 <_dtoa_r+0x6d8>
 80295c4:	9a08      	ldr	r2, [sp, #32]
 80295c6:	2a00      	cmp	r2, #0
 80295c8:	f000 80c4 	beq.w	8029754 <_dtoa_r+0x8cc>
 80295cc:	9a05      	ldr	r2, [sp, #20]
 80295ce:	2a01      	cmp	r2, #1
 80295d0:	f300 80a8 	bgt.w	8029724 <_dtoa_r+0x89c>
 80295d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80295d6:	2a00      	cmp	r2, #0
 80295d8:	f000 80a0 	beq.w	802971c <_dtoa_r+0x894>
 80295dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80295e0:	9e06      	ldr	r6, [sp, #24]
 80295e2:	4645      	mov	r5, r8
 80295e4:	9a04      	ldr	r2, [sp, #16]
 80295e6:	2101      	movs	r1, #1
 80295e8:	441a      	add	r2, r3
 80295ea:	4620      	mov	r0, r4
 80295ec:	4498      	add	r8, r3
 80295ee:	9204      	str	r2, [sp, #16]
 80295f0:	f000 ff18 	bl	802a424 <__i2b>
 80295f4:	4607      	mov	r7, r0
 80295f6:	2d00      	cmp	r5, #0
 80295f8:	dd0b      	ble.n	8029612 <_dtoa_r+0x78a>
 80295fa:	9b04      	ldr	r3, [sp, #16]
 80295fc:	2b00      	cmp	r3, #0
 80295fe:	dd08      	ble.n	8029612 <_dtoa_r+0x78a>
 8029600:	42ab      	cmp	r3, r5
 8029602:	9a04      	ldr	r2, [sp, #16]
 8029604:	bfa8      	it	ge
 8029606:	462b      	movge	r3, r5
 8029608:	eba8 0803 	sub.w	r8, r8, r3
 802960c:	1aed      	subs	r5, r5, r3
 802960e:	1ad3      	subs	r3, r2, r3
 8029610:	9304      	str	r3, [sp, #16]
 8029612:	9b06      	ldr	r3, [sp, #24]
 8029614:	b1fb      	cbz	r3, 8029656 <_dtoa_r+0x7ce>
 8029616:	9b08      	ldr	r3, [sp, #32]
 8029618:	2b00      	cmp	r3, #0
 802961a:	f000 809f 	beq.w	802975c <_dtoa_r+0x8d4>
 802961e:	2e00      	cmp	r6, #0
 8029620:	dd11      	ble.n	8029646 <_dtoa_r+0x7be>
 8029622:	4639      	mov	r1, r7
 8029624:	4632      	mov	r2, r6
 8029626:	4620      	mov	r0, r4
 8029628:	f000 ffb8 	bl	802a59c <__pow5mult>
 802962c:	465a      	mov	r2, fp
 802962e:	4601      	mov	r1, r0
 8029630:	4607      	mov	r7, r0
 8029632:	4620      	mov	r0, r4
 8029634:	f000 ff0c 	bl	802a450 <__multiply>
 8029638:	4659      	mov	r1, fp
 802963a:	9007      	str	r0, [sp, #28]
 802963c:	4620      	mov	r0, r4
 802963e:	f000 fdeb 	bl	802a218 <_Bfree>
 8029642:	9b07      	ldr	r3, [sp, #28]
 8029644:	469b      	mov	fp, r3
 8029646:	9b06      	ldr	r3, [sp, #24]
 8029648:	1b9a      	subs	r2, r3, r6
 802964a:	d004      	beq.n	8029656 <_dtoa_r+0x7ce>
 802964c:	4659      	mov	r1, fp
 802964e:	4620      	mov	r0, r4
 8029650:	f000 ffa4 	bl	802a59c <__pow5mult>
 8029654:	4683      	mov	fp, r0
 8029656:	2101      	movs	r1, #1
 8029658:	4620      	mov	r0, r4
 802965a:	f000 fee3 	bl	802a424 <__i2b>
 802965e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029660:	2b00      	cmp	r3, #0
 8029662:	4606      	mov	r6, r0
 8029664:	dd7c      	ble.n	8029760 <_dtoa_r+0x8d8>
 8029666:	461a      	mov	r2, r3
 8029668:	4601      	mov	r1, r0
 802966a:	4620      	mov	r0, r4
 802966c:	f000 ff96 	bl	802a59c <__pow5mult>
 8029670:	9b05      	ldr	r3, [sp, #20]
 8029672:	2b01      	cmp	r3, #1
 8029674:	4606      	mov	r6, r0
 8029676:	dd76      	ble.n	8029766 <_dtoa_r+0x8de>
 8029678:	2300      	movs	r3, #0
 802967a:	9306      	str	r3, [sp, #24]
 802967c:	6933      	ldr	r3, [r6, #16]
 802967e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8029682:	6918      	ldr	r0, [r3, #16]
 8029684:	f000 fe7e 	bl	802a384 <__hi0bits>
 8029688:	f1c0 0020 	rsb	r0, r0, #32
 802968c:	9b04      	ldr	r3, [sp, #16]
 802968e:	4418      	add	r0, r3
 8029690:	f010 001f 	ands.w	r0, r0, #31
 8029694:	f000 8086 	beq.w	80297a4 <_dtoa_r+0x91c>
 8029698:	f1c0 0320 	rsb	r3, r0, #32
 802969c:	2b04      	cmp	r3, #4
 802969e:	dd7f      	ble.n	80297a0 <_dtoa_r+0x918>
 80296a0:	f1c0 001c 	rsb	r0, r0, #28
 80296a4:	9b04      	ldr	r3, [sp, #16]
 80296a6:	4403      	add	r3, r0
 80296a8:	4480      	add	r8, r0
 80296aa:	4405      	add	r5, r0
 80296ac:	9304      	str	r3, [sp, #16]
 80296ae:	f1b8 0f00 	cmp.w	r8, #0
 80296b2:	dd05      	ble.n	80296c0 <_dtoa_r+0x838>
 80296b4:	4659      	mov	r1, fp
 80296b6:	4642      	mov	r2, r8
 80296b8:	4620      	mov	r0, r4
 80296ba:	f000 ffc9 	bl	802a650 <__lshift>
 80296be:	4683      	mov	fp, r0
 80296c0:	9b04      	ldr	r3, [sp, #16]
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	dd05      	ble.n	80296d2 <_dtoa_r+0x84a>
 80296c6:	4631      	mov	r1, r6
 80296c8:	461a      	mov	r2, r3
 80296ca:	4620      	mov	r0, r4
 80296cc:	f000 ffc0 	bl	802a650 <__lshift>
 80296d0:	4606      	mov	r6, r0
 80296d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80296d4:	2b00      	cmp	r3, #0
 80296d6:	d069      	beq.n	80297ac <_dtoa_r+0x924>
 80296d8:	4631      	mov	r1, r6
 80296da:	4658      	mov	r0, fp
 80296dc:	f001 f824 	bl	802a728 <__mcmp>
 80296e0:	2800      	cmp	r0, #0
 80296e2:	da63      	bge.n	80297ac <_dtoa_r+0x924>
 80296e4:	2300      	movs	r3, #0
 80296e6:	4659      	mov	r1, fp
 80296e8:	220a      	movs	r2, #10
 80296ea:	4620      	mov	r0, r4
 80296ec:	f000 fdb6 	bl	802a25c <__multadd>
 80296f0:	9b08      	ldr	r3, [sp, #32]
 80296f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80296f6:	4683      	mov	fp, r0
 80296f8:	2b00      	cmp	r3, #0
 80296fa:	f000 818f 	beq.w	8029a1c <_dtoa_r+0xb94>
 80296fe:	4639      	mov	r1, r7
 8029700:	2300      	movs	r3, #0
 8029702:	220a      	movs	r2, #10
 8029704:	4620      	mov	r0, r4
 8029706:	f000 fda9 	bl	802a25c <__multadd>
 802970a:	f1b9 0f00 	cmp.w	r9, #0
 802970e:	4607      	mov	r7, r0
 8029710:	f300 808e 	bgt.w	8029830 <_dtoa_r+0x9a8>
 8029714:	9b05      	ldr	r3, [sp, #20]
 8029716:	2b02      	cmp	r3, #2
 8029718:	dc50      	bgt.n	80297bc <_dtoa_r+0x934>
 802971a:	e089      	b.n	8029830 <_dtoa_r+0x9a8>
 802971c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802971e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8029722:	e75d      	b.n	80295e0 <_dtoa_r+0x758>
 8029724:	9b01      	ldr	r3, [sp, #4]
 8029726:	1e5e      	subs	r6, r3, #1
 8029728:	9b06      	ldr	r3, [sp, #24]
 802972a:	42b3      	cmp	r3, r6
 802972c:	bfbf      	itttt	lt
 802972e:	9b06      	ldrlt	r3, [sp, #24]
 8029730:	9606      	strlt	r6, [sp, #24]
 8029732:	1af2      	sublt	r2, r6, r3
 8029734:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8029736:	bfb6      	itet	lt
 8029738:	189b      	addlt	r3, r3, r2
 802973a:	1b9e      	subge	r6, r3, r6
 802973c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802973e:	9b01      	ldr	r3, [sp, #4]
 8029740:	bfb8      	it	lt
 8029742:	2600      	movlt	r6, #0
 8029744:	2b00      	cmp	r3, #0
 8029746:	bfb5      	itete	lt
 8029748:	eba8 0503 	sublt.w	r5, r8, r3
 802974c:	9b01      	ldrge	r3, [sp, #4]
 802974e:	2300      	movlt	r3, #0
 8029750:	4645      	movge	r5, r8
 8029752:	e747      	b.n	80295e4 <_dtoa_r+0x75c>
 8029754:	9e06      	ldr	r6, [sp, #24]
 8029756:	9f08      	ldr	r7, [sp, #32]
 8029758:	4645      	mov	r5, r8
 802975a:	e74c      	b.n	80295f6 <_dtoa_r+0x76e>
 802975c:	9a06      	ldr	r2, [sp, #24]
 802975e:	e775      	b.n	802964c <_dtoa_r+0x7c4>
 8029760:	9b05      	ldr	r3, [sp, #20]
 8029762:	2b01      	cmp	r3, #1
 8029764:	dc18      	bgt.n	8029798 <_dtoa_r+0x910>
 8029766:	9b02      	ldr	r3, [sp, #8]
 8029768:	b9b3      	cbnz	r3, 8029798 <_dtoa_r+0x910>
 802976a:	9b03      	ldr	r3, [sp, #12]
 802976c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029770:	b9a3      	cbnz	r3, 802979c <_dtoa_r+0x914>
 8029772:	9b03      	ldr	r3, [sp, #12]
 8029774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029778:	0d1b      	lsrs	r3, r3, #20
 802977a:	051b      	lsls	r3, r3, #20
 802977c:	b12b      	cbz	r3, 802978a <_dtoa_r+0x902>
 802977e:	9b04      	ldr	r3, [sp, #16]
 8029780:	3301      	adds	r3, #1
 8029782:	9304      	str	r3, [sp, #16]
 8029784:	f108 0801 	add.w	r8, r8, #1
 8029788:	2301      	movs	r3, #1
 802978a:	9306      	str	r3, [sp, #24]
 802978c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802978e:	2b00      	cmp	r3, #0
 8029790:	f47f af74 	bne.w	802967c <_dtoa_r+0x7f4>
 8029794:	2001      	movs	r0, #1
 8029796:	e779      	b.n	802968c <_dtoa_r+0x804>
 8029798:	2300      	movs	r3, #0
 802979a:	e7f6      	b.n	802978a <_dtoa_r+0x902>
 802979c:	9b02      	ldr	r3, [sp, #8]
 802979e:	e7f4      	b.n	802978a <_dtoa_r+0x902>
 80297a0:	d085      	beq.n	80296ae <_dtoa_r+0x826>
 80297a2:	4618      	mov	r0, r3
 80297a4:	301c      	adds	r0, #28
 80297a6:	e77d      	b.n	80296a4 <_dtoa_r+0x81c>
 80297a8:	40240000 	.word	0x40240000
 80297ac:	9b01      	ldr	r3, [sp, #4]
 80297ae:	2b00      	cmp	r3, #0
 80297b0:	dc38      	bgt.n	8029824 <_dtoa_r+0x99c>
 80297b2:	9b05      	ldr	r3, [sp, #20]
 80297b4:	2b02      	cmp	r3, #2
 80297b6:	dd35      	ble.n	8029824 <_dtoa_r+0x99c>
 80297b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80297bc:	f1b9 0f00 	cmp.w	r9, #0
 80297c0:	d10d      	bne.n	80297de <_dtoa_r+0x956>
 80297c2:	4631      	mov	r1, r6
 80297c4:	464b      	mov	r3, r9
 80297c6:	2205      	movs	r2, #5
 80297c8:	4620      	mov	r0, r4
 80297ca:	f000 fd47 	bl	802a25c <__multadd>
 80297ce:	4601      	mov	r1, r0
 80297d0:	4606      	mov	r6, r0
 80297d2:	4658      	mov	r0, fp
 80297d4:	f000 ffa8 	bl	802a728 <__mcmp>
 80297d8:	2800      	cmp	r0, #0
 80297da:	f73f adbd 	bgt.w	8029358 <_dtoa_r+0x4d0>
 80297de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80297e0:	9d00      	ldr	r5, [sp, #0]
 80297e2:	ea6f 0a03 	mvn.w	sl, r3
 80297e6:	f04f 0800 	mov.w	r8, #0
 80297ea:	4631      	mov	r1, r6
 80297ec:	4620      	mov	r0, r4
 80297ee:	f000 fd13 	bl	802a218 <_Bfree>
 80297f2:	2f00      	cmp	r7, #0
 80297f4:	f43f aeb4 	beq.w	8029560 <_dtoa_r+0x6d8>
 80297f8:	f1b8 0f00 	cmp.w	r8, #0
 80297fc:	d005      	beq.n	802980a <_dtoa_r+0x982>
 80297fe:	45b8      	cmp	r8, r7
 8029800:	d003      	beq.n	802980a <_dtoa_r+0x982>
 8029802:	4641      	mov	r1, r8
 8029804:	4620      	mov	r0, r4
 8029806:	f000 fd07 	bl	802a218 <_Bfree>
 802980a:	4639      	mov	r1, r7
 802980c:	4620      	mov	r0, r4
 802980e:	f000 fd03 	bl	802a218 <_Bfree>
 8029812:	e6a5      	b.n	8029560 <_dtoa_r+0x6d8>
 8029814:	2600      	movs	r6, #0
 8029816:	4637      	mov	r7, r6
 8029818:	e7e1      	b.n	80297de <_dtoa_r+0x956>
 802981a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802981c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8029820:	4637      	mov	r7, r6
 8029822:	e599      	b.n	8029358 <_dtoa_r+0x4d0>
 8029824:	9b08      	ldr	r3, [sp, #32]
 8029826:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802982a:	2b00      	cmp	r3, #0
 802982c:	f000 80fd 	beq.w	8029a2a <_dtoa_r+0xba2>
 8029830:	2d00      	cmp	r5, #0
 8029832:	dd05      	ble.n	8029840 <_dtoa_r+0x9b8>
 8029834:	4639      	mov	r1, r7
 8029836:	462a      	mov	r2, r5
 8029838:	4620      	mov	r0, r4
 802983a:	f000 ff09 	bl	802a650 <__lshift>
 802983e:	4607      	mov	r7, r0
 8029840:	9b06      	ldr	r3, [sp, #24]
 8029842:	2b00      	cmp	r3, #0
 8029844:	d05c      	beq.n	8029900 <_dtoa_r+0xa78>
 8029846:	6879      	ldr	r1, [r7, #4]
 8029848:	4620      	mov	r0, r4
 802984a:	f000 fca5 	bl	802a198 <_Balloc>
 802984e:	4605      	mov	r5, r0
 8029850:	b928      	cbnz	r0, 802985e <_dtoa_r+0x9d6>
 8029852:	4b80      	ldr	r3, [pc, #512]	; (8029a54 <_dtoa_r+0xbcc>)
 8029854:	4602      	mov	r2, r0
 8029856:	f240 21ea 	movw	r1, #746	; 0x2ea
 802985a:	f7ff bb2e 	b.w	8028eba <_dtoa_r+0x32>
 802985e:	693a      	ldr	r2, [r7, #16]
 8029860:	3202      	adds	r2, #2
 8029862:	0092      	lsls	r2, r2, #2
 8029864:	f107 010c 	add.w	r1, r7, #12
 8029868:	300c      	adds	r0, #12
 802986a:	f000 fc87 	bl	802a17c <memcpy>
 802986e:	2201      	movs	r2, #1
 8029870:	4629      	mov	r1, r5
 8029872:	4620      	mov	r0, r4
 8029874:	f000 feec 	bl	802a650 <__lshift>
 8029878:	9b00      	ldr	r3, [sp, #0]
 802987a:	3301      	adds	r3, #1
 802987c:	9301      	str	r3, [sp, #4]
 802987e:	9b00      	ldr	r3, [sp, #0]
 8029880:	444b      	add	r3, r9
 8029882:	9307      	str	r3, [sp, #28]
 8029884:	9b02      	ldr	r3, [sp, #8]
 8029886:	f003 0301 	and.w	r3, r3, #1
 802988a:	46b8      	mov	r8, r7
 802988c:	9306      	str	r3, [sp, #24]
 802988e:	4607      	mov	r7, r0
 8029890:	9b01      	ldr	r3, [sp, #4]
 8029892:	4631      	mov	r1, r6
 8029894:	3b01      	subs	r3, #1
 8029896:	4658      	mov	r0, fp
 8029898:	9302      	str	r3, [sp, #8]
 802989a:	f7ff fa67 	bl	8028d6c <quorem>
 802989e:	4603      	mov	r3, r0
 80298a0:	3330      	adds	r3, #48	; 0x30
 80298a2:	9004      	str	r0, [sp, #16]
 80298a4:	4641      	mov	r1, r8
 80298a6:	4658      	mov	r0, fp
 80298a8:	9308      	str	r3, [sp, #32]
 80298aa:	f000 ff3d 	bl	802a728 <__mcmp>
 80298ae:	463a      	mov	r2, r7
 80298b0:	4681      	mov	r9, r0
 80298b2:	4631      	mov	r1, r6
 80298b4:	4620      	mov	r0, r4
 80298b6:	f000 ff53 	bl	802a760 <__mdiff>
 80298ba:	68c2      	ldr	r2, [r0, #12]
 80298bc:	9b08      	ldr	r3, [sp, #32]
 80298be:	4605      	mov	r5, r0
 80298c0:	bb02      	cbnz	r2, 8029904 <_dtoa_r+0xa7c>
 80298c2:	4601      	mov	r1, r0
 80298c4:	4658      	mov	r0, fp
 80298c6:	f000 ff2f 	bl	802a728 <__mcmp>
 80298ca:	9b08      	ldr	r3, [sp, #32]
 80298cc:	4602      	mov	r2, r0
 80298ce:	4629      	mov	r1, r5
 80298d0:	4620      	mov	r0, r4
 80298d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80298d6:	f000 fc9f 	bl	802a218 <_Bfree>
 80298da:	9b05      	ldr	r3, [sp, #20]
 80298dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80298de:	9d01      	ldr	r5, [sp, #4]
 80298e0:	ea43 0102 	orr.w	r1, r3, r2
 80298e4:	9b06      	ldr	r3, [sp, #24]
 80298e6:	430b      	orrs	r3, r1
 80298e8:	9b08      	ldr	r3, [sp, #32]
 80298ea:	d10d      	bne.n	8029908 <_dtoa_r+0xa80>
 80298ec:	2b39      	cmp	r3, #57	; 0x39
 80298ee:	d029      	beq.n	8029944 <_dtoa_r+0xabc>
 80298f0:	f1b9 0f00 	cmp.w	r9, #0
 80298f4:	dd01      	ble.n	80298fa <_dtoa_r+0xa72>
 80298f6:	9b04      	ldr	r3, [sp, #16]
 80298f8:	3331      	adds	r3, #49	; 0x31
 80298fa:	9a02      	ldr	r2, [sp, #8]
 80298fc:	7013      	strb	r3, [r2, #0]
 80298fe:	e774      	b.n	80297ea <_dtoa_r+0x962>
 8029900:	4638      	mov	r0, r7
 8029902:	e7b9      	b.n	8029878 <_dtoa_r+0x9f0>
 8029904:	2201      	movs	r2, #1
 8029906:	e7e2      	b.n	80298ce <_dtoa_r+0xa46>
 8029908:	f1b9 0f00 	cmp.w	r9, #0
 802990c:	db06      	blt.n	802991c <_dtoa_r+0xa94>
 802990e:	9905      	ldr	r1, [sp, #20]
 8029910:	ea41 0909 	orr.w	r9, r1, r9
 8029914:	9906      	ldr	r1, [sp, #24]
 8029916:	ea59 0101 	orrs.w	r1, r9, r1
 802991a:	d120      	bne.n	802995e <_dtoa_r+0xad6>
 802991c:	2a00      	cmp	r2, #0
 802991e:	ddec      	ble.n	80298fa <_dtoa_r+0xa72>
 8029920:	4659      	mov	r1, fp
 8029922:	2201      	movs	r2, #1
 8029924:	4620      	mov	r0, r4
 8029926:	9301      	str	r3, [sp, #4]
 8029928:	f000 fe92 	bl	802a650 <__lshift>
 802992c:	4631      	mov	r1, r6
 802992e:	4683      	mov	fp, r0
 8029930:	f000 fefa 	bl	802a728 <__mcmp>
 8029934:	2800      	cmp	r0, #0
 8029936:	9b01      	ldr	r3, [sp, #4]
 8029938:	dc02      	bgt.n	8029940 <_dtoa_r+0xab8>
 802993a:	d1de      	bne.n	80298fa <_dtoa_r+0xa72>
 802993c:	07da      	lsls	r2, r3, #31
 802993e:	d5dc      	bpl.n	80298fa <_dtoa_r+0xa72>
 8029940:	2b39      	cmp	r3, #57	; 0x39
 8029942:	d1d8      	bne.n	80298f6 <_dtoa_r+0xa6e>
 8029944:	9a02      	ldr	r2, [sp, #8]
 8029946:	2339      	movs	r3, #57	; 0x39
 8029948:	7013      	strb	r3, [r2, #0]
 802994a:	462b      	mov	r3, r5
 802994c:	461d      	mov	r5, r3
 802994e:	3b01      	subs	r3, #1
 8029950:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8029954:	2a39      	cmp	r2, #57	; 0x39
 8029956:	d050      	beq.n	80299fa <_dtoa_r+0xb72>
 8029958:	3201      	adds	r2, #1
 802995a:	701a      	strb	r2, [r3, #0]
 802995c:	e745      	b.n	80297ea <_dtoa_r+0x962>
 802995e:	2a00      	cmp	r2, #0
 8029960:	dd03      	ble.n	802996a <_dtoa_r+0xae2>
 8029962:	2b39      	cmp	r3, #57	; 0x39
 8029964:	d0ee      	beq.n	8029944 <_dtoa_r+0xabc>
 8029966:	3301      	adds	r3, #1
 8029968:	e7c7      	b.n	80298fa <_dtoa_r+0xa72>
 802996a:	9a01      	ldr	r2, [sp, #4]
 802996c:	9907      	ldr	r1, [sp, #28]
 802996e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029972:	428a      	cmp	r2, r1
 8029974:	d02a      	beq.n	80299cc <_dtoa_r+0xb44>
 8029976:	4659      	mov	r1, fp
 8029978:	2300      	movs	r3, #0
 802997a:	220a      	movs	r2, #10
 802997c:	4620      	mov	r0, r4
 802997e:	f000 fc6d 	bl	802a25c <__multadd>
 8029982:	45b8      	cmp	r8, r7
 8029984:	4683      	mov	fp, r0
 8029986:	f04f 0300 	mov.w	r3, #0
 802998a:	f04f 020a 	mov.w	r2, #10
 802998e:	4641      	mov	r1, r8
 8029990:	4620      	mov	r0, r4
 8029992:	d107      	bne.n	80299a4 <_dtoa_r+0xb1c>
 8029994:	f000 fc62 	bl	802a25c <__multadd>
 8029998:	4680      	mov	r8, r0
 802999a:	4607      	mov	r7, r0
 802999c:	9b01      	ldr	r3, [sp, #4]
 802999e:	3301      	adds	r3, #1
 80299a0:	9301      	str	r3, [sp, #4]
 80299a2:	e775      	b.n	8029890 <_dtoa_r+0xa08>
 80299a4:	f000 fc5a 	bl	802a25c <__multadd>
 80299a8:	4639      	mov	r1, r7
 80299aa:	4680      	mov	r8, r0
 80299ac:	2300      	movs	r3, #0
 80299ae:	220a      	movs	r2, #10
 80299b0:	4620      	mov	r0, r4
 80299b2:	f000 fc53 	bl	802a25c <__multadd>
 80299b6:	4607      	mov	r7, r0
 80299b8:	e7f0      	b.n	802999c <_dtoa_r+0xb14>
 80299ba:	f1b9 0f00 	cmp.w	r9, #0
 80299be:	9a00      	ldr	r2, [sp, #0]
 80299c0:	bfcc      	ite	gt
 80299c2:	464d      	movgt	r5, r9
 80299c4:	2501      	movle	r5, #1
 80299c6:	4415      	add	r5, r2
 80299c8:	f04f 0800 	mov.w	r8, #0
 80299cc:	4659      	mov	r1, fp
 80299ce:	2201      	movs	r2, #1
 80299d0:	4620      	mov	r0, r4
 80299d2:	9301      	str	r3, [sp, #4]
 80299d4:	f000 fe3c 	bl	802a650 <__lshift>
 80299d8:	4631      	mov	r1, r6
 80299da:	4683      	mov	fp, r0
 80299dc:	f000 fea4 	bl	802a728 <__mcmp>
 80299e0:	2800      	cmp	r0, #0
 80299e2:	dcb2      	bgt.n	802994a <_dtoa_r+0xac2>
 80299e4:	d102      	bne.n	80299ec <_dtoa_r+0xb64>
 80299e6:	9b01      	ldr	r3, [sp, #4]
 80299e8:	07db      	lsls	r3, r3, #31
 80299ea:	d4ae      	bmi.n	802994a <_dtoa_r+0xac2>
 80299ec:	462b      	mov	r3, r5
 80299ee:	461d      	mov	r5, r3
 80299f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80299f4:	2a30      	cmp	r2, #48	; 0x30
 80299f6:	d0fa      	beq.n	80299ee <_dtoa_r+0xb66>
 80299f8:	e6f7      	b.n	80297ea <_dtoa_r+0x962>
 80299fa:	9a00      	ldr	r2, [sp, #0]
 80299fc:	429a      	cmp	r2, r3
 80299fe:	d1a5      	bne.n	802994c <_dtoa_r+0xac4>
 8029a00:	f10a 0a01 	add.w	sl, sl, #1
 8029a04:	2331      	movs	r3, #49	; 0x31
 8029a06:	e779      	b.n	80298fc <_dtoa_r+0xa74>
 8029a08:	4b13      	ldr	r3, [pc, #76]	; (8029a58 <_dtoa_r+0xbd0>)
 8029a0a:	f7ff baaf 	b.w	8028f6c <_dtoa_r+0xe4>
 8029a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029a10:	2b00      	cmp	r3, #0
 8029a12:	f47f aa86 	bne.w	8028f22 <_dtoa_r+0x9a>
 8029a16:	4b11      	ldr	r3, [pc, #68]	; (8029a5c <_dtoa_r+0xbd4>)
 8029a18:	f7ff baa8 	b.w	8028f6c <_dtoa_r+0xe4>
 8029a1c:	f1b9 0f00 	cmp.w	r9, #0
 8029a20:	dc03      	bgt.n	8029a2a <_dtoa_r+0xba2>
 8029a22:	9b05      	ldr	r3, [sp, #20]
 8029a24:	2b02      	cmp	r3, #2
 8029a26:	f73f aec9 	bgt.w	80297bc <_dtoa_r+0x934>
 8029a2a:	9d00      	ldr	r5, [sp, #0]
 8029a2c:	4631      	mov	r1, r6
 8029a2e:	4658      	mov	r0, fp
 8029a30:	f7ff f99c 	bl	8028d6c <quorem>
 8029a34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8029a38:	f805 3b01 	strb.w	r3, [r5], #1
 8029a3c:	9a00      	ldr	r2, [sp, #0]
 8029a3e:	1aaa      	subs	r2, r5, r2
 8029a40:	4591      	cmp	r9, r2
 8029a42:	ddba      	ble.n	80299ba <_dtoa_r+0xb32>
 8029a44:	4659      	mov	r1, fp
 8029a46:	2300      	movs	r3, #0
 8029a48:	220a      	movs	r2, #10
 8029a4a:	4620      	mov	r0, r4
 8029a4c:	f000 fc06 	bl	802a25c <__multadd>
 8029a50:	4683      	mov	fp, r0
 8029a52:	e7eb      	b.n	8029a2c <_dtoa_r+0xba4>
 8029a54:	0802bdeb 	.word	0x0802bdeb
 8029a58:	0802bcf4 	.word	0x0802bcf4
 8029a5c:	0802bd68 	.word	0x0802bd68

08029a60 <rshift>:
 8029a60:	6903      	ldr	r3, [r0, #16]
 8029a62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029a66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029a6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029a6e:	f100 0414 	add.w	r4, r0, #20
 8029a72:	dd45      	ble.n	8029b00 <rshift+0xa0>
 8029a74:	f011 011f 	ands.w	r1, r1, #31
 8029a78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029a7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8029a80:	d10c      	bne.n	8029a9c <rshift+0x3c>
 8029a82:	f100 0710 	add.w	r7, r0, #16
 8029a86:	4629      	mov	r1, r5
 8029a88:	42b1      	cmp	r1, r6
 8029a8a:	d334      	bcc.n	8029af6 <rshift+0x96>
 8029a8c:	1a9b      	subs	r3, r3, r2
 8029a8e:	009b      	lsls	r3, r3, #2
 8029a90:	1eea      	subs	r2, r5, #3
 8029a92:	4296      	cmp	r6, r2
 8029a94:	bf38      	it	cc
 8029a96:	2300      	movcc	r3, #0
 8029a98:	4423      	add	r3, r4
 8029a9a:	e015      	b.n	8029ac8 <rshift+0x68>
 8029a9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8029aa0:	f1c1 0820 	rsb	r8, r1, #32
 8029aa4:	40cf      	lsrs	r7, r1
 8029aa6:	f105 0e04 	add.w	lr, r5, #4
 8029aaa:	46a1      	mov	r9, r4
 8029aac:	4576      	cmp	r6, lr
 8029aae:	46f4      	mov	ip, lr
 8029ab0:	d815      	bhi.n	8029ade <rshift+0x7e>
 8029ab2:	1a9b      	subs	r3, r3, r2
 8029ab4:	009a      	lsls	r2, r3, #2
 8029ab6:	3a04      	subs	r2, #4
 8029ab8:	3501      	adds	r5, #1
 8029aba:	42ae      	cmp	r6, r5
 8029abc:	bf38      	it	cc
 8029abe:	2200      	movcc	r2, #0
 8029ac0:	18a3      	adds	r3, r4, r2
 8029ac2:	50a7      	str	r7, [r4, r2]
 8029ac4:	b107      	cbz	r7, 8029ac8 <rshift+0x68>
 8029ac6:	3304      	adds	r3, #4
 8029ac8:	1b1a      	subs	r2, r3, r4
 8029aca:	42a3      	cmp	r3, r4
 8029acc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8029ad0:	bf08      	it	eq
 8029ad2:	2300      	moveq	r3, #0
 8029ad4:	6102      	str	r2, [r0, #16]
 8029ad6:	bf08      	it	eq
 8029ad8:	6143      	streq	r3, [r0, #20]
 8029ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029ade:	f8dc c000 	ldr.w	ip, [ip]
 8029ae2:	fa0c fc08 	lsl.w	ip, ip, r8
 8029ae6:	ea4c 0707 	orr.w	r7, ip, r7
 8029aea:	f849 7b04 	str.w	r7, [r9], #4
 8029aee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8029af2:	40cf      	lsrs	r7, r1
 8029af4:	e7da      	b.n	8029aac <rshift+0x4c>
 8029af6:	f851 cb04 	ldr.w	ip, [r1], #4
 8029afa:	f847 cf04 	str.w	ip, [r7, #4]!
 8029afe:	e7c3      	b.n	8029a88 <rshift+0x28>
 8029b00:	4623      	mov	r3, r4
 8029b02:	e7e1      	b.n	8029ac8 <rshift+0x68>

08029b04 <__hexdig_fun>:
 8029b04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8029b08:	2b09      	cmp	r3, #9
 8029b0a:	d802      	bhi.n	8029b12 <__hexdig_fun+0xe>
 8029b0c:	3820      	subs	r0, #32
 8029b0e:	b2c0      	uxtb	r0, r0
 8029b10:	4770      	bx	lr
 8029b12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8029b16:	2b05      	cmp	r3, #5
 8029b18:	d801      	bhi.n	8029b1e <__hexdig_fun+0x1a>
 8029b1a:	3847      	subs	r0, #71	; 0x47
 8029b1c:	e7f7      	b.n	8029b0e <__hexdig_fun+0xa>
 8029b1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8029b22:	2b05      	cmp	r3, #5
 8029b24:	d801      	bhi.n	8029b2a <__hexdig_fun+0x26>
 8029b26:	3827      	subs	r0, #39	; 0x27
 8029b28:	e7f1      	b.n	8029b0e <__hexdig_fun+0xa>
 8029b2a:	2000      	movs	r0, #0
 8029b2c:	4770      	bx	lr
	...

08029b30 <__gethex>:
 8029b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b34:	ed2d 8b02 	vpush	{d8}
 8029b38:	b089      	sub	sp, #36	; 0x24
 8029b3a:	ee08 0a10 	vmov	s16, r0
 8029b3e:	9304      	str	r3, [sp, #16]
 8029b40:	4bbc      	ldr	r3, [pc, #752]	; (8029e34 <__gethex+0x304>)
 8029b42:	681b      	ldr	r3, [r3, #0]
 8029b44:	9301      	str	r3, [sp, #4]
 8029b46:	4618      	mov	r0, r3
 8029b48:	468b      	mov	fp, r1
 8029b4a:	4690      	mov	r8, r2
 8029b4c:	f7f6 fb40 	bl	80201d0 <strlen>
 8029b50:	9b01      	ldr	r3, [sp, #4]
 8029b52:	f8db 2000 	ldr.w	r2, [fp]
 8029b56:	4403      	add	r3, r0
 8029b58:	4682      	mov	sl, r0
 8029b5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029b5e:	9305      	str	r3, [sp, #20]
 8029b60:	1c93      	adds	r3, r2, #2
 8029b62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8029b66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029b6a:	32fe      	adds	r2, #254	; 0xfe
 8029b6c:	18d1      	adds	r1, r2, r3
 8029b6e:	461f      	mov	r7, r3
 8029b70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029b74:	9100      	str	r1, [sp, #0]
 8029b76:	2830      	cmp	r0, #48	; 0x30
 8029b78:	d0f8      	beq.n	8029b6c <__gethex+0x3c>
 8029b7a:	f7ff ffc3 	bl	8029b04 <__hexdig_fun>
 8029b7e:	4604      	mov	r4, r0
 8029b80:	2800      	cmp	r0, #0
 8029b82:	d13a      	bne.n	8029bfa <__gethex+0xca>
 8029b84:	9901      	ldr	r1, [sp, #4]
 8029b86:	4652      	mov	r2, sl
 8029b88:	4638      	mov	r0, r7
 8029b8a:	f7fe faa9 	bl	80280e0 <strncmp>
 8029b8e:	4605      	mov	r5, r0
 8029b90:	2800      	cmp	r0, #0
 8029b92:	d168      	bne.n	8029c66 <__gethex+0x136>
 8029b94:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029b98:	eb07 060a 	add.w	r6, r7, sl
 8029b9c:	f7ff ffb2 	bl	8029b04 <__hexdig_fun>
 8029ba0:	2800      	cmp	r0, #0
 8029ba2:	d062      	beq.n	8029c6a <__gethex+0x13a>
 8029ba4:	4633      	mov	r3, r6
 8029ba6:	7818      	ldrb	r0, [r3, #0]
 8029ba8:	2830      	cmp	r0, #48	; 0x30
 8029baa:	461f      	mov	r7, r3
 8029bac:	f103 0301 	add.w	r3, r3, #1
 8029bb0:	d0f9      	beq.n	8029ba6 <__gethex+0x76>
 8029bb2:	f7ff ffa7 	bl	8029b04 <__hexdig_fun>
 8029bb6:	2301      	movs	r3, #1
 8029bb8:	fab0 f480 	clz	r4, r0
 8029bbc:	0964      	lsrs	r4, r4, #5
 8029bbe:	4635      	mov	r5, r6
 8029bc0:	9300      	str	r3, [sp, #0]
 8029bc2:	463a      	mov	r2, r7
 8029bc4:	4616      	mov	r6, r2
 8029bc6:	3201      	adds	r2, #1
 8029bc8:	7830      	ldrb	r0, [r6, #0]
 8029bca:	f7ff ff9b 	bl	8029b04 <__hexdig_fun>
 8029bce:	2800      	cmp	r0, #0
 8029bd0:	d1f8      	bne.n	8029bc4 <__gethex+0x94>
 8029bd2:	9901      	ldr	r1, [sp, #4]
 8029bd4:	4652      	mov	r2, sl
 8029bd6:	4630      	mov	r0, r6
 8029bd8:	f7fe fa82 	bl	80280e0 <strncmp>
 8029bdc:	b980      	cbnz	r0, 8029c00 <__gethex+0xd0>
 8029bde:	b94d      	cbnz	r5, 8029bf4 <__gethex+0xc4>
 8029be0:	eb06 050a 	add.w	r5, r6, sl
 8029be4:	462a      	mov	r2, r5
 8029be6:	4616      	mov	r6, r2
 8029be8:	3201      	adds	r2, #1
 8029bea:	7830      	ldrb	r0, [r6, #0]
 8029bec:	f7ff ff8a 	bl	8029b04 <__hexdig_fun>
 8029bf0:	2800      	cmp	r0, #0
 8029bf2:	d1f8      	bne.n	8029be6 <__gethex+0xb6>
 8029bf4:	1bad      	subs	r5, r5, r6
 8029bf6:	00ad      	lsls	r5, r5, #2
 8029bf8:	e004      	b.n	8029c04 <__gethex+0xd4>
 8029bfa:	2400      	movs	r4, #0
 8029bfc:	4625      	mov	r5, r4
 8029bfe:	e7e0      	b.n	8029bc2 <__gethex+0x92>
 8029c00:	2d00      	cmp	r5, #0
 8029c02:	d1f7      	bne.n	8029bf4 <__gethex+0xc4>
 8029c04:	7833      	ldrb	r3, [r6, #0]
 8029c06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029c0a:	2b50      	cmp	r3, #80	; 0x50
 8029c0c:	d13b      	bne.n	8029c86 <__gethex+0x156>
 8029c0e:	7873      	ldrb	r3, [r6, #1]
 8029c10:	2b2b      	cmp	r3, #43	; 0x2b
 8029c12:	d02c      	beq.n	8029c6e <__gethex+0x13e>
 8029c14:	2b2d      	cmp	r3, #45	; 0x2d
 8029c16:	d02e      	beq.n	8029c76 <__gethex+0x146>
 8029c18:	1c71      	adds	r1, r6, #1
 8029c1a:	f04f 0900 	mov.w	r9, #0
 8029c1e:	7808      	ldrb	r0, [r1, #0]
 8029c20:	f7ff ff70 	bl	8029b04 <__hexdig_fun>
 8029c24:	1e43      	subs	r3, r0, #1
 8029c26:	b2db      	uxtb	r3, r3
 8029c28:	2b18      	cmp	r3, #24
 8029c2a:	d82c      	bhi.n	8029c86 <__gethex+0x156>
 8029c2c:	f1a0 0210 	sub.w	r2, r0, #16
 8029c30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8029c34:	f7ff ff66 	bl	8029b04 <__hexdig_fun>
 8029c38:	1e43      	subs	r3, r0, #1
 8029c3a:	b2db      	uxtb	r3, r3
 8029c3c:	2b18      	cmp	r3, #24
 8029c3e:	d91d      	bls.n	8029c7c <__gethex+0x14c>
 8029c40:	f1b9 0f00 	cmp.w	r9, #0
 8029c44:	d000      	beq.n	8029c48 <__gethex+0x118>
 8029c46:	4252      	negs	r2, r2
 8029c48:	4415      	add	r5, r2
 8029c4a:	f8cb 1000 	str.w	r1, [fp]
 8029c4e:	b1e4      	cbz	r4, 8029c8a <__gethex+0x15a>
 8029c50:	9b00      	ldr	r3, [sp, #0]
 8029c52:	2b00      	cmp	r3, #0
 8029c54:	bf14      	ite	ne
 8029c56:	2700      	movne	r7, #0
 8029c58:	2706      	moveq	r7, #6
 8029c5a:	4638      	mov	r0, r7
 8029c5c:	b009      	add	sp, #36	; 0x24
 8029c5e:	ecbd 8b02 	vpop	{d8}
 8029c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c66:	463e      	mov	r6, r7
 8029c68:	4625      	mov	r5, r4
 8029c6a:	2401      	movs	r4, #1
 8029c6c:	e7ca      	b.n	8029c04 <__gethex+0xd4>
 8029c6e:	f04f 0900 	mov.w	r9, #0
 8029c72:	1cb1      	adds	r1, r6, #2
 8029c74:	e7d3      	b.n	8029c1e <__gethex+0xee>
 8029c76:	f04f 0901 	mov.w	r9, #1
 8029c7a:	e7fa      	b.n	8029c72 <__gethex+0x142>
 8029c7c:	230a      	movs	r3, #10
 8029c7e:	fb03 0202 	mla	r2, r3, r2, r0
 8029c82:	3a10      	subs	r2, #16
 8029c84:	e7d4      	b.n	8029c30 <__gethex+0x100>
 8029c86:	4631      	mov	r1, r6
 8029c88:	e7df      	b.n	8029c4a <__gethex+0x11a>
 8029c8a:	1bf3      	subs	r3, r6, r7
 8029c8c:	3b01      	subs	r3, #1
 8029c8e:	4621      	mov	r1, r4
 8029c90:	2b07      	cmp	r3, #7
 8029c92:	dc0b      	bgt.n	8029cac <__gethex+0x17c>
 8029c94:	ee18 0a10 	vmov	r0, s16
 8029c98:	f000 fa7e 	bl	802a198 <_Balloc>
 8029c9c:	4604      	mov	r4, r0
 8029c9e:	b940      	cbnz	r0, 8029cb2 <__gethex+0x182>
 8029ca0:	4b65      	ldr	r3, [pc, #404]	; (8029e38 <__gethex+0x308>)
 8029ca2:	4602      	mov	r2, r0
 8029ca4:	21de      	movs	r1, #222	; 0xde
 8029ca6:	4865      	ldr	r0, [pc, #404]	; (8029e3c <__gethex+0x30c>)
 8029ca8:	f001 f96c 	bl	802af84 <__assert_func>
 8029cac:	3101      	adds	r1, #1
 8029cae:	105b      	asrs	r3, r3, #1
 8029cb0:	e7ee      	b.n	8029c90 <__gethex+0x160>
 8029cb2:	f100 0914 	add.w	r9, r0, #20
 8029cb6:	f04f 0b00 	mov.w	fp, #0
 8029cba:	f1ca 0301 	rsb	r3, sl, #1
 8029cbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8029cc2:	f8cd b000 	str.w	fp, [sp]
 8029cc6:	9306      	str	r3, [sp, #24]
 8029cc8:	42b7      	cmp	r7, r6
 8029cca:	d340      	bcc.n	8029d4e <__gethex+0x21e>
 8029ccc:	9802      	ldr	r0, [sp, #8]
 8029cce:	9b00      	ldr	r3, [sp, #0]
 8029cd0:	f840 3b04 	str.w	r3, [r0], #4
 8029cd4:	eba0 0009 	sub.w	r0, r0, r9
 8029cd8:	1080      	asrs	r0, r0, #2
 8029cda:	0146      	lsls	r6, r0, #5
 8029cdc:	6120      	str	r0, [r4, #16]
 8029cde:	4618      	mov	r0, r3
 8029ce0:	f000 fb50 	bl	802a384 <__hi0bits>
 8029ce4:	1a30      	subs	r0, r6, r0
 8029ce6:	f8d8 6000 	ldr.w	r6, [r8]
 8029cea:	42b0      	cmp	r0, r6
 8029cec:	dd63      	ble.n	8029db6 <__gethex+0x286>
 8029cee:	1b87      	subs	r7, r0, r6
 8029cf0:	4639      	mov	r1, r7
 8029cf2:	4620      	mov	r0, r4
 8029cf4:	f000 feea 	bl	802aacc <__any_on>
 8029cf8:	4682      	mov	sl, r0
 8029cfa:	b1a8      	cbz	r0, 8029d28 <__gethex+0x1f8>
 8029cfc:	1e7b      	subs	r3, r7, #1
 8029cfe:	1159      	asrs	r1, r3, #5
 8029d00:	f003 021f 	and.w	r2, r3, #31
 8029d04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8029d08:	f04f 0a01 	mov.w	sl, #1
 8029d0c:	fa0a f202 	lsl.w	r2, sl, r2
 8029d10:	420a      	tst	r2, r1
 8029d12:	d009      	beq.n	8029d28 <__gethex+0x1f8>
 8029d14:	4553      	cmp	r3, sl
 8029d16:	dd05      	ble.n	8029d24 <__gethex+0x1f4>
 8029d18:	1eb9      	subs	r1, r7, #2
 8029d1a:	4620      	mov	r0, r4
 8029d1c:	f000 fed6 	bl	802aacc <__any_on>
 8029d20:	2800      	cmp	r0, #0
 8029d22:	d145      	bne.n	8029db0 <__gethex+0x280>
 8029d24:	f04f 0a02 	mov.w	sl, #2
 8029d28:	4639      	mov	r1, r7
 8029d2a:	4620      	mov	r0, r4
 8029d2c:	f7ff fe98 	bl	8029a60 <rshift>
 8029d30:	443d      	add	r5, r7
 8029d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029d36:	42ab      	cmp	r3, r5
 8029d38:	da4c      	bge.n	8029dd4 <__gethex+0x2a4>
 8029d3a:	ee18 0a10 	vmov	r0, s16
 8029d3e:	4621      	mov	r1, r4
 8029d40:	f000 fa6a 	bl	802a218 <_Bfree>
 8029d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029d46:	2300      	movs	r3, #0
 8029d48:	6013      	str	r3, [r2, #0]
 8029d4a:	27a3      	movs	r7, #163	; 0xa3
 8029d4c:	e785      	b.n	8029c5a <__gethex+0x12a>
 8029d4e:	1e73      	subs	r3, r6, #1
 8029d50:	9a05      	ldr	r2, [sp, #20]
 8029d52:	9303      	str	r3, [sp, #12]
 8029d54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029d58:	4293      	cmp	r3, r2
 8029d5a:	d019      	beq.n	8029d90 <__gethex+0x260>
 8029d5c:	f1bb 0f20 	cmp.w	fp, #32
 8029d60:	d107      	bne.n	8029d72 <__gethex+0x242>
 8029d62:	9b02      	ldr	r3, [sp, #8]
 8029d64:	9a00      	ldr	r2, [sp, #0]
 8029d66:	f843 2b04 	str.w	r2, [r3], #4
 8029d6a:	9302      	str	r3, [sp, #8]
 8029d6c:	2300      	movs	r3, #0
 8029d6e:	9300      	str	r3, [sp, #0]
 8029d70:	469b      	mov	fp, r3
 8029d72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8029d76:	f7ff fec5 	bl	8029b04 <__hexdig_fun>
 8029d7a:	9b00      	ldr	r3, [sp, #0]
 8029d7c:	f000 000f 	and.w	r0, r0, #15
 8029d80:	fa00 f00b 	lsl.w	r0, r0, fp
 8029d84:	4303      	orrs	r3, r0
 8029d86:	9300      	str	r3, [sp, #0]
 8029d88:	f10b 0b04 	add.w	fp, fp, #4
 8029d8c:	9b03      	ldr	r3, [sp, #12]
 8029d8e:	e00d      	b.n	8029dac <__gethex+0x27c>
 8029d90:	9b03      	ldr	r3, [sp, #12]
 8029d92:	9a06      	ldr	r2, [sp, #24]
 8029d94:	4413      	add	r3, r2
 8029d96:	42bb      	cmp	r3, r7
 8029d98:	d3e0      	bcc.n	8029d5c <__gethex+0x22c>
 8029d9a:	4618      	mov	r0, r3
 8029d9c:	9901      	ldr	r1, [sp, #4]
 8029d9e:	9307      	str	r3, [sp, #28]
 8029da0:	4652      	mov	r2, sl
 8029da2:	f7fe f99d 	bl	80280e0 <strncmp>
 8029da6:	9b07      	ldr	r3, [sp, #28]
 8029da8:	2800      	cmp	r0, #0
 8029daa:	d1d7      	bne.n	8029d5c <__gethex+0x22c>
 8029dac:	461e      	mov	r6, r3
 8029dae:	e78b      	b.n	8029cc8 <__gethex+0x198>
 8029db0:	f04f 0a03 	mov.w	sl, #3
 8029db4:	e7b8      	b.n	8029d28 <__gethex+0x1f8>
 8029db6:	da0a      	bge.n	8029dce <__gethex+0x29e>
 8029db8:	1a37      	subs	r7, r6, r0
 8029dba:	4621      	mov	r1, r4
 8029dbc:	ee18 0a10 	vmov	r0, s16
 8029dc0:	463a      	mov	r2, r7
 8029dc2:	f000 fc45 	bl	802a650 <__lshift>
 8029dc6:	1bed      	subs	r5, r5, r7
 8029dc8:	4604      	mov	r4, r0
 8029dca:	f100 0914 	add.w	r9, r0, #20
 8029dce:	f04f 0a00 	mov.w	sl, #0
 8029dd2:	e7ae      	b.n	8029d32 <__gethex+0x202>
 8029dd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8029dd8:	42a8      	cmp	r0, r5
 8029dda:	dd72      	ble.n	8029ec2 <__gethex+0x392>
 8029ddc:	1b45      	subs	r5, r0, r5
 8029dde:	42ae      	cmp	r6, r5
 8029de0:	dc36      	bgt.n	8029e50 <__gethex+0x320>
 8029de2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029de6:	2b02      	cmp	r3, #2
 8029de8:	d02a      	beq.n	8029e40 <__gethex+0x310>
 8029dea:	2b03      	cmp	r3, #3
 8029dec:	d02c      	beq.n	8029e48 <__gethex+0x318>
 8029dee:	2b01      	cmp	r3, #1
 8029df0:	d115      	bne.n	8029e1e <__gethex+0x2ee>
 8029df2:	42ae      	cmp	r6, r5
 8029df4:	d113      	bne.n	8029e1e <__gethex+0x2ee>
 8029df6:	2e01      	cmp	r6, #1
 8029df8:	d10b      	bne.n	8029e12 <__gethex+0x2e2>
 8029dfa:	9a04      	ldr	r2, [sp, #16]
 8029dfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8029e00:	6013      	str	r3, [r2, #0]
 8029e02:	2301      	movs	r3, #1
 8029e04:	6123      	str	r3, [r4, #16]
 8029e06:	f8c9 3000 	str.w	r3, [r9]
 8029e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029e0c:	2762      	movs	r7, #98	; 0x62
 8029e0e:	601c      	str	r4, [r3, #0]
 8029e10:	e723      	b.n	8029c5a <__gethex+0x12a>
 8029e12:	1e71      	subs	r1, r6, #1
 8029e14:	4620      	mov	r0, r4
 8029e16:	f000 fe59 	bl	802aacc <__any_on>
 8029e1a:	2800      	cmp	r0, #0
 8029e1c:	d1ed      	bne.n	8029dfa <__gethex+0x2ca>
 8029e1e:	ee18 0a10 	vmov	r0, s16
 8029e22:	4621      	mov	r1, r4
 8029e24:	f000 f9f8 	bl	802a218 <_Bfree>
 8029e28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029e2a:	2300      	movs	r3, #0
 8029e2c:	6013      	str	r3, [r2, #0]
 8029e2e:	2750      	movs	r7, #80	; 0x50
 8029e30:	e713      	b.n	8029c5a <__gethex+0x12a>
 8029e32:	bf00      	nop
 8029e34:	0802be68 	.word	0x0802be68
 8029e38:	0802bdeb 	.word	0x0802bdeb
 8029e3c:	0802bdfc 	.word	0x0802bdfc
 8029e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029e42:	2b00      	cmp	r3, #0
 8029e44:	d1eb      	bne.n	8029e1e <__gethex+0x2ee>
 8029e46:	e7d8      	b.n	8029dfa <__gethex+0x2ca>
 8029e48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029e4a:	2b00      	cmp	r3, #0
 8029e4c:	d1d5      	bne.n	8029dfa <__gethex+0x2ca>
 8029e4e:	e7e6      	b.n	8029e1e <__gethex+0x2ee>
 8029e50:	1e6f      	subs	r7, r5, #1
 8029e52:	f1ba 0f00 	cmp.w	sl, #0
 8029e56:	d131      	bne.n	8029ebc <__gethex+0x38c>
 8029e58:	b127      	cbz	r7, 8029e64 <__gethex+0x334>
 8029e5a:	4639      	mov	r1, r7
 8029e5c:	4620      	mov	r0, r4
 8029e5e:	f000 fe35 	bl	802aacc <__any_on>
 8029e62:	4682      	mov	sl, r0
 8029e64:	117b      	asrs	r3, r7, #5
 8029e66:	2101      	movs	r1, #1
 8029e68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029e6c:	f007 071f 	and.w	r7, r7, #31
 8029e70:	fa01 f707 	lsl.w	r7, r1, r7
 8029e74:	421f      	tst	r7, r3
 8029e76:	4629      	mov	r1, r5
 8029e78:	4620      	mov	r0, r4
 8029e7a:	bf18      	it	ne
 8029e7c:	f04a 0a02 	orrne.w	sl, sl, #2
 8029e80:	1b76      	subs	r6, r6, r5
 8029e82:	f7ff fded 	bl	8029a60 <rshift>
 8029e86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029e8a:	2702      	movs	r7, #2
 8029e8c:	f1ba 0f00 	cmp.w	sl, #0
 8029e90:	d048      	beq.n	8029f24 <__gethex+0x3f4>
 8029e92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029e96:	2b02      	cmp	r3, #2
 8029e98:	d015      	beq.n	8029ec6 <__gethex+0x396>
 8029e9a:	2b03      	cmp	r3, #3
 8029e9c:	d017      	beq.n	8029ece <__gethex+0x39e>
 8029e9e:	2b01      	cmp	r3, #1
 8029ea0:	d109      	bne.n	8029eb6 <__gethex+0x386>
 8029ea2:	f01a 0f02 	tst.w	sl, #2
 8029ea6:	d006      	beq.n	8029eb6 <__gethex+0x386>
 8029ea8:	f8d9 0000 	ldr.w	r0, [r9]
 8029eac:	ea4a 0a00 	orr.w	sl, sl, r0
 8029eb0:	f01a 0f01 	tst.w	sl, #1
 8029eb4:	d10e      	bne.n	8029ed4 <__gethex+0x3a4>
 8029eb6:	f047 0710 	orr.w	r7, r7, #16
 8029eba:	e033      	b.n	8029f24 <__gethex+0x3f4>
 8029ebc:	f04f 0a01 	mov.w	sl, #1
 8029ec0:	e7d0      	b.n	8029e64 <__gethex+0x334>
 8029ec2:	2701      	movs	r7, #1
 8029ec4:	e7e2      	b.n	8029e8c <__gethex+0x35c>
 8029ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029ec8:	f1c3 0301 	rsb	r3, r3, #1
 8029ecc:	9315      	str	r3, [sp, #84]	; 0x54
 8029ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029ed0:	2b00      	cmp	r3, #0
 8029ed2:	d0f0      	beq.n	8029eb6 <__gethex+0x386>
 8029ed4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029ed8:	f104 0314 	add.w	r3, r4, #20
 8029edc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029ee0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029ee4:	f04f 0c00 	mov.w	ip, #0
 8029ee8:	4618      	mov	r0, r3
 8029eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8029eee:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029ef2:	d01c      	beq.n	8029f2e <__gethex+0x3fe>
 8029ef4:	3201      	adds	r2, #1
 8029ef6:	6002      	str	r2, [r0, #0]
 8029ef8:	2f02      	cmp	r7, #2
 8029efa:	f104 0314 	add.w	r3, r4, #20
 8029efe:	d13f      	bne.n	8029f80 <__gethex+0x450>
 8029f00:	f8d8 2000 	ldr.w	r2, [r8]
 8029f04:	3a01      	subs	r2, #1
 8029f06:	42b2      	cmp	r2, r6
 8029f08:	d10a      	bne.n	8029f20 <__gethex+0x3f0>
 8029f0a:	1171      	asrs	r1, r6, #5
 8029f0c:	2201      	movs	r2, #1
 8029f0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029f12:	f006 061f 	and.w	r6, r6, #31
 8029f16:	fa02 f606 	lsl.w	r6, r2, r6
 8029f1a:	421e      	tst	r6, r3
 8029f1c:	bf18      	it	ne
 8029f1e:	4617      	movne	r7, r2
 8029f20:	f047 0720 	orr.w	r7, r7, #32
 8029f24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029f26:	601c      	str	r4, [r3, #0]
 8029f28:	9b04      	ldr	r3, [sp, #16]
 8029f2a:	601d      	str	r5, [r3, #0]
 8029f2c:	e695      	b.n	8029c5a <__gethex+0x12a>
 8029f2e:	4299      	cmp	r1, r3
 8029f30:	f843 cc04 	str.w	ip, [r3, #-4]
 8029f34:	d8d8      	bhi.n	8029ee8 <__gethex+0x3b8>
 8029f36:	68a3      	ldr	r3, [r4, #8]
 8029f38:	459b      	cmp	fp, r3
 8029f3a:	db19      	blt.n	8029f70 <__gethex+0x440>
 8029f3c:	6861      	ldr	r1, [r4, #4]
 8029f3e:	ee18 0a10 	vmov	r0, s16
 8029f42:	3101      	adds	r1, #1
 8029f44:	f000 f928 	bl	802a198 <_Balloc>
 8029f48:	4681      	mov	r9, r0
 8029f4a:	b918      	cbnz	r0, 8029f54 <__gethex+0x424>
 8029f4c:	4b1a      	ldr	r3, [pc, #104]	; (8029fb8 <__gethex+0x488>)
 8029f4e:	4602      	mov	r2, r0
 8029f50:	2184      	movs	r1, #132	; 0x84
 8029f52:	e6a8      	b.n	8029ca6 <__gethex+0x176>
 8029f54:	6922      	ldr	r2, [r4, #16]
 8029f56:	3202      	adds	r2, #2
 8029f58:	f104 010c 	add.w	r1, r4, #12
 8029f5c:	0092      	lsls	r2, r2, #2
 8029f5e:	300c      	adds	r0, #12
 8029f60:	f000 f90c 	bl	802a17c <memcpy>
 8029f64:	4621      	mov	r1, r4
 8029f66:	ee18 0a10 	vmov	r0, s16
 8029f6a:	f000 f955 	bl	802a218 <_Bfree>
 8029f6e:	464c      	mov	r4, r9
 8029f70:	6923      	ldr	r3, [r4, #16]
 8029f72:	1c5a      	adds	r2, r3, #1
 8029f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029f78:	6122      	str	r2, [r4, #16]
 8029f7a:	2201      	movs	r2, #1
 8029f7c:	615a      	str	r2, [r3, #20]
 8029f7e:	e7bb      	b.n	8029ef8 <__gethex+0x3c8>
 8029f80:	6922      	ldr	r2, [r4, #16]
 8029f82:	455a      	cmp	r2, fp
 8029f84:	dd0b      	ble.n	8029f9e <__gethex+0x46e>
 8029f86:	2101      	movs	r1, #1
 8029f88:	4620      	mov	r0, r4
 8029f8a:	f7ff fd69 	bl	8029a60 <rshift>
 8029f8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029f92:	3501      	adds	r5, #1
 8029f94:	42ab      	cmp	r3, r5
 8029f96:	f6ff aed0 	blt.w	8029d3a <__gethex+0x20a>
 8029f9a:	2701      	movs	r7, #1
 8029f9c:	e7c0      	b.n	8029f20 <__gethex+0x3f0>
 8029f9e:	f016 061f 	ands.w	r6, r6, #31
 8029fa2:	d0fa      	beq.n	8029f9a <__gethex+0x46a>
 8029fa4:	449a      	add	sl, r3
 8029fa6:	f1c6 0620 	rsb	r6, r6, #32
 8029faa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8029fae:	f000 f9e9 	bl	802a384 <__hi0bits>
 8029fb2:	42b0      	cmp	r0, r6
 8029fb4:	dbe7      	blt.n	8029f86 <__gethex+0x456>
 8029fb6:	e7f0      	b.n	8029f9a <__gethex+0x46a>
 8029fb8:	0802bdeb 	.word	0x0802bdeb

08029fbc <L_shift>:
 8029fbc:	f1c2 0208 	rsb	r2, r2, #8
 8029fc0:	0092      	lsls	r2, r2, #2
 8029fc2:	b570      	push	{r4, r5, r6, lr}
 8029fc4:	f1c2 0620 	rsb	r6, r2, #32
 8029fc8:	6843      	ldr	r3, [r0, #4]
 8029fca:	6804      	ldr	r4, [r0, #0]
 8029fcc:	fa03 f506 	lsl.w	r5, r3, r6
 8029fd0:	432c      	orrs	r4, r5
 8029fd2:	40d3      	lsrs	r3, r2
 8029fd4:	6004      	str	r4, [r0, #0]
 8029fd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8029fda:	4288      	cmp	r0, r1
 8029fdc:	d3f4      	bcc.n	8029fc8 <L_shift+0xc>
 8029fde:	bd70      	pop	{r4, r5, r6, pc}

08029fe0 <__match>:
 8029fe0:	b530      	push	{r4, r5, lr}
 8029fe2:	6803      	ldr	r3, [r0, #0]
 8029fe4:	3301      	adds	r3, #1
 8029fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029fea:	b914      	cbnz	r4, 8029ff2 <__match+0x12>
 8029fec:	6003      	str	r3, [r0, #0]
 8029fee:	2001      	movs	r0, #1
 8029ff0:	bd30      	pop	{r4, r5, pc}
 8029ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029ff6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8029ffa:	2d19      	cmp	r5, #25
 8029ffc:	bf98      	it	ls
 8029ffe:	3220      	addls	r2, #32
 802a000:	42a2      	cmp	r2, r4
 802a002:	d0f0      	beq.n	8029fe6 <__match+0x6>
 802a004:	2000      	movs	r0, #0
 802a006:	e7f3      	b.n	8029ff0 <__match+0x10>

0802a008 <__hexnan>:
 802a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a00c:	680b      	ldr	r3, [r1, #0]
 802a00e:	6801      	ldr	r1, [r0, #0]
 802a010:	115e      	asrs	r6, r3, #5
 802a012:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802a016:	f013 031f 	ands.w	r3, r3, #31
 802a01a:	b087      	sub	sp, #28
 802a01c:	bf18      	it	ne
 802a01e:	3604      	addne	r6, #4
 802a020:	2500      	movs	r5, #0
 802a022:	1f37      	subs	r7, r6, #4
 802a024:	4682      	mov	sl, r0
 802a026:	4690      	mov	r8, r2
 802a028:	9301      	str	r3, [sp, #4]
 802a02a:	f846 5c04 	str.w	r5, [r6, #-4]
 802a02e:	46b9      	mov	r9, r7
 802a030:	463c      	mov	r4, r7
 802a032:	9502      	str	r5, [sp, #8]
 802a034:	46ab      	mov	fp, r5
 802a036:	784a      	ldrb	r2, [r1, #1]
 802a038:	1c4b      	adds	r3, r1, #1
 802a03a:	9303      	str	r3, [sp, #12]
 802a03c:	b342      	cbz	r2, 802a090 <__hexnan+0x88>
 802a03e:	4610      	mov	r0, r2
 802a040:	9105      	str	r1, [sp, #20]
 802a042:	9204      	str	r2, [sp, #16]
 802a044:	f7ff fd5e 	bl	8029b04 <__hexdig_fun>
 802a048:	2800      	cmp	r0, #0
 802a04a:	d14f      	bne.n	802a0ec <__hexnan+0xe4>
 802a04c:	9a04      	ldr	r2, [sp, #16]
 802a04e:	9905      	ldr	r1, [sp, #20]
 802a050:	2a20      	cmp	r2, #32
 802a052:	d818      	bhi.n	802a086 <__hexnan+0x7e>
 802a054:	9b02      	ldr	r3, [sp, #8]
 802a056:	459b      	cmp	fp, r3
 802a058:	dd13      	ble.n	802a082 <__hexnan+0x7a>
 802a05a:	454c      	cmp	r4, r9
 802a05c:	d206      	bcs.n	802a06c <__hexnan+0x64>
 802a05e:	2d07      	cmp	r5, #7
 802a060:	dc04      	bgt.n	802a06c <__hexnan+0x64>
 802a062:	462a      	mov	r2, r5
 802a064:	4649      	mov	r1, r9
 802a066:	4620      	mov	r0, r4
 802a068:	f7ff ffa8 	bl	8029fbc <L_shift>
 802a06c:	4544      	cmp	r4, r8
 802a06e:	d950      	bls.n	802a112 <__hexnan+0x10a>
 802a070:	2300      	movs	r3, #0
 802a072:	f1a4 0904 	sub.w	r9, r4, #4
 802a076:	f844 3c04 	str.w	r3, [r4, #-4]
 802a07a:	f8cd b008 	str.w	fp, [sp, #8]
 802a07e:	464c      	mov	r4, r9
 802a080:	461d      	mov	r5, r3
 802a082:	9903      	ldr	r1, [sp, #12]
 802a084:	e7d7      	b.n	802a036 <__hexnan+0x2e>
 802a086:	2a29      	cmp	r2, #41	; 0x29
 802a088:	d156      	bne.n	802a138 <__hexnan+0x130>
 802a08a:	3102      	adds	r1, #2
 802a08c:	f8ca 1000 	str.w	r1, [sl]
 802a090:	f1bb 0f00 	cmp.w	fp, #0
 802a094:	d050      	beq.n	802a138 <__hexnan+0x130>
 802a096:	454c      	cmp	r4, r9
 802a098:	d206      	bcs.n	802a0a8 <__hexnan+0xa0>
 802a09a:	2d07      	cmp	r5, #7
 802a09c:	dc04      	bgt.n	802a0a8 <__hexnan+0xa0>
 802a09e:	462a      	mov	r2, r5
 802a0a0:	4649      	mov	r1, r9
 802a0a2:	4620      	mov	r0, r4
 802a0a4:	f7ff ff8a 	bl	8029fbc <L_shift>
 802a0a8:	4544      	cmp	r4, r8
 802a0aa:	d934      	bls.n	802a116 <__hexnan+0x10e>
 802a0ac:	f1a8 0204 	sub.w	r2, r8, #4
 802a0b0:	4623      	mov	r3, r4
 802a0b2:	f853 1b04 	ldr.w	r1, [r3], #4
 802a0b6:	f842 1f04 	str.w	r1, [r2, #4]!
 802a0ba:	429f      	cmp	r7, r3
 802a0bc:	d2f9      	bcs.n	802a0b2 <__hexnan+0xaa>
 802a0be:	1b3b      	subs	r3, r7, r4
 802a0c0:	f023 0303 	bic.w	r3, r3, #3
 802a0c4:	3304      	adds	r3, #4
 802a0c6:	3401      	adds	r4, #1
 802a0c8:	3e03      	subs	r6, #3
 802a0ca:	42b4      	cmp	r4, r6
 802a0cc:	bf88      	it	hi
 802a0ce:	2304      	movhi	r3, #4
 802a0d0:	4443      	add	r3, r8
 802a0d2:	2200      	movs	r2, #0
 802a0d4:	f843 2b04 	str.w	r2, [r3], #4
 802a0d8:	429f      	cmp	r7, r3
 802a0da:	d2fb      	bcs.n	802a0d4 <__hexnan+0xcc>
 802a0dc:	683b      	ldr	r3, [r7, #0]
 802a0de:	b91b      	cbnz	r3, 802a0e8 <__hexnan+0xe0>
 802a0e0:	4547      	cmp	r7, r8
 802a0e2:	d127      	bne.n	802a134 <__hexnan+0x12c>
 802a0e4:	2301      	movs	r3, #1
 802a0e6:	603b      	str	r3, [r7, #0]
 802a0e8:	2005      	movs	r0, #5
 802a0ea:	e026      	b.n	802a13a <__hexnan+0x132>
 802a0ec:	3501      	adds	r5, #1
 802a0ee:	2d08      	cmp	r5, #8
 802a0f0:	f10b 0b01 	add.w	fp, fp, #1
 802a0f4:	dd06      	ble.n	802a104 <__hexnan+0xfc>
 802a0f6:	4544      	cmp	r4, r8
 802a0f8:	d9c3      	bls.n	802a082 <__hexnan+0x7a>
 802a0fa:	2300      	movs	r3, #0
 802a0fc:	f844 3c04 	str.w	r3, [r4, #-4]
 802a100:	2501      	movs	r5, #1
 802a102:	3c04      	subs	r4, #4
 802a104:	6822      	ldr	r2, [r4, #0]
 802a106:	f000 000f 	and.w	r0, r0, #15
 802a10a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802a10e:	6022      	str	r2, [r4, #0]
 802a110:	e7b7      	b.n	802a082 <__hexnan+0x7a>
 802a112:	2508      	movs	r5, #8
 802a114:	e7b5      	b.n	802a082 <__hexnan+0x7a>
 802a116:	9b01      	ldr	r3, [sp, #4]
 802a118:	2b00      	cmp	r3, #0
 802a11a:	d0df      	beq.n	802a0dc <__hexnan+0xd4>
 802a11c:	f04f 32ff 	mov.w	r2, #4294967295
 802a120:	f1c3 0320 	rsb	r3, r3, #32
 802a124:	fa22 f303 	lsr.w	r3, r2, r3
 802a128:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802a12c:	401a      	ands	r2, r3
 802a12e:	f846 2c04 	str.w	r2, [r6, #-4]
 802a132:	e7d3      	b.n	802a0dc <__hexnan+0xd4>
 802a134:	3f04      	subs	r7, #4
 802a136:	e7d1      	b.n	802a0dc <__hexnan+0xd4>
 802a138:	2004      	movs	r0, #4
 802a13a:	b007      	add	sp, #28
 802a13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a140 <_localeconv_r>:
 802a140:	4800      	ldr	r0, [pc, #0]	; (802a144 <_localeconv_r+0x4>)
 802a142:	4770      	bx	lr
 802a144:	200005c8 	.word	0x200005c8

0802a148 <malloc>:
 802a148:	4b02      	ldr	r3, [pc, #8]	; (802a154 <malloc+0xc>)
 802a14a:	4601      	mov	r1, r0
 802a14c:	6818      	ldr	r0, [r3, #0]
 802a14e:	f000 bd3d 	b.w	802abcc <_malloc_r>
 802a152:	bf00      	nop
 802a154:	20000470 	.word	0x20000470

0802a158 <__ascii_mbtowc>:
 802a158:	b082      	sub	sp, #8
 802a15a:	b901      	cbnz	r1, 802a15e <__ascii_mbtowc+0x6>
 802a15c:	a901      	add	r1, sp, #4
 802a15e:	b142      	cbz	r2, 802a172 <__ascii_mbtowc+0x1a>
 802a160:	b14b      	cbz	r3, 802a176 <__ascii_mbtowc+0x1e>
 802a162:	7813      	ldrb	r3, [r2, #0]
 802a164:	600b      	str	r3, [r1, #0]
 802a166:	7812      	ldrb	r2, [r2, #0]
 802a168:	1e10      	subs	r0, r2, #0
 802a16a:	bf18      	it	ne
 802a16c:	2001      	movne	r0, #1
 802a16e:	b002      	add	sp, #8
 802a170:	4770      	bx	lr
 802a172:	4610      	mov	r0, r2
 802a174:	e7fb      	b.n	802a16e <__ascii_mbtowc+0x16>
 802a176:	f06f 0001 	mvn.w	r0, #1
 802a17a:	e7f8      	b.n	802a16e <__ascii_mbtowc+0x16>

0802a17c <memcpy>:
 802a17c:	440a      	add	r2, r1
 802a17e:	4291      	cmp	r1, r2
 802a180:	f100 33ff 	add.w	r3, r0, #4294967295
 802a184:	d100      	bne.n	802a188 <memcpy+0xc>
 802a186:	4770      	bx	lr
 802a188:	b510      	push	{r4, lr}
 802a18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a192:	4291      	cmp	r1, r2
 802a194:	d1f9      	bne.n	802a18a <memcpy+0xe>
 802a196:	bd10      	pop	{r4, pc}

0802a198 <_Balloc>:
 802a198:	b570      	push	{r4, r5, r6, lr}
 802a19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a19c:	4604      	mov	r4, r0
 802a19e:	460d      	mov	r5, r1
 802a1a0:	b976      	cbnz	r6, 802a1c0 <_Balloc+0x28>
 802a1a2:	2010      	movs	r0, #16
 802a1a4:	f7ff ffd0 	bl	802a148 <malloc>
 802a1a8:	4602      	mov	r2, r0
 802a1aa:	6260      	str	r0, [r4, #36]	; 0x24
 802a1ac:	b920      	cbnz	r0, 802a1b8 <_Balloc+0x20>
 802a1ae:	4b18      	ldr	r3, [pc, #96]	; (802a210 <_Balloc+0x78>)
 802a1b0:	4818      	ldr	r0, [pc, #96]	; (802a214 <_Balloc+0x7c>)
 802a1b2:	2166      	movs	r1, #102	; 0x66
 802a1b4:	f000 fee6 	bl	802af84 <__assert_func>
 802a1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a1bc:	6006      	str	r6, [r0, #0]
 802a1be:	60c6      	str	r6, [r0, #12]
 802a1c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802a1c2:	68f3      	ldr	r3, [r6, #12]
 802a1c4:	b183      	cbz	r3, 802a1e8 <_Balloc+0x50>
 802a1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a1c8:	68db      	ldr	r3, [r3, #12]
 802a1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a1ce:	b9b8      	cbnz	r0, 802a200 <_Balloc+0x68>
 802a1d0:	2101      	movs	r1, #1
 802a1d2:	fa01 f605 	lsl.w	r6, r1, r5
 802a1d6:	1d72      	adds	r2, r6, #5
 802a1d8:	0092      	lsls	r2, r2, #2
 802a1da:	4620      	mov	r0, r4
 802a1dc:	f000 fc97 	bl	802ab0e <_calloc_r>
 802a1e0:	b160      	cbz	r0, 802a1fc <_Balloc+0x64>
 802a1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a1e6:	e00e      	b.n	802a206 <_Balloc+0x6e>
 802a1e8:	2221      	movs	r2, #33	; 0x21
 802a1ea:	2104      	movs	r1, #4
 802a1ec:	4620      	mov	r0, r4
 802a1ee:	f000 fc8e 	bl	802ab0e <_calloc_r>
 802a1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a1f4:	60f0      	str	r0, [r6, #12]
 802a1f6:	68db      	ldr	r3, [r3, #12]
 802a1f8:	2b00      	cmp	r3, #0
 802a1fa:	d1e4      	bne.n	802a1c6 <_Balloc+0x2e>
 802a1fc:	2000      	movs	r0, #0
 802a1fe:	bd70      	pop	{r4, r5, r6, pc}
 802a200:	6802      	ldr	r2, [r0, #0]
 802a202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a206:	2300      	movs	r3, #0
 802a208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a20c:	e7f7      	b.n	802a1fe <_Balloc+0x66>
 802a20e:	bf00      	nop
 802a210:	0802bd75 	.word	0x0802bd75
 802a214:	0802be7c 	.word	0x0802be7c

0802a218 <_Bfree>:
 802a218:	b570      	push	{r4, r5, r6, lr}
 802a21a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a21c:	4605      	mov	r5, r0
 802a21e:	460c      	mov	r4, r1
 802a220:	b976      	cbnz	r6, 802a240 <_Bfree+0x28>
 802a222:	2010      	movs	r0, #16
 802a224:	f7ff ff90 	bl	802a148 <malloc>
 802a228:	4602      	mov	r2, r0
 802a22a:	6268      	str	r0, [r5, #36]	; 0x24
 802a22c:	b920      	cbnz	r0, 802a238 <_Bfree+0x20>
 802a22e:	4b09      	ldr	r3, [pc, #36]	; (802a254 <_Bfree+0x3c>)
 802a230:	4809      	ldr	r0, [pc, #36]	; (802a258 <_Bfree+0x40>)
 802a232:	218a      	movs	r1, #138	; 0x8a
 802a234:	f000 fea6 	bl	802af84 <__assert_func>
 802a238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a23c:	6006      	str	r6, [r0, #0]
 802a23e:	60c6      	str	r6, [r0, #12]
 802a240:	b13c      	cbz	r4, 802a252 <_Bfree+0x3a>
 802a242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a244:	6862      	ldr	r2, [r4, #4]
 802a246:	68db      	ldr	r3, [r3, #12]
 802a248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a24c:	6021      	str	r1, [r4, #0]
 802a24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a252:	bd70      	pop	{r4, r5, r6, pc}
 802a254:	0802bd75 	.word	0x0802bd75
 802a258:	0802be7c 	.word	0x0802be7c

0802a25c <__multadd>:
 802a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a260:	690e      	ldr	r6, [r1, #16]
 802a262:	4607      	mov	r7, r0
 802a264:	4698      	mov	r8, r3
 802a266:	460c      	mov	r4, r1
 802a268:	f101 0014 	add.w	r0, r1, #20
 802a26c:	2300      	movs	r3, #0
 802a26e:	6805      	ldr	r5, [r0, #0]
 802a270:	b2a9      	uxth	r1, r5
 802a272:	fb02 8101 	mla	r1, r2, r1, r8
 802a276:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802a27a:	0c2d      	lsrs	r5, r5, #16
 802a27c:	fb02 c505 	mla	r5, r2, r5, ip
 802a280:	b289      	uxth	r1, r1
 802a282:	3301      	adds	r3, #1
 802a284:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802a288:	429e      	cmp	r6, r3
 802a28a:	f840 1b04 	str.w	r1, [r0], #4
 802a28e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802a292:	dcec      	bgt.n	802a26e <__multadd+0x12>
 802a294:	f1b8 0f00 	cmp.w	r8, #0
 802a298:	d022      	beq.n	802a2e0 <__multadd+0x84>
 802a29a:	68a3      	ldr	r3, [r4, #8]
 802a29c:	42b3      	cmp	r3, r6
 802a29e:	dc19      	bgt.n	802a2d4 <__multadd+0x78>
 802a2a0:	6861      	ldr	r1, [r4, #4]
 802a2a2:	4638      	mov	r0, r7
 802a2a4:	3101      	adds	r1, #1
 802a2a6:	f7ff ff77 	bl	802a198 <_Balloc>
 802a2aa:	4605      	mov	r5, r0
 802a2ac:	b928      	cbnz	r0, 802a2ba <__multadd+0x5e>
 802a2ae:	4602      	mov	r2, r0
 802a2b0:	4b0d      	ldr	r3, [pc, #52]	; (802a2e8 <__multadd+0x8c>)
 802a2b2:	480e      	ldr	r0, [pc, #56]	; (802a2ec <__multadd+0x90>)
 802a2b4:	21b5      	movs	r1, #181	; 0xb5
 802a2b6:	f000 fe65 	bl	802af84 <__assert_func>
 802a2ba:	6922      	ldr	r2, [r4, #16]
 802a2bc:	3202      	adds	r2, #2
 802a2be:	f104 010c 	add.w	r1, r4, #12
 802a2c2:	0092      	lsls	r2, r2, #2
 802a2c4:	300c      	adds	r0, #12
 802a2c6:	f7ff ff59 	bl	802a17c <memcpy>
 802a2ca:	4621      	mov	r1, r4
 802a2cc:	4638      	mov	r0, r7
 802a2ce:	f7ff ffa3 	bl	802a218 <_Bfree>
 802a2d2:	462c      	mov	r4, r5
 802a2d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802a2d8:	3601      	adds	r6, #1
 802a2da:	f8c3 8014 	str.w	r8, [r3, #20]
 802a2de:	6126      	str	r6, [r4, #16]
 802a2e0:	4620      	mov	r0, r4
 802a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a2e6:	bf00      	nop
 802a2e8:	0802bdeb 	.word	0x0802bdeb
 802a2ec:	0802be7c 	.word	0x0802be7c

0802a2f0 <__s2b>:
 802a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a2f4:	460c      	mov	r4, r1
 802a2f6:	4615      	mov	r5, r2
 802a2f8:	461f      	mov	r7, r3
 802a2fa:	2209      	movs	r2, #9
 802a2fc:	3308      	adds	r3, #8
 802a2fe:	4606      	mov	r6, r0
 802a300:	fb93 f3f2 	sdiv	r3, r3, r2
 802a304:	2100      	movs	r1, #0
 802a306:	2201      	movs	r2, #1
 802a308:	429a      	cmp	r2, r3
 802a30a:	db09      	blt.n	802a320 <__s2b+0x30>
 802a30c:	4630      	mov	r0, r6
 802a30e:	f7ff ff43 	bl	802a198 <_Balloc>
 802a312:	b940      	cbnz	r0, 802a326 <__s2b+0x36>
 802a314:	4602      	mov	r2, r0
 802a316:	4b19      	ldr	r3, [pc, #100]	; (802a37c <__s2b+0x8c>)
 802a318:	4819      	ldr	r0, [pc, #100]	; (802a380 <__s2b+0x90>)
 802a31a:	21ce      	movs	r1, #206	; 0xce
 802a31c:	f000 fe32 	bl	802af84 <__assert_func>
 802a320:	0052      	lsls	r2, r2, #1
 802a322:	3101      	adds	r1, #1
 802a324:	e7f0      	b.n	802a308 <__s2b+0x18>
 802a326:	9b08      	ldr	r3, [sp, #32]
 802a328:	6143      	str	r3, [r0, #20]
 802a32a:	2d09      	cmp	r5, #9
 802a32c:	f04f 0301 	mov.w	r3, #1
 802a330:	6103      	str	r3, [r0, #16]
 802a332:	dd16      	ble.n	802a362 <__s2b+0x72>
 802a334:	f104 0909 	add.w	r9, r4, #9
 802a338:	46c8      	mov	r8, r9
 802a33a:	442c      	add	r4, r5
 802a33c:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a340:	4601      	mov	r1, r0
 802a342:	3b30      	subs	r3, #48	; 0x30
 802a344:	220a      	movs	r2, #10
 802a346:	4630      	mov	r0, r6
 802a348:	f7ff ff88 	bl	802a25c <__multadd>
 802a34c:	45a0      	cmp	r8, r4
 802a34e:	d1f5      	bne.n	802a33c <__s2b+0x4c>
 802a350:	f1a5 0408 	sub.w	r4, r5, #8
 802a354:	444c      	add	r4, r9
 802a356:	1b2d      	subs	r5, r5, r4
 802a358:	1963      	adds	r3, r4, r5
 802a35a:	42bb      	cmp	r3, r7
 802a35c:	db04      	blt.n	802a368 <__s2b+0x78>
 802a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a362:	340a      	adds	r4, #10
 802a364:	2509      	movs	r5, #9
 802a366:	e7f6      	b.n	802a356 <__s2b+0x66>
 802a368:	f814 3b01 	ldrb.w	r3, [r4], #1
 802a36c:	4601      	mov	r1, r0
 802a36e:	3b30      	subs	r3, #48	; 0x30
 802a370:	220a      	movs	r2, #10
 802a372:	4630      	mov	r0, r6
 802a374:	f7ff ff72 	bl	802a25c <__multadd>
 802a378:	e7ee      	b.n	802a358 <__s2b+0x68>
 802a37a:	bf00      	nop
 802a37c:	0802bdeb 	.word	0x0802bdeb
 802a380:	0802be7c 	.word	0x0802be7c

0802a384 <__hi0bits>:
 802a384:	0c03      	lsrs	r3, r0, #16
 802a386:	041b      	lsls	r3, r3, #16
 802a388:	b9d3      	cbnz	r3, 802a3c0 <__hi0bits+0x3c>
 802a38a:	0400      	lsls	r0, r0, #16
 802a38c:	2310      	movs	r3, #16
 802a38e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802a392:	bf04      	itt	eq
 802a394:	0200      	lsleq	r0, r0, #8
 802a396:	3308      	addeq	r3, #8
 802a398:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802a39c:	bf04      	itt	eq
 802a39e:	0100      	lsleq	r0, r0, #4
 802a3a0:	3304      	addeq	r3, #4
 802a3a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802a3a6:	bf04      	itt	eq
 802a3a8:	0080      	lsleq	r0, r0, #2
 802a3aa:	3302      	addeq	r3, #2
 802a3ac:	2800      	cmp	r0, #0
 802a3ae:	db05      	blt.n	802a3bc <__hi0bits+0x38>
 802a3b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802a3b4:	f103 0301 	add.w	r3, r3, #1
 802a3b8:	bf08      	it	eq
 802a3ba:	2320      	moveq	r3, #32
 802a3bc:	4618      	mov	r0, r3
 802a3be:	4770      	bx	lr
 802a3c0:	2300      	movs	r3, #0
 802a3c2:	e7e4      	b.n	802a38e <__hi0bits+0xa>

0802a3c4 <__lo0bits>:
 802a3c4:	6803      	ldr	r3, [r0, #0]
 802a3c6:	f013 0207 	ands.w	r2, r3, #7
 802a3ca:	4601      	mov	r1, r0
 802a3cc:	d00b      	beq.n	802a3e6 <__lo0bits+0x22>
 802a3ce:	07da      	lsls	r2, r3, #31
 802a3d0:	d424      	bmi.n	802a41c <__lo0bits+0x58>
 802a3d2:	0798      	lsls	r0, r3, #30
 802a3d4:	bf49      	itett	mi
 802a3d6:	085b      	lsrmi	r3, r3, #1
 802a3d8:	089b      	lsrpl	r3, r3, #2
 802a3da:	2001      	movmi	r0, #1
 802a3dc:	600b      	strmi	r3, [r1, #0]
 802a3de:	bf5c      	itt	pl
 802a3e0:	600b      	strpl	r3, [r1, #0]
 802a3e2:	2002      	movpl	r0, #2
 802a3e4:	4770      	bx	lr
 802a3e6:	b298      	uxth	r0, r3
 802a3e8:	b9b0      	cbnz	r0, 802a418 <__lo0bits+0x54>
 802a3ea:	0c1b      	lsrs	r3, r3, #16
 802a3ec:	2010      	movs	r0, #16
 802a3ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 802a3f2:	bf04      	itt	eq
 802a3f4:	0a1b      	lsreq	r3, r3, #8
 802a3f6:	3008      	addeq	r0, #8
 802a3f8:	071a      	lsls	r2, r3, #28
 802a3fa:	bf04      	itt	eq
 802a3fc:	091b      	lsreq	r3, r3, #4
 802a3fe:	3004      	addeq	r0, #4
 802a400:	079a      	lsls	r2, r3, #30
 802a402:	bf04      	itt	eq
 802a404:	089b      	lsreq	r3, r3, #2
 802a406:	3002      	addeq	r0, #2
 802a408:	07da      	lsls	r2, r3, #31
 802a40a:	d403      	bmi.n	802a414 <__lo0bits+0x50>
 802a40c:	085b      	lsrs	r3, r3, #1
 802a40e:	f100 0001 	add.w	r0, r0, #1
 802a412:	d005      	beq.n	802a420 <__lo0bits+0x5c>
 802a414:	600b      	str	r3, [r1, #0]
 802a416:	4770      	bx	lr
 802a418:	4610      	mov	r0, r2
 802a41a:	e7e8      	b.n	802a3ee <__lo0bits+0x2a>
 802a41c:	2000      	movs	r0, #0
 802a41e:	4770      	bx	lr
 802a420:	2020      	movs	r0, #32
 802a422:	4770      	bx	lr

0802a424 <__i2b>:
 802a424:	b510      	push	{r4, lr}
 802a426:	460c      	mov	r4, r1
 802a428:	2101      	movs	r1, #1
 802a42a:	f7ff feb5 	bl	802a198 <_Balloc>
 802a42e:	4602      	mov	r2, r0
 802a430:	b928      	cbnz	r0, 802a43e <__i2b+0x1a>
 802a432:	4b05      	ldr	r3, [pc, #20]	; (802a448 <__i2b+0x24>)
 802a434:	4805      	ldr	r0, [pc, #20]	; (802a44c <__i2b+0x28>)
 802a436:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802a43a:	f000 fda3 	bl	802af84 <__assert_func>
 802a43e:	2301      	movs	r3, #1
 802a440:	6144      	str	r4, [r0, #20]
 802a442:	6103      	str	r3, [r0, #16]
 802a444:	bd10      	pop	{r4, pc}
 802a446:	bf00      	nop
 802a448:	0802bdeb 	.word	0x0802bdeb
 802a44c:	0802be7c 	.word	0x0802be7c

0802a450 <__multiply>:
 802a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a454:	4614      	mov	r4, r2
 802a456:	690a      	ldr	r2, [r1, #16]
 802a458:	6923      	ldr	r3, [r4, #16]
 802a45a:	429a      	cmp	r2, r3
 802a45c:	bfb8      	it	lt
 802a45e:	460b      	movlt	r3, r1
 802a460:	460d      	mov	r5, r1
 802a462:	bfbc      	itt	lt
 802a464:	4625      	movlt	r5, r4
 802a466:	461c      	movlt	r4, r3
 802a468:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802a46c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a470:	68ab      	ldr	r3, [r5, #8]
 802a472:	6869      	ldr	r1, [r5, #4]
 802a474:	eb0a 0709 	add.w	r7, sl, r9
 802a478:	42bb      	cmp	r3, r7
 802a47a:	b085      	sub	sp, #20
 802a47c:	bfb8      	it	lt
 802a47e:	3101      	addlt	r1, #1
 802a480:	f7ff fe8a 	bl	802a198 <_Balloc>
 802a484:	b930      	cbnz	r0, 802a494 <__multiply+0x44>
 802a486:	4602      	mov	r2, r0
 802a488:	4b42      	ldr	r3, [pc, #264]	; (802a594 <__multiply+0x144>)
 802a48a:	4843      	ldr	r0, [pc, #268]	; (802a598 <__multiply+0x148>)
 802a48c:	f240 115d 	movw	r1, #349	; 0x15d
 802a490:	f000 fd78 	bl	802af84 <__assert_func>
 802a494:	f100 0614 	add.w	r6, r0, #20
 802a498:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802a49c:	4633      	mov	r3, r6
 802a49e:	2200      	movs	r2, #0
 802a4a0:	4543      	cmp	r3, r8
 802a4a2:	d31e      	bcc.n	802a4e2 <__multiply+0x92>
 802a4a4:	f105 0c14 	add.w	ip, r5, #20
 802a4a8:	f104 0314 	add.w	r3, r4, #20
 802a4ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802a4b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802a4b4:	9202      	str	r2, [sp, #8]
 802a4b6:	ebac 0205 	sub.w	r2, ip, r5
 802a4ba:	3a15      	subs	r2, #21
 802a4bc:	f022 0203 	bic.w	r2, r2, #3
 802a4c0:	3204      	adds	r2, #4
 802a4c2:	f105 0115 	add.w	r1, r5, #21
 802a4c6:	458c      	cmp	ip, r1
 802a4c8:	bf38      	it	cc
 802a4ca:	2204      	movcc	r2, #4
 802a4cc:	9201      	str	r2, [sp, #4]
 802a4ce:	9a02      	ldr	r2, [sp, #8]
 802a4d0:	9303      	str	r3, [sp, #12]
 802a4d2:	429a      	cmp	r2, r3
 802a4d4:	d808      	bhi.n	802a4e8 <__multiply+0x98>
 802a4d6:	2f00      	cmp	r7, #0
 802a4d8:	dc55      	bgt.n	802a586 <__multiply+0x136>
 802a4da:	6107      	str	r7, [r0, #16]
 802a4dc:	b005      	add	sp, #20
 802a4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4e2:	f843 2b04 	str.w	r2, [r3], #4
 802a4e6:	e7db      	b.n	802a4a0 <__multiply+0x50>
 802a4e8:	f8b3 a000 	ldrh.w	sl, [r3]
 802a4ec:	f1ba 0f00 	cmp.w	sl, #0
 802a4f0:	d020      	beq.n	802a534 <__multiply+0xe4>
 802a4f2:	f105 0e14 	add.w	lr, r5, #20
 802a4f6:	46b1      	mov	r9, r6
 802a4f8:	2200      	movs	r2, #0
 802a4fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 802a4fe:	f8d9 b000 	ldr.w	fp, [r9]
 802a502:	b2a1      	uxth	r1, r4
 802a504:	fa1f fb8b 	uxth.w	fp, fp
 802a508:	fb0a b101 	mla	r1, sl, r1, fp
 802a50c:	4411      	add	r1, r2
 802a50e:	f8d9 2000 	ldr.w	r2, [r9]
 802a512:	0c24      	lsrs	r4, r4, #16
 802a514:	0c12      	lsrs	r2, r2, #16
 802a516:	fb0a 2404 	mla	r4, sl, r4, r2
 802a51a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802a51e:	b289      	uxth	r1, r1
 802a520:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802a524:	45f4      	cmp	ip, lr
 802a526:	f849 1b04 	str.w	r1, [r9], #4
 802a52a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802a52e:	d8e4      	bhi.n	802a4fa <__multiply+0xaa>
 802a530:	9901      	ldr	r1, [sp, #4]
 802a532:	5072      	str	r2, [r6, r1]
 802a534:	9a03      	ldr	r2, [sp, #12]
 802a536:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802a53a:	3304      	adds	r3, #4
 802a53c:	f1b9 0f00 	cmp.w	r9, #0
 802a540:	d01f      	beq.n	802a582 <__multiply+0x132>
 802a542:	6834      	ldr	r4, [r6, #0]
 802a544:	f105 0114 	add.w	r1, r5, #20
 802a548:	46b6      	mov	lr, r6
 802a54a:	f04f 0a00 	mov.w	sl, #0
 802a54e:	880a      	ldrh	r2, [r1, #0]
 802a550:	f8be b002 	ldrh.w	fp, [lr, #2]
 802a554:	fb09 b202 	mla	r2, r9, r2, fp
 802a558:	4492      	add	sl, r2
 802a55a:	b2a4      	uxth	r4, r4
 802a55c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802a560:	f84e 4b04 	str.w	r4, [lr], #4
 802a564:	f851 4b04 	ldr.w	r4, [r1], #4
 802a568:	f8be 2000 	ldrh.w	r2, [lr]
 802a56c:	0c24      	lsrs	r4, r4, #16
 802a56e:	fb09 2404 	mla	r4, r9, r4, r2
 802a572:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802a576:	458c      	cmp	ip, r1
 802a578:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802a57c:	d8e7      	bhi.n	802a54e <__multiply+0xfe>
 802a57e:	9a01      	ldr	r2, [sp, #4]
 802a580:	50b4      	str	r4, [r6, r2]
 802a582:	3604      	adds	r6, #4
 802a584:	e7a3      	b.n	802a4ce <__multiply+0x7e>
 802a586:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a58a:	2b00      	cmp	r3, #0
 802a58c:	d1a5      	bne.n	802a4da <__multiply+0x8a>
 802a58e:	3f01      	subs	r7, #1
 802a590:	e7a1      	b.n	802a4d6 <__multiply+0x86>
 802a592:	bf00      	nop
 802a594:	0802bdeb 	.word	0x0802bdeb
 802a598:	0802be7c 	.word	0x0802be7c

0802a59c <__pow5mult>:
 802a59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a5a0:	4615      	mov	r5, r2
 802a5a2:	f012 0203 	ands.w	r2, r2, #3
 802a5a6:	4606      	mov	r6, r0
 802a5a8:	460f      	mov	r7, r1
 802a5aa:	d007      	beq.n	802a5bc <__pow5mult+0x20>
 802a5ac:	4c25      	ldr	r4, [pc, #148]	; (802a644 <__pow5mult+0xa8>)
 802a5ae:	3a01      	subs	r2, #1
 802a5b0:	2300      	movs	r3, #0
 802a5b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a5b6:	f7ff fe51 	bl	802a25c <__multadd>
 802a5ba:	4607      	mov	r7, r0
 802a5bc:	10ad      	asrs	r5, r5, #2
 802a5be:	d03d      	beq.n	802a63c <__pow5mult+0xa0>
 802a5c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a5c2:	b97c      	cbnz	r4, 802a5e4 <__pow5mult+0x48>
 802a5c4:	2010      	movs	r0, #16
 802a5c6:	f7ff fdbf 	bl	802a148 <malloc>
 802a5ca:	4602      	mov	r2, r0
 802a5cc:	6270      	str	r0, [r6, #36]	; 0x24
 802a5ce:	b928      	cbnz	r0, 802a5dc <__pow5mult+0x40>
 802a5d0:	4b1d      	ldr	r3, [pc, #116]	; (802a648 <__pow5mult+0xac>)
 802a5d2:	481e      	ldr	r0, [pc, #120]	; (802a64c <__pow5mult+0xb0>)
 802a5d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a5d8:	f000 fcd4 	bl	802af84 <__assert_func>
 802a5dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a5e0:	6004      	str	r4, [r0, #0]
 802a5e2:	60c4      	str	r4, [r0, #12]
 802a5e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a5e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a5ec:	b94c      	cbnz	r4, 802a602 <__pow5mult+0x66>
 802a5ee:	f240 2171 	movw	r1, #625	; 0x271
 802a5f2:	4630      	mov	r0, r6
 802a5f4:	f7ff ff16 	bl	802a424 <__i2b>
 802a5f8:	2300      	movs	r3, #0
 802a5fa:	f8c8 0008 	str.w	r0, [r8, #8]
 802a5fe:	4604      	mov	r4, r0
 802a600:	6003      	str	r3, [r0, #0]
 802a602:	f04f 0900 	mov.w	r9, #0
 802a606:	07eb      	lsls	r3, r5, #31
 802a608:	d50a      	bpl.n	802a620 <__pow5mult+0x84>
 802a60a:	4639      	mov	r1, r7
 802a60c:	4622      	mov	r2, r4
 802a60e:	4630      	mov	r0, r6
 802a610:	f7ff ff1e 	bl	802a450 <__multiply>
 802a614:	4639      	mov	r1, r7
 802a616:	4680      	mov	r8, r0
 802a618:	4630      	mov	r0, r6
 802a61a:	f7ff fdfd 	bl	802a218 <_Bfree>
 802a61e:	4647      	mov	r7, r8
 802a620:	106d      	asrs	r5, r5, #1
 802a622:	d00b      	beq.n	802a63c <__pow5mult+0xa0>
 802a624:	6820      	ldr	r0, [r4, #0]
 802a626:	b938      	cbnz	r0, 802a638 <__pow5mult+0x9c>
 802a628:	4622      	mov	r2, r4
 802a62a:	4621      	mov	r1, r4
 802a62c:	4630      	mov	r0, r6
 802a62e:	f7ff ff0f 	bl	802a450 <__multiply>
 802a632:	6020      	str	r0, [r4, #0]
 802a634:	f8c0 9000 	str.w	r9, [r0]
 802a638:	4604      	mov	r4, r0
 802a63a:	e7e4      	b.n	802a606 <__pow5mult+0x6a>
 802a63c:	4638      	mov	r0, r7
 802a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a642:	bf00      	nop
 802a644:	0802bfd0 	.word	0x0802bfd0
 802a648:	0802bd75 	.word	0x0802bd75
 802a64c:	0802be7c 	.word	0x0802be7c

0802a650 <__lshift>:
 802a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a654:	460c      	mov	r4, r1
 802a656:	6849      	ldr	r1, [r1, #4]
 802a658:	6923      	ldr	r3, [r4, #16]
 802a65a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a65e:	68a3      	ldr	r3, [r4, #8]
 802a660:	4607      	mov	r7, r0
 802a662:	4691      	mov	r9, r2
 802a664:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a668:	f108 0601 	add.w	r6, r8, #1
 802a66c:	42b3      	cmp	r3, r6
 802a66e:	db0b      	blt.n	802a688 <__lshift+0x38>
 802a670:	4638      	mov	r0, r7
 802a672:	f7ff fd91 	bl	802a198 <_Balloc>
 802a676:	4605      	mov	r5, r0
 802a678:	b948      	cbnz	r0, 802a68e <__lshift+0x3e>
 802a67a:	4602      	mov	r2, r0
 802a67c:	4b28      	ldr	r3, [pc, #160]	; (802a720 <__lshift+0xd0>)
 802a67e:	4829      	ldr	r0, [pc, #164]	; (802a724 <__lshift+0xd4>)
 802a680:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a684:	f000 fc7e 	bl	802af84 <__assert_func>
 802a688:	3101      	adds	r1, #1
 802a68a:	005b      	lsls	r3, r3, #1
 802a68c:	e7ee      	b.n	802a66c <__lshift+0x1c>
 802a68e:	2300      	movs	r3, #0
 802a690:	f100 0114 	add.w	r1, r0, #20
 802a694:	f100 0210 	add.w	r2, r0, #16
 802a698:	4618      	mov	r0, r3
 802a69a:	4553      	cmp	r3, sl
 802a69c:	db33      	blt.n	802a706 <__lshift+0xb6>
 802a69e:	6920      	ldr	r0, [r4, #16]
 802a6a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a6a4:	f104 0314 	add.w	r3, r4, #20
 802a6a8:	f019 091f 	ands.w	r9, r9, #31
 802a6ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a6b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a6b4:	d02b      	beq.n	802a70e <__lshift+0xbe>
 802a6b6:	f1c9 0e20 	rsb	lr, r9, #32
 802a6ba:	468a      	mov	sl, r1
 802a6bc:	2200      	movs	r2, #0
 802a6be:	6818      	ldr	r0, [r3, #0]
 802a6c0:	fa00 f009 	lsl.w	r0, r0, r9
 802a6c4:	4302      	orrs	r2, r0
 802a6c6:	f84a 2b04 	str.w	r2, [sl], #4
 802a6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 802a6ce:	459c      	cmp	ip, r3
 802a6d0:	fa22 f20e 	lsr.w	r2, r2, lr
 802a6d4:	d8f3      	bhi.n	802a6be <__lshift+0x6e>
 802a6d6:	ebac 0304 	sub.w	r3, ip, r4
 802a6da:	3b15      	subs	r3, #21
 802a6dc:	f023 0303 	bic.w	r3, r3, #3
 802a6e0:	3304      	adds	r3, #4
 802a6e2:	f104 0015 	add.w	r0, r4, #21
 802a6e6:	4584      	cmp	ip, r0
 802a6e8:	bf38      	it	cc
 802a6ea:	2304      	movcc	r3, #4
 802a6ec:	50ca      	str	r2, [r1, r3]
 802a6ee:	b10a      	cbz	r2, 802a6f4 <__lshift+0xa4>
 802a6f0:	f108 0602 	add.w	r6, r8, #2
 802a6f4:	3e01      	subs	r6, #1
 802a6f6:	4638      	mov	r0, r7
 802a6f8:	612e      	str	r6, [r5, #16]
 802a6fa:	4621      	mov	r1, r4
 802a6fc:	f7ff fd8c 	bl	802a218 <_Bfree>
 802a700:	4628      	mov	r0, r5
 802a702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a706:	f842 0f04 	str.w	r0, [r2, #4]!
 802a70a:	3301      	adds	r3, #1
 802a70c:	e7c5      	b.n	802a69a <__lshift+0x4a>
 802a70e:	3904      	subs	r1, #4
 802a710:	f853 2b04 	ldr.w	r2, [r3], #4
 802a714:	f841 2f04 	str.w	r2, [r1, #4]!
 802a718:	459c      	cmp	ip, r3
 802a71a:	d8f9      	bhi.n	802a710 <__lshift+0xc0>
 802a71c:	e7ea      	b.n	802a6f4 <__lshift+0xa4>
 802a71e:	bf00      	nop
 802a720:	0802bdeb 	.word	0x0802bdeb
 802a724:	0802be7c 	.word	0x0802be7c

0802a728 <__mcmp>:
 802a728:	b530      	push	{r4, r5, lr}
 802a72a:	6902      	ldr	r2, [r0, #16]
 802a72c:	690c      	ldr	r4, [r1, #16]
 802a72e:	1b12      	subs	r2, r2, r4
 802a730:	d10e      	bne.n	802a750 <__mcmp+0x28>
 802a732:	f100 0314 	add.w	r3, r0, #20
 802a736:	3114      	adds	r1, #20
 802a738:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a73c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a740:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a744:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a748:	42a5      	cmp	r5, r4
 802a74a:	d003      	beq.n	802a754 <__mcmp+0x2c>
 802a74c:	d305      	bcc.n	802a75a <__mcmp+0x32>
 802a74e:	2201      	movs	r2, #1
 802a750:	4610      	mov	r0, r2
 802a752:	bd30      	pop	{r4, r5, pc}
 802a754:	4283      	cmp	r3, r0
 802a756:	d3f3      	bcc.n	802a740 <__mcmp+0x18>
 802a758:	e7fa      	b.n	802a750 <__mcmp+0x28>
 802a75a:	f04f 32ff 	mov.w	r2, #4294967295
 802a75e:	e7f7      	b.n	802a750 <__mcmp+0x28>

0802a760 <__mdiff>:
 802a760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a764:	460c      	mov	r4, r1
 802a766:	4606      	mov	r6, r0
 802a768:	4611      	mov	r1, r2
 802a76a:	4620      	mov	r0, r4
 802a76c:	4617      	mov	r7, r2
 802a76e:	f7ff ffdb 	bl	802a728 <__mcmp>
 802a772:	1e05      	subs	r5, r0, #0
 802a774:	d110      	bne.n	802a798 <__mdiff+0x38>
 802a776:	4629      	mov	r1, r5
 802a778:	4630      	mov	r0, r6
 802a77a:	f7ff fd0d 	bl	802a198 <_Balloc>
 802a77e:	b930      	cbnz	r0, 802a78e <__mdiff+0x2e>
 802a780:	4b39      	ldr	r3, [pc, #228]	; (802a868 <__mdiff+0x108>)
 802a782:	4602      	mov	r2, r0
 802a784:	f240 2132 	movw	r1, #562	; 0x232
 802a788:	4838      	ldr	r0, [pc, #224]	; (802a86c <__mdiff+0x10c>)
 802a78a:	f000 fbfb 	bl	802af84 <__assert_func>
 802a78e:	2301      	movs	r3, #1
 802a790:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a798:	bfa4      	itt	ge
 802a79a:	463b      	movge	r3, r7
 802a79c:	4627      	movge	r7, r4
 802a79e:	4630      	mov	r0, r6
 802a7a0:	6879      	ldr	r1, [r7, #4]
 802a7a2:	bfa6      	itte	ge
 802a7a4:	461c      	movge	r4, r3
 802a7a6:	2500      	movge	r5, #0
 802a7a8:	2501      	movlt	r5, #1
 802a7aa:	f7ff fcf5 	bl	802a198 <_Balloc>
 802a7ae:	b920      	cbnz	r0, 802a7ba <__mdiff+0x5a>
 802a7b0:	4b2d      	ldr	r3, [pc, #180]	; (802a868 <__mdiff+0x108>)
 802a7b2:	4602      	mov	r2, r0
 802a7b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a7b8:	e7e6      	b.n	802a788 <__mdiff+0x28>
 802a7ba:	693e      	ldr	r6, [r7, #16]
 802a7bc:	60c5      	str	r5, [r0, #12]
 802a7be:	6925      	ldr	r5, [r4, #16]
 802a7c0:	f107 0114 	add.w	r1, r7, #20
 802a7c4:	f104 0914 	add.w	r9, r4, #20
 802a7c8:	f100 0e14 	add.w	lr, r0, #20
 802a7cc:	f107 0210 	add.w	r2, r7, #16
 802a7d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802a7d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802a7d8:	46f2      	mov	sl, lr
 802a7da:	2700      	movs	r7, #0
 802a7dc:	f859 3b04 	ldr.w	r3, [r9], #4
 802a7e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a7e4:	fa1f f883 	uxth.w	r8, r3
 802a7e8:	fa17 f78b 	uxtah	r7, r7, fp
 802a7ec:	0c1b      	lsrs	r3, r3, #16
 802a7ee:	eba7 0808 	sub.w	r8, r7, r8
 802a7f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a7f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a7fa:	fa1f f888 	uxth.w	r8, r8
 802a7fe:	141f      	asrs	r7, r3, #16
 802a800:	454d      	cmp	r5, r9
 802a802:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a806:	f84a 3b04 	str.w	r3, [sl], #4
 802a80a:	d8e7      	bhi.n	802a7dc <__mdiff+0x7c>
 802a80c:	1b2b      	subs	r3, r5, r4
 802a80e:	3b15      	subs	r3, #21
 802a810:	f023 0303 	bic.w	r3, r3, #3
 802a814:	3304      	adds	r3, #4
 802a816:	3415      	adds	r4, #21
 802a818:	42a5      	cmp	r5, r4
 802a81a:	bf38      	it	cc
 802a81c:	2304      	movcc	r3, #4
 802a81e:	4419      	add	r1, r3
 802a820:	4473      	add	r3, lr
 802a822:	469e      	mov	lr, r3
 802a824:	460d      	mov	r5, r1
 802a826:	4565      	cmp	r5, ip
 802a828:	d30e      	bcc.n	802a848 <__mdiff+0xe8>
 802a82a:	f10c 0203 	add.w	r2, ip, #3
 802a82e:	1a52      	subs	r2, r2, r1
 802a830:	f022 0203 	bic.w	r2, r2, #3
 802a834:	3903      	subs	r1, #3
 802a836:	458c      	cmp	ip, r1
 802a838:	bf38      	it	cc
 802a83a:	2200      	movcc	r2, #0
 802a83c:	441a      	add	r2, r3
 802a83e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802a842:	b17b      	cbz	r3, 802a864 <__mdiff+0x104>
 802a844:	6106      	str	r6, [r0, #16]
 802a846:	e7a5      	b.n	802a794 <__mdiff+0x34>
 802a848:	f855 8b04 	ldr.w	r8, [r5], #4
 802a84c:	fa17 f488 	uxtah	r4, r7, r8
 802a850:	1422      	asrs	r2, r4, #16
 802a852:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802a856:	b2a4      	uxth	r4, r4
 802a858:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802a85c:	f84e 4b04 	str.w	r4, [lr], #4
 802a860:	1417      	asrs	r7, r2, #16
 802a862:	e7e0      	b.n	802a826 <__mdiff+0xc6>
 802a864:	3e01      	subs	r6, #1
 802a866:	e7ea      	b.n	802a83e <__mdiff+0xde>
 802a868:	0802bdeb 	.word	0x0802bdeb
 802a86c:	0802be7c 	.word	0x0802be7c

0802a870 <__ulp>:
 802a870:	b082      	sub	sp, #8
 802a872:	ed8d 0b00 	vstr	d0, [sp]
 802a876:	9b01      	ldr	r3, [sp, #4]
 802a878:	4912      	ldr	r1, [pc, #72]	; (802a8c4 <__ulp+0x54>)
 802a87a:	4019      	ands	r1, r3
 802a87c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802a880:	2900      	cmp	r1, #0
 802a882:	dd05      	ble.n	802a890 <__ulp+0x20>
 802a884:	2200      	movs	r2, #0
 802a886:	460b      	mov	r3, r1
 802a888:	ec43 2b10 	vmov	d0, r2, r3
 802a88c:	b002      	add	sp, #8
 802a88e:	4770      	bx	lr
 802a890:	4249      	negs	r1, r1
 802a892:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802a896:	ea4f 5021 	mov.w	r0, r1, asr #20
 802a89a:	f04f 0200 	mov.w	r2, #0
 802a89e:	f04f 0300 	mov.w	r3, #0
 802a8a2:	da04      	bge.n	802a8ae <__ulp+0x3e>
 802a8a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802a8a8:	fa41 f300 	asr.w	r3, r1, r0
 802a8ac:	e7ec      	b.n	802a888 <__ulp+0x18>
 802a8ae:	f1a0 0114 	sub.w	r1, r0, #20
 802a8b2:	291e      	cmp	r1, #30
 802a8b4:	bfda      	itte	le
 802a8b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802a8ba:	fa20 f101 	lsrle.w	r1, r0, r1
 802a8be:	2101      	movgt	r1, #1
 802a8c0:	460a      	mov	r2, r1
 802a8c2:	e7e1      	b.n	802a888 <__ulp+0x18>
 802a8c4:	7ff00000 	.word	0x7ff00000

0802a8c8 <__b2d>:
 802a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a8ca:	6905      	ldr	r5, [r0, #16]
 802a8cc:	f100 0714 	add.w	r7, r0, #20
 802a8d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802a8d4:	1f2e      	subs	r6, r5, #4
 802a8d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802a8da:	4620      	mov	r0, r4
 802a8dc:	f7ff fd52 	bl	802a384 <__hi0bits>
 802a8e0:	f1c0 0320 	rsb	r3, r0, #32
 802a8e4:	280a      	cmp	r0, #10
 802a8e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a964 <__b2d+0x9c>
 802a8ea:	600b      	str	r3, [r1, #0]
 802a8ec:	dc14      	bgt.n	802a918 <__b2d+0x50>
 802a8ee:	f1c0 0e0b 	rsb	lr, r0, #11
 802a8f2:	fa24 f10e 	lsr.w	r1, r4, lr
 802a8f6:	42b7      	cmp	r7, r6
 802a8f8:	ea41 030c 	orr.w	r3, r1, ip
 802a8fc:	bf34      	ite	cc
 802a8fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a902:	2100      	movcs	r1, #0
 802a904:	3015      	adds	r0, #21
 802a906:	fa04 f000 	lsl.w	r0, r4, r0
 802a90a:	fa21 f10e 	lsr.w	r1, r1, lr
 802a90e:	ea40 0201 	orr.w	r2, r0, r1
 802a912:	ec43 2b10 	vmov	d0, r2, r3
 802a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a918:	42b7      	cmp	r7, r6
 802a91a:	bf3a      	itte	cc
 802a91c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a920:	f1a5 0608 	subcc.w	r6, r5, #8
 802a924:	2100      	movcs	r1, #0
 802a926:	380b      	subs	r0, #11
 802a928:	d017      	beq.n	802a95a <__b2d+0x92>
 802a92a:	f1c0 0c20 	rsb	ip, r0, #32
 802a92e:	fa04 f500 	lsl.w	r5, r4, r0
 802a932:	42be      	cmp	r6, r7
 802a934:	fa21 f40c 	lsr.w	r4, r1, ip
 802a938:	ea45 0504 	orr.w	r5, r5, r4
 802a93c:	bf8c      	ite	hi
 802a93e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a942:	2400      	movls	r4, #0
 802a944:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a948:	fa01 f000 	lsl.w	r0, r1, r0
 802a94c:	fa24 f40c 	lsr.w	r4, r4, ip
 802a950:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a954:	ea40 0204 	orr.w	r2, r0, r4
 802a958:	e7db      	b.n	802a912 <__b2d+0x4a>
 802a95a:	ea44 030c 	orr.w	r3, r4, ip
 802a95e:	460a      	mov	r2, r1
 802a960:	e7d7      	b.n	802a912 <__b2d+0x4a>
 802a962:	bf00      	nop
 802a964:	3ff00000 	.word	0x3ff00000

0802a968 <__d2b>:
 802a968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a96c:	4689      	mov	r9, r1
 802a96e:	2101      	movs	r1, #1
 802a970:	ec57 6b10 	vmov	r6, r7, d0
 802a974:	4690      	mov	r8, r2
 802a976:	f7ff fc0f 	bl	802a198 <_Balloc>
 802a97a:	4604      	mov	r4, r0
 802a97c:	b930      	cbnz	r0, 802a98c <__d2b+0x24>
 802a97e:	4602      	mov	r2, r0
 802a980:	4b25      	ldr	r3, [pc, #148]	; (802aa18 <__d2b+0xb0>)
 802a982:	4826      	ldr	r0, [pc, #152]	; (802aa1c <__d2b+0xb4>)
 802a984:	f240 310a 	movw	r1, #778	; 0x30a
 802a988:	f000 fafc 	bl	802af84 <__assert_func>
 802a98c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a994:	bb35      	cbnz	r5, 802a9e4 <__d2b+0x7c>
 802a996:	2e00      	cmp	r6, #0
 802a998:	9301      	str	r3, [sp, #4]
 802a99a:	d028      	beq.n	802a9ee <__d2b+0x86>
 802a99c:	4668      	mov	r0, sp
 802a99e:	9600      	str	r6, [sp, #0]
 802a9a0:	f7ff fd10 	bl	802a3c4 <__lo0bits>
 802a9a4:	9900      	ldr	r1, [sp, #0]
 802a9a6:	b300      	cbz	r0, 802a9ea <__d2b+0x82>
 802a9a8:	9a01      	ldr	r2, [sp, #4]
 802a9aa:	f1c0 0320 	rsb	r3, r0, #32
 802a9ae:	fa02 f303 	lsl.w	r3, r2, r3
 802a9b2:	430b      	orrs	r3, r1
 802a9b4:	40c2      	lsrs	r2, r0
 802a9b6:	6163      	str	r3, [r4, #20]
 802a9b8:	9201      	str	r2, [sp, #4]
 802a9ba:	9b01      	ldr	r3, [sp, #4]
 802a9bc:	61a3      	str	r3, [r4, #24]
 802a9be:	2b00      	cmp	r3, #0
 802a9c0:	bf14      	ite	ne
 802a9c2:	2202      	movne	r2, #2
 802a9c4:	2201      	moveq	r2, #1
 802a9c6:	6122      	str	r2, [r4, #16]
 802a9c8:	b1d5      	cbz	r5, 802aa00 <__d2b+0x98>
 802a9ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a9ce:	4405      	add	r5, r0
 802a9d0:	f8c9 5000 	str.w	r5, [r9]
 802a9d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a9d8:	f8c8 0000 	str.w	r0, [r8]
 802a9dc:	4620      	mov	r0, r4
 802a9de:	b003      	add	sp, #12
 802a9e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a9e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a9e8:	e7d5      	b.n	802a996 <__d2b+0x2e>
 802a9ea:	6161      	str	r1, [r4, #20]
 802a9ec:	e7e5      	b.n	802a9ba <__d2b+0x52>
 802a9ee:	a801      	add	r0, sp, #4
 802a9f0:	f7ff fce8 	bl	802a3c4 <__lo0bits>
 802a9f4:	9b01      	ldr	r3, [sp, #4]
 802a9f6:	6163      	str	r3, [r4, #20]
 802a9f8:	2201      	movs	r2, #1
 802a9fa:	6122      	str	r2, [r4, #16]
 802a9fc:	3020      	adds	r0, #32
 802a9fe:	e7e3      	b.n	802a9c8 <__d2b+0x60>
 802aa00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802aa04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802aa08:	f8c9 0000 	str.w	r0, [r9]
 802aa0c:	6918      	ldr	r0, [r3, #16]
 802aa0e:	f7ff fcb9 	bl	802a384 <__hi0bits>
 802aa12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802aa16:	e7df      	b.n	802a9d8 <__d2b+0x70>
 802aa18:	0802bdeb 	.word	0x0802bdeb
 802aa1c:	0802be7c 	.word	0x0802be7c

0802aa20 <__ratio>:
 802aa20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa24:	4688      	mov	r8, r1
 802aa26:	4669      	mov	r1, sp
 802aa28:	4681      	mov	r9, r0
 802aa2a:	f7ff ff4d 	bl	802a8c8 <__b2d>
 802aa2e:	a901      	add	r1, sp, #4
 802aa30:	4640      	mov	r0, r8
 802aa32:	ec55 4b10 	vmov	r4, r5, d0
 802aa36:	f7ff ff47 	bl	802a8c8 <__b2d>
 802aa3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802aa3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802aa42:	eba3 0c02 	sub.w	ip, r3, r2
 802aa46:	e9dd 3200 	ldrd	r3, r2, [sp]
 802aa4a:	1a9b      	subs	r3, r3, r2
 802aa4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802aa50:	ec51 0b10 	vmov	r0, r1, d0
 802aa54:	2b00      	cmp	r3, #0
 802aa56:	bfd6      	itet	le
 802aa58:	460a      	movle	r2, r1
 802aa5a:	462a      	movgt	r2, r5
 802aa5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802aa60:	468b      	mov	fp, r1
 802aa62:	462f      	mov	r7, r5
 802aa64:	bfd4      	ite	le
 802aa66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802aa6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802aa6e:	4620      	mov	r0, r4
 802aa70:	ee10 2a10 	vmov	r2, s0
 802aa74:	465b      	mov	r3, fp
 802aa76:	4639      	mov	r1, r7
 802aa78:	f7f5 fee8 	bl	802084c <__aeabi_ddiv>
 802aa7c:	ec41 0b10 	vmov	d0, r0, r1
 802aa80:	b003      	add	sp, #12
 802aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aa86 <__copybits>:
 802aa86:	3901      	subs	r1, #1
 802aa88:	b570      	push	{r4, r5, r6, lr}
 802aa8a:	1149      	asrs	r1, r1, #5
 802aa8c:	6914      	ldr	r4, [r2, #16]
 802aa8e:	3101      	adds	r1, #1
 802aa90:	f102 0314 	add.w	r3, r2, #20
 802aa94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802aa98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802aa9c:	1f05      	subs	r5, r0, #4
 802aa9e:	42a3      	cmp	r3, r4
 802aaa0:	d30c      	bcc.n	802aabc <__copybits+0x36>
 802aaa2:	1aa3      	subs	r3, r4, r2
 802aaa4:	3b11      	subs	r3, #17
 802aaa6:	f023 0303 	bic.w	r3, r3, #3
 802aaaa:	3211      	adds	r2, #17
 802aaac:	42a2      	cmp	r2, r4
 802aaae:	bf88      	it	hi
 802aab0:	2300      	movhi	r3, #0
 802aab2:	4418      	add	r0, r3
 802aab4:	2300      	movs	r3, #0
 802aab6:	4288      	cmp	r0, r1
 802aab8:	d305      	bcc.n	802aac6 <__copybits+0x40>
 802aaba:	bd70      	pop	{r4, r5, r6, pc}
 802aabc:	f853 6b04 	ldr.w	r6, [r3], #4
 802aac0:	f845 6f04 	str.w	r6, [r5, #4]!
 802aac4:	e7eb      	b.n	802aa9e <__copybits+0x18>
 802aac6:	f840 3b04 	str.w	r3, [r0], #4
 802aaca:	e7f4      	b.n	802aab6 <__copybits+0x30>

0802aacc <__any_on>:
 802aacc:	f100 0214 	add.w	r2, r0, #20
 802aad0:	6900      	ldr	r0, [r0, #16]
 802aad2:	114b      	asrs	r3, r1, #5
 802aad4:	4298      	cmp	r0, r3
 802aad6:	b510      	push	{r4, lr}
 802aad8:	db11      	blt.n	802aafe <__any_on+0x32>
 802aada:	dd0a      	ble.n	802aaf2 <__any_on+0x26>
 802aadc:	f011 011f 	ands.w	r1, r1, #31
 802aae0:	d007      	beq.n	802aaf2 <__any_on+0x26>
 802aae2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802aae6:	fa24 f001 	lsr.w	r0, r4, r1
 802aaea:	fa00 f101 	lsl.w	r1, r0, r1
 802aaee:	428c      	cmp	r4, r1
 802aaf0:	d10b      	bne.n	802ab0a <__any_on+0x3e>
 802aaf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802aaf6:	4293      	cmp	r3, r2
 802aaf8:	d803      	bhi.n	802ab02 <__any_on+0x36>
 802aafa:	2000      	movs	r0, #0
 802aafc:	bd10      	pop	{r4, pc}
 802aafe:	4603      	mov	r3, r0
 802ab00:	e7f7      	b.n	802aaf2 <__any_on+0x26>
 802ab02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ab06:	2900      	cmp	r1, #0
 802ab08:	d0f5      	beq.n	802aaf6 <__any_on+0x2a>
 802ab0a:	2001      	movs	r0, #1
 802ab0c:	e7f6      	b.n	802aafc <__any_on+0x30>

0802ab0e <_calloc_r>:
 802ab0e:	b513      	push	{r0, r1, r4, lr}
 802ab10:	434a      	muls	r2, r1
 802ab12:	4611      	mov	r1, r2
 802ab14:	9201      	str	r2, [sp, #4]
 802ab16:	f000 f859 	bl	802abcc <_malloc_r>
 802ab1a:	4604      	mov	r4, r0
 802ab1c:	b118      	cbz	r0, 802ab26 <_calloc_r+0x18>
 802ab1e:	9a01      	ldr	r2, [sp, #4]
 802ab20:	2100      	movs	r1, #0
 802ab22:	f7fc fe4b 	bl	80277bc <memset>
 802ab26:	4620      	mov	r0, r4
 802ab28:	b002      	add	sp, #8
 802ab2a:	bd10      	pop	{r4, pc}

0802ab2c <_free_r>:
 802ab2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ab2e:	2900      	cmp	r1, #0
 802ab30:	d048      	beq.n	802abc4 <_free_r+0x98>
 802ab32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ab36:	9001      	str	r0, [sp, #4]
 802ab38:	2b00      	cmp	r3, #0
 802ab3a:	f1a1 0404 	sub.w	r4, r1, #4
 802ab3e:	bfb8      	it	lt
 802ab40:	18e4      	addlt	r4, r4, r3
 802ab42:	f000 fa69 	bl	802b018 <__malloc_lock>
 802ab46:	4a20      	ldr	r2, [pc, #128]	; (802abc8 <_free_r+0x9c>)
 802ab48:	9801      	ldr	r0, [sp, #4]
 802ab4a:	6813      	ldr	r3, [r2, #0]
 802ab4c:	4615      	mov	r5, r2
 802ab4e:	b933      	cbnz	r3, 802ab5e <_free_r+0x32>
 802ab50:	6063      	str	r3, [r4, #4]
 802ab52:	6014      	str	r4, [r2, #0]
 802ab54:	b003      	add	sp, #12
 802ab56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ab5a:	f000 ba63 	b.w	802b024 <__malloc_unlock>
 802ab5e:	42a3      	cmp	r3, r4
 802ab60:	d90b      	bls.n	802ab7a <_free_r+0x4e>
 802ab62:	6821      	ldr	r1, [r4, #0]
 802ab64:	1862      	adds	r2, r4, r1
 802ab66:	4293      	cmp	r3, r2
 802ab68:	bf04      	itt	eq
 802ab6a:	681a      	ldreq	r2, [r3, #0]
 802ab6c:	685b      	ldreq	r3, [r3, #4]
 802ab6e:	6063      	str	r3, [r4, #4]
 802ab70:	bf04      	itt	eq
 802ab72:	1852      	addeq	r2, r2, r1
 802ab74:	6022      	streq	r2, [r4, #0]
 802ab76:	602c      	str	r4, [r5, #0]
 802ab78:	e7ec      	b.n	802ab54 <_free_r+0x28>
 802ab7a:	461a      	mov	r2, r3
 802ab7c:	685b      	ldr	r3, [r3, #4]
 802ab7e:	b10b      	cbz	r3, 802ab84 <_free_r+0x58>
 802ab80:	42a3      	cmp	r3, r4
 802ab82:	d9fa      	bls.n	802ab7a <_free_r+0x4e>
 802ab84:	6811      	ldr	r1, [r2, #0]
 802ab86:	1855      	adds	r5, r2, r1
 802ab88:	42a5      	cmp	r5, r4
 802ab8a:	d10b      	bne.n	802aba4 <_free_r+0x78>
 802ab8c:	6824      	ldr	r4, [r4, #0]
 802ab8e:	4421      	add	r1, r4
 802ab90:	1854      	adds	r4, r2, r1
 802ab92:	42a3      	cmp	r3, r4
 802ab94:	6011      	str	r1, [r2, #0]
 802ab96:	d1dd      	bne.n	802ab54 <_free_r+0x28>
 802ab98:	681c      	ldr	r4, [r3, #0]
 802ab9a:	685b      	ldr	r3, [r3, #4]
 802ab9c:	6053      	str	r3, [r2, #4]
 802ab9e:	4421      	add	r1, r4
 802aba0:	6011      	str	r1, [r2, #0]
 802aba2:	e7d7      	b.n	802ab54 <_free_r+0x28>
 802aba4:	d902      	bls.n	802abac <_free_r+0x80>
 802aba6:	230c      	movs	r3, #12
 802aba8:	6003      	str	r3, [r0, #0]
 802abaa:	e7d3      	b.n	802ab54 <_free_r+0x28>
 802abac:	6825      	ldr	r5, [r4, #0]
 802abae:	1961      	adds	r1, r4, r5
 802abb0:	428b      	cmp	r3, r1
 802abb2:	bf04      	itt	eq
 802abb4:	6819      	ldreq	r1, [r3, #0]
 802abb6:	685b      	ldreq	r3, [r3, #4]
 802abb8:	6063      	str	r3, [r4, #4]
 802abba:	bf04      	itt	eq
 802abbc:	1949      	addeq	r1, r1, r5
 802abbe:	6021      	streq	r1, [r4, #0]
 802abc0:	6054      	str	r4, [r2, #4]
 802abc2:	e7c7      	b.n	802ab54 <_free_r+0x28>
 802abc4:	b003      	add	sp, #12
 802abc6:	bd30      	pop	{r4, r5, pc}
 802abc8:	200006dc 	.word	0x200006dc

0802abcc <_malloc_r>:
 802abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802abce:	1ccd      	adds	r5, r1, #3
 802abd0:	f025 0503 	bic.w	r5, r5, #3
 802abd4:	3508      	adds	r5, #8
 802abd6:	2d0c      	cmp	r5, #12
 802abd8:	bf38      	it	cc
 802abda:	250c      	movcc	r5, #12
 802abdc:	2d00      	cmp	r5, #0
 802abde:	4606      	mov	r6, r0
 802abe0:	db01      	blt.n	802abe6 <_malloc_r+0x1a>
 802abe2:	42a9      	cmp	r1, r5
 802abe4:	d903      	bls.n	802abee <_malloc_r+0x22>
 802abe6:	230c      	movs	r3, #12
 802abe8:	6033      	str	r3, [r6, #0]
 802abea:	2000      	movs	r0, #0
 802abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802abee:	f000 fa13 	bl	802b018 <__malloc_lock>
 802abf2:	4921      	ldr	r1, [pc, #132]	; (802ac78 <_malloc_r+0xac>)
 802abf4:	680a      	ldr	r2, [r1, #0]
 802abf6:	4614      	mov	r4, r2
 802abf8:	b99c      	cbnz	r4, 802ac22 <_malloc_r+0x56>
 802abfa:	4f20      	ldr	r7, [pc, #128]	; (802ac7c <_malloc_r+0xb0>)
 802abfc:	683b      	ldr	r3, [r7, #0]
 802abfe:	b923      	cbnz	r3, 802ac0a <_malloc_r+0x3e>
 802ac00:	4621      	mov	r1, r4
 802ac02:	4630      	mov	r0, r6
 802ac04:	f000 f9a0 	bl	802af48 <_sbrk_r>
 802ac08:	6038      	str	r0, [r7, #0]
 802ac0a:	4629      	mov	r1, r5
 802ac0c:	4630      	mov	r0, r6
 802ac0e:	f000 f99b 	bl	802af48 <_sbrk_r>
 802ac12:	1c43      	adds	r3, r0, #1
 802ac14:	d123      	bne.n	802ac5e <_malloc_r+0x92>
 802ac16:	230c      	movs	r3, #12
 802ac18:	6033      	str	r3, [r6, #0]
 802ac1a:	4630      	mov	r0, r6
 802ac1c:	f000 fa02 	bl	802b024 <__malloc_unlock>
 802ac20:	e7e3      	b.n	802abea <_malloc_r+0x1e>
 802ac22:	6823      	ldr	r3, [r4, #0]
 802ac24:	1b5b      	subs	r3, r3, r5
 802ac26:	d417      	bmi.n	802ac58 <_malloc_r+0x8c>
 802ac28:	2b0b      	cmp	r3, #11
 802ac2a:	d903      	bls.n	802ac34 <_malloc_r+0x68>
 802ac2c:	6023      	str	r3, [r4, #0]
 802ac2e:	441c      	add	r4, r3
 802ac30:	6025      	str	r5, [r4, #0]
 802ac32:	e004      	b.n	802ac3e <_malloc_r+0x72>
 802ac34:	6863      	ldr	r3, [r4, #4]
 802ac36:	42a2      	cmp	r2, r4
 802ac38:	bf0c      	ite	eq
 802ac3a:	600b      	streq	r3, [r1, #0]
 802ac3c:	6053      	strne	r3, [r2, #4]
 802ac3e:	4630      	mov	r0, r6
 802ac40:	f000 f9f0 	bl	802b024 <__malloc_unlock>
 802ac44:	f104 000b 	add.w	r0, r4, #11
 802ac48:	1d23      	adds	r3, r4, #4
 802ac4a:	f020 0007 	bic.w	r0, r0, #7
 802ac4e:	1ac2      	subs	r2, r0, r3
 802ac50:	d0cc      	beq.n	802abec <_malloc_r+0x20>
 802ac52:	1a1b      	subs	r3, r3, r0
 802ac54:	50a3      	str	r3, [r4, r2]
 802ac56:	e7c9      	b.n	802abec <_malloc_r+0x20>
 802ac58:	4622      	mov	r2, r4
 802ac5a:	6864      	ldr	r4, [r4, #4]
 802ac5c:	e7cc      	b.n	802abf8 <_malloc_r+0x2c>
 802ac5e:	1cc4      	adds	r4, r0, #3
 802ac60:	f024 0403 	bic.w	r4, r4, #3
 802ac64:	42a0      	cmp	r0, r4
 802ac66:	d0e3      	beq.n	802ac30 <_malloc_r+0x64>
 802ac68:	1a21      	subs	r1, r4, r0
 802ac6a:	4630      	mov	r0, r6
 802ac6c:	f000 f96c 	bl	802af48 <_sbrk_r>
 802ac70:	3001      	adds	r0, #1
 802ac72:	d1dd      	bne.n	802ac30 <_malloc_r+0x64>
 802ac74:	e7cf      	b.n	802ac16 <_malloc_r+0x4a>
 802ac76:	bf00      	nop
 802ac78:	200006dc 	.word	0x200006dc
 802ac7c:	200006e0 	.word	0x200006e0

0802ac80 <__ssputs_r>:
 802ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ac84:	688e      	ldr	r6, [r1, #8]
 802ac86:	429e      	cmp	r6, r3
 802ac88:	4682      	mov	sl, r0
 802ac8a:	460c      	mov	r4, r1
 802ac8c:	4690      	mov	r8, r2
 802ac8e:	461f      	mov	r7, r3
 802ac90:	d838      	bhi.n	802ad04 <__ssputs_r+0x84>
 802ac92:	898a      	ldrh	r2, [r1, #12]
 802ac94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ac98:	d032      	beq.n	802ad00 <__ssputs_r+0x80>
 802ac9a:	6825      	ldr	r5, [r4, #0]
 802ac9c:	6909      	ldr	r1, [r1, #16]
 802ac9e:	eba5 0901 	sub.w	r9, r5, r1
 802aca2:	6965      	ldr	r5, [r4, #20]
 802aca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802aca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802acac:	3301      	adds	r3, #1
 802acae:	444b      	add	r3, r9
 802acb0:	106d      	asrs	r5, r5, #1
 802acb2:	429d      	cmp	r5, r3
 802acb4:	bf38      	it	cc
 802acb6:	461d      	movcc	r5, r3
 802acb8:	0553      	lsls	r3, r2, #21
 802acba:	d531      	bpl.n	802ad20 <__ssputs_r+0xa0>
 802acbc:	4629      	mov	r1, r5
 802acbe:	f7ff ff85 	bl	802abcc <_malloc_r>
 802acc2:	4606      	mov	r6, r0
 802acc4:	b950      	cbnz	r0, 802acdc <__ssputs_r+0x5c>
 802acc6:	230c      	movs	r3, #12
 802acc8:	f8ca 3000 	str.w	r3, [sl]
 802accc:	89a3      	ldrh	r3, [r4, #12]
 802acce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802acd2:	81a3      	strh	r3, [r4, #12]
 802acd4:	f04f 30ff 	mov.w	r0, #4294967295
 802acd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802acdc:	6921      	ldr	r1, [r4, #16]
 802acde:	464a      	mov	r2, r9
 802ace0:	f7ff fa4c 	bl	802a17c <memcpy>
 802ace4:	89a3      	ldrh	r3, [r4, #12]
 802ace6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802acea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802acee:	81a3      	strh	r3, [r4, #12]
 802acf0:	6126      	str	r6, [r4, #16]
 802acf2:	6165      	str	r5, [r4, #20]
 802acf4:	444e      	add	r6, r9
 802acf6:	eba5 0509 	sub.w	r5, r5, r9
 802acfa:	6026      	str	r6, [r4, #0]
 802acfc:	60a5      	str	r5, [r4, #8]
 802acfe:	463e      	mov	r6, r7
 802ad00:	42be      	cmp	r6, r7
 802ad02:	d900      	bls.n	802ad06 <__ssputs_r+0x86>
 802ad04:	463e      	mov	r6, r7
 802ad06:	4632      	mov	r2, r6
 802ad08:	6820      	ldr	r0, [r4, #0]
 802ad0a:	4641      	mov	r1, r8
 802ad0c:	f000 f96a 	bl	802afe4 <memmove>
 802ad10:	68a3      	ldr	r3, [r4, #8]
 802ad12:	6822      	ldr	r2, [r4, #0]
 802ad14:	1b9b      	subs	r3, r3, r6
 802ad16:	4432      	add	r2, r6
 802ad18:	60a3      	str	r3, [r4, #8]
 802ad1a:	6022      	str	r2, [r4, #0]
 802ad1c:	2000      	movs	r0, #0
 802ad1e:	e7db      	b.n	802acd8 <__ssputs_r+0x58>
 802ad20:	462a      	mov	r2, r5
 802ad22:	f000 f985 	bl	802b030 <_realloc_r>
 802ad26:	4606      	mov	r6, r0
 802ad28:	2800      	cmp	r0, #0
 802ad2a:	d1e1      	bne.n	802acf0 <__ssputs_r+0x70>
 802ad2c:	6921      	ldr	r1, [r4, #16]
 802ad2e:	4650      	mov	r0, sl
 802ad30:	f7ff fefc 	bl	802ab2c <_free_r>
 802ad34:	e7c7      	b.n	802acc6 <__ssputs_r+0x46>
	...

0802ad38 <_svfiprintf_r>:
 802ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad3c:	4698      	mov	r8, r3
 802ad3e:	898b      	ldrh	r3, [r1, #12]
 802ad40:	061b      	lsls	r3, r3, #24
 802ad42:	b09d      	sub	sp, #116	; 0x74
 802ad44:	4607      	mov	r7, r0
 802ad46:	460d      	mov	r5, r1
 802ad48:	4614      	mov	r4, r2
 802ad4a:	d50e      	bpl.n	802ad6a <_svfiprintf_r+0x32>
 802ad4c:	690b      	ldr	r3, [r1, #16]
 802ad4e:	b963      	cbnz	r3, 802ad6a <_svfiprintf_r+0x32>
 802ad50:	2140      	movs	r1, #64	; 0x40
 802ad52:	f7ff ff3b 	bl	802abcc <_malloc_r>
 802ad56:	6028      	str	r0, [r5, #0]
 802ad58:	6128      	str	r0, [r5, #16]
 802ad5a:	b920      	cbnz	r0, 802ad66 <_svfiprintf_r+0x2e>
 802ad5c:	230c      	movs	r3, #12
 802ad5e:	603b      	str	r3, [r7, #0]
 802ad60:	f04f 30ff 	mov.w	r0, #4294967295
 802ad64:	e0d1      	b.n	802af0a <_svfiprintf_r+0x1d2>
 802ad66:	2340      	movs	r3, #64	; 0x40
 802ad68:	616b      	str	r3, [r5, #20]
 802ad6a:	2300      	movs	r3, #0
 802ad6c:	9309      	str	r3, [sp, #36]	; 0x24
 802ad6e:	2320      	movs	r3, #32
 802ad70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ad74:	f8cd 800c 	str.w	r8, [sp, #12]
 802ad78:	2330      	movs	r3, #48	; 0x30
 802ad7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802af24 <_svfiprintf_r+0x1ec>
 802ad7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ad82:	f04f 0901 	mov.w	r9, #1
 802ad86:	4623      	mov	r3, r4
 802ad88:	469a      	mov	sl, r3
 802ad8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ad8e:	b10a      	cbz	r2, 802ad94 <_svfiprintf_r+0x5c>
 802ad90:	2a25      	cmp	r2, #37	; 0x25
 802ad92:	d1f9      	bne.n	802ad88 <_svfiprintf_r+0x50>
 802ad94:	ebba 0b04 	subs.w	fp, sl, r4
 802ad98:	d00b      	beq.n	802adb2 <_svfiprintf_r+0x7a>
 802ad9a:	465b      	mov	r3, fp
 802ad9c:	4622      	mov	r2, r4
 802ad9e:	4629      	mov	r1, r5
 802ada0:	4638      	mov	r0, r7
 802ada2:	f7ff ff6d 	bl	802ac80 <__ssputs_r>
 802ada6:	3001      	adds	r0, #1
 802ada8:	f000 80aa 	beq.w	802af00 <_svfiprintf_r+0x1c8>
 802adac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802adae:	445a      	add	r2, fp
 802adb0:	9209      	str	r2, [sp, #36]	; 0x24
 802adb2:	f89a 3000 	ldrb.w	r3, [sl]
 802adb6:	2b00      	cmp	r3, #0
 802adb8:	f000 80a2 	beq.w	802af00 <_svfiprintf_r+0x1c8>
 802adbc:	2300      	movs	r3, #0
 802adbe:	f04f 32ff 	mov.w	r2, #4294967295
 802adc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802adc6:	f10a 0a01 	add.w	sl, sl, #1
 802adca:	9304      	str	r3, [sp, #16]
 802adcc:	9307      	str	r3, [sp, #28]
 802adce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802add2:	931a      	str	r3, [sp, #104]	; 0x68
 802add4:	4654      	mov	r4, sl
 802add6:	2205      	movs	r2, #5
 802add8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802addc:	4851      	ldr	r0, [pc, #324]	; (802af24 <_svfiprintf_r+0x1ec>)
 802adde:	f7f5 f9ff 	bl	80201e0 <memchr>
 802ade2:	9a04      	ldr	r2, [sp, #16]
 802ade4:	b9d8      	cbnz	r0, 802ae1e <_svfiprintf_r+0xe6>
 802ade6:	06d0      	lsls	r0, r2, #27
 802ade8:	bf44      	itt	mi
 802adea:	2320      	movmi	r3, #32
 802adec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802adf0:	0711      	lsls	r1, r2, #28
 802adf2:	bf44      	itt	mi
 802adf4:	232b      	movmi	r3, #43	; 0x2b
 802adf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802adfa:	f89a 3000 	ldrb.w	r3, [sl]
 802adfe:	2b2a      	cmp	r3, #42	; 0x2a
 802ae00:	d015      	beq.n	802ae2e <_svfiprintf_r+0xf6>
 802ae02:	9a07      	ldr	r2, [sp, #28]
 802ae04:	4654      	mov	r4, sl
 802ae06:	2000      	movs	r0, #0
 802ae08:	f04f 0c0a 	mov.w	ip, #10
 802ae0c:	4621      	mov	r1, r4
 802ae0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ae12:	3b30      	subs	r3, #48	; 0x30
 802ae14:	2b09      	cmp	r3, #9
 802ae16:	d94e      	bls.n	802aeb6 <_svfiprintf_r+0x17e>
 802ae18:	b1b0      	cbz	r0, 802ae48 <_svfiprintf_r+0x110>
 802ae1a:	9207      	str	r2, [sp, #28]
 802ae1c:	e014      	b.n	802ae48 <_svfiprintf_r+0x110>
 802ae1e:	eba0 0308 	sub.w	r3, r0, r8
 802ae22:	fa09 f303 	lsl.w	r3, r9, r3
 802ae26:	4313      	orrs	r3, r2
 802ae28:	9304      	str	r3, [sp, #16]
 802ae2a:	46a2      	mov	sl, r4
 802ae2c:	e7d2      	b.n	802add4 <_svfiprintf_r+0x9c>
 802ae2e:	9b03      	ldr	r3, [sp, #12]
 802ae30:	1d19      	adds	r1, r3, #4
 802ae32:	681b      	ldr	r3, [r3, #0]
 802ae34:	9103      	str	r1, [sp, #12]
 802ae36:	2b00      	cmp	r3, #0
 802ae38:	bfbb      	ittet	lt
 802ae3a:	425b      	neglt	r3, r3
 802ae3c:	f042 0202 	orrlt.w	r2, r2, #2
 802ae40:	9307      	strge	r3, [sp, #28]
 802ae42:	9307      	strlt	r3, [sp, #28]
 802ae44:	bfb8      	it	lt
 802ae46:	9204      	strlt	r2, [sp, #16]
 802ae48:	7823      	ldrb	r3, [r4, #0]
 802ae4a:	2b2e      	cmp	r3, #46	; 0x2e
 802ae4c:	d10c      	bne.n	802ae68 <_svfiprintf_r+0x130>
 802ae4e:	7863      	ldrb	r3, [r4, #1]
 802ae50:	2b2a      	cmp	r3, #42	; 0x2a
 802ae52:	d135      	bne.n	802aec0 <_svfiprintf_r+0x188>
 802ae54:	9b03      	ldr	r3, [sp, #12]
 802ae56:	1d1a      	adds	r2, r3, #4
 802ae58:	681b      	ldr	r3, [r3, #0]
 802ae5a:	9203      	str	r2, [sp, #12]
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	bfb8      	it	lt
 802ae60:	f04f 33ff 	movlt.w	r3, #4294967295
 802ae64:	3402      	adds	r4, #2
 802ae66:	9305      	str	r3, [sp, #20]
 802ae68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802af34 <_svfiprintf_r+0x1fc>
 802ae6c:	7821      	ldrb	r1, [r4, #0]
 802ae6e:	2203      	movs	r2, #3
 802ae70:	4650      	mov	r0, sl
 802ae72:	f7f5 f9b5 	bl	80201e0 <memchr>
 802ae76:	b140      	cbz	r0, 802ae8a <_svfiprintf_r+0x152>
 802ae78:	2340      	movs	r3, #64	; 0x40
 802ae7a:	eba0 000a 	sub.w	r0, r0, sl
 802ae7e:	fa03 f000 	lsl.w	r0, r3, r0
 802ae82:	9b04      	ldr	r3, [sp, #16]
 802ae84:	4303      	orrs	r3, r0
 802ae86:	3401      	adds	r4, #1
 802ae88:	9304      	str	r3, [sp, #16]
 802ae8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae8e:	4826      	ldr	r0, [pc, #152]	; (802af28 <_svfiprintf_r+0x1f0>)
 802ae90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ae94:	2206      	movs	r2, #6
 802ae96:	f7f5 f9a3 	bl	80201e0 <memchr>
 802ae9a:	2800      	cmp	r0, #0
 802ae9c:	d038      	beq.n	802af10 <_svfiprintf_r+0x1d8>
 802ae9e:	4b23      	ldr	r3, [pc, #140]	; (802af2c <_svfiprintf_r+0x1f4>)
 802aea0:	bb1b      	cbnz	r3, 802aeea <_svfiprintf_r+0x1b2>
 802aea2:	9b03      	ldr	r3, [sp, #12]
 802aea4:	3307      	adds	r3, #7
 802aea6:	f023 0307 	bic.w	r3, r3, #7
 802aeaa:	3308      	adds	r3, #8
 802aeac:	9303      	str	r3, [sp, #12]
 802aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aeb0:	4433      	add	r3, r6
 802aeb2:	9309      	str	r3, [sp, #36]	; 0x24
 802aeb4:	e767      	b.n	802ad86 <_svfiprintf_r+0x4e>
 802aeb6:	fb0c 3202 	mla	r2, ip, r2, r3
 802aeba:	460c      	mov	r4, r1
 802aebc:	2001      	movs	r0, #1
 802aebe:	e7a5      	b.n	802ae0c <_svfiprintf_r+0xd4>
 802aec0:	2300      	movs	r3, #0
 802aec2:	3401      	adds	r4, #1
 802aec4:	9305      	str	r3, [sp, #20]
 802aec6:	4619      	mov	r1, r3
 802aec8:	f04f 0c0a 	mov.w	ip, #10
 802aecc:	4620      	mov	r0, r4
 802aece:	f810 2b01 	ldrb.w	r2, [r0], #1
 802aed2:	3a30      	subs	r2, #48	; 0x30
 802aed4:	2a09      	cmp	r2, #9
 802aed6:	d903      	bls.n	802aee0 <_svfiprintf_r+0x1a8>
 802aed8:	2b00      	cmp	r3, #0
 802aeda:	d0c5      	beq.n	802ae68 <_svfiprintf_r+0x130>
 802aedc:	9105      	str	r1, [sp, #20]
 802aede:	e7c3      	b.n	802ae68 <_svfiprintf_r+0x130>
 802aee0:	fb0c 2101 	mla	r1, ip, r1, r2
 802aee4:	4604      	mov	r4, r0
 802aee6:	2301      	movs	r3, #1
 802aee8:	e7f0      	b.n	802aecc <_svfiprintf_r+0x194>
 802aeea:	ab03      	add	r3, sp, #12
 802aeec:	9300      	str	r3, [sp, #0]
 802aeee:	462a      	mov	r2, r5
 802aef0:	4b0f      	ldr	r3, [pc, #60]	; (802af30 <_svfiprintf_r+0x1f8>)
 802aef2:	a904      	add	r1, sp, #16
 802aef4:	4638      	mov	r0, r7
 802aef6:	f7fc fd09 	bl	802790c <_printf_float>
 802aefa:	1c42      	adds	r2, r0, #1
 802aefc:	4606      	mov	r6, r0
 802aefe:	d1d6      	bne.n	802aeae <_svfiprintf_r+0x176>
 802af00:	89ab      	ldrh	r3, [r5, #12]
 802af02:	065b      	lsls	r3, r3, #25
 802af04:	f53f af2c 	bmi.w	802ad60 <_svfiprintf_r+0x28>
 802af08:	9809      	ldr	r0, [sp, #36]	; 0x24
 802af0a:	b01d      	add	sp, #116	; 0x74
 802af0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af10:	ab03      	add	r3, sp, #12
 802af12:	9300      	str	r3, [sp, #0]
 802af14:	462a      	mov	r2, r5
 802af16:	4b06      	ldr	r3, [pc, #24]	; (802af30 <_svfiprintf_r+0x1f8>)
 802af18:	a904      	add	r1, sp, #16
 802af1a:	4638      	mov	r0, r7
 802af1c:	f7fc ff9a 	bl	8027e54 <_printf_i>
 802af20:	e7eb      	b.n	802aefa <_svfiprintf_r+0x1c2>
 802af22:	bf00      	nop
 802af24:	0802bfdc 	.word	0x0802bfdc
 802af28:	0802bfe6 	.word	0x0802bfe6
 802af2c:	0802790d 	.word	0x0802790d
 802af30:	0802ac81 	.word	0x0802ac81
 802af34:	0802bfe2 	.word	0x0802bfe2

0802af38 <nan>:
 802af38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802af40 <nan+0x8>
 802af3c:	4770      	bx	lr
 802af3e:	bf00      	nop
 802af40:	00000000 	.word	0x00000000
 802af44:	7ff80000 	.word	0x7ff80000

0802af48 <_sbrk_r>:
 802af48:	b538      	push	{r3, r4, r5, lr}
 802af4a:	4d06      	ldr	r5, [pc, #24]	; (802af64 <_sbrk_r+0x1c>)
 802af4c:	2300      	movs	r3, #0
 802af4e:	4604      	mov	r4, r0
 802af50:	4608      	mov	r0, r1
 802af52:	602b      	str	r3, [r5, #0]
 802af54:	f7f8 fcdc 	bl	8023910 <_sbrk>
 802af58:	1c43      	adds	r3, r0, #1
 802af5a:	d102      	bne.n	802af62 <_sbrk_r+0x1a>
 802af5c:	682b      	ldr	r3, [r5, #0]
 802af5e:	b103      	cbz	r3, 802af62 <_sbrk_r+0x1a>
 802af60:	6023      	str	r3, [r4, #0]
 802af62:	bd38      	pop	{r3, r4, r5, pc}
 802af64:	2000197c 	.word	0x2000197c

0802af68 <__ascii_wctomb>:
 802af68:	b149      	cbz	r1, 802af7e <__ascii_wctomb+0x16>
 802af6a:	2aff      	cmp	r2, #255	; 0xff
 802af6c:	bf85      	ittet	hi
 802af6e:	238a      	movhi	r3, #138	; 0x8a
 802af70:	6003      	strhi	r3, [r0, #0]
 802af72:	700a      	strbls	r2, [r1, #0]
 802af74:	f04f 30ff 	movhi.w	r0, #4294967295
 802af78:	bf98      	it	ls
 802af7a:	2001      	movls	r0, #1
 802af7c:	4770      	bx	lr
 802af7e:	4608      	mov	r0, r1
 802af80:	4770      	bx	lr
	...

0802af84 <__assert_func>:
 802af84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802af86:	4614      	mov	r4, r2
 802af88:	461a      	mov	r2, r3
 802af8a:	4b09      	ldr	r3, [pc, #36]	; (802afb0 <__assert_func+0x2c>)
 802af8c:	681b      	ldr	r3, [r3, #0]
 802af8e:	4605      	mov	r5, r0
 802af90:	68d8      	ldr	r0, [r3, #12]
 802af92:	b14c      	cbz	r4, 802afa8 <__assert_func+0x24>
 802af94:	4b07      	ldr	r3, [pc, #28]	; (802afb4 <__assert_func+0x30>)
 802af96:	9100      	str	r1, [sp, #0]
 802af98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802af9c:	4906      	ldr	r1, [pc, #24]	; (802afb8 <__assert_func+0x34>)
 802af9e:	462b      	mov	r3, r5
 802afa0:	f000 f80e 	bl	802afc0 <fiprintf>
 802afa4:	f000 fa84 	bl	802b4b0 <abort>
 802afa8:	4b04      	ldr	r3, [pc, #16]	; (802afbc <__assert_func+0x38>)
 802afaa:	461c      	mov	r4, r3
 802afac:	e7f3      	b.n	802af96 <__assert_func+0x12>
 802afae:	bf00      	nop
 802afb0:	20000470 	.word	0x20000470
 802afb4:	0802bfed 	.word	0x0802bfed
 802afb8:	0802bffa 	.word	0x0802bffa
 802afbc:	0802c028 	.word	0x0802c028

0802afc0 <fiprintf>:
 802afc0:	b40e      	push	{r1, r2, r3}
 802afc2:	b503      	push	{r0, r1, lr}
 802afc4:	4601      	mov	r1, r0
 802afc6:	ab03      	add	r3, sp, #12
 802afc8:	4805      	ldr	r0, [pc, #20]	; (802afe0 <fiprintf+0x20>)
 802afca:	f853 2b04 	ldr.w	r2, [r3], #4
 802afce:	6800      	ldr	r0, [r0, #0]
 802afd0:	9301      	str	r3, [sp, #4]
 802afd2:	f000 f87d 	bl	802b0d0 <_vfiprintf_r>
 802afd6:	b002      	add	sp, #8
 802afd8:	f85d eb04 	ldr.w	lr, [sp], #4
 802afdc:	b003      	add	sp, #12
 802afde:	4770      	bx	lr
 802afe0:	20000470 	.word	0x20000470

0802afe4 <memmove>:
 802afe4:	4288      	cmp	r0, r1
 802afe6:	b510      	push	{r4, lr}
 802afe8:	eb01 0402 	add.w	r4, r1, r2
 802afec:	d902      	bls.n	802aff4 <memmove+0x10>
 802afee:	4284      	cmp	r4, r0
 802aff0:	4623      	mov	r3, r4
 802aff2:	d807      	bhi.n	802b004 <memmove+0x20>
 802aff4:	1e43      	subs	r3, r0, #1
 802aff6:	42a1      	cmp	r1, r4
 802aff8:	d008      	beq.n	802b00c <memmove+0x28>
 802affa:	f811 2b01 	ldrb.w	r2, [r1], #1
 802affe:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b002:	e7f8      	b.n	802aff6 <memmove+0x12>
 802b004:	4402      	add	r2, r0
 802b006:	4601      	mov	r1, r0
 802b008:	428a      	cmp	r2, r1
 802b00a:	d100      	bne.n	802b00e <memmove+0x2a>
 802b00c:	bd10      	pop	{r4, pc}
 802b00e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b016:	e7f7      	b.n	802b008 <memmove+0x24>

0802b018 <__malloc_lock>:
 802b018:	4801      	ldr	r0, [pc, #4]	; (802b020 <__malloc_lock+0x8>)
 802b01a:	f000 bc09 	b.w	802b830 <__retarget_lock_acquire_recursive>
 802b01e:	bf00      	nop
 802b020:	20001984 	.word	0x20001984

0802b024 <__malloc_unlock>:
 802b024:	4801      	ldr	r0, [pc, #4]	; (802b02c <__malloc_unlock+0x8>)
 802b026:	f000 bc04 	b.w	802b832 <__retarget_lock_release_recursive>
 802b02a:	bf00      	nop
 802b02c:	20001984 	.word	0x20001984

0802b030 <_realloc_r>:
 802b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b032:	4607      	mov	r7, r0
 802b034:	4614      	mov	r4, r2
 802b036:	460e      	mov	r6, r1
 802b038:	b921      	cbnz	r1, 802b044 <_realloc_r+0x14>
 802b03a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b03e:	4611      	mov	r1, r2
 802b040:	f7ff bdc4 	b.w	802abcc <_malloc_r>
 802b044:	b922      	cbnz	r2, 802b050 <_realloc_r+0x20>
 802b046:	f7ff fd71 	bl	802ab2c <_free_r>
 802b04a:	4625      	mov	r5, r4
 802b04c:	4628      	mov	r0, r5
 802b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b050:	f000 fc54 	bl	802b8fc <_malloc_usable_size_r>
 802b054:	42a0      	cmp	r0, r4
 802b056:	d20f      	bcs.n	802b078 <_realloc_r+0x48>
 802b058:	4621      	mov	r1, r4
 802b05a:	4638      	mov	r0, r7
 802b05c:	f7ff fdb6 	bl	802abcc <_malloc_r>
 802b060:	4605      	mov	r5, r0
 802b062:	2800      	cmp	r0, #0
 802b064:	d0f2      	beq.n	802b04c <_realloc_r+0x1c>
 802b066:	4631      	mov	r1, r6
 802b068:	4622      	mov	r2, r4
 802b06a:	f7ff f887 	bl	802a17c <memcpy>
 802b06e:	4631      	mov	r1, r6
 802b070:	4638      	mov	r0, r7
 802b072:	f7ff fd5b 	bl	802ab2c <_free_r>
 802b076:	e7e9      	b.n	802b04c <_realloc_r+0x1c>
 802b078:	4635      	mov	r5, r6
 802b07a:	e7e7      	b.n	802b04c <_realloc_r+0x1c>

0802b07c <__sfputc_r>:
 802b07c:	6893      	ldr	r3, [r2, #8]
 802b07e:	3b01      	subs	r3, #1
 802b080:	2b00      	cmp	r3, #0
 802b082:	b410      	push	{r4}
 802b084:	6093      	str	r3, [r2, #8]
 802b086:	da08      	bge.n	802b09a <__sfputc_r+0x1e>
 802b088:	6994      	ldr	r4, [r2, #24]
 802b08a:	42a3      	cmp	r3, r4
 802b08c:	db01      	blt.n	802b092 <__sfputc_r+0x16>
 802b08e:	290a      	cmp	r1, #10
 802b090:	d103      	bne.n	802b09a <__sfputc_r+0x1e>
 802b092:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b096:	f000 b94b 	b.w	802b330 <__swbuf_r>
 802b09a:	6813      	ldr	r3, [r2, #0]
 802b09c:	1c58      	adds	r0, r3, #1
 802b09e:	6010      	str	r0, [r2, #0]
 802b0a0:	7019      	strb	r1, [r3, #0]
 802b0a2:	4608      	mov	r0, r1
 802b0a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b0a8:	4770      	bx	lr

0802b0aa <__sfputs_r>:
 802b0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b0ac:	4606      	mov	r6, r0
 802b0ae:	460f      	mov	r7, r1
 802b0b0:	4614      	mov	r4, r2
 802b0b2:	18d5      	adds	r5, r2, r3
 802b0b4:	42ac      	cmp	r4, r5
 802b0b6:	d101      	bne.n	802b0bc <__sfputs_r+0x12>
 802b0b8:	2000      	movs	r0, #0
 802b0ba:	e007      	b.n	802b0cc <__sfputs_r+0x22>
 802b0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b0c0:	463a      	mov	r2, r7
 802b0c2:	4630      	mov	r0, r6
 802b0c4:	f7ff ffda 	bl	802b07c <__sfputc_r>
 802b0c8:	1c43      	adds	r3, r0, #1
 802b0ca:	d1f3      	bne.n	802b0b4 <__sfputs_r+0xa>
 802b0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b0d0 <_vfiprintf_r>:
 802b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0d4:	460d      	mov	r5, r1
 802b0d6:	b09d      	sub	sp, #116	; 0x74
 802b0d8:	4614      	mov	r4, r2
 802b0da:	4698      	mov	r8, r3
 802b0dc:	4606      	mov	r6, r0
 802b0de:	b118      	cbz	r0, 802b0e8 <_vfiprintf_r+0x18>
 802b0e0:	6983      	ldr	r3, [r0, #24]
 802b0e2:	b90b      	cbnz	r3, 802b0e8 <_vfiprintf_r+0x18>
 802b0e4:	f000 fb06 	bl	802b6f4 <__sinit>
 802b0e8:	4b89      	ldr	r3, [pc, #548]	; (802b310 <_vfiprintf_r+0x240>)
 802b0ea:	429d      	cmp	r5, r3
 802b0ec:	d11b      	bne.n	802b126 <_vfiprintf_r+0x56>
 802b0ee:	6875      	ldr	r5, [r6, #4]
 802b0f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b0f2:	07d9      	lsls	r1, r3, #31
 802b0f4:	d405      	bmi.n	802b102 <_vfiprintf_r+0x32>
 802b0f6:	89ab      	ldrh	r3, [r5, #12]
 802b0f8:	059a      	lsls	r2, r3, #22
 802b0fa:	d402      	bmi.n	802b102 <_vfiprintf_r+0x32>
 802b0fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b0fe:	f000 fb97 	bl	802b830 <__retarget_lock_acquire_recursive>
 802b102:	89ab      	ldrh	r3, [r5, #12]
 802b104:	071b      	lsls	r3, r3, #28
 802b106:	d501      	bpl.n	802b10c <_vfiprintf_r+0x3c>
 802b108:	692b      	ldr	r3, [r5, #16]
 802b10a:	b9eb      	cbnz	r3, 802b148 <_vfiprintf_r+0x78>
 802b10c:	4629      	mov	r1, r5
 802b10e:	4630      	mov	r0, r6
 802b110:	f000 f960 	bl	802b3d4 <__swsetup_r>
 802b114:	b1c0      	cbz	r0, 802b148 <_vfiprintf_r+0x78>
 802b116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b118:	07dc      	lsls	r4, r3, #31
 802b11a:	d50e      	bpl.n	802b13a <_vfiprintf_r+0x6a>
 802b11c:	f04f 30ff 	mov.w	r0, #4294967295
 802b120:	b01d      	add	sp, #116	; 0x74
 802b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b126:	4b7b      	ldr	r3, [pc, #492]	; (802b314 <_vfiprintf_r+0x244>)
 802b128:	429d      	cmp	r5, r3
 802b12a:	d101      	bne.n	802b130 <_vfiprintf_r+0x60>
 802b12c:	68b5      	ldr	r5, [r6, #8]
 802b12e:	e7df      	b.n	802b0f0 <_vfiprintf_r+0x20>
 802b130:	4b79      	ldr	r3, [pc, #484]	; (802b318 <_vfiprintf_r+0x248>)
 802b132:	429d      	cmp	r5, r3
 802b134:	bf08      	it	eq
 802b136:	68f5      	ldreq	r5, [r6, #12]
 802b138:	e7da      	b.n	802b0f0 <_vfiprintf_r+0x20>
 802b13a:	89ab      	ldrh	r3, [r5, #12]
 802b13c:	0598      	lsls	r0, r3, #22
 802b13e:	d4ed      	bmi.n	802b11c <_vfiprintf_r+0x4c>
 802b140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b142:	f000 fb76 	bl	802b832 <__retarget_lock_release_recursive>
 802b146:	e7e9      	b.n	802b11c <_vfiprintf_r+0x4c>
 802b148:	2300      	movs	r3, #0
 802b14a:	9309      	str	r3, [sp, #36]	; 0x24
 802b14c:	2320      	movs	r3, #32
 802b14e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b152:	f8cd 800c 	str.w	r8, [sp, #12]
 802b156:	2330      	movs	r3, #48	; 0x30
 802b158:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b31c <_vfiprintf_r+0x24c>
 802b15c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b160:	f04f 0901 	mov.w	r9, #1
 802b164:	4623      	mov	r3, r4
 802b166:	469a      	mov	sl, r3
 802b168:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b16c:	b10a      	cbz	r2, 802b172 <_vfiprintf_r+0xa2>
 802b16e:	2a25      	cmp	r2, #37	; 0x25
 802b170:	d1f9      	bne.n	802b166 <_vfiprintf_r+0x96>
 802b172:	ebba 0b04 	subs.w	fp, sl, r4
 802b176:	d00b      	beq.n	802b190 <_vfiprintf_r+0xc0>
 802b178:	465b      	mov	r3, fp
 802b17a:	4622      	mov	r2, r4
 802b17c:	4629      	mov	r1, r5
 802b17e:	4630      	mov	r0, r6
 802b180:	f7ff ff93 	bl	802b0aa <__sfputs_r>
 802b184:	3001      	adds	r0, #1
 802b186:	f000 80aa 	beq.w	802b2de <_vfiprintf_r+0x20e>
 802b18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b18c:	445a      	add	r2, fp
 802b18e:	9209      	str	r2, [sp, #36]	; 0x24
 802b190:	f89a 3000 	ldrb.w	r3, [sl]
 802b194:	2b00      	cmp	r3, #0
 802b196:	f000 80a2 	beq.w	802b2de <_vfiprintf_r+0x20e>
 802b19a:	2300      	movs	r3, #0
 802b19c:	f04f 32ff 	mov.w	r2, #4294967295
 802b1a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b1a4:	f10a 0a01 	add.w	sl, sl, #1
 802b1a8:	9304      	str	r3, [sp, #16]
 802b1aa:	9307      	str	r3, [sp, #28]
 802b1ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b1b0:	931a      	str	r3, [sp, #104]	; 0x68
 802b1b2:	4654      	mov	r4, sl
 802b1b4:	2205      	movs	r2, #5
 802b1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b1ba:	4858      	ldr	r0, [pc, #352]	; (802b31c <_vfiprintf_r+0x24c>)
 802b1bc:	f7f5 f810 	bl	80201e0 <memchr>
 802b1c0:	9a04      	ldr	r2, [sp, #16]
 802b1c2:	b9d8      	cbnz	r0, 802b1fc <_vfiprintf_r+0x12c>
 802b1c4:	06d1      	lsls	r1, r2, #27
 802b1c6:	bf44      	itt	mi
 802b1c8:	2320      	movmi	r3, #32
 802b1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1ce:	0713      	lsls	r3, r2, #28
 802b1d0:	bf44      	itt	mi
 802b1d2:	232b      	movmi	r3, #43	; 0x2b
 802b1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1d8:	f89a 3000 	ldrb.w	r3, [sl]
 802b1dc:	2b2a      	cmp	r3, #42	; 0x2a
 802b1de:	d015      	beq.n	802b20c <_vfiprintf_r+0x13c>
 802b1e0:	9a07      	ldr	r2, [sp, #28]
 802b1e2:	4654      	mov	r4, sl
 802b1e4:	2000      	movs	r0, #0
 802b1e6:	f04f 0c0a 	mov.w	ip, #10
 802b1ea:	4621      	mov	r1, r4
 802b1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b1f0:	3b30      	subs	r3, #48	; 0x30
 802b1f2:	2b09      	cmp	r3, #9
 802b1f4:	d94e      	bls.n	802b294 <_vfiprintf_r+0x1c4>
 802b1f6:	b1b0      	cbz	r0, 802b226 <_vfiprintf_r+0x156>
 802b1f8:	9207      	str	r2, [sp, #28]
 802b1fa:	e014      	b.n	802b226 <_vfiprintf_r+0x156>
 802b1fc:	eba0 0308 	sub.w	r3, r0, r8
 802b200:	fa09 f303 	lsl.w	r3, r9, r3
 802b204:	4313      	orrs	r3, r2
 802b206:	9304      	str	r3, [sp, #16]
 802b208:	46a2      	mov	sl, r4
 802b20a:	e7d2      	b.n	802b1b2 <_vfiprintf_r+0xe2>
 802b20c:	9b03      	ldr	r3, [sp, #12]
 802b20e:	1d19      	adds	r1, r3, #4
 802b210:	681b      	ldr	r3, [r3, #0]
 802b212:	9103      	str	r1, [sp, #12]
 802b214:	2b00      	cmp	r3, #0
 802b216:	bfbb      	ittet	lt
 802b218:	425b      	neglt	r3, r3
 802b21a:	f042 0202 	orrlt.w	r2, r2, #2
 802b21e:	9307      	strge	r3, [sp, #28]
 802b220:	9307      	strlt	r3, [sp, #28]
 802b222:	bfb8      	it	lt
 802b224:	9204      	strlt	r2, [sp, #16]
 802b226:	7823      	ldrb	r3, [r4, #0]
 802b228:	2b2e      	cmp	r3, #46	; 0x2e
 802b22a:	d10c      	bne.n	802b246 <_vfiprintf_r+0x176>
 802b22c:	7863      	ldrb	r3, [r4, #1]
 802b22e:	2b2a      	cmp	r3, #42	; 0x2a
 802b230:	d135      	bne.n	802b29e <_vfiprintf_r+0x1ce>
 802b232:	9b03      	ldr	r3, [sp, #12]
 802b234:	1d1a      	adds	r2, r3, #4
 802b236:	681b      	ldr	r3, [r3, #0]
 802b238:	9203      	str	r2, [sp, #12]
 802b23a:	2b00      	cmp	r3, #0
 802b23c:	bfb8      	it	lt
 802b23e:	f04f 33ff 	movlt.w	r3, #4294967295
 802b242:	3402      	adds	r4, #2
 802b244:	9305      	str	r3, [sp, #20]
 802b246:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b32c <_vfiprintf_r+0x25c>
 802b24a:	7821      	ldrb	r1, [r4, #0]
 802b24c:	2203      	movs	r2, #3
 802b24e:	4650      	mov	r0, sl
 802b250:	f7f4 ffc6 	bl	80201e0 <memchr>
 802b254:	b140      	cbz	r0, 802b268 <_vfiprintf_r+0x198>
 802b256:	2340      	movs	r3, #64	; 0x40
 802b258:	eba0 000a 	sub.w	r0, r0, sl
 802b25c:	fa03 f000 	lsl.w	r0, r3, r0
 802b260:	9b04      	ldr	r3, [sp, #16]
 802b262:	4303      	orrs	r3, r0
 802b264:	3401      	adds	r4, #1
 802b266:	9304      	str	r3, [sp, #16]
 802b268:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b26c:	482c      	ldr	r0, [pc, #176]	; (802b320 <_vfiprintf_r+0x250>)
 802b26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b272:	2206      	movs	r2, #6
 802b274:	f7f4 ffb4 	bl	80201e0 <memchr>
 802b278:	2800      	cmp	r0, #0
 802b27a:	d03f      	beq.n	802b2fc <_vfiprintf_r+0x22c>
 802b27c:	4b29      	ldr	r3, [pc, #164]	; (802b324 <_vfiprintf_r+0x254>)
 802b27e:	bb1b      	cbnz	r3, 802b2c8 <_vfiprintf_r+0x1f8>
 802b280:	9b03      	ldr	r3, [sp, #12]
 802b282:	3307      	adds	r3, #7
 802b284:	f023 0307 	bic.w	r3, r3, #7
 802b288:	3308      	adds	r3, #8
 802b28a:	9303      	str	r3, [sp, #12]
 802b28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b28e:	443b      	add	r3, r7
 802b290:	9309      	str	r3, [sp, #36]	; 0x24
 802b292:	e767      	b.n	802b164 <_vfiprintf_r+0x94>
 802b294:	fb0c 3202 	mla	r2, ip, r2, r3
 802b298:	460c      	mov	r4, r1
 802b29a:	2001      	movs	r0, #1
 802b29c:	e7a5      	b.n	802b1ea <_vfiprintf_r+0x11a>
 802b29e:	2300      	movs	r3, #0
 802b2a0:	3401      	adds	r4, #1
 802b2a2:	9305      	str	r3, [sp, #20]
 802b2a4:	4619      	mov	r1, r3
 802b2a6:	f04f 0c0a 	mov.w	ip, #10
 802b2aa:	4620      	mov	r0, r4
 802b2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b2b0:	3a30      	subs	r2, #48	; 0x30
 802b2b2:	2a09      	cmp	r2, #9
 802b2b4:	d903      	bls.n	802b2be <_vfiprintf_r+0x1ee>
 802b2b6:	2b00      	cmp	r3, #0
 802b2b8:	d0c5      	beq.n	802b246 <_vfiprintf_r+0x176>
 802b2ba:	9105      	str	r1, [sp, #20]
 802b2bc:	e7c3      	b.n	802b246 <_vfiprintf_r+0x176>
 802b2be:	fb0c 2101 	mla	r1, ip, r1, r2
 802b2c2:	4604      	mov	r4, r0
 802b2c4:	2301      	movs	r3, #1
 802b2c6:	e7f0      	b.n	802b2aa <_vfiprintf_r+0x1da>
 802b2c8:	ab03      	add	r3, sp, #12
 802b2ca:	9300      	str	r3, [sp, #0]
 802b2cc:	462a      	mov	r2, r5
 802b2ce:	4b16      	ldr	r3, [pc, #88]	; (802b328 <_vfiprintf_r+0x258>)
 802b2d0:	a904      	add	r1, sp, #16
 802b2d2:	4630      	mov	r0, r6
 802b2d4:	f7fc fb1a 	bl	802790c <_printf_float>
 802b2d8:	4607      	mov	r7, r0
 802b2da:	1c78      	adds	r0, r7, #1
 802b2dc:	d1d6      	bne.n	802b28c <_vfiprintf_r+0x1bc>
 802b2de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b2e0:	07d9      	lsls	r1, r3, #31
 802b2e2:	d405      	bmi.n	802b2f0 <_vfiprintf_r+0x220>
 802b2e4:	89ab      	ldrh	r3, [r5, #12]
 802b2e6:	059a      	lsls	r2, r3, #22
 802b2e8:	d402      	bmi.n	802b2f0 <_vfiprintf_r+0x220>
 802b2ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b2ec:	f000 faa1 	bl	802b832 <__retarget_lock_release_recursive>
 802b2f0:	89ab      	ldrh	r3, [r5, #12]
 802b2f2:	065b      	lsls	r3, r3, #25
 802b2f4:	f53f af12 	bmi.w	802b11c <_vfiprintf_r+0x4c>
 802b2f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b2fa:	e711      	b.n	802b120 <_vfiprintf_r+0x50>
 802b2fc:	ab03      	add	r3, sp, #12
 802b2fe:	9300      	str	r3, [sp, #0]
 802b300:	462a      	mov	r2, r5
 802b302:	4b09      	ldr	r3, [pc, #36]	; (802b328 <_vfiprintf_r+0x258>)
 802b304:	a904      	add	r1, sp, #16
 802b306:	4630      	mov	r0, r6
 802b308:	f7fc fda4 	bl	8027e54 <_printf_i>
 802b30c:	e7e4      	b.n	802b2d8 <_vfiprintf_r+0x208>
 802b30e:	bf00      	nop
 802b310:	0802c14c 	.word	0x0802c14c
 802b314:	0802c16c 	.word	0x0802c16c
 802b318:	0802c12c 	.word	0x0802c12c
 802b31c:	0802bfdc 	.word	0x0802bfdc
 802b320:	0802bfe6 	.word	0x0802bfe6
 802b324:	0802790d 	.word	0x0802790d
 802b328:	0802b0ab 	.word	0x0802b0ab
 802b32c:	0802bfe2 	.word	0x0802bfe2

0802b330 <__swbuf_r>:
 802b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b332:	460e      	mov	r6, r1
 802b334:	4614      	mov	r4, r2
 802b336:	4605      	mov	r5, r0
 802b338:	b118      	cbz	r0, 802b342 <__swbuf_r+0x12>
 802b33a:	6983      	ldr	r3, [r0, #24]
 802b33c:	b90b      	cbnz	r3, 802b342 <__swbuf_r+0x12>
 802b33e:	f000 f9d9 	bl	802b6f4 <__sinit>
 802b342:	4b21      	ldr	r3, [pc, #132]	; (802b3c8 <__swbuf_r+0x98>)
 802b344:	429c      	cmp	r4, r3
 802b346:	d12b      	bne.n	802b3a0 <__swbuf_r+0x70>
 802b348:	686c      	ldr	r4, [r5, #4]
 802b34a:	69a3      	ldr	r3, [r4, #24]
 802b34c:	60a3      	str	r3, [r4, #8]
 802b34e:	89a3      	ldrh	r3, [r4, #12]
 802b350:	071a      	lsls	r2, r3, #28
 802b352:	d52f      	bpl.n	802b3b4 <__swbuf_r+0x84>
 802b354:	6923      	ldr	r3, [r4, #16]
 802b356:	b36b      	cbz	r3, 802b3b4 <__swbuf_r+0x84>
 802b358:	6923      	ldr	r3, [r4, #16]
 802b35a:	6820      	ldr	r0, [r4, #0]
 802b35c:	1ac0      	subs	r0, r0, r3
 802b35e:	6963      	ldr	r3, [r4, #20]
 802b360:	b2f6      	uxtb	r6, r6
 802b362:	4283      	cmp	r3, r0
 802b364:	4637      	mov	r7, r6
 802b366:	dc04      	bgt.n	802b372 <__swbuf_r+0x42>
 802b368:	4621      	mov	r1, r4
 802b36a:	4628      	mov	r0, r5
 802b36c:	f000 f92e 	bl	802b5cc <_fflush_r>
 802b370:	bb30      	cbnz	r0, 802b3c0 <__swbuf_r+0x90>
 802b372:	68a3      	ldr	r3, [r4, #8]
 802b374:	3b01      	subs	r3, #1
 802b376:	60a3      	str	r3, [r4, #8]
 802b378:	6823      	ldr	r3, [r4, #0]
 802b37a:	1c5a      	adds	r2, r3, #1
 802b37c:	6022      	str	r2, [r4, #0]
 802b37e:	701e      	strb	r6, [r3, #0]
 802b380:	6963      	ldr	r3, [r4, #20]
 802b382:	3001      	adds	r0, #1
 802b384:	4283      	cmp	r3, r0
 802b386:	d004      	beq.n	802b392 <__swbuf_r+0x62>
 802b388:	89a3      	ldrh	r3, [r4, #12]
 802b38a:	07db      	lsls	r3, r3, #31
 802b38c:	d506      	bpl.n	802b39c <__swbuf_r+0x6c>
 802b38e:	2e0a      	cmp	r6, #10
 802b390:	d104      	bne.n	802b39c <__swbuf_r+0x6c>
 802b392:	4621      	mov	r1, r4
 802b394:	4628      	mov	r0, r5
 802b396:	f000 f919 	bl	802b5cc <_fflush_r>
 802b39a:	b988      	cbnz	r0, 802b3c0 <__swbuf_r+0x90>
 802b39c:	4638      	mov	r0, r7
 802b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b3a0:	4b0a      	ldr	r3, [pc, #40]	; (802b3cc <__swbuf_r+0x9c>)
 802b3a2:	429c      	cmp	r4, r3
 802b3a4:	d101      	bne.n	802b3aa <__swbuf_r+0x7a>
 802b3a6:	68ac      	ldr	r4, [r5, #8]
 802b3a8:	e7cf      	b.n	802b34a <__swbuf_r+0x1a>
 802b3aa:	4b09      	ldr	r3, [pc, #36]	; (802b3d0 <__swbuf_r+0xa0>)
 802b3ac:	429c      	cmp	r4, r3
 802b3ae:	bf08      	it	eq
 802b3b0:	68ec      	ldreq	r4, [r5, #12]
 802b3b2:	e7ca      	b.n	802b34a <__swbuf_r+0x1a>
 802b3b4:	4621      	mov	r1, r4
 802b3b6:	4628      	mov	r0, r5
 802b3b8:	f000 f80c 	bl	802b3d4 <__swsetup_r>
 802b3bc:	2800      	cmp	r0, #0
 802b3be:	d0cb      	beq.n	802b358 <__swbuf_r+0x28>
 802b3c0:	f04f 37ff 	mov.w	r7, #4294967295
 802b3c4:	e7ea      	b.n	802b39c <__swbuf_r+0x6c>
 802b3c6:	bf00      	nop
 802b3c8:	0802c14c 	.word	0x0802c14c
 802b3cc:	0802c16c 	.word	0x0802c16c
 802b3d0:	0802c12c 	.word	0x0802c12c

0802b3d4 <__swsetup_r>:
 802b3d4:	4b32      	ldr	r3, [pc, #200]	; (802b4a0 <__swsetup_r+0xcc>)
 802b3d6:	b570      	push	{r4, r5, r6, lr}
 802b3d8:	681d      	ldr	r5, [r3, #0]
 802b3da:	4606      	mov	r6, r0
 802b3dc:	460c      	mov	r4, r1
 802b3de:	b125      	cbz	r5, 802b3ea <__swsetup_r+0x16>
 802b3e0:	69ab      	ldr	r3, [r5, #24]
 802b3e2:	b913      	cbnz	r3, 802b3ea <__swsetup_r+0x16>
 802b3e4:	4628      	mov	r0, r5
 802b3e6:	f000 f985 	bl	802b6f4 <__sinit>
 802b3ea:	4b2e      	ldr	r3, [pc, #184]	; (802b4a4 <__swsetup_r+0xd0>)
 802b3ec:	429c      	cmp	r4, r3
 802b3ee:	d10f      	bne.n	802b410 <__swsetup_r+0x3c>
 802b3f0:	686c      	ldr	r4, [r5, #4]
 802b3f2:	89a3      	ldrh	r3, [r4, #12]
 802b3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b3f8:	0719      	lsls	r1, r3, #28
 802b3fa:	d42c      	bmi.n	802b456 <__swsetup_r+0x82>
 802b3fc:	06dd      	lsls	r5, r3, #27
 802b3fe:	d411      	bmi.n	802b424 <__swsetup_r+0x50>
 802b400:	2309      	movs	r3, #9
 802b402:	6033      	str	r3, [r6, #0]
 802b404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b408:	81a3      	strh	r3, [r4, #12]
 802b40a:	f04f 30ff 	mov.w	r0, #4294967295
 802b40e:	e03e      	b.n	802b48e <__swsetup_r+0xba>
 802b410:	4b25      	ldr	r3, [pc, #148]	; (802b4a8 <__swsetup_r+0xd4>)
 802b412:	429c      	cmp	r4, r3
 802b414:	d101      	bne.n	802b41a <__swsetup_r+0x46>
 802b416:	68ac      	ldr	r4, [r5, #8]
 802b418:	e7eb      	b.n	802b3f2 <__swsetup_r+0x1e>
 802b41a:	4b24      	ldr	r3, [pc, #144]	; (802b4ac <__swsetup_r+0xd8>)
 802b41c:	429c      	cmp	r4, r3
 802b41e:	bf08      	it	eq
 802b420:	68ec      	ldreq	r4, [r5, #12]
 802b422:	e7e6      	b.n	802b3f2 <__swsetup_r+0x1e>
 802b424:	0758      	lsls	r0, r3, #29
 802b426:	d512      	bpl.n	802b44e <__swsetup_r+0x7a>
 802b428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b42a:	b141      	cbz	r1, 802b43e <__swsetup_r+0x6a>
 802b42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b430:	4299      	cmp	r1, r3
 802b432:	d002      	beq.n	802b43a <__swsetup_r+0x66>
 802b434:	4630      	mov	r0, r6
 802b436:	f7ff fb79 	bl	802ab2c <_free_r>
 802b43a:	2300      	movs	r3, #0
 802b43c:	6363      	str	r3, [r4, #52]	; 0x34
 802b43e:	89a3      	ldrh	r3, [r4, #12]
 802b440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b444:	81a3      	strh	r3, [r4, #12]
 802b446:	2300      	movs	r3, #0
 802b448:	6063      	str	r3, [r4, #4]
 802b44a:	6923      	ldr	r3, [r4, #16]
 802b44c:	6023      	str	r3, [r4, #0]
 802b44e:	89a3      	ldrh	r3, [r4, #12]
 802b450:	f043 0308 	orr.w	r3, r3, #8
 802b454:	81a3      	strh	r3, [r4, #12]
 802b456:	6923      	ldr	r3, [r4, #16]
 802b458:	b94b      	cbnz	r3, 802b46e <__swsetup_r+0x9a>
 802b45a:	89a3      	ldrh	r3, [r4, #12]
 802b45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b464:	d003      	beq.n	802b46e <__swsetup_r+0x9a>
 802b466:	4621      	mov	r1, r4
 802b468:	4630      	mov	r0, r6
 802b46a:	f000 fa07 	bl	802b87c <__smakebuf_r>
 802b46e:	89a0      	ldrh	r0, [r4, #12]
 802b470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b474:	f010 0301 	ands.w	r3, r0, #1
 802b478:	d00a      	beq.n	802b490 <__swsetup_r+0xbc>
 802b47a:	2300      	movs	r3, #0
 802b47c:	60a3      	str	r3, [r4, #8]
 802b47e:	6963      	ldr	r3, [r4, #20]
 802b480:	425b      	negs	r3, r3
 802b482:	61a3      	str	r3, [r4, #24]
 802b484:	6923      	ldr	r3, [r4, #16]
 802b486:	b943      	cbnz	r3, 802b49a <__swsetup_r+0xc6>
 802b488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b48c:	d1ba      	bne.n	802b404 <__swsetup_r+0x30>
 802b48e:	bd70      	pop	{r4, r5, r6, pc}
 802b490:	0781      	lsls	r1, r0, #30
 802b492:	bf58      	it	pl
 802b494:	6963      	ldrpl	r3, [r4, #20]
 802b496:	60a3      	str	r3, [r4, #8]
 802b498:	e7f4      	b.n	802b484 <__swsetup_r+0xb0>
 802b49a:	2000      	movs	r0, #0
 802b49c:	e7f7      	b.n	802b48e <__swsetup_r+0xba>
 802b49e:	bf00      	nop
 802b4a0:	20000470 	.word	0x20000470
 802b4a4:	0802c14c 	.word	0x0802c14c
 802b4a8:	0802c16c 	.word	0x0802c16c
 802b4ac:	0802c12c 	.word	0x0802c12c

0802b4b0 <abort>:
 802b4b0:	b508      	push	{r3, lr}
 802b4b2:	2006      	movs	r0, #6
 802b4b4:	f000 fa52 	bl	802b95c <raise>
 802b4b8:	2001      	movs	r0, #1
 802b4ba:	f7f8 f9b2 	bl	8023822 <_exit>
	...

0802b4c0 <__sflush_r>:
 802b4c0:	898a      	ldrh	r2, [r1, #12]
 802b4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4c6:	4605      	mov	r5, r0
 802b4c8:	0710      	lsls	r0, r2, #28
 802b4ca:	460c      	mov	r4, r1
 802b4cc:	d458      	bmi.n	802b580 <__sflush_r+0xc0>
 802b4ce:	684b      	ldr	r3, [r1, #4]
 802b4d0:	2b00      	cmp	r3, #0
 802b4d2:	dc05      	bgt.n	802b4e0 <__sflush_r+0x20>
 802b4d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b4d6:	2b00      	cmp	r3, #0
 802b4d8:	dc02      	bgt.n	802b4e0 <__sflush_r+0x20>
 802b4da:	2000      	movs	r0, #0
 802b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b4e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b4e2:	2e00      	cmp	r6, #0
 802b4e4:	d0f9      	beq.n	802b4da <__sflush_r+0x1a>
 802b4e6:	2300      	movs	r3, #0
 802b4e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b4ec:	682f      	ldr	r7, [r5, #0]
 802b4ee:	602b      	str	r3, [r5, #0]
 802b4f0:	d032      	beq.n	802b558 <__sflush_r+0x98>
 802b4f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b4f4:	89a3      	ldrh	r3, [r4, #12]
 802b4f6:	075a      	lsls	r2, r3, #29
 802b4f8:	d505      	bpl.n	802b506 <__sflush_r+0x46>
 802b4fa:	6863      	ldr	r3, [r4, #4]
 802b4fc:	1ac0      	subs	r0, r0, r3
 802b4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b500:	b10b      	cbz	r3, 802b506 <__sflush_r+0x46>
 802b502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b504:	1ac0      	subs	r0, r0, r3
 802b506:	2300      	movs	r3, #0
 802b508:	4602      	mov	r2, r0
 802b50a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b50c:	6a21      	ldr	r1, [r4, #32]
 802b50e:	4628      	mov	r0, r5
 802b510:	47b0      	blx	r6
 802b512:	1c43      	adds	r3, r0, #1
 802b514:	89a3      	ldrh	r3, [r4, #12]
 802b516:	d106      	bne.n	802b526 <__sflush_r+0x66>
 802b518:	6829      	ldr	r1, [r5, #0]
 802b51a:	291d      	cmp	r1, #29
 802b51c:	d82c      	bhi.n	802b578 <__sflush_r+0xb8>
 802b51e:	4a2a      	ldr	r2, [pc, #168]	; (802b5c8 <__sflush_r+0x108>)
 802b520:	40ca      	lsrs	r2, r1
 802b522:	07d6      	lsls	r6, r2, #31
 802b524:	d528      	bpl.n	802b578 <__sflush_r+0xb8>
 802b526:	2200      	movs	r2, #0
 802b528:	6062      	str	r2, [r4, #4]
 802b52a:	04d9      	lsls	r1, r3, #19
 802b52c:	6922      	ldr	r2, [r4, #16]
 802b52e:	6022      	str	r2, [r4, #0]
 802b530:	d504      	bpl.n	802b53c <__sflush_r+0x7c>
 802b532:	1c42      	adds	r2, r0, #1
 802b534:	d101      	bne.n	802b53a <__sflush_r+0x7a>
 802b536:	682b      	ldr	r3, [r5, #0]
 802b538:	b903      	cbnz	r3, 802b53c <__sflush_r+0x7c>
 802b53a:	6560      	str	r0, [r4, #84]	; 0x54
 802b53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b53e:	602f      	str	r7, [r5, #0]
 802b540:	2900      	cmp	r1, #0
 802b542:	d0ca      	beq.n	802b4da <__sflush_r+0x1a>
 802b544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b548:	4299      	cmp	r1, r3
 802b54a:	d002      	beq.n	802b552 <__sflush_r+0x92>
 802b54c:	4628      	mov	r0, r5
 802b54e:	f7ff faed 	bl	802ab2c <_free_r>
 802b552:	2000      	movs	r0, #0
 802b554:	6360      	str	r0, [r4, #52]	; 0x34
 802b556:	e7c1      	b.n	802b4dc <__sflush_r+0x1c>
 802b558:	6a21      	ldr	r1, [r4, #32]
 802b55a:	2301      	movs	r3, #1
 802b55c:	4628      	mov	r0, r5
 802b55e:	47b0      	blx	r6
 802b560:	1c41      	adds	r1, r0, #1
 802b562:	d1c7      	bne.n	802b4f4 <__sflush_r+0x34>
 802b564:	682b      	ldr	r3, [r5, #0]
 802b566:	2b00      	cmp	r3, #0
 802b568:	d0c4      	beq.n	802b4f4 <__sflush_r+0x34>
 802b56a:	2b1d      	cmp	r3, #29
 802b56c:	d001      	beq.n	802b572 <__sflush_r+0xb2>
 802b56e:	2b16      	cmp	r3, #22
 802b570:	d101      	bne.n	802b576 <__sflush_r+0xb6>
 802b572:	602f      	str	r7, [r5, #0]
 802b574:	e7b1      	b.n	802b4da <__sflush_r+0x1a>
 802b576:	89a3      	ldrh	r3, [r4, #12]
 802b578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b57c:	81a3      	strh	r3, [r4, #12]
 802b57e:	e7ad      	b.n	802b4dc <__sflush_r+0x1c>
 802b580:	690f      	ldr	r7, [r1, #16]
 802b582:	2f00      	cmp	r7, #0
 802b584:	d0a9      	beq.n	802b4da <__sflush_r+0x1a>
 802b586:	0793      	lsls	r3, r2, #30
 802b588:	680e      	ldr	r6, [r1, #0]
 802b58a:	bf08      	it	eq
 802b58c:	694b      	ldreq	r3, [r1, #20]
 802b58e:	600f      	str	r7, [r1, #0]
 802b590:	bf18      	it	ne
 802b592:	2300      	movne	r3, #0
 802b594:	eba6 0807 	sub.w	r8, r6, r7
 802b598:	608b      	str	r3, [r1, #8]
 802b59a:	f1b8 0f00 	cmp.w	r8, #0
 802b59e:	dd9c      	ble.n	802b4da <__sflush_r+0x1a>
 802b5a0:	6a21      	ldr	r1, [r4, #32]
 802b5a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b5a4:	4643      	mov	r3, r8
 802b5a6:	463a      	mov	r2, r7
 802b5a8:	4628      	mov	r0, r5
 802b5aa:	47b0      	blx	r6
 802b5ac:	2800      	cmp	r0, #0
 802b5ae:	dc06      	bgt.n	802b5be <__sflush_r+0xfe>
 802b5b0:	89a3      	ldrh	r3, [r4, #12]
 802b5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b5b6:	81a3      	strh	r3, [r4, #12]
 802b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 802b5bc:	e78e      	b.n	802b4dc <__sflush_r+0x1c>
 802b5be:	4407      	add	r7, r0
 802b5c0:	eba8 0800 	sub.w	r8, r8, r0
 802b5c4:	e7e9      	b.n	802b59a <__sflush_r+0xda>
 802b5c6:	bf00      	nop
 802b5c8:	20400001 	.word	0x20400001

0802b5cc <_fflush_r>:
 802b5cc:	b538      	push	{r3, r4, r5, lr}
 802b5ce:	690b      	ldr	r3, [r1, #16]
 802b5d0:	4605      	mov	r5, r0
 802b5d2:	460c      	mov	r4, r1
 802b5d4:	b913      	cbnz	r3, 802b5dc <_fflush_r+0x10>
 802b5d6:	2500      	movs	r5, #0
 802b5d8:	4628      	mov	r0, r5
 802b5da:	bd38      	pop	{r3, r4, r5, pc}
 802b5dc:	b118      	cbz	r0, 802b5e6 <_fflush_r+0x1a>
 802b5de:	6983      	ldr	r3, [r0, #24]
 802b5e0:	b90b      	cbnz	r3, 802b5e6 <_fflush_r+0x1a>
 802b5e2:	f000 f887 	bl	802b6f4 <__sinit>
 802b5e6:	4b14      	ldr	r3, [pc, #80]	; (802b638 <_fflush_r+0x6c>)
 802b5e8:	429c      	cmp	r4, r3
 802b5ea:	d11b      	bne.n	802b624 <_fflush_r+0x58>
 802b5ec:	686c      	ldr	r4, [r5, #4]
 802b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b5f2:	2b00      	cmp	r3, #0
 802b5f4:	d0ef      	beq.n	802b5d6 <_fflush_r+0xa>
 802b5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b5f8:	07d0      	lsls	r0, r2, #31
 802b5fa:	d404      	bmi.n	802b606 <_fflush_r+0x3a>
 802b5fc:	0599      	lsls	r1, r3, #22
 802b5fe:	d402      	bmi.n	802b606 <_fflush_r+0x3a>
 802b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b602:	f000 f915 	bl	802b830 <__retarget_lock_acquire_recursive>
 802b606:	4628      	mov	r0, r5
 802b608:	4621      	mov	r1, r4
 802b60a:	f7ff ff59 	bl	802b4c0 <__sflush_r>
 802b60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b610:	07da      	lsls	r2, r3, #31
 802b612:	4605      	mov	r5, r0
 802b614:	d4e0      	bmi.n	802b5d8 <_fflush_r+0xc>
 802b616:	89a3      	ldrh	r3, [r4, #12]
 802b618:	059b      	lsls	r3, r3, #22
 802b61a:	d4dd      	bmi.n	802b5d8 <_fflush_r+0xc>
 802b61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b61e:	f000 f908 	bl	802b832 <__retarget_lock_release_recursive>
 802b622:	e7d9      	b.n	802b5d8 <_fflush_r+0xc>
 802b624:	4b05      	ldr	r3, [pc, #20]	; (802b63c <_fflush_r+0x70>)
 802b626:	429c      	cmp	r4, r3
 802b628:	d101      	bne.n	802b62e <_fflush_r+0x62>
 802b62a:	68ac      	ldr	r4, [r5, #8]
 802b62c:	e7df      	b.n	802b5ee <_fflush_r+0x22>
 802b62e:	4b04      	ldr	r3, [pc, #16]	; (802b640 <_fflush_r+0x74>)
 802b630:	429c      	cmp	r4, r3
 802b632:	bf08      	it	eq
 802b634:	68ec      	ldreq	r4, [r5, #12]
 802b636:	e7da      	b.n	802b5ee <_fflush_r+0x22>
 802b638:	0802c14c 	.word	0x0802c14c
 802b63c:	0802c16c 	.word	0x0802c16c
 802b640:	0802c12c 	.word	0x0802c12c

0802b644 <std>:
 802b644:	2300      	movs	r3, #0
 802b646:	b510      	push	{r4, lr}
 802b648:	4604      	mov	r4, r0
 802b64a:	e9c0 3300 	strd	r3, r3, [r0]
 802b64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b652:	6083      	str	r3, [r0, #8]
 802b654:	8181      	strh	r1, [r0, #12]
 802b656:	6643      	str	r3, [r0, #100]	; 0x64
 802b658:	81c2      	strh	r2, [r0, #14]
 802b65a:	6183      	str	r3, [r0, #24]
 802b65c:	4619      	mov	r1, r3
 802b65e:	2208      	movs	r2, #8
 802b660:	305c      	adds	r0, #92	; 0x5c
 802b662:	f7fc f8ab 	bl	80277bc <memset>
 802b666:	4b05      	ldr	r3, [pc, #20]	; (802b67c <std+0x38>)
 802b668:	6263      	str	r3, [r4, #36]	; 0x24
 802b66a:	4b05      	ldr	r3, [pc, #20]	; (802b680 <std+0x3c>)
 802b66c:	62a3      	str	r3, [r4, #40]	; 0x28
 802b66e:	4b05      	ldr	r3, [pc, #20]	; (802b684 <std+0x40>)
 802b670:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b672:	4b05      	ldr	r3, [pc, #20]	; (802b688 <std+0x44>)
 802b674:	6224      	str	r4, [r4, #32]
 802b676:	6323      	str	r3, [r4, #48]	; 0x30
 802b678:	bd10      	pop	{r4, pc}
 802b67a:	bf00      	nop
 802b67c:	0802b995 	.word	0x0802b995
 802b680:	0802b9b7 	.word	0x0802b9b7
 802b684:	0802b9ef 	.word	0x0802b9ef
 802b688:	0802ba13 	.word	0x0802ba13

0802b68c <_cleanup_r>:
 802b68c:	4901      	ldr	r1, [pc, #4]	; (802b694 <_cleanup_r+0x8>)
 802b68e:	f000 b8af 	b.w	802b7f0 <_fwalk_reent>
 802b692:	bf00      	nop
 802b694:	0802b5cd 	.word	0x0802b5cd

0802b698 <__sfmoreglue>:
 802b698:	b570      	push	{r4, r5, r6, lr}
 802b69a:	1e4a      	subs	r2, r1, #1
 802b69c:	2568      	movs	r5, #104	; 0x68
 802b69e:	4355      	muls	r5, r2
 802b6a0:	460e      	mov	r6, r1
 802b6a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b6a6:	f7ff fa91 	bl	802abcc <_malloc_r>
 802b6aa:	4604      	mov	r4, r0
 802b6ac:	b140      	cbz	r0, 802b6c0 <__sfmoreglue+0x28>
 802b6ae:	2100      	movs	r1, #0
 802b6b0:	e9c0 1600 	strd	r1, r6, [r0]
 802b6b4:	300c      	adds	r0, #12
 802b6b6:	60a0      	str	r0, [r4, #8]
 802b6b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b6bc:	f7fc f87e 	bl	80277bc <memset>
 802b6c0:	4620      	mov	r0, r4
 802b6c2:	bd70      	pop	{r4, r5, r6, pc}

0802b6c4 <__sfp_lock_acquire>:
 802b6c4:	4801      	ldr	r0, [pc, #4]	; (802b6cc <__sfp_lock_acquire+0x8>)
 802b6c6:	f000 b8b3 	b.w	802b830 <__retarget_lock_acquire_recursive>
 802b6ca:	bf00      	nop
 802b6cc:	20001988 	.word	0x20001988

0802b6d0 <__sfp_lock_release>:
 802b6d0:	4801      	ldr	r0, [pc, #4]	; (802b6d8 <__sfp_lock_release+0x8>)
 802b6d2:	f000 b8ae 	b.w	802b832 <__retarget_lock_release_recursive>
 802b6d6:	bf00      	nop
 802b6d8:	20001988 	.word	0x20001988

0802b6dc <__sinit_lock_acquire>:
 802b6dc:	4801      	ldr	r0, [pc, #4]	; (802b6e4 <__sinit_lock_acquire+0x8>)
 802b6de:	f000 b8a7 	b.w	802b830 <__retarget_lock_acquire_recursive>
 802b6e2:	bf00      	nop
 802b6e4:	20001983 	.word	0x20001983

0802b6e8 <__sinit_lock_release>:
 802b6e8:	4801      	ldr	r0, [pc, #4]	; (802b6f0 <__sinit_lock_release+0x8>)
 802b6ea:	f000 b8a2 	b.w	802b832 <__retarget_lock_release_recursive>
 802b6ee:	bf00      	nop
 802b6f0:	20001983 	.word	0x20001983

0802b6f4 <__sinit>:
 802b6f4:	b510      	push	{r4, lr}
 802b6f6:	4604      	mov	r4, r0
 802b6f8:	f7ff fff0 	bl	802b6dc <__sinit_lock_acquire>
 802b6fc:	69a3      	ldr	r3, [r4, #24]
 802b6fe:	b11b      	cbz	r3, 802b708 <__sinit+0x14>
 802b700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b704:	f7ff bff0 	b.w	802b6e8 <__sinit_lock_release>
 802b708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802b70c:	6523      	str	r3, [r4, #80]	; 0x50
 802b70e:	4b13      	ldr	r3, [pc, #76]	; (802b75c <__sinit+0x68>)
 802b710:	4a13      	ldr	r2, [pc, #76]	; (802b760 <__sinit+0x6c>)
 802b712:	681b      	ldr	r3, [r3, #0]
 802b714:	62a2      	str	r2, [r4, #40]	; 0x28
 802b716:	42a3      	cmp	r3, r4
 802b718:	bf04      	itt	eq
 802b71a:	2301      	moveq	r3, #1
 802b71c:	61a3      	streq	r3, [r4, #24]
 802b71e:	4620      	mov	r0, r4
 802b720:	f000 f820 	bl	802b764 <__sfp>
 802b724:	6060      	str	r0, [r4, #4]
 802b726:	4620      	mov	r0, r4
 802b728:	f000 f81c 	bl	802b764 <__sfp>
 802b72c:	60a0      	str	r0, [r4, #8]
 802b72e:	4620      	mov	r0, r4
 802b730:	f000 f818 	bl	802b764 <__sfp>
 802b734:	2200      	movs	r2, #0
 802b736:	60e0      	str	r0, [r4, #12]
 802b738:	2104      	movs	r1, #4
 802b73a:	6860      	ldr	r0, [r4, #4]
 802b73c:	f7ff ff82 	bl	802b644 <std>
 802b740:	68a0      	ldr	r0, [r4, #8]
 802b742:	2201      	movs	r2, #1
 802b744:	2109      	movs	r1, #9
 802b746:	f7ff ff7d 	bl	802b644 <std>
 802b74a:	68e0      	ldr	r0, [r4, #12]
 802b74c:	2202      	movs	r2, #2
 802b74e:	2112      	movs	r1, #18
 802b750:	f7ff ff78 	bl	802b644 <std>
 802b754:	2301      	movs	r3, #1
 802b756:	61a3      	str	r3, [r4, #24]
 802b758:	e7d2      	b.n	802b700 <__sinit+0xc>
 802b75a:	bf00      	nop
 802b75c:	0802bce0 	.word	0x0802bce0
 802b760:	0802b68d 	.word	0x0802b68d

0802b764 <__sfp>:
 802b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b766:	4607      	mov	r7, r0
 802b768:	f7ff ffac 	bl	802b6c4 <__sfp_lock_acquire>
 802b76c:	4b1e      	ldr	r3, [pc, #120]	; (802b7e8 <__sfp+0x84>)
 802b76e:	681e      	ldr	r6, [r3, #0]
 802b770:	69b3      	ldr	r3, [r6, #24]
 802b772:	b913      	cbnz	r3, 802b77a <__sfp+0x16>
 802b774:	4630      	mov	r0, r6
 802b776:	f7ff ffbd 	bl	802b6f4 <__sinit>
 802b77a:	3648      	adds	r6, #72	; 0x48
 802b77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b780:	3b01      	subs	r3, #1
 802b782:	d503      	bpl.n	802b78c <__sfp+0x28>
 802b784:	6833      	ldr	r3, [r6, #0]
 802b786:	b30b      	cbz	r3, 802b7cc <__sfp+0x68>
 802b788:	6836      	ldr	r6, [r6, #0]
 802b78a:	e7f7      	b.n	802b77c <__sfp+0x18>
 802b78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b790:	b9d5      	cbnz	r5, 802b7c8 <__sfp+0x64>
 802b792:	4b16      	ldr	r3, [pc, #88]	; (802b7ec <__sfp+0x88>)
 802b794:	60e3      	str	r3, [r4, #12]
 802b796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b79a:	6665      	str	r5, [r4, #100]	; 0x64
 802b79c:	f000 f847 	bl	802b82e <__retarget_lock_init_recursive>
 802b7a0:	f7ff ff96 	bl	802b6d0 <__sfp_lock_release>
 802b7a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802b7a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b7ac:	6025      	str	r5, [r4, #0]
 802b7ae:	61a5      	str	r5, [r4, #24]
 802b7b0:	2208      	movs	r2, #8
 802b7b2:	4629      	mov	r1, r5
 802b7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b7b8:	f7fc f800 	bl	80277bc <memset>
 802b7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b7c4:	4620      	mov	r0, r4
 802b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b7c8:	3468      	adds	r4, #104	; 0x68
 802b7ca:	e7d9      	b.n	802b780 <__sfp+0x1c>
 802b7cc:	2104      	movs	r1, #4
 802b7ce:	4638      	mov	r0, r7
 802b7d0:	f7ff ff62 	bl	802b698 <__sfmoreglue>
 802b7d4:	4604      	mov	r4, r0
 802b7d6:	6030      	str	r0, [r6, #0]
 802b7d8:	2800      	cmp	r0, #0
 802b7da:	d1d5      	bne.n	802b788 <__sfp+0x24>
 802b7dc:	f7ff ff78 	bl	802b6d0 <__sfp_lock_release>
 802b7e0:	230c      	movs	r3, #12
 802b7e2:	603b      	str	r3, [r7, #0]
 802b7e4:	e7ee      	b.n	802b7c4 <__sfp+0x60>
 802b7e6:	bf00      	nop
 802b7e8:	0802bce0 	.word	0x0802bce0
 802b7ec:	ffff0001 	.word	0xffff0001

0802b7f0 <_fwalk_reent>:
 802b7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b7f4:	4606      	mov	r6, r0
 802b7f6:	4688      	mov	r8, r1
 802b7f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b7fc:	2700      	movs	r7, #0
 802b7fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b802:	f1b9 0901 	subs.w	r9, r9, #1
 802b806:	d505      	bpl.n	802b814 <_fwalk_reent+0x24>
 802b808:	6824      	ldr	r4, [r4, #0]
 802b80a:	2c00      	cmp	r4, #0
 802b80c:	d1f7      	bne.n	802b7fe <_fwalk_reent+0xe>
 802b80e:	4638      	mov	r0, r7
 802b810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b814:	89ab      	ldrh	r3, [r5, #12]
 802b816:	2b01      	cmp	r3, #1
 802b818:	d907      	bls.n	802b82a <_fwalk_reent+0x3a>
 802b81a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b81e:	3301      	adds	r3, #1
 802b820:	d003      	beq.n	802b82a <_fwalk_reent+0x3a>
 802b822:	4629      	mov	r1, r5
 802b824:	4630      	mov	r0, r6
 802b826:	47c0      	blx	r8
 802b828:	4307      	orrs	r7, r0
 802b82a:	3568      	adds	r5, #104	; 0x68
 802b82c:	e7e9      	b.n	802b802 <_fwalk_reent+0x12>

0802b82e <__retarget_lock_init_recursive>:
 802b82e:	4770      	bx	lr

0802b830 <__retarget_lock_acquire_recursive>:
 802b830:	4770      	bx	lr

0802b832 <__retarget_lock_release_recursive>:
 802b832:	4770      	bx	lr

0802b834 <__swhatbuf_r>:
 802b834:	b570      	push	{r4, r5, r6, lr}
 802b836:	460e      	mov	r6, r1
 802b838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b83c:	2900      	cmp	r1, #0
 802b83e:	b096      	sub	sp, #88	; 0x58
 802b840:	4614      	mov	r4, r2
 802b842:	461d      	mov	r5, r3
 802b844:	da07      	bge.n	802b856 <__swhatbuf_r+0x22>
 802b846:	2300      	movs	r3, #0
 802b848:	602b      	str	r3, [r5, #0]
 802b84a:	89b3      	ldrh	r3, [r6, #12]
 802b84c:	061a      	lsls	r2, r3, #24
 802b84e:	d410      	bmi.n	802b872 <__swhatbuf_r+0x3e>
 802b850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b854:	e00e      	b.n	802b874 <__swhatbuf_r+0x40>
 802b856:	466a      	mov	r2, sp
 802b858:	f000 f902 	bl	802ba60 <_fstat_r>
 802b85c:	2800      	cmp	r0, #0
 802b85e:	dbf2      	blt.n	802b846 <__swhatbuf_r+0x12>
 802b860:	9a01      	ldr	r2, [sp, #4]
 802b862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b866:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b86a:	425a      	negs	r2, r3
 802b86c:	415a      	adcs	r2, r3
 802b86e:	602a      	str	r2, [r5, #0]
 802b870:	e7ee      	b.n	802b850 <__swhatbuf_r+0x1c>
 802b872:	2340      	movs	r3, #64	; 0x40
 802b874:	2000      	movs	r0, #0
 802b876:	6023      	str	r3, [r4, #0]
 802b878:	b016      	add	sp, #88	; 0x58
 802b87a:	bd70      	pop	{r4, r5, r6, pc}

0802b87c <__smakebuf_r>:
 802b87c:	898b      	ldrh	r3, [r1, #12]
 802b87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b880:	079d      	lsls	r5, r3, #30
 802b882:	4606      	mov	r6, r0
 802b884:	460c      	mov	r4, r1
 802b886:	d507      	bpl.n	802b898 <__smakebuf_r+0x1c>
 802b888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b88c:	6023      	str	r3, [r4, #0]
 802b88e:	6123      	str	r3, [r4, #16]
 802b890:	2301      	movs	r3, #1
 802b892:	6163      	str	r3, [r4, #20]
 802b894:	b002      	add	sp, #8
 802b896:	bd70      	pop	{r4, r5, r6, pc}
 802b898:	ab01      	add	r3, sp, #4
 802b89a:	466a      	mov	r2, sp
 802b89c:	f7ff ffca 	bl	802b834 <__swhatbuf_r>
 802b8a0:	9900      	ldr	r1, [sp, #0]
 802b8a2:	4605      	mov	r5, r0
 802b8a4:	4630      	mov	r0, r6
 802b8a6:	f7ff f991 	bl	802abcc <_malloc_r>
 802b8aa:	b948      	cbnz	r0, 802b8c0 <__smakebuf_r+0x44>
 802b8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b8b0:	059a      	lsls	r2, r3, #22
 802b8b2:	d4ef      	bmi.n	802b894 <__smakebuf_r+0x18>
 802b8b4:	f023 0303 	bic.w	r3, r3, #3
 802b8b8:	f043 0302 	orr.w	r3, r3, #2
 802b8bc:	81a3      	strh	r3, [r4, #12]
 802b8be:	e7e3      	b.n	802b888 <__smakebuf_r+0xc>
 802b8c0:	4b0d      	ldr	r3, [pc, #52]	; (802b8f8 <__smakebuf_r+0x7c>)
 802b8c2:	62b3      	str	r3, [r6, #40]	; 0x28
 802b8c4:	89a3      	ldrh	r3, [r4, #12]
 802b8c6:	6020      	str	r0, [r4, #0]
 802b8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b8cc:	81a3      	strh	r3, [r4, #12]
 802b8ce:	9b00      	ldr	r3, [sp, #0]
 802b8d0:	6163      	str	r3, [r4, #20]
 802b8d2:	9b01      	ldr	r3, [sp, #4]
 802b8d4:	6120      	str	r0, [r4, #16]
 802b8d6:	b15b      	cbz	r3, 802b8f0 <__smakebuf_r+0x74>
 802b8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b8dc:	4630      	mov	r0, r6
 802b8de:	f000 f8d1 	bl	802ba84 <_isatty_r>
 802b8e2:	b128      	cbz	r0, 802b8f0 <__smakebuf_r+0x74>
 802b8e4:	89a3      	ldrh	r3, [r4, #12]
 802b8e6:	f023 0303 	bic.w	r3, r3, #3
 802b8ea:	f043 0301 	orr.w	r3, r3, #1
 802b8ee:	81a3      	strh	r3, [r4, #12]
 802b8f0:	89a0      	ldrh	r0, [r4, #12]
 802b8f2:	4305      	orrs	r5, r0
 802b8f4:	81a5      	strh	r5, [r4, #12]
 802b8f6:	e7cd      	b.n	802b894 <__smakebuf_r+0x18>
 802b8f8:	0802b68d 	.word	0x0802b68d

0802b8fc <_malloc_usable_size_r>:
 802b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b900:	1f18      	subs	r0, r3, #4
 802b902:	2b00      	cmp	r3, #0
 802b904:	bfbc      	itt	lt
 802b906:	580b      	ldrlt	r3, [r1, r0]
 802b908:	18c0      	addlt	r0, r0, r3
 802b90a:	4770      	bx	lr

0802b90c <_raise_r>:
 802b90c:	291f      	cmp	r1, #31
 802b90e:	b538      	push	{r3, r4, r5, lr}
 802b910:	4604      	mov	r4, r0
 802b912:	460d      	mov	r5, r1
 802b914:	d904      	bls.n	802b920 <_raise_r+0x14>
 802b916:	2316      	movs	r3, #22
 802b918:	6003      	str	r3, [r0, #0]
 802b91a:	f04f 30ff 	mov.w	r0, #4294967295
 802b91e:	bd38      	pop	{r3, r4, r5, pc}
 802b920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b922:	b112      	cbz	r2, 802b92a <_raise_r+0x1e>
 802b924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b928:	b94b      	cbnz	r3, 802b93e <_raise_r+0x32>
 802b92a:	4620      	mov	r0, r4
 802b92c:	f000 f830 	bl	802b990 <_getpid_r>
 802b930:	462a      	mov	r2, r5
 802b932:	4601      	mov	r1, r0
 802b934:	4620      	mov	r0, r4
 802b936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b93a:	f000 b817 	b.w	802b96c <_kill_r>
 802b93e:	2b01      	cmp	r3, #1
 802b940:	d00a      	beq.n	802b958 <_raise_r+0x4c>
 802b942:	1c59      	adds	r1, r3, #1
 802b944:	d103      	bne.n	802b94e <_raise_r+0x42>
 802b946:	2316      	movs	r3, #22
 802b948:	6003      	str	r3, [r0, #0]
 802b94a:	2001      	movs	r0, #1
 802b94c:	e7e7      	b.n	802b91e <_raise_r+0x12>
 802b94e:	2400      	movs	r4, #0
 802b950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b954:	4628      	mov	r0, r5
 802b956:	4798      	blx	r3
 802b958:	2000      	movs	r0, #0
 802b95a:	e7e0      	b.n	802b91e <_raise_r+0x12>

0802b95c <raise>:
 802b95c:	4b02      	ldr	r3, [pc, #8]	; (802b968 <raise+0xc>)
 802b95e:	4601      	mov	r1, r0
 802b960:	6818      	ldr	r0, [r3, #0]
 802b962:	f7ff bfd3 	b.w	802b90c <_raise_r>
 802b966:	bf00      	nop
 802b968:	20000470 	.word	0x20000470

0802b96c <_kill_r>:
 802b96c:	b538      	push	{r3, r4, r5, lr}
 802b96e:	4d07      	ldr	r5, [pc, #28]	; (802b98c <_kill_r+0x20>)
 802b970:	2300      	movs	r3, #0
 802b972:	4604      	mov	r4, r0
 802b974:	4608      	mov	r0, r1
 802b976:	4611      	mov	r1, r2
 802b978:	602b      	str	r3, [r5, #0]
 802b97a:	f7f7 ff42 	bl	8023802 <_kill>
 802b97e:	1c43      	adds	r3, r0, #1
 802b980:	d102      	bne.n	802b988 <_kill_r+0x1c>
 802b982:	682b      	ldr	r3, [r5, #0]
 802b984:	b103      	cbz	r3, 802b988 <_kill_r+0x1c>
 802b986:	6023      	str	r3, [r4, #0]
 802b988:	bd38      	pop	{r3, r4, r5, pc}
 802b98a:	bf00      	nop
 802b98c:	2000197c 	.word	0x2000197c

0802b990 <_getpid_r>:
 802b990:	f7f7 bf2f 	b.w	80237f2 <_getpid>

0802b994 <__sread>:
 802b994:	b510      	push	{r4, lr}
 802b996:	460c      	mov	r4, r1
 802b998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b99c:	f000 f894 	bl	802bac8 <_read_r>
 802b9a0:	2800      	cmp	r0, #0
 802b9a2:	bfab      	itete	ge
 802b9a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b9a6:	89a3      	ldrhlt	r3, [r4, #12]
 802b9a8:	181b      	addge	r3, r3, r0
 802b9aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b9ae:	bfac      	ite	ge
 802b9b0:	6563      	strge	r3, [r4, #84]	; 0x54
 802b9b2:	81a3      	strhlt	r3, [r4, #12]
 802b9b4:	bd10      	pop	{r4, pc}

0802b9b6 <__swrite>:
 802b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b9ba:	461f      	mov	r7, r3
 802b9bc:	898b      	ldrh	r3, [r1, #12]
 802b9be:	05db      	lsls	r3, r3, #23
 802b9c0:	4605      	mov	r5, r0
 802b9c2:	460c      	mov	r4, r1
 802b9c4:	4616      	mov	r6, r2
 802b9c6:	d505      	bpl.n	802b9d4 <__swrite+0x1e>
 802b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b9cc:	2302      	movs	r3, #2
 802b9ce:	2200      	movs	r2, #0
 802b9d0:	f000 f868 	bl	802baa4 <_lseek_r>
 802b9d4:	89a3      	ldrh	r3, [r4, #12]
 802b9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b9da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b9de:	81a3      	strh	r3, [r4, #12]
 802b9e0:	4632      	mov	r2, r6
 802b9e2:	463b      	mov	r3, r7
 802b9e4:	4628      	mov	r0, r5
 802b9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b9ea:	f000 b817 	b.w	802ba1c <_write_r>

0802b9ee <__sseek>:
 802b9ee:	b510      	push	{r4, lr}
 802b9f0:	460c      	mov	r4, r1
 802b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b9f6:	f000 f855 	bl	802baa4 <_lseek_r>
 802b9fa:	1c43      	adds	r3, r0, #1
 802b9fc:	89a3      	ldrh	r3, [r4, #12]
 802b9fe:	bf15      	itete	ne
 802ba00:	6560      	strne	r0, [r4, #84]	; 0x54
 802ba02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ba06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ba0a:	81a3      	strheq	r3, [r4, #12]
 802ba0c:	bf18      	it	ne
 802ba0e:	81a3      	strhne	r3, [r4, #12]
 802ba10:	bd10      	pop	{r4, pc}

0802ba12 <__sclose>:
 802ba12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba16:	f000 b813 	b.w	802ba40 <_close_r>
	...

0802ba1c <_write_r>:
 802ba1c:	b538      	push	{r3, r4, r5, lr}
 802ba1e:	4d07      	ldr	r5, [pc, #28]	; (802ba3c <_write_r+0x20>)
 802ba20:	4604      	mov	r4, r0
 802ba22:	4608      	mov	r0, r1
 802ba24:	4611      	mov	r1, r2
 802ba26:	2200      	movs	r2, #0
 802ba28:	602a      	str	r2, [r5, #0]
 802ba2a:	461a      	mov	r2, r3
 802ba2c:	f7f7 ff20 	bl	8023870 <_write>
 802ba30:	1c43      	adds	r3, r0, #1
 802ba32:	d102      	bne.n	802ba3a <_write_r+0x1e>
 802ba34:	682b      	ldr	r3, [r5, #0]
 802ba36:	b103      	cbz	r3, 802ba3a <_write_r+0x1e>
 802ba38:	6023      	str	r3, [r4, #0]
 802ba3a:	bd38      	pop	{r3, r4, r5, pc}
 802ba3c:	2000197c 	.word	0x2000197c

0802ba40 <_close_r>:
 802ba40:	b538      	push	{r3, r4, r5, lr}
 802ba42:	4d06      	ldr	r5, [pc, #24]	; (802ba5c <_close_r+0x1c>)
 802ba44:	2300      	movs	r3, #0
 802ba46:	4604      	mov	r4, r0
 802ba48:	4608      	mov	r0, r1
 802ba4a:	602b      	str	r3, [r5, #0]
 802ba4c:	f7f7 ff2c 	bl	80238a8 <_close>
 802ba50:	1c43      	adds	r3, r0, #1
 802ba52:	d102      	bne.n	802ba5a <_close_r+0x1a>
 802ba54:	682b      	ldr	r3, [r5, #0]
 802ba56:	b103      	cbz	r3, 802ba5a <_close_r+0x1a>
 802ba58:	6023      	str	r3, [r4, #0]
 802ba5a:	bd38      	pop	{r3, r4, r5, pc}
 802ba5c:	2000197c 	.word	0x2000197c

0802ba60 <_fstat_r>:
 802ba60:	b538      	push	{r3, r4, r5, lr}
 802ba62:	4d07      	ldr	r5, [pc, #28]	; (802ba80 <_fstat_r+0x20>)
 802ba64:	2300      	movs	r3, #0
 802ba66:	4604      	mov	r4, r0
 802ba68:	4608      	mov	r0, r1
 802ba6a:	4611      	mov	r1, r2
 802ba6c:	602b      	str	r3, [r5, #0]
 802ba6e:	f7f7 ff27 	bl	80238c0 <_fstat>
 802ba72:	1c43      	adds	r3, r0, #1
 802ba74:	d102      	bne.n	802ba7c <_fstat_r+0x1c>
 802ba76:	682b      	ldr	r3, [r5, #0]
 802ba78:	b103      	cbz	r3, 802ba7c <_fstat_r+0x1c>
 802ba7a:	6023      	str	r3, [r4, #0]
 802ba7c:	bd38      	pop	{r3, r4, r5, pc}
 802ba7e:	bf00      	nop
 802ba80:	2000197c 	.word	0x2000197c

0802ba84 <_isatty_r>:
 802ba84:	b538      	push	{r3, r4, r5, lr}
 802ba86:	4d06      	ldr	r5, [pc, #24]	; (802baa0 <_isatty_r+0x1c>)
 802ba88:	2300      	movs	r3, #0
 802ba8a:	4604      	mov	r4, r0
 802ba8c:	4608      	mov	r0, r1
 802ba8e:	602b      	str	r3, [r5, #0]
 802ba90:	f7f7 ff26 	bl	80238e0 <_isatty>
 802ba94:	1c43      	adds	r3, r0, #1
 802ba96:	d102      	bne.n	802ba9e <_isatty_r+0x1a>
 802ba98:	682b      	ldr	r3, [r5, #0]
 802ba9a:	b103      	cbz	r3, 802ba9e <_isatty_r+0x1a>
 802ba9c:	6023      	str	r3, [r4, #0]
 802ba9e:	bd38      	pop	{r3, r4, r5, pc}
 802baa0:	2000197c 	.word	0x2000197c

0802baa4 <_lseek_r>:
 802baa4:	b538      	push	{r3, r4, r5, lr}
 802baa6:	4d07      	ldr	r5, [pc, #28]	; (802bac4 <_lseek_r+0x20>)
 802baa8:	4604      	mov	r4, r0
 802baaa:	4608      	mov	r0, r1
 802baac:	4611      	mov	r1, r2
 802baae:	2200      	movs	r2, #0
 802bab0:	602a      	str	r2, [r5, #0]
 802bab2:	461a      	mov	r2, r3
 802bab4:	f7f7 ff1f 	bl	80238f6 <_lseek>
 802bab8:	1c43      	adds	r3, r0, #1
 802baba:	d102      	bne.n	802bac2 <_lseek_r+0x1e>
 802babc:	682b      	ldr	r3, [r5, #0]
 802babe:	b103      	cbz	r3, 802bac2 <_lseek_r+0x1e>
 802bac0:	6023      	str	r3, [r4, #0]
 802bac2:	bd38      	pop	{r3, r4, r5, pc}
 802bac4:	2000197c 	.word	0x2000197c

0802bac8 <_read_r>:
 802bac8:	b538      	push	{r3, r4, r5, lr}
 802baca:	4d07      	ldr	r5, [pc, #28]	; (802bae8 <_read_r+0x20>)
 802bacc:	4604      	mov	r4, r0
 802bace:	4608      	mov	r0, r1
 802bad0:	4611      	mov	r1, r2
 802bad2:	2200      	movs	r2, #0
 802bad4:	602a      	str	r2, [r5, #0]
 802bad6:	461a      	mov	r2, r3
 802bad8:	f7f7 fead 	bl	8023836 <_read>
 802badc:	1c43      	adds	r3, r0, #1
 802bade:	d102      	bne.n	802bae6 <_read_r+0x1e>
 802bae0:	682b      	ldr	r3, [r5, #0]
 802bae2:	b103      	cbz	r3, 802bae6 <_read_r+0x1e>
 802bae4:	6023      	str	r3, [r4, #0]
 802bae6:	bd38      	pop	{r3, r4, r5, pc}
 802bae8:	2000197c 	.word	0x2000197c

0802baec <_init>:
 802baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802baee:	bf00      	nop
 802baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802baf2:	bc08      	pop	{r3}
 802baf4:	469e      	mov	lr, r3
 802baf6:	4770      	bx	lr

0802baf8 <_fini>:
 802baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bafa:	bf00      	nop
 802bafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bafe:	bc08      	pop	{r3}
 802bb00:	469e      	mov	lr, r3
 802bb02:	4770      	bx	lr
