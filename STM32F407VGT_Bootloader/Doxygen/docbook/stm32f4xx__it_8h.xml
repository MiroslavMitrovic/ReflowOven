<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_stm32f4xx__it_8h" xml:lang="en-US">
<title>C:/Users/mmitr/STM32CubeIDE/workspace_1.6.0/STM32F407VGT_Bootloader/Core/Inc/stm32f4xx_it.h File Reference</title>
<indexterm><primary>C:/Users/mmitr/STM32CubeIDE/workspace_1.6.0/STM32F407VGT_Bootloader/Core/Inc/stm32f4xx_it.h</primary></indexterm>
<para>

<para>This file contains the headers of the interrupt handlers. </para>
 
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a6ad7a5e3ee69cb6db6a6b9111ba898bc">NMI_Handler</link> (void)</para>

<para>This function handles Non maskable interrupt. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a2bffc10d5bd4106753b7c30e86903bea">HardFault_Handler</link> (void)</para>

<para>This function handles Hard fault interrupt. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a3150f74512510287a942624aa9b44cc5">MemManage_Handler</link> (void)</para>

<para>This function handles Memory management fault. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a850cefb17a977292ae5eb4cafa9976c3">BusFault_Handler</link> (void)</para>

<para>This function handles Pre-fetch fault, memory access fault. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a1d98923de2ed6b7309b66f9ba2971647">UsageFault_Handler</link> (void)</para>

<para>This function handles Undefined instruction or illegal state. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a3e5ddb3df0d62f2dc357e64a3f04a6ce">SVC_Handler</link> (void)</para>

<para>This function handles System service call via SWI instruction. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1adbdfb05858cc36fc520974df37ec3cb0">DebugMon_Handler</link> (void)</para>

<para>This function handles Debug monitor. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a6303e1f258cbdc1f970ce579cc015623">PendSV_Handler</link> (void)</para>

<para>This function handles Pendable request for system service. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1ab5e09814056d617c521549e542639b7e">SysTick_Handler</link> (void)</para>

<para>This function handles System tick timer. </para>
</listitem>
            <listitem><para>void <link linkend="_stm32f4xx__it_8h_1a75135d7a041e2932e9903e8a345b3fc4">OTG_FS_IRQHandler</link> (void)</para>

<para>This function handles USB On The Go FS global interrupt. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file contains the headers of the interrupt handlers. </para>

<para><caution><title>Attention</title>

<para></para>
</caution>
<formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#169; Copyright (c) 2021 STMicroelectronics. All rights reserved.</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>

<para>This software component is licensed by ST under Ultimate Liberty license SLA0044, the &quot;License&quot;; You may not use this file except in compliance with the License. You may obtain a copy of the License at: www.st.com/SLA0044 </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_stm32f4xx__it_8h_1a850cefb17a977292ae5eb4cafa9976c3"/>    <section>
    <title>BusFault_Handler()</title>
<indexterm><primary>BusFault_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>BusFault_Handler</secondary></indexterm>
<para><computeroutput>void BusFault_Handler (void )</computeroutput></para><para>

<para>This function handles Pre-fetch fault, memory access fault. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1adbdfb05858cc36fc520974df37ec3cb0"/>    <section>
    <title>DebugMon_Handler()</title>
<indexterm><primary>DebugMon_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>DebugMon_Handler</secondary></indexterm>
<para><computeroutput>void DebugMon_Handler (void )</computeroutput></para><para>

<para>This function handles Debug monitor. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a2bffc10d5bd4106753b7c30e86903bea"/>    <section>
    <title>HardFault_Handler()</title>
<indexterm><primary>HardFault_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>HardFault_Handler</secondary></indexterm>
<para><computeroutput>void HardFault_Handler (void )</computeroutput></para><para>

<para>This function handles Hard fault interrupt. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a3150f74512510287a942624aa9b44cc5"/>    <section>
    <title>MemManage_Handler()</title>
<indexterm><primary>MemManage_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>MemManage_Handler</secondary></indexterm>
<para><computeroutput>void MemManage_Handler (void )</computeroutput></para><para>

<para>This function handles Memory management fault. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a6ad7a5e3ee69cb6db6a6b9111ba898bc"/>    <section>
    <title>NMI_Handler()</title>
<indexterm><primary>NMI_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>NMI_Handler</secondary></indexterm>
<para><computeroutput>void NMI_Handler (void )</computeroutput></para><para>

<para>This function handles Non maskable interrupt. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a75135d7a041e2932e9903e8a345b3fc4"/>    <section>
    <title>OTG_FS_IRQHandler()</title>
<indexterm><primary>OTG_FS_IRQHandler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>OTG_FS_IRQHandler</secondary></indexterm>
<para><computeroutput>void OTG_FS_IRQHandler (void )</computeroutput></para><para>

<para>This function handles USB On The Go FS global interrupt. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a6303e1f258cbdc1f970ce579cc015623"/>    <section>
    <title>PendSV_Handler()</title>
<indexterm><primary>PendSV_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>PendSV_Handler</secondary></indexterm>
<para><computeroutput>void PendSV_Handler (void )</computeroutput></para><para>

<para>This function handles Pendable request for system service. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a3e5ddb3df0d62f2dc357e64a3f04a6ce"/>    <section>
    <title>SVC_Handler()</title>
<indexterm><primary>SVC_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>SVC_Handler</secondary></indexterm>
<para><computeroutput>void SVC_Handler (void )</computeroutput></para><para>

<para>This function handles System service call via SWI instruction. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1ab5e09814056d617c521549e542639b7e"/>    <section>
    <title>SysTick_Handler()</title>
<indexterm><primary>SysTick_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>SysTick_Handler</secondary></indexterm>
<para><computeroutput>void SysTick_Handler (void )</computeroutput></para><para>

<para>This function handles System tick timer. </para>
</para>
    </section><anchor xml:id="_stm32f4xx__it_8h_1a1d98923de2ed6b7309b66f9ba2971647"/>    <section>
    <title>UsageFault_Handler()</title>
<indexterm><primary>UsageFault_Handler</primary><secondary>stm32f4xx_it.h</secondary></indexterm>
<indexterm><primary>stm32f4xx_it.h</primary><secondary>UsageFault_Handler</secondary></indexterm>
<para><computeroutput>void UsageFault_Handler (void )</computeroutput></para><para>

<para>This function handles Undefined instruction or illegal state. </para>
</para>
</section>
</section>
</section>
